{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,2CAIyB;AAEzB,6CASqB;AAErB,uDAAuD;AACvD,MAAM,WAAW,GAAG,IAAA,oBAAM,EAAC,IAAA,oBAAM,GAAE,EAAE,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CACvD,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CACzB,CAAC;AAEF,MAAM,yBAAyB,GAAG,IAAA,oBAAM,EAAC;IACvC,QAAQ,EAAE,sBAAc;CACzB,CAAC,CAAC;AAEU,QAAA,YAAY,GAAG,IAAA,oBAAM,EAAC;IACjC,IAAI,EAAE,IAAA,oBAAM,GAAE;IACd,OAAO,EAAE,IAAA,oBAAM,GAAE;CAClB,CAAC,CAAC;AAIU,QAAA,WAAW,GAAG,IAAA,oBAAM,EAAC;IAChC,OAAO,EAAE,IAAA,oBAAM,GAAE;IACjB,MAAM,EAAE,IAAA,oBAAM,GAAE;CACjB,CAAC,CAAC;AAIU,QAAA,kBAAkB,GAAG,IAAA,oBAAM,EAAC;IACvC,EAAE,EAAE,WAAW;IACf,QAAQ,EAAE,IAAA,oBAAM,EAAC;QACf,IAAI,EAAE,IAAA,oBAAM,GAAE;QACd,IAAI,EAAE,IAAA,sBAAQ,EAAC,IAAA,mBAAK,EAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QAClC,MAAM,EAAE,IAAA,sBAAQ,EAAC,oBAAY,CAAC;QAC9B,OAAO,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,GAAE,CAAC;QAC3B,OAAO,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,GAAE,CAAC;QAC3B,WAAW,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,GAAE,CAAC;QAC/B,MAAM,EAAE,IAAA,sBAAQ,EAAC,IAAA,mBAAK,EAAC,mBAAW,CAAC,CAAC;QACpC,QAAQ,EAAE,IAAA,sBAAQ,EAChB,IAAA,mBAAK,EAAC,CAAC,kBAAkB,EAAE,eAAe,EAAE,sBAAsB,CAAC,CAAC,CACrE;QACD,IAAI,EAAE,IAAA,sBAAQ,EAAC,IAAA,mBAAK,EAAC,IAAA,oBAAM,GAAE,CAAC,CAAC;QAC/B,OAAO,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,GAAE,CAAC;QAC3B,UAAU,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,GAAE,CAAC;KAC/B,CAAC;IACF,QAAQ,EAAE,IAAA,oBAAM,EAAC,qBAAa,EAAE,yBAAyB,CAAC;CAC3D,CAAC,CAAC;AAEU,QAAA,iBAAiB,GAAG,IAAA,oBAAM,EAAC;IACtC,WAAW,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,GAAE,CAAC;IAC/B,GAAG,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,GAAE,CAAC;CACxB,CAAC,CAAC;AAIU,QAAA,iBAAiB,GAAG,IAAA,mBAAK,EAAC;IACrC,IAAA,oBAAM,EAAC;QACL,EAAE,EAAE,WAAW;QACf,YAAY,EAAE,0BAAkB;QAChC,MAAM,EAAE,IAAA,sBAAQ,EAAC,yBAAiB,CAAC;KACpC,CAAC;IACF,IAAA,oBAAM,EAAC,EAAE,QAAQ,EAAE,sBAAc,EAAE,MAAM,EAAE,IAAA,sBAAQ,EAAC,yBAAiB,CAAC,EAAE,CAAC;CAC1E,CAAC,CAAC;AAEU,QAAA,2BAA2B,GAAG,IAAA,oBAAM,EAAC;IAChD,aAAa,EAAE,IAAA,oBAAM,EAAC,WAAW,EAAE,0BAAkB,CAAC;IACtD,YAAY,EAAE,IAAA,mBAAK,EAAC,yBAAiB,CAAC;CACvC,CAAC,CAAC;AAIH,2CAAyB","sourcesContent":["import {\n  VersionStruct,\n  VersionRangeStruct,\n  ChecksumStruct,\n} from '@metamask/utils';\nimport type { Infer } from 'superstruct';\nimport {\n  object,\n  array,\n  record,\n  string,\n  union,\n  optional,\n  enums,\n  refine,\n} from 'superstruct';\n\n// For now, validate that each snap is using an NPM id.\nconst NpmIdStruct = refine(string(), 'Npm ID', (value) =>\n  value.startsWith('npm:'),\n);\n\nconst VerifiedSnapVersionStruct = object({\n  checksum: ChecksumStruct,\n});\n\nexport const AuthorStruct = object({\n  name: string(),\n  website: string(),\n});\n\nexport type Author = Infer<typeof AuthorStruct>;\n\nexport const AuditStruct = object({\n  auditor: string(),\n  report: string(),\n});\n\nexport type Audit = Infer<typeof AuditStruct>;\n\nexport const VerifiedSnapStruct = object({\n  id: NpmIdStruct,\n  metadata: object({\n    name: string(),\n    type: optional(enums(['account'])),\n    author: optional(AuthorStruct),\n    website: optional(string()),\n    summary: optional(string()),\n    description: optional(string()),\n    audits: optional(array(AuditStruct)),\n    category: optional(\n      enums(['interoperability', 'notifications', 'transaction insights']),\n    ),\n    tags: optional(array(string())),\n    support: optional(string()),\n    sourceCode: optional(string()),\n  }),\n  versions: record(VersionStruct, VerifiedSnapVersionStruct),\n});\n\nexport const BlockReasonStruct = object({\n  explanation: optional(string()),\n  url: optional(string()),\n});\n\nexport type BlockReason = Infer<typeof BlockReasonStruct>;\n\nexport const BlockedSnapStruct = union([\n  object({\n    id: NpmIdStruct,\n    versionRange: VersionRangeStruct,\n    reason: optional(BlockReasonStruct),\n  }),\n  object({ checksum: ChecksumStruct, reason: optional(BlockReasonStruct) }),\n]);\n\nexport const SnapsRegistryDatabaseStruct = object({\n  verifiedSnaps: record(NpmIdStruct, VerifiedSnapStruct),\n  blockedSnaps: array(BlockedSnapStruct),\n});\n\nexport type SnapsRegistryDatabase = Infer<typeof SnapsRegistryDatabaseStruct>;\n\nexport * from './verify';\n"]}