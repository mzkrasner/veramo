import { bytesToBase64url, hexToBytes } from '@veramo/utils';
import elliptic from 'elliptic';
const { ec: EC } = elliptic;
export var IJWKSupportedKeyTypes;
(function (IJWKSupportedKeyTypes) {
    IJWKSupportedKeyTypes["Secp256r1"] = "Secp256r1";
    IJWKSupportedKeyTypes["Secp256k1"] = "Secp256k1";
    IJWKSupportedKeyTypes["Ed25519"] = "Ed25519";
    IJWKSupportedKeyTypes["X25519"] = "X25519";
})(IJWKSupportedKeyTypes || (IJWKSupportedKeyTypes = {}));
export function getKeyUse(keyType, passedKeyUse) {
    if (passedKeyUse) {
        if (passedKeyUse !== 'sig' && passedKeyUse !== 'enc') {
            throw new Error('illegal_argument: Key use must be sig or enc');
        }
        if (passedKeyUse === 'sig' && keyType === IJWKSupportedKeyTypes.X25519) {
            throw new Error('illegal_argument: X25519 keys cannot be used for signing');
        }
        if (passedKeyUse === 'enc' && keyType === IJWKSupportedKeyTypes.Ed25519) {
            throw new Error('illegal_argument: Ed25519 keys cannot be used for encryption');
        }
        return passedKeyUse;
    }
    switch (keyType) {
        case IJWKSupportedKeyTypes.Secp256k1:
        case IJWKSupportedKeyTypes.Secp256r1:
        case IJWKSupportedKeyTypes.Ed25519:
            return 'sig';
        case IJWKSupportedKeyTypes.X25519:
            return 'enc';
        default:
            throw new Error('illegal_argument: Unknown key type');
    }
}
export function createJWK(keyType, pubKey, passedKeyUse) {
    const keyUse = getKeyUse(keyType, passedKeyUse);
    switch (keyType) {
        case IJWKSupportedKeyTypes.Secp256k1: {
            const ctx = new EC('secp256k1');
            const pubPoint = ctx.keyFromPublic(pubKey, 'hex').getPublic();
            const x = pubPoint.getX();
            const y = pubPoint.getY();
            return {
                alg: 'ES256K',
                crv: 'secp256k1',
                kty: 'EC',
                ...(keyUse && { use: keyUse }),
                x: bytesToBase64url(hexToBytes(x.toString('hex'))),
                y: bytesToBase64url(hexToBytes(y.toString('hex'))),
            };
        }
        case IJWKSupportedKeyTypes.Secp256r1: {
            const ctx = new EC('p256');
            const pubPoint = ctx.keyFromPublic(pubKey, 'hex').getPublic();
            const x = pubPoint.getX();
            const y = pubPoint.getY();
            return {
                alg: 'ES256',
                crv: 'P-256',
                kty: 'EC',
                ...(keyUse && { use: keyUse }),
                x: bytesToBase64url(hexToBytes(x.toString('hex'))),
                y: bytesToBase64url(hexToBytes(y.toString('hex'))),
            };
        }
        case IJWKSupportedKeyTypes.Ed25519:
            return {
                alg: 'EdDSA',
                crv: 'Ed25519',
                kty: 'OKP',
                ...(keyUse && { use: keyUse }),
                x: bytesToBase64url(typeof pubKey === 'string' ? hexToBytes(pubKey) : pubKey),
            };
        case IJWKSupportedKeyTypes.X25519:
            return {
                alg: 'ECDH-ES',
                crv: 'X25519',
                kty: 'OKP',
                ...(keyUse && { use: keyUse }),
                x: bytesToBase64url(typeof pubKey === 'string' ? hexToBytes(pubKey) : pubKey),
            };
        default:
            throw new Error(`not_supported: Failed to create JWK for this key type.`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiandrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2p3ay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sUUFBUSxNQUFNLFVBQVUsQ0FBQztBQUVoQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLFFBQVEsQ0FBQztBQUU1QixNQUFNLENBQU4sSUFBWSxxQkFLWDtBQUxELFdBQVkscUJBQXFCO0lBQy9CLGdEQUF1QixDQUFBO0lBQ3ZCLGdEQUF1QixDQUFBO0lBQ3ZCLDRDQUFtQixDQUFBO0lBQ25CLDBDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFMVyxxQkFBcUIsS0FBckIscUJBQXFCLFFBS2hDO0FBVUQsTUFBTSxVQUFVLFNBQVMsQ0FDdkIsT0FBMkMsRUFDM0MsWUFBcUI7SUFFckIsSUFBSSxZQUFZLEVBQUU7UUFDaEIsSUFBSSxZQUFZLEtBQUssS0FBSyxJQUFJLFlBQVksS0FBSyxLQUFLLEVBQUU7WUFDcEQsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1NBQ2pFO1FBQ0QsSUFBSSxZQUFZLEtBQUssS0FBSyxJQUFJLE9BQU8sS0FBSyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUU7WUFDdEUsTUFBTSxJQUFJLEtBQUssQ0FDYiwwREFBMEQsQ0FDM0QsQ0FBQztTQUNIO1FBQ0QsSUFBSSxZQUFZLEtBQUssS0FBSyxJQUFJLE9BQU8sS0FBSyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUU7WUFDdkUsTUFBTSxJQUFJLEtBQUssQ0FDYiw4REFBOEQsQ0FDL0QsQ0FBQztTQUNIO1FBQ0QsT0FBTyxZQUFZLENBQUM7S0FDckI7SUFDRCxRQUFRLE9BQU8sRUFBRTtRQUNmLEtBQUsscUJBQXFCLENBQUMsU0FBUyxDQUFDO1FBQ3JDLEtBQUsscUJBQXFCLENBQUMsU0FBUyxDQUFDO1FBQ3JDLEtBQUsscUJB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