import typia from 'typia';

// src/typia-generated/isVerifiableCredential.ts
var isVerifiableCredential = (input) => {
  typia.createIs.join;
  const $io0 = (input2) => null !== input2.issuer && void 0 !== input2.issuer && ("string" === typeof input2.issuer || "object" === typeof input2.issuer && null !== input2.issuer && $io1(input2.issuer)) && ("object" === typeof input2.credentialSubject && null !== input2.credentialSubject && false === Array.isArray(input2.credentialSubject) && $io2(input2.credentialSubject)) && (null !== input2.type && (void 0 === input2.type || "string" === typeof input2.type || Array.isArray(input2.type) && input2.type.every((elem) => "string" === typeof elem))) && (null !== input2["@context"] && void 0 !== input2["@context"] && ("string" === typeof input2["@context"] || (Array.isArray(input2["@context"]) && input2["@context"].every((elem) => null !== elem && void 0 !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && $io3(elem))) || "object" === typeof input2["@context"] && null !== input2["@context"] && false === Array.isArray(input2["@context"]) && $io3(input2["@context"])))) && "string" === typeof input2.issuanceDate && (void 0 === input2.expirationDate || "string" === typeof input2.expirationDate) && (void 0 === input2.credentialStatus || "object" === typeof input2.credentialStatus && null !== input2.credentialStatus && $io4(input2.credentialStatus)) && (void 0 === input2.id || "string" === typeof input2.id) && ("object" === typeof input2.proof && null !== input2.proof && false === Array.isArray(input2.proof) && $io5(input2.proof)) && Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io1 = (input2) => "string" === typeof input2.id && Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io2 = (input2) => (void 0 === input2.id || "string" === typeof input2.id) && Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io3 = (input2) => Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io4 = (input2) => "string" === typeof input2.id && "string" === typeof input2.type && Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io5 = (input2) => (void 0 === input2.type || "string" === typeof input2.type) && Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  return "object" === typeof input && null !== input && $io0(input);
};
var isW3CVerifiableCredential = (input) => {
  typia.createIs.join;
  const $io0 = (input2) => null !== input2.issuer && void 0 !== input2.issuer && ("string" === typeof input2.issuer || "object" === typeof input2.issuer && null !== input2.issuer && $io1(input2.issuer)) && ("object" === typeof input2.credentialSubject && null !== input2.credentialSubject && false === Array.isArray(input2.credentialSubject) && $io2(input2.credentialSubject)) && (null !== input2.type && (void 0 === input2.type || "string" === typeof input2.type || Array.isArray(input2.type) && input2.type.every((elem) => "string" === typeof elem))) && (null !== input2["@context"] && void 0 !== input2["@context"] && ("string" === typeof input2["@context"] || (Array.isArray(input2["@context"]) && input2["@context"].every((elem) => null !== elem && void 0 !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && $io3(elem))) || "object" === typeof input2["@context"] && null !== input2["@context"] && false === Array.isArray(input2["@context"]) && $io3(input2["@context"])))) && "string" === typeof input2.issuanceDate && (void 0 === input2.expirationDate || "string" === typeof input2.expirationDate) && (void 0 === input2.credentialStatus || "object" === typeof input2.credentialStatus && null !== input2.credentialStatus && $io4(input2.credentialStatus)) && (void 0 === input2.id || "string" === typeof input2.id) && ("object" === typeof input2.proof && null !== input2.proof && false === Array.isArray(input2.proof) && $io5(input2.proof)) && Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io1 = (input2) => "string" === typeof input2.id && Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io2 = (input2) => (void 0 === input2.id || "string" === typeof input2.id) && Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io3 = (input2) => Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io4 = (input2) => "string" === typeof input2.id && "string" === typeof input2.type && Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io5 = (input2) => (void 0 === input2.type || "string" === typeof input2.type) && Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  return null !== input && void 0 !== input && ("string" === typeof input || "object" === typeof input && null !== input && $io0(input));
};
var isW3CCredential = (input) => {
  typia.createIs.join;
  const $io0 = (input2) => "string" === typeof input2.id && (Array.isArray(input2["@context"]) && input2["@context"].every((elem) => "string" === typeof elem)) && (Array.isArray(input2.type) && input2.type.every((elem) => "string" === typeof elem)) && (void 0 === input2.expirationDate || "string" === typeof input2.expirationDate) && (void 0 === input2.issuanceDate || "string" === typeof input2.issuanceDate) && ("object" === typeof input2.credentialSubject && null !== input2.credentialSubject && false === Array.isArray(input2.credentialSubject) && $io1(input2.credentialSubject)) && ("object" === typeof input2.credentialStatus && null !== input2.credentialStatus && $io2(input2.credentialStatus)) && "string" === typeof input2.issuer && ("object" === typeof input2.credentialSchema && null !== input2.credentialSchema && ("string" === typeof input2.credentialSchema.id && "string" === typeof input2.credentialSchema.type)) && true;
  const $io1 = (input2) => Object.keys(input2).every((key) => {
    const value = input2[key];
    if (void 0 === value)
      return true;
    if (RegExp(/(.*)/).test(key))
      return true;
    return true;
  });
  const $io2 = (input2) => "string" === typeof input2.id && ("SparseMerkleTreeProof" === input2.type || "Iden3ReverseSparseMerkleTreeProof" === input2.type || "Iden3commRevocationStatusV1.0" === input2.type || "Iden3OnchainSparseMerkleTreeProof2023" === input2.type) && (void 0 === input2.revocationNonce || "number" === typeof input2.revocationNonce) && (void 0 === input2.statusIssuer || "object" === typeof input2.statusIssuer && null !== input2.statusIssuer && $io2(input2.statusIssuer));
  return "object" === typeof input && null !== input && $io0(input);
};

export { isVerifiableCredential, isW3CCredential, isW3CVerifiableCredential };
