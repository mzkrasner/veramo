import { W3CCredential } from '@0xpolygonid/js-sdk';
import { W3CVerifiableCredential, UnsignedCredential, W3CVerifiablePresentation } from '@veramo/core';
import { AvailableCredentialStores, SupportedProofFormats, AvailableMethods } from './constants.js';

interface ProofOptions {
    type?: string;
    domain?: string;
    challenge?: string;
}
interface QueryCredentialsOptions {
    store?: AvailableCredentialStores | AvailableCredentialStores[];
    returnStore?: boolean;
}
interface SaveCredentialOptions {
    store?: AvailableCredentialStores | AvailableCredentialStores[];
}
interface DeleteCredentialsOptions {
    store?: AvailableCredentialStores | AvailableCredentialStores[];
}
interface Filter {
    type: 'none' | 'id' | 'JSONPath';
    filter: string;
}
interface CredentialRequest {
    id: string;
    metadata?: {
        store?: AvailableCredentialStores;
    };
}
interface SetCurrentAccountRequestParams {
    account: string;
}
interface CreatePresentationRequestParams {
    vcs: W3CVerifiableCredential[];
    proofFormat?: SupportedProofFormats;
    proofOptions?: ProofOptions;
}
type MinimalUnsignedCredential = Pick<UnsignedCredential, 'credentialSubject' | 'type' | '@context' | 'expirationDate' | 'credentialStatus' | 'id'> & Record<string, any>;
interface CreateCredentialRequestParams {
    minimalUnsignedCredential: MinimalUnsignedCredential;
    proofFormat?: SupportedProofFormats;
    options?: {
        save?: boolean;
        store?: AvailableCredentialStores | AvailableCredentialStores[];
    };
}
interface QueryCredentialsRequestParams {
    filter?: Filter;
    options?: QueryCredentialsOptions;
}
interface SaveCredentialRequestParams {
    verifiableCredential: W3CVerifiableCredential | W3CCredential;
    options?: SaveCredentialOptions;
}
interface DeleteCredentialsRequestParams {
    id: string;
    options?: DeleteCredentialsOptions;
}
interface ResolveDIDRequestParams {
    did: string;
}
interface SwitchMethodRequestParams {
    didMethod: AvailableMethods;
}
interface SetCredentialStoreRequestParams {
    store: AvailableCredentialStores;
    value: boolean;
}
type VerifyDataRequestParams = {
    credential: W3CVerifiableCredential;
    presentation?: undefined;
    verbose?: boolean;
} | {
    credential?: undefined;
    presentation: W3CVerifiablePresentation;
    verbose?: boolean;
};
interface HandleCredentialOfferRequestParams {
    credentialOffer: string;
}
interface HandleAuthorizationRequestParams {
    authorizationRequest: string;
}
interface SetCeramicSessionRequestParams {
    serializedSession: string;
}
interface ImportStateBackupRequestParams {
    serializedState: string;
}
interface RemoveFriendlyDappParams {
    id: string;
}

export { CreateCredentialRequestParams, CreatePresentationRequestParams, CredentialRequest, DeleteCredentialsOptions, DeleteCredentialsRequestParams, Filter, HandleAuthorizationRequestParams, HandleCredentialOfferRequestParams, ImportStateBackupRequestParams, MinimalUnsignedCredential, ProofOptions, QueryCredentialsOptions, QueryCredentialsRequestParams, RemoveFriendlyDappParams, ResolveDIDRequestParams, SaveCredentialOptions, SaveCredentialRequestParams, SetCeramicSessionRequestParams, SetCredentialStoreRequestParams, SetCurrentAccountRequestParams, SwitchMethodRequestParams, VerifyDataRequestParams };
