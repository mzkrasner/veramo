import { IdentityMerkleTreeMetaInformation } from '@0xpolygonid/js-sdk';
import { DidMethod, Blockchain, NetworkId } from '@iden3/js-iden3-core';
import { W3CVerifiableCredential } from '@veramo/core';
import { AvailableMethods, AvailableCredentialStores } from './constants.js';

interface MascaConfig {
    snap: {
        acceptedTerms: boolean;
    };
    dApp: {
        disablePopups: boolean;
        friendlyDapps: string[];
    };
}
interface MascaAccountConfig {
    ssi: {
        selectedMethod: AvailableMethods;
        storesEnabled: Record<AvailableCredentialStores, boolean>;
    };
}
interface MascaState {
    v1: {
        accountState: Record<string, MascaAccountState>;
        currentAccount: string;
        config: MascaConfig;
    };
}
interface MascaAccountState {
    polygon: {
        state: PolygonState;
    };
    veramo: {
        credentials: Record<string, W3CVerifiableCredential>;
    };
    general: {
        account: MascaAccountConfig;
        ceramicSession?: string;
    };
}
interface PolygonBaseState {
    credentials: Record<string, string>;
    identities: Record<string, string>;
    profiles: Record<string, string>;
    merkleTreeMeta: IdentityMerkleTreeMetaInformation[];
    merkleTree: Record<string, string>;
}
type PolygonState = Record<DidMethod.Iden3 | DidMethod.PolygonId, Record<Blockchain.Ethereum | Blockchain.Polygon, Record<NetworkId.Main | NetworkId.Goerli | NetworkId.Mumbai, PolygonBaseState>>>;

export { MascaAccountConfig, MascaAccountState, MascaConfig, MascaState, PolygonBaseState, PolygonState };
