import { isW3CVerifiableCredential, isW3CCredential } from './chunk-WL5PF7YF.js';
import { CURRENT_STATE_VERSION } from './chunk-OKHEWZCI.js';
import typia from 'typia';

// src/typia-generated/index.ts
var isJWT = (jwt) => {
  if (typeof jwt !== "string")
    return false;
  return jwt.split(".").length === 3;
};

// src/typia-generated/isParam.ts
var isEnabledCredentialStore = (account, state, store) => state[CURRENT_STATE_VERSION].accountState[account].general.account.ssi.storesEnabled[store];
var checkCredentialStore = (param, account, state) => {
  let stores = param.options?.store || [];
  if (!Array.isArray(stores)) {
    stores = [stores];
  }
  for (const store of stores) {
    if (!isEnabledCredentialStore(account, state, store)) {
      throw new Error(`Store ${store} is not enabled!`);
    }
  }
};
var formatErrorMessages = (errors) => {
  let errorMessage = "invalid_argument: ";
  for (let i = 0; i < errors.length; i += 1) {
    errorMessage += errors[i].path;
    if (i < errors.length - 1) {
      errorMessage += ", ";
    }
  }
  return errorMessage;
};
var handleIValidation = (result) => {
  if (result.success) {
    return void 0;
  }
  return formatErrorMessages(result.errors);
};
var validateCreateCredentialRequest = (input) => {
  const errors = [];
  const __is = (input2, _exceptionable = true) => {
    typia.createValidateEquals.join;
    const $io0 = (input3, _exceptionable2 = true) => "object" === typeof input3.minimalUnsignedCredential && null !== input3.minimalUnsignedCredential && $io1(input3.minimalUnsignedCredential, _exceptionable2) && (void 0 === input3.proofFormat || "jwt" === input3.proofFormat || "lds" === input3.proofFormat || "EthereumEip712Signature2021" === input3.proofFormat) && (void 0 === input3.options || "object" === typeof input3.options && null !== input3.options && false === Array.isArray(input3.options) && $io5(input3.options, _exceptionable2)) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["minimalUnsignedCredential", "proofFormat", "options"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io1 = (input3, _exceptionable2 = true) => "object" === typeof input3.credentialSubject && null !== input3.credentialSubject && false === Array.isArray(input3.credentialSubject) && $io2(input3.credentialSubject, _exceptionable2) && (null !== input3.type && (void 0 === input3.type || "string" === typeof input3.type || Array.isArray(input3.type) && input3.type.every((elem, _index1) => "string" === typeof elem))) && (null !== input3["@context"] && void 0 !== input3["@context"] && ("string" === typeof input3["@context"] || (Array.isArray(input3["@context"]) && input3["@context"].every((elem, _index2) => null !== elem && void 0 !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && $io3(elem, _exceptionable2))) || "object" === typeof input3["@context"] && null !== input3["@context"] && false === Array.isArray(input3["@context"]) && $io3(input3["@context"], _exceptionable2)))) && (void 0 === input3.expirationDate || "string" === typeof input3.expirationDate) && (void 0 === input3.credentialStatus || "object" === typeof input3.credentialStatus && null !== input3.credentialStatus && $io4(input3.credentialStatus, _exceptionable2)) && (void 0 === input3.id || "string" === typeof input3.id) && Object.keys(input3).every((key) => {
      if (["credentialSubject", "type", "@context", "expirationDate", "credentialStatus", "id"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io2 = (input3, _exceptionable2 = true) => (void 0 === input3.id || "string" === typeof input3.id) && Object.keys(input3).every((key) => {
      if (["id"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io3 = (input3, _exceptionable2 = true) => Object.keys(input3).every((key) => {
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io4 = (input3, _exceptionable2 = true) => "string" === typeof input3.id && "string" === typeof input3.type && Object.keys(input3).every((key) => {
      if (["id", "type"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io5 = (input3, _exceptionable2 = true) => (void 0 === input3.save || "boolean" === typeof input3.save) && (void 0 === input3.store || "snap" === input3.store || "ceramic" === input3.store || Array.isArray(input3.store) && input3.store.every((elem, _index3) => "snap" === elem || "ceramic" === elem)) && (0 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["save", "store"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    return "object" === typeof input2 && null !== input2 && $io0(input2, true);
  };
  if (false === __is(input)) {
    const $report = typia.createValidateEquals.report(errors);
    ((input2, _path, _exceptionable = true) => {
      const $join = typia.createValidateEquals.join;
      const $vo0 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.minimalUnsignedCredential && null !== input3.minimalUnsignedCredential || $report(_exceptionable2, {
        path: _path2 + ".minimalUnsignedCredential",
        expected: "MinimalUnsignedCredential",
        value: input3.minimalUnsignedCredential
      })) && $vo1(input3.minimalUnsignedCredential, _path2 + ".minimalUnsignedCredential", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".minimalUnsignedCredential",
        expected: "MinimalUnsignedCredential",
        value: input3.minimalUnsignedCredential
      }), void 0 === input3.proofFormat || "jwt" === input3.proofFormat || "lds" === input3.proofFormat || "EthereumEip712Signature2021" === input3.proofFormat || $report(_exceptionable2, {
        path: _path2 + ".proofFormat",
        expected: '("EthereumEip712Signature2021" | "jwt" | "lds" | undefined)',
        value: input3.proofFormat
      }), void 0 === input3.options || ("object" === typeof input3.options && null !== input3.options && false === Array.isArray(input3.options) || $report(_exceptionable2, {
        path: _path2 + ".options",
        expected: "(__type | undefined)",
        value: input3.options
      })) && $vo5(input3.options, _path2 + ".options", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".options",
        expected: "(__type | undefined)",
        value: input3.options
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["minimalUnsignedCredential", "proofFormat", "options"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo1 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.credentialSubject && null !== input3.credentialSubject && false === Array.isArray(input3.credentialSubject) || $report(_exceptionable2, {
        path: _path2 + ".credentialSubject",
        expected: "CredentialSubject",
        value: input3.credentialSubject
      })) && $vo2(input3.credentialSubject, _path2 + ".credentialSubject", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credentialSubject",
        expected: "CredentialSubject",
        value: input3.credentialSubject
      }), (null !== input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })) && (void 0 === input3.type || "string" === typeof input3.type || (Array.isArray(input3.type) || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })) && input3.type.map((elem, _index1) => "string" === typeof elem || $report(_exceptionable2, {
        path: _path2 + ".type[" + _index1 + "]",
        expected: "string",
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })), (null !== input3["@context"] || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) && (void 0 !== input3["@context"] || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) && ("string" === typeof input3["@context"] || (Array.isArray(input3["@context"]) && input3["@context"].map((elem, _index2) => (null !== elem || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index2 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && (void 0 !== elem || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index2 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index2 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && $vo3(elem, _path2 + '["@context"][' + _index2 + "]", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index2 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      }))).every((flag) => flag) || "object" === typeof input3["@context"] && null !== input3["@context"] && false === Array.isArray(input3["@context"]) && $vo3(input3["@context"], _path2 + '["@context"]', _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })), void 0 === input3.expirationDate || "string" === typeof input3.expirationDate || $report(_exceptionable2, {
        path: _path2 + ".expirationDate",
        expected: "(string | undefined)",
        value: input3.expirationDate
      }), void 0 === input3.credentialStatus || ("object" === typeof input3.credentialStatus && null !== input3.credentialStatus || $report(_exceptionable2, {
        path: _path2 + ".credentialStatus",
        expected: "(CredentialStatusReference | undefined)",
        value: input3.credentialStatus
      })) && $vo4(input3.credentialStatus, _path2 + ".credentialStatus", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credentialStatus",
        expected: "(CredentialStatusReference | undefined)",
        value: input3.credentialStatus
      }), void 0 === input3.id || "string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "(string | undefined)",
        value: input3.id
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["credentialSubject", "type", "@context", "expirationDate", "credentialStatus", "id"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo2 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.id || "string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "(string | undefined)",
        value: input3.id
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo3 = (input3, _path2, _exceptionable2 = true) => [false === _exceptionable2 || Object.keys(input3).map((key) => {
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo4 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "string",
        value: input3.id
      }), "string" === typeof input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "string",
        value: input3.type
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id", "type"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo5 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.save || "boolean" === typeof input3.save || $report(_exceptionable2, {
        path: _path2 + ".save",
        expected: "(boolean | undefined)",
        value: input3.save
      }), void 0 === input3.store || "snap" === input3.store || "ceramic" === input3.store || (Array.isArray(input3.store) || $report(_exceptionable2, {
        path: _path2 + ".store",
        expected: '("ceramic" | "snap" | Array<"snap" | "ceramic"> | undefined)',
        value: input3.store
      })) && input3.store.map((elem, _index3) => "snap" === elem || "ceramic" === elem || $report(_exceptionable2, {
        path: _path2 + ".store[" + _index3 + "]",
        expected: '("ceramic" | "snap")',
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".store",
        expected: '("ceramic" | "snap" | Array<"snap" | "ceramic"> | undefined)',
        value: input3.store
      }), 0 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["save", "store"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      return ("object" === typeof input2 && null !== input2 || $report(true, {
        path: _path + "",
        expected: "CreateCredentialRequestParams",
        value: input2
      })) && $vo0(input2, _path + "", true) || $report(true, {
        path: _path + "",
        expected: "CreateCredentialRequestParams",
        value: input2
      });
    })(input, "$input", true);
  }
  const success = 0 === errors.length;
  return {
    success,
    errors,
    data: success ? input : void 0
  };
};
var validateCreatePresentationRequest = (input) => {
  const errors = [];
  const __is = (input2, _exceptionable = true) => {
    typia.createValidateEquals.join;
    const $io0 = (input3, _exceptionable2 = true) => Array.isArray(input3.vcs) && input3.vcs.every((elem, _index1) => null !== elem && void 0 !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && $io1(elem, _exceptionable2))) && (void 0 === input3.proofFormat || "jwt" === input3.proofFormat || "lds" === input3.proofFormat || "EthereumEip712Signature2021" === input3.proofFormat) && (void 0 === input3.proofOptions || "object" === typeof input3.proofOptions && null !== input3.proofOptions && false === Array.isArray(input3.proofOptions) && $io7(input3.proofOptions, _exceptionable2)) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["vcs", "proofFormat", "proofOptions"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io1 = (input3, _exceptionable2 = true) => null !== input3.issuer && void 0 !== input3.issuer && ("string" === typeof input3.issuer || "object" === typeof input3.issuer && null !== input3.issuer && $io2(input3.issuer, _exceptionable2)) && ("object" === typeof input3.credentialSubject && null !== input3.credentialSubject && false === Array.isArray(input3.credentialSubject) && $io3(input3.credentialSubject, _exceptionable2)) && (null !== input3.type && (void 0 === input3.type || "string" === typeof input3.type || Array.isArray(input3.type) && input3.type.every((elem, _index2) => "string" === typeof elem))) && (null !== input3["@context"] && void 0 !== input3["@context"] && ("string" === typeof input3["@context"] || (Array.isArray(input3["@context"]) && input3["@context"].every((elem, _index3) => null !== elem && void 0 !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && $io4(elem, _exceptionable2))) || "object" === typeof input3["@context"] && null !== input3["@context"] && false === Array.isArray(input3["@context"]) && $io4(input3["@context"], _exceptionable2)))) && "string" === typeof input3.issuanceDate && (void 0 === input3.expirationDate || "string" === typeof input3.expirationDate) && (void 0 === input3.credentialStatus || "object" === typeof input3.credentialStatus && null !== input3.credentialStatus && $io5(input3.credentialStatus, _exceptionable2)) && (void 0 === input3.id || "string" === typeof input3.id) && ("object" === typeof input3.proof && null !== input3.proof && false === Array.isArray(input3.proof) && $io6(input3.proof, _exceptionable2)) && Object.keys(input3).every((key) => {
      if (["issuer", "credentialSubject", "type", "@context", "issuanceDate", "expirationDate", "credentialStatus", "id", "proof"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io2 = (input3, _exceptionable2 = true) => "string" === typeof input3.id && Object.keys(input3).every((key) => {
      if (["id"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io3 = (input3, _exceptionable2 = true) => (void 0 === input3.id || "string" === typeof input3.id) && Object.keys(input3).every((key) => {
      if (["id"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io4 = (input3, _exceptionable2 = true) => Object.keys(input3).every((key) => {
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io5 = (input3, _exceptionable2 = true) => "string" === typeof input3.id && "string" === typeof input3.type && Object.keys(input3).every((key) => {
      if (["id", "type"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io6 = (input3, _exceptionable2 = true) => (void 0 === input3.type || "string" === typeof input3.type) && Object.keys(input3).every((key) => {
      if (["type"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io7 = (input3, _exceptionable2 = true) => (void 0 === input3.type || "string" === typeof input3.type) && (void 0 === input3.domain || "string" === typeof input3.domain) && (void 0 === input3.challenge || "string" === typeof input3.challenge) && (0 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["type", "domain", "challenge"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    return "object" === typeof input2 && null !== input2 && $io0(input2, true);
  };
  if (false === __is(input)) {
    const $report = typia.createValidateEquals.report(errors);
    ((input2, _path, _exceptionable = true) => {
      const $join = typia.createValidateEquals.join;
      const $vo0 = (input3, _path2, _exceptionable2 = true) => [(Array.isArray(input3.vcs) || $report(_exceptionable2, {
        path: _path2 + ".vcs",
        expected: "Array<W3CVerifiableCredential>",
        value: input3.vcs
      })) && input3.vcs.map((elem, _index1) => (null !== elem || $report(_exceptionable2, {
        path: _path2 + ".vcs[" + _index1 + "]",
        expected: "(VerifiableCredential | string)",
        value: elem
      })) && (void 0 !== elem || $report(_exceptionable2, {
        path: _path2 + ".vcs[" + _index1 + "]",
        expected: "(VerifiableCredential | string)",
        value: elem
      })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || $report(_exceptionable2, {
        path: _path2 + ".vcs[" + _index1 + "]",
        expected: "(VerifiableCredential | string)",
        value: elem
      })) && $vo1(elem, _path2 + ".vcs[" + _index1 + "]", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".vcs[" + _index1 + "]",
        expected: "(VerifiableCredential | string)",
        value: elem
      }))).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".vcs",
        expected: "Array<W3CVerifiableCredential>",
        value: input3.vcs
      }), void 0 === input3.proofFormat || "jwt" === input3.proofFormat || "lds" === input3.proofFormat || "EthereumEip712Signature2021" === input3.proofFormat || $report(_exceptionable2, {
        path: _path2 + ".proofFormat",
        expected: '("EthereumEip712Signature2021" | "jwt" | "lds" | undefined)',
        value: input3.proofFormat
      }), void 0 === input3.proofOptions || ("object" === typeof input3.proofOptions && null !== input3.proofOptions && false === Array.isArray(input3.proofOptions) || $report(_exceptionable2, {
        path: _path2 + ".proofOptions",
        expected: "(ProofOptions | undefined)",
        value: input3.proofOptions
      })) && $vo7(input3.proofOptions, _path2 + ".proofOptions", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".proofOptions",
        expected: "(ProofOptions | undefined)",
        value: input3.proofOptions
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["vcs", "proofFormat", "proofOptions"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo1 = (input3, _path2, _exceptionable2 = true) => [(null !== input3.issuer || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type | string)",
        value: input3.issuer
      })) && (void 0 !== input3.issuer || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type | string)",
        value: input3.issuer
      })) && ("string" === typeof input3.issuer || ("object" === typeof input3.issuer && null !== input3.issuer || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type | string)",
        value: input3.issuer
      })) && $vo2(input3.issuer, _path2 + ".issuer", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type | string)",
        value: input3.issuer
      })), ("object" === typeof input3.credentialSubject && null !== input3.credentialSubject && false === Array.isArray(input3.credentialSubject) || $report(_exceptionable2, {
        path: _path2 + ".credentialSubject",
        expected: "CredentialSubject",
        value: input3.credentialSubject
      })) && $vo3(input3.credentialSubject, _path2 + ".credentialSubject", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credentialSubject",
        expected: "CredentialSubject",
        value: input3.credentialSubject
      }), (null !== input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })) && (void 0 === input3.type || "string" === typeof input3.type || (Array.isArray(input3.type) || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })) && input3.type.map((elem, _index2) => "string" === typeof elem || $report(_exceptionable2, {
        path: _path2 + ".type[" + _index2 + "]",
        expected: "string",
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })), (null !== input3["@context"] || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) && (void 0 !== input3["@context"] || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) && ("string" === typeof input3["@context"] || (Array.isArray(input3["@context"]) && input3["@context"].map((elem, _index3) => (null !== elem || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index3 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && (void 0 !== elem || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index3 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index3 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && $vo4(elem, _path2 + '["@context"][' + _index3 + "]", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index3 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      }))).every((flag) => flag) || "object" === typeof input3["@context"] && null !== input3["@context"] && false === Array.isArray(input3["@context"]) && $vo4(input3["@context"], _path2 + '["@context"]', _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })), "string" === typeof input3.issuanceDate || $report(_exceptionable2, {
        path: _path2 + ".issuanceDate",
        expected: "string",
        value: input3.issuanceDate
      }), void 0 === input3.expirationDate || "string" === typeof input3.expirationDate || $report(_exceptionable2, {
        path: _path2 + ".expirationDate",
        expected: "(string | undefined)",
        value: input3.expirationDate
      }), void 0 === input3.credentialStatus || ("object" === typeof input3.credentialStatus && null !== input3.credentialStatus || $report(_exceptionable2, {
        path: _path2 + ".credentialStatus",
        expected: "(CredentialStatusReference | undefined)",
        value: input3.credentialStatus
      })) && $vo5(input3.credentialStatus, _path2 + ".credentialStatus", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credentialStatus",
        expected: "(CredentialStatusReference | undefined)",
        value: input3.credentialStatus
      }), void 0 === input3.id || "string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "(string | undefined)",
        value: input3.id
      }), ("object" === typeof input3.proof && null !== input3.proof && false === Array.isArray(input3.proof) || $report(_exceptionable2, {
        path: _path2 + ".proof",
        expected: "ProofType",
        value: input3.proof
      })) && $vo6(input3.proof, _path2 + ".proof", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".proof",
        expected: "ProofType",
        value: input3.proof
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["issuer", "credentialSubject", "type", "@context", "issuanceDate", "expirationDate", "credentialStatus", "id", "proof"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo2 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "string",
        value: input3.id
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo3 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.id || "string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "(string | undefined)",
        value: input3.id
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo4 = (input3, _path2, _exceptionable2 = true) => [false === _exceptionable2 || Object.keys(input3).map((key) => {
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo5 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "string",
        value: input3.id
      }), "string" === typeof input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "string",
        value: input3.type
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id", "type"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo6 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.type || "string" === typeof input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(string | undefined)",
        value: input3.type
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["type"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo7 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.type || "string" === typeof input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(string | undefined)",
        value: input3.type
      }), void 0 === input3.domain || "string" === typeof input3.domain || $report(_exceptionable2, {
        path: _path2 + ".domain",
        expected: "(string | undefined)",
        value: input3.domain
      }), void 0 === input3.challenge || "string" === typeof input3.challenge || $report(_exceptionable2, {
        path: _path2 + ".challenge",
        expected: "(string | undefined)",
        value: input3.challenge
      }), 0 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["type", "domain", "challenge"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      return ("object" === typeof input2 && null !== input2 || $report(true, {
        path: _path + "",
        expected: "CreatePresentationRequestParams",
        value: input2
      })) && $vo0(input2, _path + "", true) || $report(true, {
        path: _path + "",
        expected: "CreatePresentationRequestParams",
        value: input2
      });
    })(input, "$input", true);
  }
  const success = 0 === errors.length;
  return {
    success,
    errors,
    data: success ? input : void 0
  };
};
var validateDeleteCredentialsRequest = (input) => {
  const errors = [];
  const __is = (input2, _exceptionable = true) => {
    const $io0 = (input3, _exceptionable2 = true) => "string" === typeof input3.id && (void 0 === input3.options || "object" === typeof input3.options && null !== input3.options && false === Array.isArray(input3.options) && $io1(input3.options, _exceptionable2)) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["id", "options"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io1 = (input3, _exceptionable2 = true) => (void 0 === input3.store || "snap" === input3.store || "ceramic" === input3.store || Array.isArray(input3.store) && input3.store.every((elem, _index1) => "snap" === elem || "ceramic" === elem)) && (0 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["store"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    return "object" === typeof input2 && null !== input2 && $io0(input2, true);
  };
  if (false === __is(input)) {
    const $report = typia.createValidateEquals.report(errors);
    ((input2, _path, _exceptionable = true) => {
      const $join = typia.createValidateEquals.join;
      const $vo0 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "string",
        value: input3.id
      }), void 0 === input3.options || ("object" === typeof input3.options && null !== input3.options && false === Array.isArray(input3.options) || $report(_exceptionable2, {
        path: _path2 + ".options",
        expected: "(DeleteCredentialsOptions | undefined)",
        value: input3.options
      })) && $vo1(input3.options, _path2 + ".options", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".options",
        expected: "(DeleteCredentialsOptions | undefined)",
        value: input3.options
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id", "options"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo1 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.store || "snap" === input3.store || "ceramic" === input3.store || (Array.isArray(input3.store) || $report(_exceptionable2, {
        path: _path2 + ".store",
        expected: '("ceramic" | "snap" | Array<"snap" | "ceramic"> | undefined)',
        value: input3.store
      })) && input3.store.map((elem, _index1) => "snap" === elem || "ceramic" === elem || $report(_exceptionable2, {
        path: _path2 + ".store[" + _index1 + "]",
        expected: '("ceramic" | "snap")',
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".store",
        expected: '("ceramic" | "snap" | Array<"snap" | "ceramic"> | undefined)',
        value: input3.store
      }), 0 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["store"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      return ("object" === typeof input2 && null !== input2 || $report(true, {
        path: _path + "",
        expected: "DeleteCredentialsRequestParams",
        value: input2
      })) && $vo0(input2, _path + "", true) || $report(true, {
        path: _path + "",
        expected: "DeleteCredentialsRequestParams",
        value: input2
      });
    })(input, "$input", true);
  }
  const success = 0 === errors.length;
  return {
    success,
    errors,
    data: success ? input : void 0
  };
};
var validateQueryCredentialsRequest = (input) => {
  const errors = [];
  const __is = (input2, _exceptionable = true) => {
    const $io0 = (input3, _exceptionable2 = true) => (void 0 === input3.filter || "object" === typeof input3.filter && null !== input3.filter && $io1(input3.filter, _exceptionable2)) && (void 0 === input3.options || "object" === typeof input3.options && null !== input3.options && false === Array.isArray(input3.options) && $io2(input3.options, _exceptionable2)) && (0 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["filter", "options"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io1 = (input3, _exceptionable2 = true) => ("id" === input3.type || "none" === input3.type || "JSONPath" === input3.type) && "string" === typeof input3.filter && (2 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["type", "filter"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io2 = (input3, _exceptionable2 = true) => (void 0 === input3.store || "snap" === input3.store || "ceramic" === input3.store || Array.isArray(input3.store) && input3.store.every((elem, _index1) => "snap" === elem || "ceramic" === elem)) && (void 0 === input3.returnStore || "boolean" === typeof input3.returnStore) && (0 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["store", "returnStore"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    return "object" === typeof input2 && null !== input2 && false === Array.isArray(input2) && $io0(input2, true);
  };
  if (false === __is(input)) {
    const $report = typia.createValidateEquals.report(errors);
    ((input2, _path, _exceptionable = true) => {
      const $join = typia.createValidateEquals.join;
      const $vo0 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.filter || ("object" === typeof input3.filter && null !== input3.filter || $report(_exceptionable2, {
        path: _path2 + ".filter",
        expected: "(Filter | undefined)",
        value: input3.filter
      })) && $vo1(input3.filter, _path2 + ".filter", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".filter",
        expected: "(Filter | undefined)",
        value: input3.filter
      }), void 0 === input3.options || ("object" === typeof input3.options && null !== input3.options && false === Array.isArray(input3.options) || $report(_exceptionable2, {
        path: _path2 + ".options",
        expected: "(QueryCredentialsOptions | undefined)",
        value: input3.options
      })) && $vo2(input3.options, _path2 + ".options", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".options",
        expected: "(QueryCredentialsOptions | undefined)",
        value: input3.options
      }), 0 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["filter", "options"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo1 = (input3, _path2, _exceptionable2 = true) => ["id" === input3.type || "none" === input3.type || "JSONPath" === input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: '("JSONPath" | "id" | "none")',
        value: input3.type
      }), "string" === typeof input3.filter || $report(_exceptionable2, {
        path: _path2 + ".filter",
        expected: "string",
        value: input3.filter
      }), 2 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["type", "filter"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo2 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.store || "snap" === input3.store || "ceramic" === input3.store || (Array.isArray(input3.store) || $report(_exceptionable2, {
        path: _path2 + ".store",
        expected: '("ceramic" | "snap" | Array<"snap" | "ceramic"> | undefined)',
        value: input3.store
      })) && input3.store.map((elem, _index1) => "snap" === elem || "ceramic" === elem || $report(_exceptionable2, {
        path: _path2 + ".store[" + _index1 + "]",
        expected: '("ceramic" | "snap")',
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".store",
        expected: '("ceramic" | "snap" | Array<"snap" | "ceramic"> | undefined)',
        value: input3.store
      }), void 0 === input3.returnStore || "boolean" === typeof input3.returnStore || $report(_exceptionable2, {
        path: _path2 + ".returnStore",
        expected: "(boolean | undefined)",
        value: input3.returnStore
      }), 0 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["store", "returnStore"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      return ("object" === typeof input2 && null !== input2 && false === Array.isArray(input2) || $report(true, {
        path: _path + "",
        expected: "QueryCredentialsRequestParams",
        value: input2
      })) && $vo0(input2, _path + "", true) || $report(true, {
        path: _path + "",
        expected: "QueryCredentialsRequestParams",
        value: input2
      });
    })(input, "$input", true);
  }
  const success = 0 === errors.length;
  return {
    success,
    errors,
    data: success ? input : void 0
  };
};
var validateResolveDIDRequest = (input) => {
  const errors = [];
  const __is = (input2, _exceptionable = true) => {
    const $io0 = (input3, _exceptionable2 = true) => "string" === typeof input3.did && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["did"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    return "object" === typeof input2 && null !== input2 && $io0(input2, true);
  };
  if (false === __is(input)) {
    const $report = typia.createValidateEquals.report(errors);
    ((input2, _path, _exceptionable = true) => {
      const $join = typia.createValidateEquals.join;
      const $vo0 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.did || $report(_exceptionable2, {
        path: _path2 + ".did",
        expected: "string",
        value: input3.did
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["did"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      return ("object" === typeof input2 && null !== input2 || $report(true, {
        path: _path + "",
        expected: "ResolveDIDRequestParams",
        value: input2
      })) && $vo0(input2, _path + "", true) || $report(true, {
        path: _path + "",
        expected: "ResolveDIDRequestParams",
        value: input2
      });
    })(input, "$input", true);
  }
  const success = 0 === errors.length;
  return {
    success,
    errors,
    data: success ? input : void 0
  };
};
var validateSetCurrentAccountRequest = (input) => {
  const errors = [];
  const __is = (input2, _exceptionable = true) => {
    const $io0 = (input3, _exceptionable2 = true) => "string" === typeof input3.account && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["account"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    return "object" === typeof input2 && null !== input2 && $io0(input2, true);
  };
  if (false === __is(input)) {
    const $report = typia.createValidateEquals.report(errors);
    ((input2, _path, _exceptionable = true) => {
      const $join = typia.createValidateEquals.join;
      const $vo0 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.account || $report(_exceptionable2, {
        path: _path2 + ".account",
        expected: "string",
        value: input3.account
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["account"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      return ("object" === typeof input2 && null !== input2 || $report(true, {
        path: _path + "",
        expected: "SetCurrentAccountRequestParams",
        value: input2
      })) && $vo0(input2, _path + "", true) || $report(true, {
        path: _path + "",
        expected: "SetCurrentAccountRequestParams",
        value: input2
      });
    })(input, "$input", true);
  }
  const success = 0 === errors.length;
  return {
    success,
    errors,
    data: success ? input : void 0
  };
};
var validateSetCredentialStoreRequest = (input) => {
  const errors = [];
  const __is = (input2, _exceptionable = true) => {
    const $io0 = (input3, _exceptionable2 = true) => ("snap" === input3.store || "ceramic" === input3.store) && "boolean" === typeof input3.value && (2 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["store", "value"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    return "object" === typeof input2 && null !== input2 && $io0(input2, true);
  };
  if (false === __is(input)) {
    const $report = typia.createValidateEquals.report(errors);
    ((input2, _path, _exceptionable = true) => {
      const $join = typia.createValidateEquals.join;
      const $vo0 = (input3, _path2, _exceptionable2 = true) => ["snap" === input3.store || "ceramic" === input3.store || $report(_exceptionable2, {
        path: _path2 + ".store",
        expected: '("ceramic" | "snap")',
        value: input3.store
      }), "boolean" === typeof input3.value || $report(_exceptionable2, {
        path: _path2 + ".value",
        expected: "boolean",
        value: input3.value
      }), 2 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["store", "value"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      return ("object" === typeof input2 && null !== input2 || $report(true, {
        path: _path + "",
        expected: "SetCredentialStoreRequestParams",
        value: input2
      })) && $vo0(input2, _path + "", true) || $report(true, {
        path: _path + "",
        expected: "SetCredentialStoreRequestParams",
        value: input2
      });
    })(input, "$input", true);
  }
  const success = 0 === errors.length;
  return {
    success,
    errors,
    data: success ? input : void 0
  };
};
var validateSwitchMethodRequest = (input) => {
  const errors = [];
  const __is = (input2, _exceptionable = true) => {
    const $io0 = (input3, _exceptionable2 = true) => ("did:ethr" === input3.didMethod || "did:pkh" === input3.didMethod || "did:key" === input3.didMethod || "did:key:jwk_jcs-pub" === input3.didMethod || "did:jwk" === input3.didMethod || "did:iden3" === input3.didMethod || "did:polygonid" === input3.didMethod) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["didMethod"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    return "object" === typeof input2 && null !== input2 && $io0(input2, true);
  };
  if (false === __is(input)) {
    const $report = typia.createValidateEquals.report(errors);
    ((input2, _path, _exceptionable = true) => {
      const $join = typia.createValidateEquals.join;
      const $vo0 = (input3, _path2, _exceptionable2 = true) => ["did:ethr" === input3.didMethod || "did:pkh" === input3.didMethod || "did:key" === input3.didMethod || "did:key:jwk_jcs-pub" === input3.didMethod || "did:jwk" === input3.didMethod || "did:iden3" === input3.didMethod || "did:polygonid" === input3.didMethod || $report(_exceptionable2, {
        path: _path2 + ".didMethod",
        expected: '("did:ethr" | "did:iden3" | "did:jwk" | "did:key" | "did:key:jwk_jcs-pub" | "did:pkh" | "did:polygonid")',
        value: input3.didMethod
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["didMethod"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      return ("object" === typeof input2 && null !== input2 || $report(true, {
        path: _path + "",
        expected: "SwitchMethodRequestParams",
        value: input2
      })) && $vo0(input2, _path + "", true) || $report(true, {
        path: _path + "",
        expected: "SwitchMethodRequestParams",
        value: input2
      });
    })(input, "$input", true);
  }
  const success = 0 === errors.length;
  return {
    success,
    errors,
    data: success ? input : void 0
  };
};
var validateVerifyDataRequest = (input) => {
  const errors = [];
  const __is = (input2, _exceptionable = true) => {
    typia.createValidateEquals.join;
    const $io0 = (input3, _exceptionable2 = true) => null !== input3.credential && void 0 !== input3.credential && ("string" === typeof input3.credential || "object" === typeof input3.credential && null !== input3.credential && $io1(input3.credential, _exceptionable2)) && (null !== input3.presentation && void 0 === input3.presentation) && (void 0 === input3.verbose || "boolean" === typeof input3.verbose) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["credential", "presentation", "verbose"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io1 = (input3, _exceptionable2 = true) => null !== input3.issuer && void 0 !== input3.issuer && ("string" === typeof input3.issuer || "object" === typeof input3.issuer && null !== input3.issuer && $io2(input3.issuer, _exceptionable2)) && ("object" === typeof input3.credentialSubject && null !== input3.credentialSubject && false === Array.isArray(input3.credentialSubject) && $io3(input3.credentialSubject, _exceptionable2)) && (null !== input3.type && (void 0 === input3.type || "string" === typeof input3.type || Array.isArray(input3.type) && input3.type.every((elem, _index1) => "string" === typeof elem))) && (null !== input3["@context"] && void 0 !== input3["@context"] && ("string" === typeof input3["@context"] || (Array.isArray(input3["@context"]) && input3["@context"].every((elem, _index2) => null !== elem && void 0 !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && $io4(elem, _exceptionable2))) || "object" === typeof input3["@context"] && null !== input3["@context"] && false === Array.isArray(input3["@context"]) && $io4(input3["@context"], _exceptionable2)))) && "string" === typeof input3.issuanceDate && (void 0 === input3.expirationDate || "string" === typeof input3.expirationDate) && (void 0 === input3.credentialStatus || "object" === typeof input3.credentialStatus && null !== input3.credentialStatus && $io5(input3.credentialStatus, _exceptionable2)) && (void 0 === input3.id || "string" === typeof input3.id) && ("object" === typeof input3.proof && null !== input3.proof && false === Array.isArray(input3.proof) && $io6(input3.proof, _exceptionable2)) && Object.keys(input3).every((key) => {
      if (["issuer", "credentialSubject", "type", "@context", "issuanceDate", "expirationDate", "credentialStatus", "id", "proof"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io2 = (input3, _exceptionable2 = true) => "string" === typeof input3.id && Object.keys(input3).every((key) => {
      if (["id"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io3 = (input3, _exceptionable2 = true) => (void 0 === input3.id || "string" === typeof input3.id) && Object.keys(input3).every((key) => {
      if (["id"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io4 = (input3, _exceptionable2 = true) => Object.keys(input3).every((key) => {
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io5 = (input3, _exceptionable2 = true) => "string" === typeof input3.id && "string" === typeof input3.type && Object.keys(input3).every((key) => {
      if (["id", "type"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io6 = (input3, _exceptionable2 = true) => (void 0 === input3.type || "string" === typeof input3.type) && Object.keys(input3).every((key) => {
      if (["type"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io7 = (input3, _exceptionable2 = true) => null !== input3.credential && void 0 === input3.credential && (null !== input3.presentation && void 0 !== input3.presentation && ("string" === typeof input3.presentation || "object" === typeof input3.presentation && null !== input3.presentation && $io8(input3.presentation, _exceptionable2))) && (void 0 === input3.verbose || "boolean" === typeof input3.verbose) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["credential", "presentation", "verbose"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io8 = (input3, _exceptionable2 = true) => "string" === typeof input3.holder && (void 0 === input3.verifiableCredential || Array.isArray(input3.verifiableCredential) && input3.verifiableCredential.every((elem, _index3) => null !== elem && void 0 !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && $io1(elem, _exceptionable2)))) && (null !== input3.type && (void 0 === input3.type || "string" === typeof input3.type || Array.isArray(input3.type) && input3.type.every((elem, _index4) => "string" === typeof elem))) && (null !== input3["@context"] && void 0 !== input3["@context"] && ("string" === typeof input3["@context"] || (Array.isArray(input3["@context"]) && input3["@context"].every((elem, _index5) => null !== elem && void 0 !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && $io4(elem, _exceptionable2))) || "object" === typeof input3["@context"] && null !== input3["@context"] && false === Array.isArray(input3["@context"]) && $io4(input3["@context"], _exceptionable2)))) && (void 0 === input3.verifier || Array.isArray(input3.verifier) && input3.verifier.every((elem, _index6) => "string" === typeof elem)) && (void 0 === input3.issuanceDate || "string" === typeof input3.issuanceDate) && (void 0 === input3.expirationDate || "string" === typeof input3.expirationDate) && (void 0 === input3.id || "string" === typeof input3.id) && ("object" === typeof input3.proof && null !== input3.proof && false === Array.isArray(input3.proof) && $io6(input3.proof, _exceptionable2)) && Object.keys(input3).every((key) => {
      if (["holder", "verifiableCredential", "type", "@context", "verifier", "issuanceDate", "expirationDate", "id", "proof"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $iu0 = (input3, _exceptionable2 = true) => (() => {
      if (null !== input3.presentation && void 0 !== input3.presentation && ("string" === typeof input3.presentation || "object" === typeof input3.presentation && null !== input3.presentation && $io8(input3.presentation, false)))
        return $io7(input3, _exceptionable2);
      if (null !== input3.credential && void 0 !== input3.credential && ("string" === typeof input3.credential || "object" === typeof input3.credential && null !== input3.credential && $io1(input3.credential, false)))
        return $io0(input3, _exceptionable2);
      return false;
    })();
    return "object" === typeof input2 && null !== input2 && $iu0(input2, true);
  };
  if (false === __is(input)) {
    const $report = typia.createValidateEquals.report(errors);
    ((input2, _path, _exceptionable = true) => {
      const $join = typia.createValidateEquals.join;
      const $vo0 = (input3, _path2, _exceptionable2 = true) => [(null !== input3.credential || $report(_exceptionable2, {
        path: _path2 + ".credential",
        expected: "(VerifiableCredential | string)",
        value: input3.credential
      })) && (void 0 !== input3.credential || $report(_exceptionable2, {
        path: _path2 + ".credential",
        expected: "(VerifiableCredential | string)",
        value: input3.credential
      })) && ("string" === typeof input3.credential || ("object" === typeof input3.credential && null !== input3.credential || $report(_exceptionable2, {
        path: _path2 + ".credential",
        expected: "(VerifiableCredential | string)",
        value: input3.credential
      })) && $vo1(input3.credential, _path2 + ".credential", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credential",
        expected: "(VerifiableCredential | string)",
        value: input3.credential
      })), (null !== input3.presentation || $report(_exceptionable2, {
        path: _path2 + ".presentation",
        expected: "undefined",
        value: input3.presentation
      })) && (void 0 === input3.presentation || $report(_exceptionable2, {
        path: _path2 + ".presentation",
        expected: "undefined",
        value: input3.presentation
      })), void 0 === input3.verbose || "boolean" === typeof input3.verbose || $report(_exceptionable2, {
        path: _path2 + ".verbose",
        expected: "(boolean | undefined)",
        value: input3.verbose
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["credential", "presentation", "verbose"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo1 = (input3, _path2, _exceptionable2 = true) => [(null !== input3.issuer || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type.o1 | string)",
        value: input3.issuer
      })) && (void 0 !== input3.issuer || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type.o1 | string)",
        value: input3.issuer
      })) && ("string" === typeof input3.issuer || ("object" === typeof input3.issuer && null !== input3.issuer || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type.o1 | string)",
        value: input3.issuer
      })) && $vo2(input3.issuer, _path2 + ".issuer", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type.o1 | string)",
        value: input3.issuer
      })), ("object" === typeof input3.credentialSubject && null !== input3.credentialSubject && false === Array.isArray(input3.credentialSubject) || $report(_exceptionable2, {
        path: _path2 + ".credentialSubject",
        expected: "CredentialSubject",
        value: input3.credentialSubject
      })) && $vo3(input3.credentialSubject, _path2 + ".credentialSubject", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credentialSubject",
        expected: "CredentialSubject",
        value: input3.credentialSubject
      }), (null !== input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })) && (void 0 === input3.type || "string" === typeof input3.type || (Array.isArray(input3.type) || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })) && input3.type.map((elem, _index1) => "string" === typeof elem || $report(_exceptionable2, {
        path: _path2 + ".type[" + _index1 + "]",
        expected: "string",
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })), (null !== input3["@context"] || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) && (void 0 !== input3["@context"] || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) && ("string" === typeof input3["@context"] || (Array.isArray(input3["@context"]) && input3["@context"].map((elem, _index2) => (null !== elem || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index2 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && (void 0 !== elem || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index2 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index2 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && $vo4(elem, _path2 + '["@context"][' + _index2 + "]", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index2 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      }))).every((flag) => flag) || "object" === typeof input3["@context"] && null !== input3["@context"] && false === Array.isArray(input3["@context"]) && $vo4(input3["@context"], _path2 + '["@context"]', _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })), "string" === typeof input3.issuanceDate || $report(_exceptionable2, {
        path: _path2 + ".issuanceDate",
        expected: "string",
        value: input3.issuanceDate
      }), void 0 === input3.expirationDate || "string" === typeof input3.expirationDate || $report(_exceptionable2, {
        path: _path2 + ".expirationDate",
        expected: "(string | undefined)",
        value: input3.expirationDate
      }), void 0 === input3.credentialStatus || ("object" === typeof input3.credentialStatus && null !== input3.credentialStatus || $report(_exceptionable2, {
        path: _path2 + ".credentialStatus",
        expected: "(CredentialStatusReference | undefined)",
        value: input3.credentialStatus
      })) && $vo5(input3.credentialStatus, _path2 + ".credentialStatus", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credentialStatus",
        expected: "(CredentialStatusReference | undefined)",
        value: input3.credentialStatus
      }), void 0 === input3.id || "string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "(string | undefined)",
        value: input3.id
      }), ("object" === typeof input3.proof && null !== input3.proof && false === Array.isArray(input3.proof) || $report(_exceptionable2, {
        path: _path2 + ".proof",
        expected: "ProofType",
        value: input3.proof
      })) && $vo6(input3.proof, _path2 + ".proof", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".proof",
        expected: "ProofType",
        value: input3.proof
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["issuer", "credentialSubject", "type", "@context", "issuanceDate", "expirationDate", "credentialStatus", "id", "proof"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo2 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "string",
        value: input3.id
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo3 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.id || "string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "(string | undefined)",
        value: input3.id
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo4 = (input3, _path2, _exceptionable2 = true) => [false === _exceptionable2 || Object.keys(input3).map((key) => {
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo5 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "string",
        value: input3.id
      }), "string" === typeof input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "string",
        value: input3.type
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id", "type"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo6 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.type || "string" === typeof input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(string | undefined)",
        value: input3.type
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["type"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo7 = (input3, _path2, _exceptionable2 = true) => [(null !== input3.credential || $report(_exceptionable2, {
        path: _path2 + ".credential",
        expected: "undefined",
        value: input3.credential
      })) && (void 0 === input3.credential || $report(_exceptionable2, {
        path: _path2 + ".credential",
        expected: "undefined",
        value: input3.credential
      })), (null !== input3.presentation || $report(_exceptionable2, {
        path: _path2 + ".presentation",
        expected: "(VerifiablePresentation | string)",
        value: input3.presentation
      })) && (void 0 !== input3.presentation || $report(_exceptionable2, {
        path: _path2 + ".presentation",
        expected: "(VerifiablePresentation | string)",
        value: input3.presentation
      })) && ("string" === typeof input3.presentation || ("object" === typeof input3.presentation && null !== input3.presentation || $report(_exceptionable2, {
        path: _path2 + ".presentation",
        expected: "(VerifiablePresentation | string)",
        value: input3.presentation
      })) && $vo8(input3.presentation, _path2 + ".presentation", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".presentation",
        expected: "(VerifiablePresentation | string)",
        value: input3.presentation
      })), void 0 === input3.verbose || "boolean" === typeof input3.verbose || $report(_exceptionable2, {
        path: _path2 + ".verbose",
        expected: "(boolean | undefined)",
        value: input3.verbose
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["credential", "presentation", "verbose"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo8 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.holder || $report(_exceptionable2, {
        path: _path2 + ".holder",
        expected: "string",
        value: input3.holder
      }), void 0 === input3.verifiableCredential || (Array.isArray(input3.verifiableCredential) || $report(_exceptionable2, {
        path: _path2 + ".verifiableCredential",
        expected: "(Array<W3CVerifiableCredential> | undefined)",
        value: input3.verifiableCredential
      })) && input3.verifiableCredential.map((elem, _index3) => (null !== elem || $report(_exceptionable2, {
        path: _path2 + ".verifiableCredential[" + _index3 + "]",
        expected: "(VerifiableCredential | string)",
        value: elem
      })) && (void 0 !== elem || $report(_exceptionable2, {
        path: _path2 + ".verifiableCredential[" + _index3 + "]",
        expected: "(VerifiableCredential | string)",
        value: elem
      })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem || $report(_exceptionable2, {
        path: _path2 + ".verifiableCredential[" + _index3 + "]",
        expected: "(VerifiableCredential | string)",
        value: elem
      })) && $vo1(elem, _path2 + ".verifiableCredential[" + _index3 + "]", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".verifiableCredential[" + _index3 + "]",
        expected: "(VerifiableCredential | string)",
        value: elem
      }))).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".verifiableCredential",
        expected: "(Array<W3CVerifiableCredential> | undefined)",
        value: input3.verifiableCredential
      }), (null !== input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })) && (void 0 === input3.type || "string" === typeof input3.type || (Array.isArray(input3.type) || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })) && input3.type.map((elem, _index4) => "string" === typeof elem || $report(_exceptionable2, {
        path: _path2 + ".type[" + _index4 + "]",
        expected: "string",
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })), (null !== input3["@context"] || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) && (void 0 !== input3["@context"] || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) && ("string" === typeof input3["@context"] || (Array.isArray(input3["@context"]) && input3["@context"].map((elem, _index5) => (null !== elem || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index5 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && (void 0 !== elem || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index5 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index5 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && $vo4(elem, _path2 + '["@context"][' + _index5 + "]", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index5 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      }))).every((flag) => flag) || "object" === typeof input3["@context"] && null !== input3["@context"] && false === Array.isArray(input3["@context"]) && $vo4(input3["@context"], _path2 + '["@context"]', _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })), void 0 === input3.verifier || (Array.isArray(input3.verifier) || $report(_exceptionable2, {
        path: _path2 + ".verifier",
        expected: "(Array<string> | undefined)",
        value: input3.verifier
      })) && input3.verifier.map((elem, _index6) => "string" === typeof elem || $report(_exceptionable2, {
        path: _path2 + ".verifier[" + _index6 + "]",
        expected: "string",
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".verifier",
        expected: "(Array<string> | undefined)",
        value: input3.verifier
      }), void 0 === input3.issuanceDate || "string" === typeof input3.issuanceDate || $report(_exceptionable2, {
        path: _path2 + ".issuanceDate",
        expected: "(string | undefined)",
        value: input3.issuanceDate
      }), void 0 === input3.expirationDate || "string" === typeof input3.expirationDate || $report(_exceptionable2, {
        path: _path2 + ".expirationDate",
        expected: "(string | undefined)",
        value: input3.expirationDate
      }), void 0 === input3.id || "string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "(string | undefined)",
        value: input3.id
      }), ("object" === typeof input3.proof && null !== input3.proof && false === Array.isArray(input3.proof) || $report(_exceptionable2, {
        path: _path2 + ".proof",
        expected: "ProofType",
        value: input3.proof
      })) && $vo6(input3.proof, _path2 + ".proof", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".proof",
        expected: "ProofType",
        value: input3.proof
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["holder", "verifiableCredential", "type", "@context", "verifier", "issuanceDate", "expirationDate", "id", "proof"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vu0 = (input3, _path2, _exceptionable2 = true) => (() => {
        if (null !== input3.presentation && void 0 !== input3.presentation && ("string" === typeof input3.presentation || "object" === typeof input3.presentation && null !== input3.presentation && $vo8(input3.presentation, _path2 + ".presentation", false)))
          return $vo7(input3, _path2, _exceptionable2);
        if (null !== input3.credential && void 0 !== input3.credential && ("string" === typeof input3.credential || "object" === typeof input3.credential && null !== input3.credential && $vo1(input3.credential, _path2 + ".credential", false)))
          return $vo0(input3, _path2, _exceptionable2);
        return $report(_exceptionable2, {
          path: _path2,
          expected: "(__type.o2 | __type)",
          value: input3
        });
      })();
      return ("object" === typeof input2 && null !== input2 || $report(true, {
        path: _path + "",
        expected: "(__type | __type.o2)",
        value: input2
      })) && $vu0(input2, _path + "", true) || $report(true, {
        path: _path + "",
        expected: "(__type | __type.o2)",
        value: input2
      });
    })(input, "$input", true);
  }
  const success = 0 === errors.length;
  return {
    success,
    errors,
    data: success ? input : void 0
  };
};
var validateMascaState = (input) => {
  const errors = [];
  const __is = (input2, _exceptionable = true) => {
    typia.createValidateEquals.join;
    const $io0 = (input3, _exceptionable2 = true) => "object" === typeof input3.v1 && null !== input3.v1 && $io1(input3.v1, _exceptionable2) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["v1"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io1 = (input3, _exceptionable2 = true) => "object" === typeof input3.accountState && null !== input3.accountState && false === Array.isArray(input3.accountState) && $io2(input3.accountState, _exceptionable2) && "string" === typeof input3.currentAccount && ("object" === typeof input3.config && null !== input3.config && $io23(input3.config, _exceptionable2)) && (3 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["accountState", "currentAccount", "config"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io2 = (input3, _exceptionable2 = true) => Object.keys(input3).every((key) => {
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return "object" === typeof value && null !== value && $io3(value, _exceptionable2);
      return false;
    });
    const $io3 = (input3, _exceptionable2 = true) => "object" === typeof input3.polygon && null !== input3.polygon && $io4(input3.polygon, _exceptionable2) && ("object" === typeof input3.veramo && null !== input3.veramo && $io11(input3.veramo, _exceptionable2)) && ("object" === typeof input3.general && null !== input3.general && $io19(input3.general, _exceptionable2)) && (3 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["polygon", "veramo", "general"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io4 = (input3, _exceptionable2 = true) => "object" === typeof input3.state && null !== input3.state && $io5(input3.state, _exceptionable2) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["state"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io5 = (input3, _exceptionable2 = true) => "object" === typeof input3.iden3 && null !== input3.iden3 && $io6(input3.iden3, _exceptionable2) && ("object" === typeof input3.polygonid && null !== input3.polygonid && $io6(input3.polygonid, _exceptionable2)) && (2 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["iden3", "polygonid"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io6 = (input3, _exceptionable2 = true) => "object" === typeof input3.eth && null !== input3.eth && $io7(input3.eth, _exceptionable2) && ("object" === typeof input3.polygon && null !== input3.polygon && $io7(input3.polygon, _exceptionable2)) && (2 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["eth", "polygon"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io7 = (input3, _exceptionable2 = true) => "object" === typeof input3.main && null !== input3.main && $io8(input3.main, _exceptionable2) && ("object" === typeof input3.mumbai && null !== input3.mumbai && $io8(input3.mumbai, _exceptionable2)) && ("object" === typeof input3.goerli && null !== input3.goerli && $io8(input3.goerli, _exceptionable2)) && (3 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["main", "mumbai", "goerli"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io8 = (input3, _exceptionable2 = true) => "object" === typeof input3.credentials && null !== input3.credentials && false === Array.isArray(input3.credentials) && $io9(input3.credentials, _exceptionable2) && ("object" === typeof input3.identities && null !== input3.identities && false === Array.isArray(input3.identities) && $io9(input3.identities, _exceptionable2)) && ("object" === typeof input3.profiles && null !== input3.profiles && false === Array.isArray(input3.profiles) && $io9(input3.profiles, _exceptionable2)) && (Array.isArray(input3.merkleTreeMeta) && input3.merkleTreeMeta.every((elem, _index1) => "object" === typeof elem && null !== elem && $io10(elem, _exceptionable2))) && ("object" === typeof input3.merkleTree && null !== input3.merkleTree && false === Array.isArray(input3.merkleTree) && $io9(input3.merkleTree, _exceptionable2)) && (5 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["credentials", "identities", "profiles", "merkleTreeMeta", "merkleTree"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io9 = (input3, _exceptionable2 = true) => Object.keys(input3).every((key) => {
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return "string" === typeof value;
      return false;
    });
    const $io10 = (input3, _exceptionable2 = true) => "string" === typeof input3.treeId && "string" === typeof input3.identifier && (0 === input3.type || 1 === input3.type || 2 === input3.type) && (3 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["treeId", "identifier", "type"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io11 = (input3, _exceptionable2 = true) => "object" === typeof input3.credentials && null !== input3.credentials && false === Array.isArray(input3.credentials) && $io12(input3.credentials, _exceptionable2) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["credentials"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io12 = (input3, _exceptionable2 = true) => Object.keys(input3).every((key) => {
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return null !== value && void 0 !== value && ("string" === typeof value || "object" === typeof value && null !== value && $io13(value, _exceptionable2));
      return false;
    });
    const $io13 = (input3, _exceptionable2 = true) => null !== input3.issuer && void 0 !== input3.issuer && ("string" === typeof input3.issuer || "object" === typeof input3.issuer && null !== input3.issuer && $io14(input3.issuer, _exceptionable2)) && ("object" === typeof input3.credentialSubject && null !== input3.credentialSubject && false === Array.isArray(input3.credentialSubject) && $io15(input3.credentialSubject, _exceptionable2)) && (null !== input3.type && (void 0 === input3.type || "string" === typeof input3.type || Array.isArray(input3.type) && input3.type.every((elem, _index2) => "string" === typeof elem))) && (null !== input3["@context"] && void 0 !== input3["@context"] && ("string" === typeof input3["@context"] || (Array.isArray(input3["@context"]) && input3["@context"].every((elem, _index3) => null !== elem && void 0 !== elem && ("string" === typeof elem || "object" === typeof elem && null !== elem && false === Array.isArray(elem) && $io16(elem, _exceptionable2))) || "object" === typeof input3["@context"] && null !== input3["@context"] && false === Array.isArray(input3["@context"]) && $io16(input3["@context"], _exceptionable2)))) && "string" === typeof input3.issuanceDate && (void 0 === input3.expirationDate || "string" === typeof input3.expirationDate) && (void 0 === input3.credentialStatus || "object" === typeof input3.credentialStatus && null !== input3.credentialStatus && $io17(input3.credentialStatus, _exceptionable2)) && (void 0 === input3.id || "string" === typeof input3.id) && ("object" === typeof input3.proof && null !== input3.proof && false === Array.isArray(input3.proof) && $io18(input3.proof, _exceptionable2)) && Object.keys(input3).every((key) => {
      if (["issuer", "credentialSubject", "type", "@context", "issuanceDate", "expirationDate", "credentialStatus", "id", "proof"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io14 = (input3, _exceptionable2 = true) => "string" === typeof input3.id && Object.keys(input3).every((key) => {
      if (["id"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io15 = (input3, _exceptionable2 = true) => (void 0 === input3.id || "string" === typeof input3.id) && Object.keys(input3).every((key) => {
      if (["id"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io16 = (input3, _exceptionable2 = true) => Object.keys(input3).every((key) => {
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io17 = (input3, _exceptionable2 = true) => "string" === typeof input3.id && "string" === typeof input3.type && Object.keys(input3).every((key) => {
      if (["id", "type"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io18 = (input3, _exceptionable2 = true) => (void 0 === input3.type || "string" === typeof input3.type) && Object.keys(input3).every((key) => {
      if (["type"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      if (RegExp(/(.*)/).test(key))
        return true;
      return false;
    });
    const $io19 = (input3, _exceptionable2 = true) => "object" === typeof input3.account && null !== input3.account && $io20(input3.account, _exceptionable2) && (void 0 === input3.ceramicSession || "string" === typeof input3.ceramicSession) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["account", "ceramicSession"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io20 = (input3, _exceptionable2 = true) => "object" === typeof input3.ssi && null !== input3.ssi && $io21(input3.ssi, _exceptionable2) && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["ssi"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io21 = (input3, _exceptionable2 = true) => ("did:ethr" === input3.selectedMethod || "did:pkh" === input3.selectedMethod || "did:key" === input3.selectedMethod || "did:key:jwk_jcs-pub" === input3.selectedMethod || "did:jwk" === input3.selectedMethod || "did:iden3" === input3.selectedMethod || "did:polygonid" === input3.selectedMethod) && ("object" === typeof input3.storesEnabled && null !== input3.storesEnabled && $io22(input3.storesEnabled, _exceptionable2)) && (2 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["selectedMethod", "storesEnabled"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io22 = (input3, _exceptionable2 = true) => "boolean" === typeof input3.snap && "boolean" === typeof input3.ceramic && (2 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["snap", "ceramic"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io23 = (input3, _exceptionable2 = true) => "object" === typeof input3.snap && null !== input3.snap && $io24(input3.snap, _exceptionable2) && ("object" === typeof input3.dApp && null !== input3.dApp && $io25(input3.dApp, _exceptionable2)) && (2 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["snap", "dApp"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io24 = (input3, _exceptionable2 = true) => "boolean" === typeof input3.acceptedTerms && (1 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["acceptedTerms"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    const $io25 = (input3, _exceptionable2 = true) => "boolean" === typeof input3.disablePopups && (Array.isArray(input3.friendlyDapps) && input3.friendlyDapps.every((elem, _index4) => "string" === typeof elem)) && (2 === Object.keys(input3).length || Object.keys(input3).every((key) => {
      if (["disablePopups", "friendlyDapps"].some((prop) => key === prop))
        return true;
      const value = input3[key];
      if (void 0 === value)
        return true;
      return false;
    }));
    return "object" === typeof input2 && null !== input2 && $io0(input2, true);
  };
  if (false === __is(input)) {
    const $report = typia.createValidateEquals.report(errors);
    ((input2, _path, _exceptionable = true) => {
      const $join = typia.createValidateEquals.join;
      const $vo0 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.v1 && null !== input3.v1 || $report(_exceptionable2, {
        path: _path2 + ".v1",
        expected: "__type",
        value: input3.v1
      })) && $vo1(input3.v1, _path2 + ".v1", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".v1",
        expected: "__type",
        value: input3.v1
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["v1"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo1 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.accountState && null !== input3.accountState && false === Array.isArray(input3.accountState) || $report(_exceptionable2, {
        path: _path2 + ".accountState",
        expected: "Record<string, MascaAccountState>",
        value: input3.accountState
      })) && $vo2(input3.accountState, _path2 + ".accountState", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".accountState",
        expected: "Record<string, MascaAccountState>",
        value: input3.accountState
      }), "string" === typeof input3.currentAccount || $report(_exceptionable2, {
        path: _path2 + ".currentAccount",
        expected: "string",
        value: input3.currentAccount
      }), ("object" === typeof input3.config && null !== input3.config || $report(_exceptionable2, {
        path: _path2 + ".config",
        expected: "MascaConfig",
        value: input3.config
      })) && $vo23(input3.config, _path2 + ".config", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".config",
        expected: "MascaConfig",
        value: input3.config
      }), 3 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["accountState", "currentAccount", "config"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo2 = (input3, _path2, _exceptionable2 = true) => [false === _exceptionable2 || Object.keys(input3).map((key) => {
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return ("object" === typeof value && null !== value || $report(_exceptionable2, {
            path: _path2 + $join(key),
            expected: "MascaAccountState",
            value
          })) && $vo3(value, _path2 + $join(key), _exceptionable2) || $report(_exceptionable2, {
            path: _path2 + $join(key),
            expected: "MascaAccountState",
            value
          });
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo3 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.polygon && null !== input3.polygon || $report(_exceptionable2, {
        path: _path2 + ".polygon",
        expected: "__type.o1",
        value: input3.polygon
      })) && $vo4(input3.polygon, _path2 + ".polygon", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".polygon",
        expected: "__type.o1",
        value: input3.polygon
      }), ("object" === typeof input3.veramo && null !== input3.veramo || $report(_exceptionable2, {
        path: _path2 + ".veramo",
        expected: "__type.o2",
        value: input3.veramo
      })) && $vo11(input3.veramo, _path2 + ".veramo", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".veramo",
        expected: "__type.o2",
        value: input3.veramo
      }), ("object" === typeof input3.general && null !== input3.general || $report(_exceptionable2, {
        path: _path2 + ".general",
        expected: "__type.o4",
        value: input3.general
      })) && $vo19(input3.general, _path2 + ".general", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".general",
        expected: "__type.o4",
        value: input3.general
      }), 3 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["polygon", "veramo", "general"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo4 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.state && null !== input3.state || $report(_exceptionable2, {
        path: _path2 + ".state",
        expected: "PolygonState",
        value: input3.state
      })) && $vo5(input3.state, _path2 + ".state", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".state",
        expected: "PolygonState",
        value: input3.state
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["state"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo5 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.iden3 && null !== input3.iden3 || $report(_exceptionable2, {
        path: _path2 + ".iden3",
        expected: "Record<Blockchain.Ethereum | Blockchain.Polygon, Record<NetworkId.Main | NetworkId.Mumbai | NetworkId.Goerli, PolygonBaseState>>",
        value: input3.iden3
      })) && $vo6(input3.iden3, _path2 + ".iden3", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".iden3",
        expected: "Record<Blockchain.Ethereum | Blockchain.Polygon, Record<NetworkId.Main | NetworkId.Mumbai | NetworkId.Goerli, PolygonBaseState>>",
        value: input3.iden3
      }), ("object" === typeof input3.polygonid && null !== input3.polygonid || $report(_exceptionable2, {
        path: _path2 + ".polygonid",
        expected: "Record<Blockchain.Ethereum | Blockchain.Polygon, Record<NetworkId.Main | NetworkId.Mumbai | NetworkId.Goerli, PolygonBaseState>>",
        value: input3.polygonid
      })) && $vo6(input3.polygonid, _path2 + ".polygonid", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".polygonid",
        expected: "Record<Blockchain.Ethereum | Blockchain.Polygon, Record<NetworkId.Main | NetworkId.Mumbai | NetworkId.Goerli, PolygonBaseState>>",
        value: input3.polygonid
      }), 2 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["iden3", "polygonid"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo6 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.eth && null !== input3.eth || $report(_exceptionable2, {
        path: _path2 + ".eth",
        expected: "Record<NetworkId.Main | NetworkId.Mumbai | NetworkId.Goerli, PolygonBaseState>",
        value: input3.eth
      })) && $vo7(input3.eth, _path2 + ".eth", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".eth",
        expected: "Record<NetworkId.Main | NetworkId.Mumbai | NetworkId.Goerli, PolygonBaseState>",
        value: input3.eth
      }), ("object" === typeof input3.polygon && null !== input3.polygon || $report(_exceptionable2, {
        path: _path2 + ".polygon",
        expected: "Record<NetworkId.Main | NetworkId.Mumbai | NetworkId.Goerli, PolygonBaseState>",
        value: input3.polygon
      })) && $vo7(input3.polygon, _path2 + ".polygon", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".polygon",
        expected: "Record<NetworkId.Main | NetworkId.Mumbai | NetworkId.Goerli, PolygonBaseState>",
        value: input3.polygon
      }), 2 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["eth", "polygon"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo7 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.main && null !== input3.main || $report(_exceptionable2, {
        path: _path2 + ".main",
        expected: "PolygonBaseState",
        value: input3.main
      })) && $vo8(input3.main, _path2 + ".main", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".main",
        expected: "PolygonBaseState",
        value: input3.main
      }), ("object" === typeof input3.mumbai && null !== input3.mumbai || $report(_exceptionable2, {
        path: _path2 + ".mumbai",
        expected: "PolygonBaseState",
        value: input3.mumbai
      })) && $vo8(input3.mumbai, _path2 + ".mumbai", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".mumbai",
        expected: "PolygonBaseState",
        value: input3.mumbai
      }), ("object" === typeof input3.goerli && null !== input3.goerli || $report(_exceptionable2, {
        path: _path2 + ".goerli",
        expected: "PolygonBaseState",
        value: input3.goerli
      })) && $vo8(input3.goerli, _path2 + ".goerli", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".goerli",
        expected: "PolygonBaseState",
        value: input3.goerli
      }), 3 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["main", "mumbai", "goerli"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo8 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.credentials && null !== input3.credentials && false === Array.isArray(input3.credentials) || $report(_exceptionable2, {
        path: _path2 + ".credentials",
        expected: "Record<string, string>",
        value: input3.credentials
      })) && $vo9(input3.credentials, _path2 + ".credentials", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credentials",
        expected: "Record<string, string>",
        value: input3.credentials
      }), ("object" === typeof input3.identities && null !== input3.identities && false === Array.isArray(input3.identities) || $report(_exceptionable2, {
        path: _path2 + ".identities",
        expected: "Record<string, string>",
        value: input3.identities
      })) && $vo9(input3.identities, _path2 + ".identities", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".identities",
        expected: "Record<string, string>",
        value: input3.identities
      }), ("object" === typeof input3.profiles && null !== input3.profiles && false === Array.isArray(input3.profiles) || $report(_exceptionable2, {
        path: _path2 + ".profiles",
        expected: "Record<string, string>",
        value: input3.profiles
      })) && $vo9(input3.profiles, _path2 + ".profiles", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".profiles",
        expected: "Record<string, string>",
        value: input3.profiles
      }), (Array.isArray(input3.merkleTreeMeta) || $report(_exceptionable2, {
        path: _path2 + ".merkleTreeMeta",
        expected: "Array<IdentityMerkleTreeMetaInformation>",
        value: input3.merkleTreeMeta
      })) && input3.merkleTreeMeta.map((elem, _index1) => ("object" === typeof elem && null !== elem || $report(_exceptionable2, {
        path: _path2 + ".merkleTreeMeta[" + _index1 + "]",
        expected: "IdentityMerkleTreeMetaInformation",
        value: elem
      })) && $vo10(elem, _path2 + ".merkleTreeMeta[" + _index1 + "]", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".merkleTreeMeta[" + _index1 + "]",
        expected: "IdentityMerkleTreeMetaInformation",
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".merkleTreeMeta",
        expected: "Array<IdentityMerkleTreeMetaInformation>",
        value: input3.merkleTreeMeta
      }), ("object" === typeof input3.merkleTree && null !== input3.merkleTree && false === Array.isArray(input3.merkleTree) || $report(_exceptionable2, {
        path: _path2 + ".merkleTree",
        expected: "Record<string, string>",
        value: input3.merkleTree
      })) && $vo9(input3.merkleTree, _path2 + ".merkleTree", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".merkleTree",
        expected: "Record<string, string>",
        value: input3.merkleTree
      }), 5 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["credentials", "identities", "profiles", "merkleTreeMeta", "merkleTree"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo9 = (input3, _path2, _exceptionable2 = true) => [false === _exceptionable2 || Object.keys(input3).map((key) => {
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return "string" === typeof value || $report(_exceptionable2, {
            path: _path2 + $join(key),
            expected: "string",
            value
          });
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo10 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.treeId || $report(_exceptionable2, {
        path: _path2 + ".treeId",
        expected: "string",
        value: input3.treeId
      }), "string" === typeof input3.identifier || $report(_exceptionable2, {
        path: _path2 + ".identifier",
        expected: "string",
        value: input3.identifier
      }), 0 === input3.type || 1 === input3.type || 2 === input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(0 | 1 | 2)",
        value: input3.type
      }), 3 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["treeId", "identifier", "type"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo11 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.credentials && null !== input3.credentials && false === Array.isArray(input3.credentials) || $report(_exceptionable2, {
        path: _path2 + ".credentials",
        expected: "Record<string, W3CVerifiableCredential>",
        value: input3.credentials
      })) && $vo12(input3.credentials, _path2 + ".credentials", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credentials",
        expected: "Record<string, W3CVerifiableCredential>",
        value: input3.credentials
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["credentials"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo12 = (input3, _path2, _exceptionable2 = true) => [false === _exceptionable2 || Object.keys(input3).map((key) => {
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return (null !== value || $report(_exceptionable2, {
            path: _path2 + $join(key),
            expected: "(VerifiableCredential | string)",
            value
          })) && (void 0 !== value || $report(_exceptionable2, {
            path: _path2 + $join(key),
            expected: "(VerifiableCredential | string)",
            value
          })) && ("string" === typeof value || ("object" === typeof value && null !== value || $report(_exceptionable2, {
            path: _path2 + $join(key),
            expected: "(VerifiableCredential | string)",
            value
          })) && $vo13(value, _path2 + $join(key), _exceptionable2) || $report(_exceptionable2, {
            path: _path2 + $join(key),
            expected: "(VerifiableCredential | string)",
            value
          }));
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo13 = (input3, _path2, _exceptionable2 = true) => [(null !== input3.issuer || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type.o3 | string)",
        value: input3.issuer
      })) && (void 0 !== input3.issuer || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type.o3 | string)",
        value: input3.issuer
      })) && ("string" === typeof input3.issuer || ("object" === typeof input3.issuer && null !== input3.issuer || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type.o3 | string)",
        value: input3.issuer
      })) && $vo14(input3.issuer, _path2 + ".issuer", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".issuer",
        expected: "(__type.o3 | string)",
        value: input3.issuer
      })), ("object" === typeof input3.credentialSubject && null !== input3.credentialSubject && false === Array.isArray(input3.credentialSubject) || $report(_exceptionable2, {
        path: _path2 + ".credentialSubject",
        expected: "CredentialSubject",
        value: input3.credentialSubject
      })) && $vo15(input3.credentialSubject, _path2 + ".credentialSubject", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credentialSubject",
        expected: "CredentialSubject",
        value: input3.credentialSubject
      }), (null !== input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })) && (void 0 === input3.type || "string" === typeof input3.type || (Array.isArray(input3.type) || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })) && input3.type.map((elem, _index2) => "string" === typeof elem || $report(_exceptionable2, {
        path: _path2 + ".type[" + _index2 + "]",
        expected: "string",
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(Array<string> | string | undefined)",
        value: input3.type
      })), (null !== input3["@context"] || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) && (void 0 !== input3["@context"] || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) && ("string" === typeof input3["@context"] || (Array.isArray(input3["@context"]) && input3["@context"].map((elem, _index3) => (null !== elem || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index3 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && (void 0 !== elem || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index3 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && ("string" === typeof elem || ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index3 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      })) && $vo16(elem, _path2 + '["@context"][' + _index3 + "]", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + '["@context"][' + _index3 + "]",
        expected: "(Record<string, any> | string)",
        value: elem
      }))).every((flag) => flag) || "object" === typeof input3["@context"] && null !== input3["@context"] && false === Array.isArray(input3["@context"]) && $vo16(input3["@context"], _path2 + '["@context"]', _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })) || $report(_exceptionable2, {
        path: _path2 + '["@context"]',
        expected: "(Array<string | Record<string, any>> | Record<string, any> | string)",
        value: input3["@context"]
      })), "string" === typeof input3.issuanceDate || $report(_exceptionable2, {
        path: _path2 + ".issuanceDate",
        expected: "string",
        value: input3.issuanceDate
      }), void 0 === input3.expirationDate || "string" === typeof input3.expirationDate || $report(_exceptionable2, {
        path: _path2 + ".expirationDate",
        expected: "(string | undefined)",
        value: input3.expirationDate
      }), void 0 === input3.credentialStatus || ("object" === typeof input3.credentialStatus && null !== input3.credentialStatus || $report(_exceptionable2, {
        path: _path2 + ".credentialStatus",
        expected: "(CredentialStatusReference | undefined)",
        value: input3.credentialStatus
      })) && $vo17(input3.credentialStatus, _path2 + ".credentialStatus", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".credentialStatus",
        expected: "(CredentialStatusReference | undefined)",
        value: input3.credentialStatus
      }), void 0 === input3.id || "string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "(string | undefined)",
        value: input3.id
      }), ("object" === typeof input3.proof && null !== input3.proof && false === Array.isArray(input3.proof) || $report(_exceptionable2, {
        path: _path2 + ".proof",
        expected: "ProofType",
        value: input3.proof
      })) && $vo18(input3.proof, _path2 + ".proof", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".proof",
        expected: "ProofType",
        value: input3.proof
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["issuer", "credentialSubject", "type", "@context", "issuanceDate", "expirationDate", "credentialStatus", "id", "proof"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo14 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "string",
        value: input3.id
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo15 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.id || "string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "(string | undefined)",
        value: input3.id
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo16 = (input3, _path2, _exceptionable2 = true) => [false === _exceptionable2 || Object.keys(input3).map((key) => {
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo17 = (input3, _path2, _exceptionable2 = true) => ["string" === typeof input3.id || $report(_exceptionable2, {
        path: _path2 + ".id",
        expected: "string",
        value: input3.id
      }), "string" === typeof input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "string",
        value: input3.type
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["id", "type"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo18 = (input3, _path2, _exceptionable2 = true) => [void 0 === input3.type || "string" === typeof input3.type || $report(_exceptionable2, {
        path: _path2 + ".type",
        expected: "(string | undefined)",
        value: input3.type
      }), false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["type"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        if (RegExp(/(.*)/).test(key))
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag)].every((flag) => flag);
      const $vo19 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.account && null !== input3.account || $report(_exceptionable2, {
        path: _path2 + ".account",
        expected: "MascaAccountConfig",
        value: input3.account
      })) && $vo20(input3.account, _path2 + ".account", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".account",
        expected: "MascaAccountConfig",
        value: input3.account
      }), void 0 === input3.ceramicSession || "string" === typeof input3.ceramicSession || $report(_exceptionable2, {
        path: _path2 + ".ceramicSession",
        expected: "(string | undefined)",
        value: input3.ceramicSession
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["account", "ceramicSession"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo20 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.ssi && null !== input3.ssi || $report(_exceptionable2, {
        path: _path2 + ".ssi",
        expected: "__type.o5",
        value: input3.ssi
      })) && $vo21(input3.ssi, _path2 + ".ssi", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".ssi",
        expected: "__type.o5",
        value: input3.ssi
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["ssi"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo21 = (input3, _path2, _exceptionable2 = true) => ["did:ethr" === input3.selectedMethod || "did:pkh" === input3.selectedMethod || "did:key" === input3.selectedMethod || "did:key:jwk_jcs-pub" === input3.selectedMethod || "did:jwk" === input3.selectedMethod || "did:iden3" === input3.selectedMethod || "did:polygonid" === input3.selectedMethod || $report(_exceptionable2, {
        path: _path2 + ".selectedMethod",
        expected: '("did:ethr" | "did:iden3" | "did:jwk" | "did:key" | "did:key:jwk_jcs-pub" | "did:pkh" | "did:polygonid")',
        value: input3.selectedMethod
      }), ("object" === typeof input3.storesEnabled && null !== input3.storesEnabled || $report(_exceptionable2, {
        path: _path2 + ".storesEnabled",
        expected: 'Record<"snap" | "ceramic", boolean>',
        value: input3.storesEnabled
      })) && $vo22(input3.storesEnabled, _path2 + ".storesEnabled", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".storesEnabled",
        expected: 'Record<"snap" | "ceramic", boolean>',
        value: input3.storesEnabled
      }), 2 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["selectedMethod", "storesEnabled"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo22 = (input3, _path2, _exceptionable2 = true) => ["boolean" === typeof input3.snap || $report(_exceptionable2, {
        path: _path2 + ".snap",
        expected: "boolean",
        value: input3.snap
      }), "boolean" === typeof input3.ceramic || $report(_exceptionable2, {
        path: _path2 + ".ceramic",
        expected: "boolean",
        value: input3.ceramic
      }), 2 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["snap", "ceramic"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo23 = (input3, _path2, _exceptionable2 = true) => [("object" === typeof input3.snap && null !== input3.snap || $report(_exceptionable2, {
        path: _path2 + ".snap",
        expected: "__type.o6",
        value: input3.snap
      })) && $vo24(input3.snap, _path2 + ".snap", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".snap",
        expected: "__type.o6",
        value: input3.snap
      }), ("object" === typeof input3.dApp && null !== input3.dApp || $report(_exceptionable2, {
        path: _path2 + ".dApp",
        expected: "__type.o7",
        value: input3.dApp
      })) && $vo25(input3.dApp, _path2 + ".dApp", _exceptionable2) || $report(_exceptionable2, {
        path: _path2 + ".dApp",
        expected: "__type.o7",
        value: input3.dApp
      }), 2 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["snap", "dApp"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo24 = (input3, _path2, _exceptionable2 = true) => ["boolean" === typeof input3.acceptedTerms || $report(_exceptionable2, {
        path: _path2 + ".acceptedTerms",
        expected: "boolean",
        value: input3.acceptedTerms
      }), 1 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["acceptedTerms"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      const $vo25 = (input3, _path2, _exceptionable2 = true) => ["boolean" === typeof input3.disablePopups || $report(_exceptionable2, {
        path: _path2 + ".disablePopups",
        expected: "boolean",
        value: input3.disablePopups
      }), (Array.isArray(input3.friendlyDapps) || $report(_exceptionable2, {
        path: _path2 + ".friendlyDapps",
        expected: "Array<string>",
        value: input3.friendlyDapps
      })) && input3.friendlyDapps.map((elem, _index4) => "string" === typeof elem || $report(_exceptionable2, {
        path: _path2 + ".friendlyDapps[" + _index4 + "]",
        expected: "string",
        value: elem
      })).every((flag) => flag) || $report(_exceptionable2, {
        path: _path2 + ".friendlyDapps",
        expected: "Array<string>",
        value: input3.friendlyDapps
      }), 2 === Object.keys(input3).length || (false === _exceptionable2 || Object.keys(input3).map((key) => {
        if (["disablePopups", "friendlyDapps"].some((prop) => key === prop))
          return true;
        const value = input3[key];
        if (void 0 === value)
          return true;
        return $report(_exceptionable2, {
          path: _path2 + $join(key),
          expected: "undefined",
          value
        });
      }).every((flag) => flag))].every((flag) => flag);
      return ("object" === typeof input2 && null !== input2 || $report(true, {
        path: _path + "",
        expected: "MascaState",
        value: input2
      })) && $vo0(input2, _path + "", true) || $report(true, {
        path: _path + "",
        expected: "MascaState",
        value: input2
      });
    })(input, "$input", true);
  }
  const success = 0 === errors.length;
  return {
    success,
    errors,
    data: success ? input : void 0
  };
};
var isValidCreateCredentialRequest = (input, account, state) => {
  const res = validateCreateCredentialRequest(input);
  if (!res.success)
    throw new Error(handleIValidation(res));
  checkCredentialStore(input, account, state);
};
var isValidCreatePresentationRequest = (input) => {
  const res = validateCreatePresentationRequest(input);
  if (!res.success)
    throw new Error(handleIValidation(res));
  if (!input.vcs.length)
    throw new Error("invalid_argument: vcs");
};
var isValidDeleteCredentialsRequest = (input, account, state) => {
  const res = validateDeleteCredentialsRequest(input);
  if (!res.success)
    throw new Error(handleIValidation(res));
  checkCredentialStore(input, account, state);
};
var isValidQueryCredentialsRequest = (input, account, state) => {
  if (!input)
    return;
  const res = validateQueryCredentialsRequest(input);
  if (!res.success)
    throw new Error(handleIValidation(res));
  checkCredentialStore(input, account, state);
};
var isValidResolveDIDRequest = (input) => {
  const res = validateResolveDIDRequest(input);
  if (!res.success)
    throw new Error(handleIValidation(res));
};
var isValidSaveCredentialRequest = (input, account, state) => {
  checkCredentialStore(input, account, state);
  if (!(isW3CVerifiableCredential(input?.verifiableCredential) || isW3CCredential(input?.verifiableCredential))) {
    throw new Error("invalid_argument: input.verifiableCredential");
  }
};
var isValidSetCurrentAccountRequest = (input) => {
  const res = validateSetCurrentAccountRequest(input);
  if (!res.success)
    throw new Error(handleIValidation(res));
};
var isValidSetCredentialStoreRequest = (input) => {
  const res = validateSetCredentialStoreRequest(input);
  if (!res.success)
    throw new Error(handleIValidation(res));
};
var isValidSwitchMethodRequest = (input) => {
  const res = validateSwitchMethodRequest(input);
  if (!res.success)
    throw new Error(handleIValidation(res));
};
var isValidVerifyDataRequest = (input) => {
  const res = validateVerifyDataRequest(input);
  if (!res.success)
    throw new Error(handleIValidation(res));
};
var isValidImportStateBackupRequest = (input) => {
  if (!input)
    return;
  if (!input.serializedState || typeof input.serializedState !== "string")
    throw new Error("invalid_argument: input.serializedState");
};
var isValidMascaState = (input) => {
  const res = validateMascaState(input);
  if (!res.success)
    throw new Error(handleIValidation(res));
};

export { isJWT, isValidCreateCredentialRequest, isValidCreatePresentationRequest, isValidDeleteCredentialsRequest, isValidImportStateBackupRequest, isValidMascaState, isValidQueryCredentialsRequest, isValidResolveDIDRequest, isValidSaveCredentialRequest, isValidSetCredentialStoreRequest, isValidSetCurrentAccountRequest, isValidSwitchMethodRequest, isValidVerifyDataRequest };
