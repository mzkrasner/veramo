import { QueryCredentialsRequestParams, CreateCredentialRequestParams, SaveCredentialRequestParams, DeleteCredentialsRequestParams, CreatePresentationRequestParams, SetCredentialStoreRequestParams, SwitchMethodRequestParams, ResolveDIDRequestParams, VerifyDataRequestParams, SetCurrentAccountRequestParams, HandleCredentialOfferRequestParams, HandleAuthorizationRequestParams, SetCeramicSessionRequestParams, ImportStateBackupRequestParams, RemoveFriendlyDappParams } from './params.js';
import '@0xpolygonid/js-sdk';
import '@veramo/core';
import './constants.js';

interface QueryCredentials {
    method: 'queryCredentials';
    params: QueryCredentialsRequestParams;
}
interface CreateCredential {
    method: 'createCredential';
    params: CreateCredentialRequestParams;
}
interface SaveCredential {
    method: 'saveCredential';
    params: SaveCredentialRequestParams;
}
interface DeleteCredential {
    method: 'deleteCredential';
    params: DeleteCredentialsRequestParams;
}
interface CreatePresentation {
    method: 'createPresentation';
    params: CreatePresentationRequestParams;
}
interface SetCredentialStore {
    method: 'setCredentialStore';
    params: SetCredentialStoreRequestParams;
}
interface SwitchMethod {
    method: 'switchDIDMethod';
    params: SwitchMethodRequestParams;
}
interface TogglePopups {
    method: 'togglePopups';
}
interface GetDID {
    method: 'getDID';
}
interface GetMethod {
    method: 'getSelectedMethod';
}
interface GetAvailableMethods {
    method: 'getAvailableMethods';
}
interface GetCredentialStore {
    method: 'getCredentialStore';
}
interface GetAccountSettings {
    method: 'getAccountSettings';
}
interface GetSnapSettings {
    method: 'getSnapSettings';
}
interface GetAvailableCredentialStores {
    method: 'getAvailableCredentialStores';
}
interface ResolveDID {
    method: 'resolveDID';
    params: ResolveDIDRequestParams;
}
interface VerifyData {
    method: 'verifyData';
    params: VerifyDataRequestParams;
}
interface SetCurrentAccount {
    method: 'setCurrentAccount';
    params: SetCurrentAccountRequestParams;
}
interface HandleCredentialOffer {
    method: 'handleCredentialOffer';
    params: HandleCredentialOfferRequestParams;
}
interface HandleAuthorization {
    method: 'handleAuthorizationRequest';
    params: HandleAuthorizationRequestParams;
}
interface SetCeramicSession {
    method: 'setCeramicSession';
    params: SetCeramicSessionRequestParams;
}
interface ValidateStoredCeramicSession {
    method: 'validateStoredCeramicSession';
}
interface ExportStateBackup {
    method: 'exportStateBackup';
}
interface ImportStateBackup {
    method: 'importStateBackup';
    params: ImportStateBackupRequestParams;
}
interface AddFriendlyDapp {
    method: 'addFriendlyDapp';
}
interface RemoveFriendlyDapp {
    method: 'removeFriendlyDapp';
    params: RemoveFriendlyDappParams;
}
interface GetWalletId {
    method: 'getWalletId';
}

export { AddFriendlyDapp, CreateCredential, CreatePresentation, DeleteCredential, ExportStateBackup, GetAccountSettings, GetAvailableCredentialStores, GetAvailableMethods, GetCredentialStore, GetDID, GetMethod, GetSnapSettings, GetWalletId, HandleAuthorization, HandleCredentialOffer, ImportStateBackup, QueryCredentials, RemoveFriendlyDapp, ResolveDID, SaveCredential, SetCeramicSession, SetCredentialStore, SetCurrentAccount, SwitchMethod, TogglePopups, ValidateStoredCeramicSession, VerifyData };
