import { Result } from '@blockchain-lab-um/utils';
import { W3CVerifiableCredential, VerifiablePresentation, DIDResolutionResult, IVerifyResult, VerifiableCredential } from '@veramo/core';
import { AvailableMethods, AvailableCredentialStores } from './constants.js';
import { QueryCredentialsRequestParams, SaveCredentialOptions, CreatePresentationRequestParams, DeleteCredentialsOptions, VerifyDataRequestParams, CreateCredentialRequestParams, SetCurrentAccountRequestParams, HandleCredentialOfferRequestParams, HandleAuthorizationRequestParams, ImportStateBackupRequestParams } from './params.js';
import { QueryCredentialsRequestResult, SaveCredentialRequestResult } from './results.js';
import { MascaAccountConfig, MascaConfig } from './state.js';
import '@0xpolygonid/js-sdk';
import '@iden3/js-iden3-core';

interface MascaApi {
    queryCredentials(params?: QueryCredentialsRequestParams): Promise<Result<QueryCredentialsRequestResult[]>>;
    saveCredential(vc: W3CVerifiableCredential, options?: SaveCredentialOptions): Promise<Result<SaveCredentialRequestResult[]>>;
    createPresentation(params: CreatePresentationRequestParams): Promise<Result<VerifiablePresentation>>;
    togglePopups(): Promise<Result<boolean>>;
    getDID(): Promise<Result<string>>;
    getSelectedMethod(): Promise<Result<string>>;
    getAvailableMethods(): Promise<Result<string[]>>;
    switchDIDMethod(method: AvailableMethods): Promise<Result<AvailableMethods>>;
    getCredentialStore(): Promise<Result<Record<AvailableCredentialStores, boolean>>>;
    setCredentialStore(store: AvailableCredentialStores, value: boolean): Promise<Result<boolean>>;
    getAvailableCredentialStores(): Promise<Result<string[]>>;
    deleteCredential(id: string, options?: DeleteCredentialsOptions): Promise<Result<boolean[]>>;
    getAccountSettings(): Promise<Result<MascaAccountConfig>>;
    getSnapSettings(): Promise<Result<MascaConfig>>;
    resolveDID(did: string): Promise<Result<DIDResolutionResult>>;
    verifyData(params: VerifyDataRequestParams): Promise<Result<boolean | IVerifyResult>>;
    createCredential(params: CreateCredentialRequestParams): Promise<Result<VerifiableCredential>>;
    setCurrentAccount(params: SetCurrentAccountRequestParams): Promise<Result<boolean>>;
    handleCredentialOffer(params: HandleCredentialOfferRequestParams): Promise<Result<VerifiableCredential[]>>;
    handleAuthorizationRequest(params: HandleAuthorizationRequestParams): Promise<Result<void>>;
    setCeramicSession(serializedSession: string): Promise<Result<boolean>>;
    validateStoredCeramicSession(): Promise<Result<boolean>>;
    addFriendlyDapp(): Promise<Result<boolean>>;
    removeFriendlyDapp(id: string): Promise<Result<boolean>>;
    importStateBackup(params: ImportStateBackupRequestParams): Promise<Result<boolean>>;
    exportStateBackup(): Promise<Result<string>>;
    getWalletId(): Promise<Result<string>>;
}

export { MascaApi };
