declare const availableCredentialStores: readonly ["snap", "ceramic"];
type AvailableCredentialStores = (typeof availableCredentialStores)[number];
declare const isavailableCredentialStores: (x: string) => boolean;
declare const CURRENT_STATE_VERSION = "v1";
declare const externalSigMethods: readonly ["did:ethr", "did:pkh"];
type ExternalSigMethods = (typeof externalSigMethods)[number];
declare const isExternalSigMethods: (x: string) => boolean;
declare const veramoSupportedMethods: readonly ["did:ethr", "did:pkh", "did:key", "did:key:jwk_jcs-pub", "did:jwk"];
type VeramoSupportedMethods = (typeof veramoSupportedMethods)[number];
declare const isVeramoSupportedMethods: (x: string) => boolean;
declare const polygonSupportedMethods: readonly ["did:iden3", "did:polygonid"];
type PolygonSupportedMethods = (typeof polygonSupportedMethods)[number];
declare const isPolygonSupportedMethods: (x: string) => boolean;
declare const internalSigMethods: readonly ["did:key", "did:key:jwk_jcs-pub", "did:jwk", "did:iden3", "did:polygonid"];
type InternalSigMethods = (typeof internalSigMethods)[number];
declare const isInternalSigMethods: (x: string) => boolean;
declare const availableMethods: readonly ["did:ethr", "did:pkh", "did:key", "did:key:jwk_jcs-pub", "did:jwk", "did:iden3", "did:polygonid"];
type AvailableMethods = (typeof availableMethods)[number];
declare const isAvailableMethods: (x: string) => boolean;
type MethodsRequiringNetwork = (typeof externalSigMethods)[number];
declare const requiresNetwork: (x: string) => boolean;
declare const didMethodChainIdMapping: Record<MethodsRequiringNetwork, readonly string[]>;
declare const methodIndexMapping: Record<InternalSigMethods, number>;
declare const supportedProofFormats: readonly ["jwt", "lds", "EthereumEip712Signature2021"];
type SupportedProofFormats = (typeof supportedProofFormats)[number];
declare const isSupportedProofFormat: (x: string) => boolean;

export { AvailableCredentialStores, AvailableMethods, CURRENT_STATE_VERSION, ExternalSigMethods, InternalSigMethods, MethodsRequiringNetwork, PolygonSupportedMethods, SupportedProofFormats, VeramoSupportedMethods, availableCredentialStores, availableMethods, didMethodChainIdMapping, externalSigMethods, internalSigMethods, isAvailableMethods, isExternalSigMethods, isInternalSigMethods, isPolygonSupportedMethods, isSupportedProofFormat, isVeramoSupportedMethods, isavailableCredentialStores, methodIndexMapping, polygonSupportedMethods, requiresNetwork, supportedProofFormats, veramoSupportedMethods };
