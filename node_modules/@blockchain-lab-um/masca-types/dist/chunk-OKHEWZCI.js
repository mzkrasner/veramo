import { isIn } from '@blockchain-lab-um/utils';

// src/constants.ts
var availableCredentialStores = ["snap", "ceramic"];
var isavailableCredentialStores = (x) => isIn(availableCredentialStores, x);
var CURRENT_STATE_VERSION = "v1";
var externalSigMethods = ["did:ethr", "did:pkh"];
var isExternalSigMethods = (x) => isIn(externalSigMethods, x);
var veramoSupportedMethods = [
  "did:ethr",
  "did:pkh",
  "did:key",
  "did:key:jwk_jcs-pub",
  "did:jwk"
  // 'did:ebsi',
];
var isVeramoSupportedMethods = (x) => isIn(veramoSupportedMethods, x);
var polygonSupportedMethods = ["did:iden3", "did:polygonid"];
var isPolygonSupportedMethods = (x) => isIn(polygonSupportedMethods, x);
var internalSigMethods = [
  "did:key",
  "did:key:jwk_jcs-pub",
  "did:jwk",
  ...polygonSupportedMethods
];
var isInternalSigMethods = (x) => isIn(internalSigMethods, x);
var availableMethods = [
  ...externalSigMethods,
  ...internalSigMethods
];
var isAvailableMethods = (x) => isIn(availableMethods, x);
var requiresNetwork = (x) => isIn(externalSigMethods, x);
var didMethodChainIdMapping = {
  "did:ethr": ["*"],
  "did:pkh": ["0x1", "0x89"]
};
var methodIndexMapping = {
  "did:key": 0,
  "did:key:jwk_jcs-pub": 0,
  "did:jwk": 1,
  "did:iden3": 2,
  "did:polygonid": 3
};
var supportedProofFormats = [
  "jwt",
  "lds",
  "EthereumEip712Signature2021"
];
var isSupportedProofFormat = (x) => isIn(supportedProofFormats, x);

export { CURRENT_STATE_VERSION, availableCredentialStores, availableMethods, didMethodChainIdMapping, externalSigMethods, internalSigMethods, isAvailableMethods, isExternalSigMethods, isInternalSigMethods, isPolygonSupportedMethods, isSupportedProofFormat, isVeramoSupportedMethods, isavailableCredentialStores, methodIndexMapping, polygonSupportedMethods, requiresNetwork, supportedProofFormats, veramoSupportedMethods };
