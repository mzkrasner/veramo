import type { IAgentContext, IIdentifier, IKey, IKeyManager, IService } from '@veramo/core';
import { AbstractIdentifierProvider } from '@veramo/did-manager';
import { type ICreateKeyDidOptions } from './types/keyDidTypes.js';
type IContext = IAgentContext<IKeyManager>;
export declare class KeyDIDProvider extends AbstractIdentifierProvider {
    private defaultKms;
    constructor(options: {
        defaultKms: string;
    });
    createIdentifier({ kms, options }: {
        kms?: string;
        options?: ICreateKeyDidOptions;
    }, context: IContext): Promise<Omit<IIdentifier, 'provider'>>;
    updateIdentifier(_args: {
        did: string;
        kms?: string;
        alias?: string | undefined;
        options?: any;
    }, _context: IAgentContext<IKeyManager>): Promise<IIdentifier>;
    deleteIdentifier(identifier: IIdentifier, context: IContext): Promise<boolean>;
    addKey(_args: {
        identifier: IIdentifier;
        key: IKey;
        options?: any;
    }, _context: IContext): Promise<any>;
    addService(_args: {
        identifier: IIdentifier;
        service: IService;
        options?: any;
    }, _context: IContext): Promise<any>;
    removeKey(_args: {
        identifier: IIdentifier;
        kid: string;
        options?: any;
    }, _context: IContext): Promise<any>;
    removeService(_args: {
        identifier: IIdentifier;
        id: string;
        options?: any;
    }, _context: IContext): Promise<any>;
    private importOrGenerateKey;
}
export {};
