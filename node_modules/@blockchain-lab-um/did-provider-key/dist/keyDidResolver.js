import { decodePublicKey } from '@blockchain-lab-um/utils';
import { getResolver } from '@cef-ebsi/key-did-resolver';
import { Resolver, } from 'did-resolver';
import { curveResolverMap } from './curves.js';
import { checkDidComponents, getKeyType } from './keyDidUtils.js';
export const resolveDid = (did) => {
    const components = checkDidComponents(did);
    const publicKey = decodePublicKey(components.multibaseValue);
    const keyType = getKeyType(publicKey.code);
    if (!curveResolverMap[keyType]) {
        throw new Error('invalidDid: invalid key type');
    }
    return curveResolverMap[keyType]({
        didIdentifier: components.multibaseValue,
        publicKey,
        keyType,
    });
};
export const resolveSecp256k1Ebsi = async (did) => {
    const keyResolver = getResolver();
    const didResolver = new Resolver(keyResolver);
    const resolution = await didResolver.resolve(did);
    return resolution.didDocument;
};
const startsWithMap = {
    'did:key:zQ3s': resolveDid,
    'did:key:zDn': resolveDid,
    'did:key:z6Mk': resolveDid,
    'did:key:z2dm': resolveSecp256k1Ebsi,
    'did:key:zBhB': resolveSecp256k1Ebsi,
};
export const resolveDidKey = async (didUrl, parsed, _resolver, _options) => {
    try {
        const startsWith = parsed.did.substring(0, 12);
        if (startsWithMap[startsWith] !== undefined) {
            const didDocument = await startsWithMap[startsWith](didUrl);
            return {
                didDocumentMetadata: {},
                didResolutionMetadata: {},
                didDocument,
            };
        }
        return {
            didDocumentMetadata: {},
            didResolutionMetadata: {
                error: 'invalidDid',
                message: 'unsupported key type for did:key',
            },
            didDocument: null,
        };
    }
    catch (err) {
        return {
            didDocumentMetadata: {},
            didResolutionMetadata: {
                error: 'invalidDid',
                message: err.toString(),
            },
            didDocument: null,
        };
    }
};
export function getDidKeyResolver() {
    return { key: resolveDidKey };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5RGlkUmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMva2V5RGlkUmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN6RCxPQUFPLEVBQ0wsUUFBUSxHQU9ULE1BQU0sY0FBYyxDQUFDO0FBRXRCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHbEUsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBVyxFQUF3QixFQUFFO0lBQzlELE1BQU0sVUFBVSxHQUFrQixrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxRCxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzdELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFM0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzlCLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztLQUNqRDtJQUVELE9BQU8sZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsYUFBYSxFQUFFLFVBQVUsQ0FBQyxjQUFjO1FBQ3hDLFNBQVM7UUFDVCxPQUFPO0tBQ1IsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxFQUN2QyxHQUFXLEVBQ1csRUFBRTtJQUN4QixNQUFNLFdBQVcsR0FBRyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxNQUFNLFdBQVcsR0FBRyxJQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5QyxNQUFNLFVBQVUsR0FBRyxNQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEQsT0FBTyxVQUFVLENBQUMsV0FBWSxDQUFDO0FBQ2pDLENBQUMsQ0FBQztBQUlGLE1BQU0sYUFBYSxHQUF1QztJQUN4RCxjQUFjLEVBQUUsVUFBVTtJQUMxQixhQUFhLEVBQUUsVUFBVTtJQUN6QixjQUFjLEVBQUUsVUFBVTtJQUMxQixjQUFjLEVBQUUsb0JBQW9CO0lBQ3BDLGNBQWMsRUFBRSxvQkFBb0I7Q0FDckMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBZ0IsS0FBSyxFQUM3QyxNQUFjLEVBQ2QsTUFBaUIsRUFDakIsU0FBcUIsRUFDckIsUUFBOEIsRUFDQSxFQUFFO0lBQ2hDLElBQUk7UUFDRixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFL0MsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQzNDLE1BQU0sV0FBVyxHQUFHLE1BQU0sYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzVELE9BQU87Z0JBQ0wsbUJBQW1CLEVBQUUsRUFBRTtnQkFDdkIscUJBQXFCLEVBQUUsRUFBRTtnQkFDekIsV0FBVzthQUNXLENBQUM7U0FDMUI7UUFFRCxPQUFPO1lBQ0wsbUJBQW1CLEVBQUUsRUFBRTtZQUN2QixxQkFBcUIsRUFBRTtnQkFDckIsS0FBSyxFQUFFLFlBQVk7Z0JBQ25CLE9BQU8sRUFBRSxrQ0FBa0M7YUFDNUM7WUFDRCxXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFDO0tBQ0g7SUFBQyxPQUFPLEdBQVksRUFBRTtRQUNyQixPQUFPO1lBQ0wsbUJBQW1CLEVBQUUsRUFBRTtZQUN2QixxQkFBcUIsRUFBRTtnQkFDckIsS0FBSyxFQUFFLFlBQVk7Z0JBQ25CLE9BQU8sRUFBRyxHQUFjLENBQUMsUUFBUSxFQUFFO2FBQ3BDO1lBQ0QsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FBQztLQUNIO0FBQ0gsQ0FBQyxDQUFDO0FBT0YsTUFBTSxVQUFVLGlCQUFpQjtJQUMvQixPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxDQUFDO0FBQ2hDLENBQUMifQ==