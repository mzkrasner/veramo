import { CodecName } from '@blockchain-lab-um/utils';
import { DIDDocument } from 'did-resolver';
export interface ICreateKeyDidOptions {
    keyType?: KeyType;
    privateKeyHex?: string;
    type?: 'ebsi';
}
export interface IResolveDidParams {
    didIdentifier: string;
    publicKey: {
        pubKeyBytes: Uint8Array;
        code: number;
    };
    keyType: KeyType;
}
export declare const KEY_TYPES: readonly ["Ed25519", "X25519", "Secp256k1", "Secp256r1"];
export type KeyType = (typeof KEY_TYPES)[number];
export declare const isSupportedKeyType: (keyType: string) => boolean;
export declare const MULTICODEC_NAME_TO_KEY_TYPE: Record<string, KeyType>;
export declare const KEY_TYPE_TO_MULTICODEC_NAME: Record<KeyType, CodecName>;
export interface DidComponents {
    scheme: string;
    method: string;
    version: string;
    multibaseValue: string;
}
export type CurveResolutionFunction = (params: IResolveDidParams) => Promise<DIDDocument>;
