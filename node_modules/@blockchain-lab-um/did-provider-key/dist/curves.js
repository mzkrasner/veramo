import { createJWK, uint8ArrayToHex } from '@blockchain-lab-um/utils';
import { convertPublicKeyToX25519 } from '@stablelib/ed25519';
export function buildDidDoc({ didIdentifier, context, verificationMethod, keyAgreement, }) {
    const didDocument = {
        id: `did:key:${didIdentifier}`,
        '@context': ['https://www.w3.org/ns/did/v1', ...context],
        assertionMethod: [`did:key:${didIdentifier}#${didIdentifier}`],
        authentication: [`did:key:${didIdentifier}#${didIdentifier}`],
        verificationMethod: [verificationMethod],
        ...(keyAgreement && { keyAgreement: [keyAgreement] }),
    };
    return didDocument;
}
export function resolveSecp256k1(params) {
    const { publicKey, keyType, didIdentifier } = params;
    const pk = uint8ArrayToHex(publicKey.pubKeyBytes);
    const jwk = createJWK(keyType, pk);
    if (!jwk)
        throw new Error('Cannot create JWK');
    const verificationMethod = {
        id: `did:key:${didIdentifier}#${didIdentifier}`,
        type: 'EcdsaSecp256k1VerificationKey2019',
        controller: `did:key:${didIdentifier}`,
        publicKeyJwk: jwk,
    };
    const context = [
        'https://w3id.org/security#EcdsaSecp256k1VerificationKey2019',
        'https://w3id.org/security#publicKeyJwk',
    ];
    return Promise.resolve(buildDidDoc({ didIdentifier, context, verificationMethod }));
}
export function resolveEd25519(params) {
    const { publicKey, didIdentifier } = params;
    const x25519Key = uint8ArrayToHex(convertPublicKeyToX25519(publicKey.pubKeyBytes));
    const verificationMethod = {
        id: `did:key:${didIdentifier}#${didIdentifier}`,
        type: 'Ed25519VerificationKey2020',
        controller: `did:key:${didIdentifier}`,
        publicKeyMultibase: didIdentifier,
    };
    const keyAgreement = {
        id: `did:key:${didIdentifier}#${x25519Key}`,
        type: 'X25519KeyAgreementKey2020',
        controller: `did:key:${didIdentifier}`,
        publicKeyMultibase: x25519Key,
    };
    const context = [
        'https://w3id.org/security/suites/ed25519-2020/v1',
        'https://w3id.org/security/suites/x25519-2020/v1',
    ];
    return Promise.resolve(buildDidDoc({ didIdentifier, context, verificationMethod, keyAgreement }));
}
export const curveResolverMap = {
    Secp256k1: resolveSecp256k1,
    Ed25519: resolveEd25519,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VydmVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2N1cnZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBZTlELE1BQU0sVUFBVSxXQUFXLENBQUMsRUFDMUIsYUFBYSxFQUNiLE9BQU8sRUFDUCxrQkFBa0IsRUFDbEIsWUFBWSxHQUNNO0lBQ2xCLE1BQU0sV0FBVyxHQUFnQjtRQUMvQixFQUFFLEVBQUUsV0FBVyxhQUFhLEVBQUU7UUFDOUIsVUFBVSxFQUFFLENBQUMsOEJBQThCLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDeEQsZUFBZSxFQUFFLENBQUMsV0FBVyxhQUFhLElBQUksYUFBYSxFQUFFLENBQUM7UUFDOUQsY0FBYyxFQUFFLENBQUMsV0FBVyxhQUFhLElBQUksYUFBYSxFQUFFLENBQUM7UUFDN0Qsa0JBQWtCLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztRQUN4QyxHQUFHLENBQUMsWUFBWSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQztLQUN0RCxDQUFDO0lBRUYsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FDOUIsTUFBeUI7SUFFekIsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQ3JELE1BQU0sRUFBRSxHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEQsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQWUsQ0FBQztJQUVqRCxJQUFJLENBQUMsR0FBRztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUUvQyxNQUFNLGtCQUFrQixHQUFHO1FBQ3pCLEVBQUUsRUFBRSxXQUFXLGFBQWEsSUFBSSxhQUFhLEVBQUU7UUFDL0MsSUFBSSxFQUFFLG1DQUFtQztRQUN6QyxVQUFVLEVBQUUsV0FBVyxhQUFhLEVBQUU7UUFDdEMsWUFBWSxFQUFFLEdBQUc7S0FDSSxDQUFDO0lBRXhCLE1BQU0sT0FBTyxHQUFHO1FBQ2QsNkRBQTZEO1FBQzdELHdDQUF3QztLQUN6QyxDQUFDO0lBRUYsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUNwQixXQUFXLENBQUMsRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FDNUQsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUM1QixNQUF5QjtJQUV6QixNQUFNLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUM1QyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQy9CLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FDaEQsQ0FBQztJQUVGLE1BQU0sa0JBQWtCLEdBQUc7UUFDekIsRUFBRSxFQUFFLFdBQVcsYUFBYSxJQUFJLGFBQWEsRUFBRTtRQUMvQyxJQUFJLEVBQUUsNEJBQTRCO1FBQ2xDLFVBQVUsRUFBRSxXQUFXLGFBQWEsRUFBRTtRQUN0QyxrQkFBa0IsRUFBRSxhQUFhO0tBQ1osQ0FBQztJQUV4QixNQUFNLFlBQVksR0FBRztRQUNuQixFQUFFLEVBQUUsV0FBVyxhQUFhLElBQUksU0FBUyxFQUFFO1FBQzNDLElBQUksRUFBRSwyQkFBMkI7UUFDakMsVUFBVSxFQUFFLFdBQVcsYUFBYSxFQUFFO1FBQ3RDLGtCQUFrQixFQUFFLFNBQVM7S0FDUixDQUFDO0lBRXhCLE1BQU0sT0FBTyxHQUFHO1FBQ2Qsa0RBQWtEO1FBQ2xELGlEQUFpRDtLQUNsRCxDQUFDO0lBRUYsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUNwQixXQUFXLENBQUMsRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxDQUFDLENBQzFFLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQTRDO0lBQ3ZFLFNBQVMsRUFBRSxnQkFBZ0I7SUFDM0IsT0FBTyxFQUFFLGNBQWM7Q0FDeEIsQ0FBQyJ9