import { createJWK, encodePublicKey, getCompressedPublicKey, } from '@blockchain-lab-um/utils';
import { util } from '@cef-ebsi/key-did-resolver';
import { AbstractIdentifierProvider } from '@veramo/did-manager';
import { isSupportedKeyType, KEY_TYPE_TO_MULTICODEC_NAME, } from './types/keyDidTypes.js';
export class KeyDIDProvider extends AbstractIdentifierProvider {
    constructor(options) {
        super();
        this.defaultKms = options.defaultKms;
    }
    async createIdentifier({ kms, options }, context) {
        const keyType = options?.keyType && isSupportedKeyType(options.keyType)
            ? options.keyType
            : 'Ed25519';
        const key = await this.importOrGenerateKey({
            kms: kms ?? this.defaultKms,
            options: {
                keyType,
                ...(options?.privateKeyHex && {
                    privateKeyHex: options.privateKeyHex,
                }),
            },
        }, context);
        if (options?.type === 'ebsi') {
            const compressedKey = keyType === 'Secp256k1'
                ? getCompressedPublicKey(`0x${key.publicKeyHex}`)
                : key.publicKeyHex;
            const jwk = createJWK(keyType, compressedKey);
            const did = util.createDid(jwk);
            const identifier = {
                did,
                controllerKeyId: key.kid,
                keys: [key],
                services: [],
            };
            return identifier;
        }
        const compressedKey = keyType === 'Secp256k1'
            ? getCompressedPublicKey(`0x${key.publicKeyHex}`)
            : key.publicKeyHex;
        const methodSpecificId = encodePublicKey(Buffer.from(compressedKey, 'hex'), KEY_TYPE_TO_MULTICODEC_NAME[keyType]);
        const identifier = {
            did: `did:key:${methodSpecificId}`,
            controllerKeyId: key.kid,
            keys: [key],
            services: [],
        };
        return identifier;
    }
    async updateIdentifier(_args, _context) {
        throw new Error('KeyDIDProvider updateIdentifier not supported yet.');
    }
    async deleteIdentifier(identifier, context) {
        for (const { kid } of identifier.keys) {
            await context.agent.keyManagerDelete({ kid });
        }
        return true;
    }
    async addKey(_args, _context) {
        throw Error('KeyDIDProvider addKey not supported');
    }
    async addService(_args, _context) {
        throw Error('KeyDIDProvider addService not supported');
    }
    async removeKey(_args, _context) {
        throw Error('KeyDIDProvider removeKey not supported');
    }
    async removeService(_args, _context) {
        throw Error('KeyDIDProvider removeService not supported');
    }
    async importOrGenerateKey(args, context) {
        if (args.options.privateKeyHex) {
            return context.agent.keyManagerImport({
                kms: args.kms || this.defaultKms,
                type: args.options.keyType,
                privateKeyHex: args.options.privateKeyHex,
            });
        }
        return context.agent.keyManagerCreate({
            kms: args.kms || this.defaultKms,
            type: args.options.keyType,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5RGlkUHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMva2V5RGlkUHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxlQUFlLEVBQ2Ysc0JBQXNCLEdBQ3ZCLE1BQU0sMEJBQTBCLENBQUM7QUFDbEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBVWxELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpFLE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsMkJBQTJCLEdBRTVCLE1BQU0sd0JBQXdCLENBQUM7QUFTaEMsTUFBTSxPQUFPLGNBQWUsU0FBUSwwQkFBMEI7SUFHNUQsWUFBWSxPQUErQjtRQUN6QyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsS0FBSyxDQUFDLGdCQUFnQixDQUNwQixFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQW9ELEVBQ2xFLE9BQWlCO1FBRWpCLE1BQU0sT0FBTyxHQUNYLE9BQU8sRUFBRSxPQUFPLElBQUksa0JBQWtCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUNyRCxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU87WUFDakIsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUVoQixNQUFNLEdBQUcsR0FBbUIsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQ3hEO1lBQ0UsR0FBRyxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVTtZQUMzQixPQUFPLEVBQUU7Z0JBQ1AsT0FBTztnQkFDUCxHQUFHLENBQUMsT0FBTyxFQUFFLGFBQWEsSUFBSTtvQkFDNUIsYUFBYSxFQUFFLE9BQU8sQ0FBQyxhQUFhO2lCQUNyQyxDQUFDO2FBQ0g7U0FDRixFQUNELE9BQU8sQ0FDUixDQUFDO1FBRUYsSUFBSSxPQUFPLEVBQUUs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