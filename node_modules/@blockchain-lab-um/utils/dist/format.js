import { varint } from 'multiformats';
import { base58btc } from 'multiformats/bases/base58';
import secp256k1 from 'secp256k1';
import { MULTICODEC_NAME_TO_CODE } from './multicodecs.js';
const { publicKeyConvert } = secp256k1;
export const encodePublicKey = (pubKeyBytes, multicodec) => {
    if (MULTICODEC_NAME_TO_CODE[multicodec]) {
        const code = parseInt(MULTICODEC_NAME_TO_CODE[multicodec], 16);
        const size = pubKeyBytes.byteLength;
        const sizeOffset = varint.encodingLength(code);
        const bytes = new Uint8Array(sizeOffset + size);
        varint.encodeTo(code, bytes, 0);
        bytes.set(pubKeyBytes, sizeOffset);
        return base58btc.encode(bytes);
    }
    throw new Error('multicodec not recognized');
};
export const decodePublicKey = (publicKey) => {
    const multicodecPubKey = base58btc.decode(publicKey);
    const [code, sizeOffset] = varint.decode(multicodecPubKey);
    const pubKeyBytes = multicodecPubKey.slice(sizeOffset);
    return {
        pubKeyBytes,
        code,
    };
};
export function uint8ArrayToHex(arr) {
    return Buffer.from(arr).toString('hex');
}
export function hexToUint8Array(str) {
    return new Uint8Array(Buffer.from(str, 'hex'));
}
export function getCompressedPublicKey(publicKey) {
    return uint8ArrayToHex(publicKeyConvert(hexToUint8Array(publicKey.slice(2)), true));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Zvcm1hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN0RCxPQUFPLFNBQVMsTUFBTSxXQUFXLENBQUM7QUFFbEMsT0FBTyxFQUFFLHVCQUF1QixFQUFrQixNQUFNLGtCQUFrQixDQUFDO0FBRTNFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLFNBQVMsQ0FBQztBQVF2QyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FDN0IsV0FBdUIsRUFDdkIsVUFBcUIsRUFDYixFQUFFO0lBQ1YsSUFBSSx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUN2QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0QsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQztRQUNwQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRS9DLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFbkMsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2hDO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQy9DLENBQUMsQ0FBQztBQVFGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLFNBQWlCLEVBQUUsRUFBRTtJQUNuRCxNQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckQsTUFBTSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDM0QsTUFBTSxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXZELE9BQU87UUFDTCxXQUFXO1FBQ1gsSUFBSTtLQUNMLENBQUM7QUFDSixDQUFDLENBQUM7QUFPRixNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQWU7SUFDN0MsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBT0QsTUFBTSxVQUFVLGVBQWUsQ0FBQyxHQUFXO0lBQ3pDLE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBT0QsTUFBTSxVQUFVLHNCQUFzQixDQUFDLFNBQWlCO0lBQ3RELE9BQU8sZUFBZSxDQUNwQixnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUM1RCxDQUFDO0FBQ0osQ0FBQyJ9