import { Signer } from '@ethersproject/abstract-signer';
import { getAddress } from '@ethersproject/address';
import { resolveProperties } from '@ethersproject/properties';
import { computeAddress, serialize } from '@ethersproject/transactions';
/**
 * Creates an `@ethersproject/abstract-signer` implementation by wrapping
 * a veramo agent with a key-manager that should be capable of `eth_signTransaction`
 *
 * @internal This is exported for convenience, not meant to be supported as part of the public API
 */
export class KmsEthereumSigner extends Signer {
    context;
    controllerKey;
    provider;
    constructor(controllerKey, context, provider) {
        super();
        this.controllerKey = controllerKey;
        this.context = context;
        this.provider = provider;
    }
    async getAddress() {
        // publicKeyHex is not available when using web3provider
        if (this.controllerKey.meta?.account) {
            return this.controllerKey.meta?.account;
        }
        return computeAddress('0x' + this.controllerKey.publicKeyHex);
    }
    async signTransaction(transaction) {
        const tx = await resolveProperties(transaction);
        if (tx.from != null) {
            const thisAddress = await this.getAddress();
            if (getAddress(tx.from) !== thisAddress) {
                throw new Error(`transaction from address mismatch ${transaction.from} != ${thisAddress}`);
            }
            delete tx.from;
        }
        const signature = await this.context.agent.keyManagerSign({
            keyRef: this.controllerKey.kid,
            data: serialize(tx),
            algorithm: 'eth_signTransaction',
            encoding: 'base16',
        });
        return signature;
    }
    async _signTypedData(domain, types, value) {
        const data = JSON.stringify({
            domain: domain,
            types: types,
            message: value,
        });
        return this.context.agent.keyManagerSign({
            keyRef: this.controllerKey.kid,
            algorithm: 'eth_signTypedData',
            data: data,
        });
    }
    signMessage(message) {
        throw new Error('not_implemented: signMessage() Method not implemented by KmsEthereumSigner.');
    }
    connect(provider) {
        return new KmsEthereumSigner(this.controllerKey, this.context, provider);
    }
}
//# sourceMappingURL=kms-eth-signer.js.map