{
  "version": 3,
  "sources": ["../../node_modules/@esbuild-plugins/node-globals-polyfill/_virtual-process-polyfill_.js", "../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js", "../../node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js", "node-modules-polyfills:events", "node-modules-polyfills-commonjs:events", "../../node_modules/readable-stream/lib/internal/streams/stream-browser.js", "node-modules-polyfills:buffer", "node-modules-polyfills-commonjs:buffer", "node-modules-polyfills:process", "../../node_modules/rollup-plugin-node-polyfills/polyfills/inherits.js", "node-modules-polyfills:util", "node-modules-polyfills-commonjs:util", "../../node_modules/readable-stream/lib/internal/streams/buffer_list.js", "../../node_modules/readable-stream/lib/internal/streams/destroy.js", "../../node_modules/readable-stream/errors-browser.js", "../../node_modules/readable-stream/lib/internal/streams/state.js", "../../node_modules/inherits/inherits_browser.js", "../../node_modules/util-deprecate/browser.js", "../../node_modules/readable-stream/lib/_stream_writable.js", "../../node_modules/readable-stream/lib/_stream_duplex.js", "../../node_modules/safe-buffer/index.js", "../../node_modules/string_decoder/lib/string_decoder.js", "../../node_modules/readable-stream/lib/internal/streams/end-of-stream.js", "../../node_modules/readable-stream/lib/internal/streams/async_iterator.js", "../../node_modules/readable-stream/lib/internal/streams/from-browser.js", "../../node_modules/readable-stream/lib/_stream_readable.js", "../../node_modules/readable-stream/lib/_stream_transform.js", "../../node_modules/readable-stream/lib/_stream_passthrough.js", "../../node_modules/readable-stream/lib/internal/streams/pipeline.js", "../../node_modules/readable-stream/readable-browser.js", "../../node_modules/blake-hash/lib/api/blake.js", "../../node_modules/blake-hash/lib/api/index.js", "../../node_modules/blake-hash/lib/blake.js", "../../node_modules/blake-hash/lib/blake256.js", "../../node_modules/blake-hash/lib/blake224.js", "../../node_modules/blake-hash/lib/blake512.js", "../../node_modules/blake-hash/lib/blake384.js", "../../node_modules/blake-hash/lib/index.js", "../../node_modules/blake-hash/js.js", "../../node_modules/wasmcurves/src/utils.js", "../../node_modules/wasmcurves/src/build_int.js", "../../node_modules/wasmcurves/src/build_timesscalar.js", "../../node_modules/wasmcurves/src/build_batchinverse.js", "../../node_modules/wasmcurves/src/build_batchconvertion.js", "../../node_modules/wasmcurves/src/build_batchop.js", "../../node_modules/wasmcurves/src/bigint.js", "../../node_modules/wasmcurves/src/build_f1m.js", "../../node_modules/wasmcurves/src/build_f1.js", "../../node_modules/wasmcurves/src/build_f2m.js", "../../node_modules/wasmcurves/src/build_f3m.js", "../../node_modules/wasmcurves/src/build_timesscalarnaf.js", "../../node_modules/wasmcurves/src/build_multiexp.js", "../../node_modules/wasmcurves/src/build_curve_jacobian_a0.js", "../../node_modules/wasmcurves/src/build_fft.js", "../../node_modules/wasmcurves/src/build_pol.js", "../../node_modules/wasmcurves/src/build_qap.js", "../../node_modules/wasmcurves/src/build_applykey.js", "../../node_modules/wasmcurves/src/bn128/build_bn128.js", "../../node_modules/wasmcurves/src/bls12381/build_bls12381.js", "../../node_modules/wasmcurves/index.js", "../../node_modules/web-worker/cjs/browser.js", "../../src/index.ts", "../../src/constants/index.ts", "../../src/constants/hash.ts", "../../src/constants/node.ts", "../../src/constants/data.ts", "../../src/constants/proof.ts", "../../src/constants/field.ts", "../../src/lib/index.ts", "../../src/lib/db/index.ts", "../../src/lib/db/inMemory.ts", "../../src/lib/hash/hash.ts", "../../src/lib/utils/index.ts", "../../src/lib/utils/bytes.ts", "../../src/lib/utils/crypto.ts", "../../src/lib/utils/hash.ts", "../../src/lib/utils/bigint.ts", "../../node_modules/@iden3/js-crypto/src/index.ts", "../../node_modules/@iden3/js-crypto/src/babyjub/index.ts", "../../node_modules/@iden3/js-crypto/src/babyjub/eddsa.ts", "../../node_modules/@iden3/js-crypto/src/hex.ts", "../../node_modules/@iden3/js-crypto/src/babyjub/babyjub.ts", "../../node_modules/@iden3/js-crypto/src/ff.ts", "../../node_modules/ffjavascript/main.js", "../../node_modules/ffjavascript/src/scalar.js", "../../node_modules/ffjavascript/src/polfield.js", "../../node_modules/ffjavascript/src/f1field.js", "../../node_modules/ffjavascript/src/futils.js", "../../node_modules/ffjavascript/src/fsqrt.js", "../../node_modules/ffjavascript/src/random.js", "../../node_modules/ffjavascript/src/chacha.js", "node-modules-polyfills:crypto", "../../node_modules/ffjavascript/src/fft.js", "../../node_modules/ffjavascript/src/f2field.js", "../../node_modules/ffjavascript/src/f3field.js", "../../node_modules/ffjavascript/src/ec.js", "../../node_modules/ffjavascript/src/bn128.js", "../../node_modules/ffjavascript/src/engine.js", "../../node_modules/ffjavascript/src/wasm_field1.js", "../../node_modules/ffjavascript/src/utils.js", "../../node_modules/ffjavascript/src/engine_batchconvert.js", "../../node_modules/ffjavascript/src/bigbuffer.js", "../../node_modules/ffjavascript/src/wasm_field2.js", "../../node_modules/ffjavascript/src/wasm_field3.js", "../../node_modules/ffjavascript/src/wasm_curve.js", "../../node_modules/ffjavascript/src/threadman.js", "../../node_modules/ffjavascript/src/threadman_thread.js", "node-modules-polyfills:os", "../../node_modules/ffjavascript/src/engine_applykey.js", "../../node_modules/ffjavascript/src/engine_pairing.js", "../../node_modules/ffjavascript/src/engine_multiexp.js", "../../node_modules/ffjavascript/src/engine_fft.js", "../../node_modules/wasmbuilder/main.js", "../../node_modules/wasmbuilder/src/modulebuilder.js", "../../node_modules/wasmbuilder/src/functionbuilder.js", "../../node_modules/wasmbuilder/src/codebuilder.js", "../../node_modules/wasmbuilder/src/utils.js", "../../node_modules/wasmbuilder/src/modulebuilder_wat.js", "../../node_modules/wasmbuilder/src/functionbuilder_wat.js", "../../node_modules/wasmbuilder/src/codebuilder_wat.js", "../../node_modules/wasmbuilder/src/protoboard.js", "../../node_modules/ffjavascript/src/bls12381.js", "../../node_modules/ffjavascript/src/curves.js", "../../node_modules/@iden3/js-crypto/src/poseidon/index.ts", "../../node_modules/@iden3/js-crypto/src/poseidon/poseidon-opt.ts", "../../node_modules/@iden3/js-crypto/src/babyjub/eddsa-keys.ts", "../../src/lib/utils/poseidon.ts", "../../src/lib/utils/entry.ts", "../../src/lib/entry/elemBytes.ts", "../../src/lib/entry/data.ts", "../../src/lib/utils/circom.ts", "../../src/lib/utils/merkletree.ts", "../../src/lib/utils/proof.ts", "../../src/lib/utils/node.ts", "../../src/lib/node/node.ts", "../../src/lib/errors/proof.ts", "../../src/lib/db/localStorage.ts", "../../src/lib/db/indexedDB.ts", "../../node_modules/idb-keyval/dist/index.js", "../../src/lib/entry/index.ts", "../../src/lib/entry/entry.ts", "../../src/lib/errors/index.ts", "../../src/lib/errors/merkletree.ts", "../../src/lib/errors/db.ts", "../../src/lib/merkletree/index.ts", "../../src/lib/merkletree/circom.ts", "../../src/lib/merkletree/merkletree.ts", "../../src/lib/merkletree/proof.ts", "../../src/types/index.ts", "../../src/types/hash.ts", "../../src/types/node.ts", "../../src/types/bytes.ts", "../../src/types/storage.ts", "../../src/types/merkletree.ts"],
  "sourcesContent": ["// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined')\n}\nfunction defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined')\n}\nvar cachedSetTimeout = defaultSetTimout\nvar cachedClearTimeout = defaultClearTimeout\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0)\n    }\n    // if setTimeout wasn't available but was latter defined\n    if (\n        (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&\n        setTimeout\n    ) {\n        cachedSetTimeout = setTimeout\n        return setTimeout(fun, 0)\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0)\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0)\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0)\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker)\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if (\n        (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) &&\n        clearTimeout\n    ) {\n        cachedClearTimeout = clearTimeout\n        return clearTimeout(marker)\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker)\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker)\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker)\n        }\n    }\n}\nvar queue = []\nvar draining = false\nvar currentQueue\nvar queueIndex = -1\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return\n    }\n    draining = false\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue)\n    } else {\n        queueIndex = -1\n    }\n    if (queue.length) {\n        drainQueue()\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return\n    }\n    var timeout = runTimeout(cleanUpNextTick)\n    draining = true\n\n    var len = queue.length\n    while (len) {\n        currentQueue = queue\n        queue = []\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run()\n            }\n        }\n        queueIndex = -1\n        len = queue.length\n    }\n    currentQueue = null\n    draining = false\n    runClearTimeout(timeout)\n}\nfunction nextTick(fun) {\n    var args = new Array(arguments.length - 1)\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i]\n        }\n    }\n    queue.push(new Item(fun, args))\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue)\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun\n    this.array = array\n}\nItem.prototype.run = function() {\n    this.fun.apply(null, this.array)\n}\nvar title = 'browser'\nvar platform = 'browser'\nvar browser = true\nvar env = {}\nvar argv = []\nvar version = '' // empty string to avoid regexp issues\nvar versions = {}\nvar release = {}\nvar config = {}\n\nfunction noop() {}\n\nvar on = noop\nvar addListener = noop\nvar once = noop\nvar off = noop\nvar removeListener = noop\nvar removeAllListeners = noop\nvar emit = noop\n\nfunction binding(name) {\n    throw new Error('process.binding is not supported')\n}\n\nfunction cwd() {\n    return '/'\n}\nfunction chdir(dir) {\n    throw new Error('process.chdir is not supported')\n}\nfunction umask() {\n    return 0\n}\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {}\nvar performanceNow =\n    performance.now ||\n    performance.mozNow ||\n    performance.msNow ||\n    performance.oNow ||\n    performance.webkitNow ||\n    function() {\n        return new Date().getTime()\n    }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp) {\n    var clocktime = performanceNow.call(performance) * 1e-3\n    var seconds = Math.floor(clocktime)\n    var nanoseconds = Math.floor((clocktime % 1) * 1e9)\n    if (previousTimestamp) {\n        seconds = seconds - previousTimestamp[0]\n        nanoseconds = nanoseconds - previousTimestamp[1]\n        if (nanoseconds < 0) {\n            seconds--\n            nanoseconds += 1e9\n        }\n    }\n    return [seconds, nanoseconds]\n}\n\nvar startTime = new Date()\nfunction uptime() {\n    var currentTime = new Date()\n    var dif = currentTime - startTime\n    return dif / 1000\n}\n\nexport var process = {\n    nextTick: nextTick,\n    title: title,\n    browser: browser,\n    env: env,\n    argv: argv,\n    version: version,\n    versions: versions,\n    on: on,\n    addListener: addListener,\n    once: once,\n    off: off,\n    removeListener: removeListener,\n    removeAllListeners: removeAllListeners,\n    emit: emit,\n    binding: binding,\n    cwd: cwd,\n    chdir: chdir,\n    umask: umask,\n    hrtime: hrtime,\n    platform: platform,\n    release: release,\n    config: config,\n    uptime: uptime,\n}\n\n// replace process.env.VAR with define\n\nconst defines = {\n\n}\nObject.keys(defines).forEach((key) => {\n    const segs = key.split('.')\n    let target = process\n    for (let i = 0; i < segs.length; i++) {\n        const seg = segs[i]\n        if (i === segs.length - 1) {\n            target[seg] = defines[key]\n        } else {\n            target = target[seg] || (target[seg] = {})\n        }\n    }\n})\n", "// taken from https://github.com/calvinmetcalf/buffer-es6\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\nvar inited = false\nfunction init() {\n    inited = true\n    var code =\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    for (var i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i]\n        revLookup[code.charCodeAt(i)] = i\n    }\n\n    revLookup['-'.charCodeAt(0)] = 62\n    revLookup['_'.charCodeAt(0)] = 63\n}\n\nfunction base64toByteArray(b64) {\n    if (!inited) {\n        init()\n    }\n    var i, j, l, tmp, placeHolders, arr\n    var len = b64.length\n\n    if (len % 4 > 0) {\n        throw new Error('Invalid string. Length must be a multiple of 4')\n    }\n\n    // the number of equal signs (place holders)\n    // if there are two placeholders, than the two characters before it\n    // represent one byte\n    // if there is only one, then the three characters before it represent 2 bytes\n    // this is just a cheap hack to not do indexOf twice\n    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n    // base64 is 4/3 + up to two characters of the original data\n    arr = new Arr((len * 3) / 4 - placeHolders)\n\n    // if there are placeholders, only get up to the last complete 4 chars\n    l = placeHolders > 0 ? len - 4 : len\n\n    var L = 0\n\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n        tmp =\n            (revLookup[b64.charCodeAt(i)] << 18) |\n            (revLookup[b64.charCodeAt(i + 1)] << 12) |\n            (revLookup[b64.charCodeAt(i + 2)] << 6) |\n            revLookup[b64.charCodeAt(i + 3)]\n        arr[L++] = (tmp >> 16) & 0xff\n        arr[L++] = (tmp >> 8) & 0xff\n        arr[L++] = tmp & 0xff\n    }\n\n    if (placeHolders === 2) {\n        tmp =\n            (revLookup[b64.charCodeAt(i)] << 2) |\n            (revLookup[b64.charCodeAt(i + 1)] >> 4)\n        arr[L++] = tmp & 0xff\n    } else if (placeHolders === 1) {\n        tmp =\n            (revLookup[b64.charCodeAt(i)] << 10) |\n            (revLookup[b64.charCodeAt(i + 1)] << 4) |\n            (revLookup[b64.charCodeAt(i + 2)] >> 2)\n        arr[L++] = (tmp >> 8) & 0xff\n        arr[L++] = tmp & 0xff\n    }\n\n    return arr\n}\n\nfunction tripletToBase64(num) {\n    return (\n        lookup[(num >> 18) & 0x3f] +\n        lookup[(num >> 12) & 0x3f] +\n        lookup[(num >> 6) & 0x3f] +\n        lookup[num & 0x3f]\n    )\n}\n\nfunction encodeChunk(uint8, start, end) {\n    var tmp\n    var output = []\n    for (var i = start; i < end; i += 3) {\n        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]\n        output.push(tripletToBase64(tmp))\n    }\n    return output.join('')\n}\n\nfunction base64fromByteArray(uint8) {\n    if (!inited) {\n        init()\n    }\n    var tmp\n    var len = uint8.length\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    var output = ''\n    var parts = []\n    var maxChunkLength = 16383 // must be multiple of 3\n\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n        parts.push(\n            encodeChunk(\n                uint8,\n                i,\n                i + maxChunkLength > len2 ? len2 : i + maxChunkLength,\n            ),\n        )\n    }\n\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1]\n        output += lookup[tmp >> 2]\n        output += lookup[(tmp << 4) & 0x3f]\n        output += '=='\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n        output += lookup[tmp >> 10]\n        output += lookup[(tmp >> 4) & 0x3f]\n        output += lookup[(tmp << 2) & 0x3f]\n        output += '='\n    }\n\n    parts.push(output)\n\n    return parts.join('')\n}\n\nvar INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT =\n    global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : true\n\nfunction kMaxLength() {\n    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff\n}\n\nfunction createBuffer(that, length) {\n    if (kMaxLength() < length) {\n        throw new RangeError('Invalid typed array length')\n    }\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        // Return an augmented `Uint8Array` instance, for best performance\n        that = new Uint8Array(length)\n        that.__proto__ = Buffer.prototype\n    } else {\n        // Fallback: Return an object instance of the Buffer class\n        if (that === null) {\n            that = new Buffer(length)\n        }\n        that.length = length\n    }\n\n    return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nexport function Buffer(arg, encodingOrOffset, length) {\n    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n        return new Buffer(arg, encodingOrOffset, length)\n    }\n\n    // Common case.\n    if (typeof arg === 'number') {\n        if (typeof encodingOrOffset === 'string') {\n            throw new Error(\n                'If encoding is specified then the first argument must be a string',\n            )\n        }\n        return allocUnsafe(this, arg)\n    }\n    return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function(arr) {\n    arr.__proto__ = Buffer.prototype\n    return arr\n}\n\nfunction from(that, value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n        throw new TypeError('\"value\" argument must not be a number')\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n        return fromArrayBuffer(that, value, encodingOrOffset, length)\n    }\n\n    if (typeof value === 'string') {\n        return fromString(that, value, encodingOrOffset)\n    }\n\n    return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function(value, encodingOrOffset, length) {\n    return from(null, value, encodingOrOffset, length)\n}\n\nBuffer.kMaxLength = kMaxLength()\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n    Buffer.prototype.__proto__ = Uint8Array.prototype\n    Buffer.__proto__ = Uint8Array\n    if (\n        typeof Symbol !== 'undefined' &&\n        Symbol.species &&\n        Buffer[Symbol.species] === Buffer\n    ) {\n        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n        // Object.defineProperty(Buffer, Symbol.species, {\n        //   value: null,\n        //   configurable: true\n        // })\n    }\n}\n\nfunction assertSize(size) {\n    if (typeof size !== 'number') {\n        throw new TypeError('\"size\" argument must be a number')\n    } else if (size < 0) {\n        throw new RangeError('\"size\" argument must not be negative')\n    }\n}\n\nfunction alloc(that, size, fill, encoding) {\n    assertSize(size)\n    if (size <= 0) {\n        return createBuffer(that, size)\n    }\n    if (fill !== undefined) {\n        // Only pay attention to encoding if it's a string. This\n        // prevents accidentally sending in a number that would\n        // be interpretted as a start offset.\n        return typeof encoding === 'string'\n            ? createBuffer(that, size).fill(fill, encoding)\n            : createBuffer(that, size).fill(fill)\n    }\n    return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function(size, fill, encoding) {\n    return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe(that, size) {\n    assertSize(size)\n    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n    if (!Buffer.TYPED_ARRAY_SUPPORT) {\n        for (var i = 0; i < size; ++i) {\n            that[i] = 0\n        }\n    }\n    return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function(size) {\n    return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function(size) {\n    return allocUnsafe(null, size)\n}\n\nfunction fromString(that, string, encoding) {\n    if (typeof encoding !== 'string' || encoding === '') {\n        encoding = 'utf8'\n    }\n\n    if (!Buffer.isEncoding(encoding)) {\n        throw new TypeError('\"encoding\" must be a valid string encoding')\n    }\n\n    var length = byteLength(string, encoding) | 0\n    that = createBuffer(that, length)\n\n    var actual = that.write(string, encoding)\n\n    if (actual !== length) {\n        // Writing a hex string, for example, that contains invalid characters will\n        // cause everything after the first invalid character to be ignored. (e.g.\n        // 'abxxcd' will be treated as 'ab')\n        that = that.slice(0, actual)\n    }\n\n    return that\n}\n\nfunction fromArrayLike(that, array) {\n    var length = array.length < 0 ? 0 : checked(array.length) | 0\n    that = createBuffer(that, length)\n    for (var i = 0; i < length; i += 1) {\n        that[i] = array[i] & 255\n    }\n    return that\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n    array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError(\"'offset' is out of bounds\")\n    }\n\n    if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError(\"'length' is out of bounds\")\n    }\n\n    if (byteOffset === undefined && length === undefined) {\n        array = new Uint8Array(array)\n    } else if (length === undefined) {\n        array = new Uint8Array(array, byteOffset)\n    } else {\n        array = new Uint8Array(array, byteOffset, length)\n    }\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        // Return an augmented `Uint8Array` instance, for best performance\n        that = array\n        that.__proto__ = Buffer.prototype\n    } else {\n        // Fallback: Return an object instance of the Buffer class\n        that = fromArrayLike(that, array)\n    }\n    return that\n}\n\nfunction fromObject(that, obj) {\n    if (internalIsBuffer(obj)) {\n        var len = checked(obj.length) | 0\n        that = createBuffer(that, len)\n\n        if (that.length === 0) {\n            return that\n        }\n\n        obj.copy(that, 0, 0, len)\n        return that\n    }\n\n    if (obj) {\n        if (\n            (typeof ArrayBuffer !== 'undefined' &&\n                obj.buffer instanceof ArrayBuffer) ||\n            'length' in obj\n        ) {\n            if (typeof obj.length !== 'number' || isnan(obj.length)) {\n                return createBuffer(that, 0)\n            }\n            return fromArrayLike(that, obj)\n        }\n\n        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n            return fromArrayLike(that, obj.data)\n        }\n    }\n\n    throw new TypeError(\n        'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.',\n    )\n}\n\nfunction checked(length) {\n    // Note: cannot use `length < kMaxLength()` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= kMaxLength()) {\n        throw new RangeError(\n            'Attempt to allocate Buffer larger than maximum ' +\n                'size: 0x' +\n                kMaxLength().toString(16) +\n                ' bytes',\n        )\n    }\n    return length | 0\n}\n\nexport function SlowBuffer(length) {\n    if (+length != length) {\n        // eslint-disable-line eqeqeq\n        length = 0\n    }\n    return Buffer.alloc(+length)\n}\nBuffer.isBuffer = isBuffer\nfunction internalIsBuffer(b) {\n    return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare(a, b) {\n    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n        throw new TypeError('Arguments must be Buffers')\n    }\n\n    if (a === b) return 0\n\n    var x = a.length\n    var y = b.length\n\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b[i]) {\n            x = a[i]\n            y = b[i]\n            break\n        }\n    }\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n}\n\nBuffer.isEncoding = function isEncoding(encoding) {\n    switch (String(encoding).toLowerCase()) {\n        case 'hex':\n        case 'utf8':\n        case 'utf-8':\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n        case 'base64':\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n            return true\n        default:\n            return false\n    }\n}\n\nBuffer.concat = function concat(list, length) {\n    if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n\n    if (list.length === 0) {\n        return Buffer.alloc(0)\n    }\n\n    var i\n    if (length === undefined) {\n        length = 0\n        for (i = 0; i < list.length; ++i) {\n            length += list[i].length\n        }\n    }\n\n    var buffer = Buffer.allocUnsafe(length)\n    var pos = 0\n    for (i = 0; i < list.length; ++i) {\n        var buf = list[i]\n        if (!internalIsBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers')\n        }\n        buf.copy(buffer, pos)\n        pos += buf.length\n    }\n    return buffer\n}\n\nfunction byteLength(string, encoding) {\n    if (internalIsBuffer(string)) {\n        return string.length\n    }\n    if (\n        typeof ArrayBuffer !== 'undefined' &&\n        typeof ArrayBuffer.isView === 'function' &&\n        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)\n    ) {\n        return string.byteLength\n    }\n    if (typeof string !== 'string') {\n        string = '' + string\n    }\n\n    var len = string.length\n    if (len === 0) return 0\n\n    // Use a for loop to avoid recursion\n    var loweredCase = false\n    for (;;) {\n        switch (encoding) {\n            case 'ascii':\n            case 'latin1':\n            case 'binary':\n                return len\n            case 'utf8':\n            case 'utf-8':\n            case undefined:\n                return utf8ToBytes(string).length\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n                return len * 2\n            case 'hex':\n                return len >>> 1\n            case 'base64':\n                return base64ToBytes(string).length\n            default:\n                if (loweredCase) return utf8ToBytes(string).length // assume utf8\n                encoding = ('' + encoding).toLowerCase()\n                loweredCase = true\n        }\n    }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString(encoding, start, end) {\n    var loweredCase = false\n\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) {\n        start = 0\n    }\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) {\n        return ''\n    }\n\n    if (end === undefined || end > this.length) {\n        end = this.length\n    }\n\n    if (end <= 0) {\n        return ''\n    }\n\n    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0\n    start >>>= 0\n\n    if (end <= start) {\n        return ''\n    }\n\n    if (!encoding) encoding = 'utf8'\n\n    while (true) {\n        switch (encoding) {\n            case 'hex':\n                return hexSlice(this, start, end)\n\n            case 'utf8':\n            case 'utf-8':\n                return utf8Slice(this, start, end)\n\n            case 'ascii':\n                return asciiSlice(this, start, end)\n\n            case 'latin1':\n            case 'binary':\n                return latin1Slice(this, start, end)\n\n            case 'base64':\n                return base64Slice(this, start, end)\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n                return utf16leSlice(this, start, end)\n\n            default:\n                if (loweredCase)\n                    throw new TypeError('Unknown encoding: ' + encoding)\n                encoding = (encoding + '').toLowerCase()\n                loweredCase = true\n        }\n    }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap(b, n, m) {\n    var i = b[n]\n    b[n] = b[m]\n    b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16() {\n    var len = this.length\n    if (len % 2 !== 0) {\n        throw new RangeError('Buffer size must be a multiple of 16-bits')\n    }\n    for (var i = 0; i < len; i += 2) {\n        swap(this, i, i + 1)\n    }\n    return this\n}\n\nBuffer.prototype.swap32 = function swap32() {\n    var len = this.length\n    if (len % 4 !== 0) {\n        throw new RangeError('Buffer size must be a multiple of 32-bits')\n    }\n    for (var i = 0; i < len; i += 4) {\n        swap(this, i, i + 3)\n        swap(this, i + 1, i + 2)\n    }\n    return this\n}\n\nBuffer.prototype.swap64 = function swap64() {\n    var len = this.length\n    if (len % 8 !== 0) {\n        throw new RangeError('Buffer size must be a multiple of 64-bits')\n    }\n    for (var i = 0; i < len; i += 8) {\n        swap(this, i, i + 7)\n        swap(this, i + 1, i + 6)\n        swap(this, i + 2, i + 5)\n        swap(this, i + 3, i + 4)\n    }\n    return this\n}\n\nBuffer.prototype.toString = function toString() {\n    var length = this.length | 0\n    if (length === 0) return ''\n    if (arguments.length === 0) return utf8Slice(this, 0, length)\n    return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals(b) {\n    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n    if (this === b) return true\n    return Buffer.compare(this, b) === 0\n}\n\n\nBuffer.prototype.compare = function compare(\n    target,\n    start,\n    end,\n    thisStart,\n    thisEnd,\n) {\n    if (!internalIsBuffer(target)) {\n        throw new TypeError('Argument must be a Buffer')\n    }\n\n    if (start === undefined) {\n        start = 0\n    }\n    if (end === undefined) {\n        end = target ? target.length : 0\n    }\n    if (thisStart === undefined) {\n        thisStart = 0\n    }\n    if (thisEnd === undefined) {\n        thisEnd = this.length\n    }\n\n    if (\n        start < 0 ||\n        end > target.length ||\n        thisStart < 0 ||\n        thisEnd > this.length\n    ) {\n        throw new RangeError('out of range index')\n    }\n\n    if (thisStart >= thisEnd && start >= end) {\n        return 0\n    }\n    if (thisStart >= thisEnd) {\n        return -1\n    }\n    if (start >= end) {\n        return 1\n    }\n\n    start >>>= 0\n    end >>>= 0\n    thisStart >>>= 0\n    thisEnd >>>= 0\n\n    if (this === target) return 0\n\n    var x = thisEnd - thisStart\n    var y = end - start\n    var len = Math.min(x, y)\n\n    var thisCopy = this.slice(thisStart, thisEnd)\n    var targetCopy = target.slice(start, end)\n\n    for (var i = 0; i < len; ++i) {\n        if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i]\n            y = targetCopy[i]\n            break\n        }\n    }\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1\n\n    // Normalize byteOffset\n    if (typeof byteOffset === 'string') {\n        encoding = byteOffset\n        byteOffset = 0\n    } else if (byteOffset > 0x7fffffff) {\n        byteOffset = 0x7fffffff\n    } else if (byteOffset < -0x80000000) {\n        byteOffset = -0x80000000\n    }\n    byteOffset = +byteOffset // Coerce to Number.\n    if (isNaN(byteOffset)) {\n        // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n        byteOffset = dir ? 0 : buffer.length - 1\n    }\n\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n    if (byteOffset >= buffer.length) {\n        if (dir) return -1\n        else byteOffset = buffer.length - 1\n    } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0\n        else return -1\n    }\n\n    // Normalize val\n    if (typeof val === 'string') {\n        val = Buffer.from(val, encoding)\n    }\n\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if (internalIsBuffer(val)) {\n        // Special case: looking for empty string/buffer always fails\n        if (val.length === 0) {\n            return -1\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n    } else if (typeof val === 'number') {\n        val = val & 0xff // Search for a byte value [0-255]\n        if (\n            Buffer.TYPED_ARRAY_SUPPORT &&\n            typeof Uint8Array.prototype.indexOf === 'function'\n        ) {\n            if (dir) {\n                return Uint8Array.prototype.indexOf.call(\n                    buffer,\n                    val,\n                    byteOffset,\n                )\n            } else {\n                return Uint8Array.prototype.lastIndexOf.call(\n                    buffer,\n                    val,\n                    byteOffset,\n                )\n            }\n        }\n        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n    }\n\n    throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    var indexSize = 1\n    var arrLength = arr.length\n    var valLength = val.length\n\n    if (encoding !== undefined) {\n        encoding = String(encoding).toLowerCase()\n        if (\n            encoding === 'ucs2' ||\n            encoding === 'ucs-2' ||\n            encoding === 'utf16le' ||\n            encoding === 'utf-16le'\n        ) {\n            if (arr.length < 2 || val.length < 2) {\n                return -1\n            }\n            indexSize = 2\n            arrLength /= 2\n            valLength /= 2\n            byteOffset /= 2\n        }\n    }\n\n    function read(buf, i) {\n        if (indexSize === 1) {\n            return buf[i]\n        } else {\n            return buf.readUInt16BE(i * indexSize)\n        }\n    }\n\n    var i\n    if (dir) {\n        var foundIndex = -1\n        for (i = byteOffset; i < arrLength; i++) {\n            if (\n                read(arr, i) ===\n                read(val, foundIndex === -1 ? 0 : i - foundIndex)\n            ) {\n                if (foundIndex === -1) foundIndex = i\n                if (i - foundIndex + 1 === valLength)\n                    return foundIndex * indexSize\n            } else {\n                if (foundIndex !== -1) i -= i - foundIndex\n                foundIndex = -1\n            }\n        }\n    } else {\n        if (byteOffset + valLength > arrLength)\n            byteOffset = arrLength - valLength\n        for (i = byteOffset; i >= 0; i--) {\n            var found = true\n            for (var j = 0; j < valLength; j++) {\n                if (read(arr, i + j) !== read(val, j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return i\n        }\n    }\n\n    return -1\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0\n    var remaining = buf.length - offset\n    if (!length) {\n        length = remaining\n    } else {\n        length = Number(length)\n        if (length > remaining) {\n            length = remaining\n        }\n    }\n\n    // must be an even number of digits\n    var strLen = string.length\n    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n    if (length > strLen / 2) {\n        length = strLen / 2\n    }\n    for (var i = 0; i < length; ++i) {\n        var parsed = parseInt(string.substr(i * 2, 2), 16)\n        if (isNaN(parsed)) return i\n        buf[offset + i] = parsed\n    }\n    return i\n}\n\nfunction utf8Write(buf, string, offset, length) {\n    return blitBuffer(\n        utf8ToBytes(string, buf.length - offset),\n        buf,\n        offset,\n        length,\n    )\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write(buf, string, offset, length) {\n    return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n    return blitBuffer(\n        utf16leToBytes(string, buf.length - offset),\n        buf,\n        offset,\n        length,\n    )\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n        encoding = 'utf8'\n        length = this.length\n        offset = 0\n        // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === 'string') {\n        encoding = offset\n        length = this.length\n        offset = 0\n        // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n        offset = offset | 0\n        if (isFinite(length)) {\n            length = length | 0\n            if (encoding === undefined) encoding = 'utf8'\n        } else {\n            encoding = length\n            length = undefined\n        }\n        // legacy write(string, encoding, offset, length) - remove in v0.13\n    } else {\n        throw new Error(\n            'Buffer.write(string, encoding, offset[, length]) is no longer supported',\n        )\n    }\n\n    var remaining = this.length - offset\n    if (length === undefined || length > remaining) length = remaining\n\n    if (\n        (string.length > 0 && (length < 0 || offset < 0)) ||\n        offset > this.length\n    ) {\n        throw new RangeError('Attempt to write outside buffer bounds')\n    }\n\n    if (!encoding) encoding = 'utf8'\n\n    var loweredCase = false\n    for (;;) {\n        switch (encoding) {\n            case 'hex':\n                return hexWrite(this, string, offset, length)\n\n            case 'utf8':\n            case 'utf-8':\n                return utf8Write(this, string, offset, length)\n\n            case 'ascii':\n                return asciiWrite(this, string, offset, length)\n\n            case 'latin1':\n            case 'binary':\n                return latin1Write(this, string, offset, length)\n\n            case 'base64':\n                // Warning: maxLength not taken into account in base64Write\n                return base64Write(this, string, offset, length)\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n                return ucs2Write(this, string, offset, length)\n\n            default:\n                if (loweredCase)\n                    throw new TypeError('Unknown encoding: ' + encoding)\n                encoding = ('' + encoding).toLowerCase()\n                loweredCase = true\n        }\n    }\n}\n\nBuffer.prototype.toJSON = function toJSON() {\n    return {\n        type: 'Buffer',\n        data: Array.prototype.slice.call(this._arr || this, 0),\n    }\n}\n\nfunction base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) {\n        return base64fromByteArray(buf)\n    } else {\n        return base64fromByteArray(buf.slice(start, end))\n    }\n}\n\nfunction utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end)\n    var res = []\n\n    var i = start\n    while (i < end) {\n        var firstByte = buf[i]\n        var codePoint = null\n        var bytesPerSequence =\n            firstByte > 0xef\n                ? 4\n                : firstByte > 0xdf\n                ? 3\n                : firstByte > 0xbf\n                ? 2\n                : 1\n\n        if (i + bytesPerSequence <= end) {\n            var secondByte, thirdByte, fourthByte, tempCodePoint\n\n            switch (bytesPerSequence) {\n                case 1:\n                    if (firstByte < 0x80) {\n                        codePoint = firstByte\n                    }\n                    break\n                case 2:\n                    secondByte = buf[i + 1]\n                    if ((secondByte & 0xc0) === 0x80) {\n                        tempCodePoint =\n                            ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f)\n                        if (tempCodePoint > 0x7f) {\n                            codePoint = tempCodePoint\n                        }\n                    }\n                    break\n                case 3:\n                    secondByte = buf[i + 1]\n                    thirdByte = buf[i + 2]\n                    if (\n                        (secondByte & 0xc0) === 0x80 &&\n                        (thirdByte & 0xc0) === 0x80\n                    ) {\n                        tempCodePoint =\n                            ((firstByte & 0xf) << 0xc) |\n                            ((secondByte & 0x3f) << 0x6) |\n                            (thirdByte & 0x3f)\n                        if (\n                            tempCodePoint > 0x7ff &&\n                            (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)\n                        ) {\n                            codePoint = tempCodePoint\n                        }\n                    }\n                    break\n                case 4:\n                    secondByte = buf[i + 1]\n                    thirdByte = buf[i + 2]\n                    fourthByte = buf[i + 3]\n                    if (\n                        (secondByte & 0xc0) === 0x80 &&\n                        (thirdByte & 0xc0) === 0x80 &&\n                        (fourthByte & 0xc0) === 0x80\n                    ) {\n                        tempCodePoint =\n                            ((firstByte & 0xf) << 0x12) |\n                            ((secondByte & 0x3f) << 0xc) |\n                            ((thirdByte & 0x3f) << 0x6) |\n                            (fourthByte & 0x3f)\n                        if (\n                            tempCodePoint > 0xffff &&\n                            tempCodePoint < 0x110000\n                        ) {\n                            codePoint = tempCodePoint\n                        }\n                    }\n            }\n        }\n\n        if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xfffd\n            bytesPerSequence = 1\n        } else if (codePoint > 0xffff) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000\n            res.push(((codePoint >>> 10) & 0x3ff) | 0xd800)\n            codePoint = 0xdc00 | (codePoint & 0x3ff)\n        }\n\n        res.push(codePoint)\n        i += bytesPerSequence\n    }\n\n    return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray(codePoints) {\n    var len = codePoints.length\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n    }\n\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    var res = ''\n    var i = 0\n    while (i < len) {\n        res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH)),\n        )\n    }\n    return res\n}\n\nfunction asciiSlice(buf, start, end) {\n    var ret = ''\n    end = Math.min(buf.length, end)\n\n    for (var i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i] & 0x7f)\n    }\n    return ret\n}\n\nfunction latin1Slice(buf, start, end) {\n    var ret = ''\n    end = Math.min(buf.length, end)\n\n    for (var i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i])\n    }\n    return ret\n}\n\nfunction hexSlice(buf, start, end) {\n    var len = buf.length\n\n    if (!start || start < 0) start = 0\n    if (!end || end < 0 || end > len) end = len\n\n    var out = ''\n    for (var i = start; i < end; ++i) {\n        out += toHex(buf[i])\n    }\n    return out\n}\n\nfunction utf16leSlice(buf, start, end) {\n    var bytes = buf.slice(start, end)\n    var res = ''\n    for (var i = 0; i < bytes.length; i += 2) {\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n    }\n    return res\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n    var len = this.length\n    start = ~~start\n    end = end === undefined ? len : ~~end\n\n    if (start < 0) {\n        start += len\n        if (start < 0) start = 0\n    } else if (start > len) {\n        start = len\n    }\n\n    if (end < 0) {\n        end += len\n        if (end < 0) end = 0\n    } else if (end > len) {\n        end = len\n    }\n\n    if (end < start) end = start\n\n    var newBuf\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        newBuf = this.subarray(start, end)\n        newBuf.__proto__ = Buffer.prototype\n    } else {\n        var sliceLen = end - start\n        newBuf = new Buffer(sliceLen, undefined)\n        for (var i = 0; i < sliceLen; ++i) {\n            newBuf[i] = this[i + start]\n        }\n    }\n\n    return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0)\n        throw new RangeError('offset is not uint')\n    if (offset + ext > length)\n        throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(\n    offset,\n    byteLength,\n    noAssert,\n) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n    var val = this[offset]\n    var mul = 1\n    var i = 0\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += this[offset + i] * mul\n    }\n\n    return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE(\n    offset,\n    byteLength,\n    noAssert,\n) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) {\n        checkOffset(offset, byteLength, this.length)\n    }\n\n    var val = this[offset + --byteLength]\n    var mul = 1\n    while (byteLength > 0 && (mul *= 0x100)) {\n        val += this[offset + --byteLength] * mul\n    }\n\n    return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length)\n    return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +\n        this[offset + 3] * 0x1000000\n    )\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        this[offset] * 0x1000000 +\n        ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3])\n    )\n}\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n    var val = this[offset]\n    var mul = 1\n    var i = 0\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += this[offset + i] * mul\n    }\n    mul *= 0x80\n\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n    return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n    var i = byteLength\n    var mul = 1\n    var val = this[offset + --i]\n    while (i > 0 && (mul *= 0x100)) {\n        val += this[offset + --i] * mul\n    }\n    mul *= 0x80\n\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n    return val\n}\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length)\n    if (!(this[offset] & 0x80)) return this[offset]\n    return (0xff - this[offset] + 1) * -1\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    var val = this[offset] | (this[offset + 1] << 8)\n    return val & 0x8000 ? val | 0xffff0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    var val = this[offset + 1] | (this[offset] << 8)\n    return val & 0x8000 ? val | 0xffff0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        this[offset] |\n        (this[offset + 1] << 8) |\n        (this[offset + 2] << 16) |\n        (this[offset + 3] << 24)\n    )\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        (this[offset] << 24) |\n        (this[offset + 1] << 16) |\n        (this[offset + 2] << 8) |\n        this[offset + 3]\n    )\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n    return ieee754read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n    return ieee754read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length)\n    return ieee754read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length)\n    return ieee754read(this, offset, false, 52, 8)\n}\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n    if (!internalIsBuffer(buf))\n        throw new TypeError('\"buffer\" argument must be a Buffer instance')\n    if (value > max || value < min)\n        throw new RangeError('\"value\" argument is out of bounds')\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength) - 1\n        checkInt(this, value, offset, byteLength, maxBytes, 0)\n    }\n\n    var mul = 1\n    var i = 0\n    this[offset] = value & 0xff\n    while (++i < byteLength && (mul *= 0x100)) {\n        this[offset + i] = (value / mul) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength) - 1\n        checkInt(this, value, offset, byteLength, maxBytes, 0)\n    }\n\n    var i = byteLength - 1\n    var mul = 1\n    this[offset + i] = value & 0xff\n    while (--i >= 0 && (mul *= 0x100)) {\n        this[offset + i] = (value / mul) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n    this[offset] = value & 0xff\n    return offset + 1\n}\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffff + value + 1\n    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n        buf[offset + i] =\n            (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n            ((littleEndian ? i : 1 - i) * 8)\n    }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value & 0xff\n        this[offset + 1] = value >>> 8\n    } else {\n        objectWriteUInt16(this, value, offset, true)\n    }\n    return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 8\n        this[offset + 1] = value & 0xff\n    } else {\n        objectWriteUInt16(this, value, offset, false)\n    }\n    return offset + 2\n}\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffffffff + value + 1\n    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n        buf[offset + i] = (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff\n    }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset + 3] = value >>> 24\n        this[offset + 2] = value >>> 16\n        this[offset + 1] = value >>> 8\n        this[offset] = value & 0xff\n    } else {\n        objectWriteUInt32(this, value, offset, true)\n    }\n    return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 24\n        this[offset + 1] = value >>> 16\n        this[offset + 2] = value >>> 8\n        this[offset + 3] = value & 0xff\n    } else {\n        objectWriteUInt32(this, value, offset, false)\n    }\n    return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength - 1)\n\n        checkInt(this, value, offset, byteLength, limit - 1, -limit)\n    }\n\n    var i = 0\n    var mul = 1\n    var sub = 0\n    this[offset] = value & 0xff\n    while (++i < byteLength && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1\n        }\n        this[offset + i] = (((value / mul) >> 0) - sub) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength - 1)\n\n        checkInt(this, value, offset, byteLength, limit - 1, -limit)\n    }\n\n    var i = byteLength - 1\n    var mul = 1\n    var sub = 0\n    this[offset + i] = value & 0xff\n    while (--i >= 0 && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1\n        }\n        this[offset + i] = (((value / mul) >> 0) - sub) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n    if (value < 0) value = 0xff + value + 1\n    this[offset] = value & 0xff\n    return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value & 0xff\n        this[offset + 1] = value >>> 8\n    } else {\n        objectWriteUInt16(this, value, offset, true)\n    }\n    return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 8\n        this[offset + 1] = value & 0xff\n    } else {\n        objectWriteUInt16(this, value, offset, false)\n    }\n    return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value & 0xff\n        this[offset + 1] = value >>> 8\n        this[offset + 2] = value >>> 16\n        this[offset + 3] = value >>> 24\n    } else {\n        objectWriteUInt32(this, value, offset, true)\n    }\n    return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n    if (value < 0) value = 0xffffffff + value + 1\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 24\n        this[offset + 1] = value >>> 16\n        this[offset + 2] = value >>> 8\n        this[offset + 3] = value & 0xff\n    } else {\n        objectWriteUInt32(this, value, offset, false)\n    }\n    return offset + 4\n}\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\n    if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n        checkIEEE754(\n            buf,\n            value,\n            offset,\n            4,\n            3.4028234663852886e38,\n            -3.4028234663852886e38,\n        )\n    }\n    ieee754write(buf, value, offset, littleEndian, 23, 4)\n    return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n        checkIEEE754(\n            buf,\n            value,\n            offset,\n            8,\n            1.7976931348623157e308,\n            -1.7976931348623157e308,\n        )\n    }\n    ieee754write(buf, value, offset, littleEndian, 52, 8)\n    return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(\n    value,\n    offset,\n    noAssert,\n) {\n    return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(\n    value,\n    offset,\n    noAssert,\n) {\n    return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!start) start = 0\n    if (!end && end !== 0) end = this.length\n    if (targetStart >= target.length) targetStart = target.length\n    if (!targetStart) targetStart = 0\n    if (end > 0 && end < start) end = start\n\n    // Copy 0 bytes; we're done\n    if (end === start) return 0\n    if (target.length === 0 || this.length === 0) return 0\n\n    // Fatal error conditions\n    if (targetStart < 0) {\n        throw new RangeError('targetStart out of bounds')\n    }\n    if (start < 0 || start >= this.length)\n        throw new RangeError('sourceStart out of bounds')\n    if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n    // Are we oob?\n    if (end > this.length) end = this.length\n    if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start\n    }\n\n    var len = end - start\n    var i\n\n    if (this === target && start < targetStart && targetStart < end) {\n        // descending copy from end\n        for (i = len - 1; i >= 0; --i) {\n            target[i + targetStart] = this[i + start]\n        }\n    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n        // ascending copy from start\n        for (i = 0; i < len; ++i) {\n            target[i + targetStart] = this[i + start]\n        }\n    } else {\n        Uint8Array.prototype.set.call(\n            target,\n            this.subarray(start, start + len),\n            targetStart,\n        )\n    }\n\n    return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === 'string') {\n        if (typeof start === 'string') {\n            encoding = start\n            start = 0\n            end = this.length\n        } else if (typeof end === 'string') {\n            encoding = end\n            end = this.length\n        }\n        if (val.length === 1) {\n            var code = val.charCodeAt(0)\n            if (code < 256) {\n                val = code\n            }\n        }\n        if (encoding !== undefined && typeof encoding !== 'string') {\n            throw new TypeError('encoding must be a string')\n        }\n        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n            throw new TypeError('Unknown encoding: ' + encoding)\n        }\n    } else if (typeof val === 'number') {\n        val = val & 255\n    }\n\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError('Out of range index')\n    }\n\n    if (end <= start) {\n        return this\n    }\n\n    start = start >>> 0\n    end = end === undefined ? this.length : end >>> 0\n\n    if (!val) val = 0\n\n    var i\n    if (typeof val === 'number') {\n        for (i = start; i < end; ++i) {\n            this[i] = val\n        }\n    } else {\n        var bytes = internalIsBuffer(val)\n            ? val\n            : utf8ToBytes(new Buffer(val, encoding).toString())\n        var len = bytes.length\n        for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len]\n        }\n    }\n\n    return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean(str) {\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return ''\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while (str.length % 4 !== 0) {\n        str = str + '='\n    }\n    return str\n}\n\nfunction stringtrim(str) {\n    if (str.trim) return str.trim()\n    return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex(n) {\n    if (n < 16) return '0' + n.toString(16)\n    return n.toString(16)\n}\n\nfunction utf8ToBytes(string, units) {\n    units = units || Infinity\n    var codePoint\n    var length = string.length\n    var leadSurrogate = null\n    var bytes = []\n\n    for (var i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i)\n\n        // is surrogate component\n        if (codePoint > 0xd7ff && codePoint < 0xe000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n                // no lead yet\n                if (codePoint > 0xdbff) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n                    continue\n                } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n                    continue\n                }\n\n                // valid lead\n                leadSurrogate = codePoint\n\n                continue\n            }\n\n            // 2 leads in a row\n            if (codePoint < 0xdc00) {\n                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n                leadSurrogate = codePoint\n                continue\n            }\n\n            // valid surrogate pair\n            codePoint =\n                (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +\n                0x10000\n        } else if (leadSurrogate) {\n            // valid bmp char, but last char was a lead\n            if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n        }\n\n        leadSurrogate = null\n\n        // encode utf8\n        if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break\n            bytes.push(codePoint)\n        } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break\n            bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80)\n        } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break\n            bytes.push(\n                (codePoint >> 0xc) | 0xe0,\n                ((codePoint >> 0x6) & 0x3f) | 0x80,\n                (codePoint & 0x3f) | 0x80,\n            )\n        } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break\n            bytes.push(\n                (codePoint >> 0x12) | 0xf0,\n                ((codePoint >> 0xc) & 0x3f) | 0x80,\n                ((codePoint >> 0x6) & 0x3f) | 0x80,\n                (codePoint & 0x3f) | 0x80,\n            )\n        } else {\n            throw new Error('Invalid code point')\n        }\n    }\n\n    return bytes\n}\n\nfunction asciiToBytes(str) {\n    var byteArray = []\n    for (var i = 0; i < str.length; ++i) {\n        // Node's code seems to be doing this and not & 0x7F..\n        byteArray.push(str.charCodeAt(i) & 0xff)\n    }\n    return byteArray\n}\n\nfunction utf16leToBytes(str, units) {\n    var c, hi, lo\n    var byteArray = []\n    for (var i = 0; i < str.length; ++i) {\n        if ((units -= 2) < 0) break\n\n        c = str.charCodeAt(i)\n        hi = c >> 8\n        lo = c % 256\n        byteArray.push(lo)\n        byteArray.push(hi)\n    }\n\n    return byteArray\n}\n\nfunction base64ToBytes(str) {\n    return base64toByteArray(base64clean(str))\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n    for (var i = 0; i < length; ++i) {\n        if (i + offset >= dst.length || i >= src.length) break\n        dst[i + offset] = src[i]\n    }\n    return i\n}\n\nfunction isnan(val) {\n    return val !== val // eslint-disable-line no-self-compare\n}\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nfunction isBuffer(obj) {\n    return (\n        obj != null &&\n        (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n    )\n}\n\nfunction isFastBuffer(obj) {\n    return (\n        !!obj.constructor &&\n        typeof obj.constructor.isBuffer === 'function' &&\n        obj.constructor.isBuffer(obj)\n    )\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer(obj) {\n    return (\n        typeof obj.readFloatLE === 'function' &&\n        typeof obj.slice === 'function' &&\n        isFastBuffer(obj.slice(0, 0))\n    )\n}\n\nfunction ieee754read(buffer, offset, isLE, mLen, nBytes) {\n    var e, m\n    var eLen = nBytes * 8 - mLen - 1\n    var eMax = (1 << eLen) - 1\n    var eBias = eMax >> 1\n    var nBits = -7\n    var i = isLE ? nBytes - 1 : 0\n    var d = isLE ? -1 : 1\n    var s = buffer[offset + i]\n\n    i += d\n\n    e = s & ((1 << -nBits) - 1)\n    s >>= -nBits\n    nBits += eLen\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n    m = e & ((1 << -nBits) - 1)\n    e >>= -nBits\n    nBits += mLen\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n    if (e === 0) {\n        e = 1 - eBias\n    } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity\n    } else {\n        m = m + Math.pow(2, mLen)\n        e = e - eBias\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nfunction ieee754write(buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c\n    var eLen = nBytes * 8 - mLen - 1\n    var eMax = (1 << eLen) - 1\n    var eBias = eMax >> 1\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0\n    var i = isLE ? 0 : nBytes - 1\n    var d = isLE ? 1 : -1\n    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n    value = Math.abs(value)\n\n    if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0\n        e = eMax\n    } else {\n        e = Math.floor(Math.log(value) / Math.LN2)\n        if (value * (c = Math.pow(2, -e)) < 1) {\n            e--\n            c *= 2\n        }\n        if (e + eBias >= 1) {\n            value += rt / c\n        } else {\n            value += rt * Math.pow(2, 1 - eBias)\n        }\n        if (value * c >= 2) {\n            e++\n            c /= 2\n        }\n\n        if (e + eBias >= eMax) {\n            m = 0\n            e = eMax\n        } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen)\n            e = e + eBias\n        } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n            e = 0\n        }\n    }\n\n    for (\n        ;\n        mLen >= 8;\n        buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8\n    ) {}\n\n    e = (e << mLen) | m\n    eLen += mLen\n    for (\n        ;\n        eLen > 0;\n        buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8\n    ) {}\n\n    buffer[offset + i - d] |= s * 128\n}\n", "export { Buffer } from '_node-buffer-polyfill_.js'\n", "'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n", "\nconst polyfill = require('events')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "module.exports = require('events').EventEmitter;\n", "var lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar inited = false;\nfunction init () {\n  inited = true;\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62;\n  revLookup['_'.charCodeAt(0)] = 63;\n}\n\nfunction toByteArray (b64) {\n  if (!inited) {\n    init();\n  }\n  var i, j, l, tmp, placeHolders, arr;\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders);\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len;\n\n  var L = 0;\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];\n    arr[L++] = (tmp >> 16) & 0xFF;\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);\n    arr[L++] = tmp & 0xFF;\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  if (!inited) {\n    init();\n  }\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var output = '';\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    output += lookup[tmp >> 2];\n    output += lookup[(tmp << 4) & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);\n    output += lookup[tmp >> 10];\n    output += lookup[(tmp >> 4) & 0x3F];\n    output += lookup[(tmp << 2) & 0x3F];\n    output += '=';\n  }\n\n  parts.push(output);\n\n  return parts.join('')\n}\n\nfunction read (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? (nBytes - 1) : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nfunction write (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n  var i = isLE ? 0 : (nBytes - 1);\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n}\n\nvar toString = {}.toString;\n\nvar isArray = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar INSPECT_MAX_BYTES = 50;\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : true;\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nvar _kMaxLength = kMaxLength();\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n    that.length = length;\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr\n};\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size);\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n};\n\nfunction allocUnsafe (that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n};\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (internalIsBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0;\n  }\n  return Buffer.alloc(+length)\n}\nBuffer.isBuffer = isBuffer;\nfunction internalIsBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n};\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i;\n  if (length === undefined) {\n    length = 0;\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n    if (!internalIsBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n  return buffer\n};\n\nfunction byteLength (string, encoding) {\n  if (internalIsBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\nBuffer.byteLength = byteLength;\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false;\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true;\n\nfunction swap (b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length;\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n  return this\n};\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length;\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n  return this\n};\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length;\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n  return this\n};\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0;\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n};\n\nBuffer.prototype.equals = function equals (b) {\n  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n};\n\nBuffer.prototype.inspect = function inspect () {\n  var str = '';\n  var max = INSPECT_MAX_BYTES;\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n  return '<Buffer ' + str + '>'\n};\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!internalIsBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n  byteOffset = +byteOffset;  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1);\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (internalIsBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i;\n  if (dir) {\n    var foundIndex = -1;\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n};\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n};\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed;\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n};\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return fromByteArray(buf)\n  } else {\n    return fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n\n  var i = start;\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = '';\n  var i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    );\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length;\n\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n\n  var out = '';\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n\n  var newBuf;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf\n};\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset]\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | (this[offset + 1] << 8)\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return (this[offset] << 8) | this[offset + 1]\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n};\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | (this[offset + 1] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | (this[offset] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, true, 23, 4)\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, false, 23, 4)\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, true, 52, 8)\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, false, 52, 8)\n};\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 1] = (value >>> 8);\n    this[offset] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 3] = (value >>> 24);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4);\n  }\n  write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n};\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8);\n  }\n  write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n};\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length;\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    );\n  }\n\n  return len\n};\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n      if (code < 256) {\n        val = code;\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n\n  if (!val) val = 0;\n\n  var i;\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = internalIsBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this\n};\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray\n}\n\n\nfunction base64ToBytes (str) {\n  return toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i];\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nfunction isBuffer(obj) {\n  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n}\n\nfunction isFastBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n}\n\nexport { Buffer, INSPECT_MAX_BYTES, SlowBuffer, isBuffer, _kMaxLength as kMaxLength };\n", "\nconst polyfill = require('buffer')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\nvar cachedSetTimeout = defaultSetTimout;\nvar cachedClearTimeout = defaultClearTimeout;\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nfunction nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nvar title = 'browser';\nvar platform = 'browser';\nvar browser = true;\nvar env = {};\nvar argv = [];\nvar version = ''; // empty string to avoid regexp issues\nvar versions = {};\nvar release = {};\nvar config = {};\n\nfunction noop() {}\n\nvar on = noop;\nvar addListener = noop;\nvar once = noop;\nvar off = noop;\nvar removeListener = noop;\nvar removeAllListeners = noop;\nvar emit = noop;\n\nfunction binding(name) {\n    throw new Error('process.binding is not supported');\n}\n\nfunction cwd () { return '/' }\nfunction chdir (dir) {\n    throw new Error('process.chdir is not supported');\n}function umask() { return 0; }\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {};\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() };\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3;\n  var seconds = Math.floor(clocktime);\n  var nanoseconds = Math.floor((clocktime%1)*1e9);\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0];\n    nanoseconds = nanoseconds - previousTimestamp[1];\n    if (nanoseconds<0) {\n      seconds--;\n      nanoseconds += 1e9;\n    }\n  }\n  return [seconds,nanoseconds]\n}\n\nvar startTime = new Date();\nfunction uptime() {\n  var currentTime = new Date();\n  var dif = currentTime - startTime;\n  return dif / 1000;\n}\n\nvar browser$1 = {\n  nextTick: nextTick,\n  title: title,\n  browser: browser,\n  env: env,\n  argv: argv,\n  version: version,\n  versions: versions,\n  on: on,\n  addListener: addListener,\n  once: once,\n  off: off,\n  removeListener: removeListener,\n  removeAllListeners: removeAllListeners,\n  emit: emit,\n  binding: binding,\n  cwd: cwd,\n  chdir: chdir,\n  umask: umask,\n  hrtime: hrtime,\n  platform: platform,\n  release: release,\n  config: config,\n  uptime: uptime\n};\n\nexport default browser$1;\nexport { addListener, argv, binding, browser, chdir, config, cwd, emit, env, hrtime, nextTick, off, on, once, platform, release, removeAllListeners, removeListener, title, umask, uptime, version, versions };\n", "\nvar inherits;\nif (typeof Object.create === 'function'){\n  inherits = function inherits(ctor, superCtor) {\n    // implementation from standard node.js 'util' module\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  inherits = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\nexport default inherits;\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport process from 'process';\nvar formatRegExp = /%[sdj%]/g;\nexport function format(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexport function deprecate(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexport function debuglog(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = 0;\n      debugs[set] = function() {\n        var msg = format.apply(null, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nexport function inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexport function isArray(ar) {\n  return Array.isArray(ar);\n}\n\nexport function isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nexport function isNull(arg) {\n  return arg === null;\n}\n\nexport function isNullOrUndefined(arg) {\n  return arg == null;\n}\n\nexport function isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nexport function isString(arg) {\n  return typeof arg === 'string';\n}\n\nexport function isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\n\nexport function isUndefined(arg) {\n  return arg === void 0;\n}\n\nexport function isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nexport function isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nexport function isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nexport function isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nexport function isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nexport function isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\n\nexport function isBuffer(maybeBuf) {\n  return Buffer.isBuffer(maybeBuf);\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexport function log() {\n  console.log('%s - %s', timestamp(), format.apply(null, arguments));\n}\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nimport inherits from './inherits';\nexport {inherits}\n\nexport function _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport default {\n  inherits: inherits,\n  _extend: _extend,\n  log: log,\n  isBuffer: isBuffer,\n  isPrimitive: isPrimitive,\n  isFunction: isFunction,\n  isError: isError,\n  isDate: isDate,\n  isObject: isObject,\n  isRegExp: isRegExp,\n  isUndefined: isUndefined,\n  isSymbol: isSymbol,\n  isString: isString,\n  isNumber: isNumber,\n  isNullOrUndefined: isNullOrUndefined,\n  isNull: isNull,\n  isBoolean: isBoolean,\n  isArray: isArray,\n  inspect: inspect,\n  deprecate: deprecate,\n  format: format,\n  debuglog: debuglog\n}\n", "\nconst polyfill = require('util')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar _require = require('buffer'),\n  Buffer = _require.Buffer;\nvar _require2 = require('util'),\n  inspect = _require2.inspect;\nvar custom = inspect && inspect.custom || 'inspect';\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\nmodule.exports = /*#__PURE__*/function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n      while (p = p.next) ret += s + p.data;\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n      return ret;\n    }\n\n    // Consumes a specified amount of bytes or characters from the buffered data.\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    }\n\n    // Consumes a specified amount of characters from the buffered data.\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n          break;\n        }\n        ++c;\n      }\n      this.length -= c;\n      return ret;\n    }\n\n    // Consumes a specified amount of bytes from the buffered data.\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n          break;\n        }\n        ++c;\n      }\n      this.length -= c;\n      return ret;\n    }\n\n    // Make sure the linked list only shows the minimal necessary information.\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n  return BufferList;\n}();", "'use strict';\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n  return this;\n}\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};", "'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inheritsLoose(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  msg += \". Received type \".concat(typeof actual);\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented';\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\nmodule.exports.codes = codes;\n", "'use strict';\n\nvar ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n    return Math.floor(hwm);\n  }\n\n  // Default value\n  return state.objectMode ? 16 : 16 * 1024;\n}\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};", "if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n", "\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\nvar destroyImpl = require('./internal/streams/destroy');\nvar _require = require('./internal/streams/state'),\n  getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = require('../errors').codes,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nrequire('inherits')(Writable, Stream);\nfunction nop() {}\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = options.emitClose !== false;\n\n  // Should .destroy() be called after 'finish' (and potentially 'end')\n  this.autoDestroy = !!options.autoDestroy;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex);\n\n  // legacy.\n  this.writable = true;\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END();\n  // TODO: defer error events consistently everywhere, not just the cb\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n  return true;\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n  return ret;\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\nWritable.prototype._writev = null;\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n  return need;\n}\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n\n  // reuse the free corkReq.\n  state.corkedRequestsFree.next = corkReq;\n}\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\nrequire('inherits')(Duplex, Readable);\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  process.nextTick(onEndNT, this);\n}\nfunction onEndNT(self) {\n  self.end();\n}\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});", "/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}", "// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    callback.apply(this, args);\n  };\n}\nfunction noop() {}\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n  var writableEnded = stream._writableState && stream._writableState.finished;\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n  var onclose = function onclose() {\n    var err;\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\nmodule.exports = eos;", "'use strict';\n\nvar _Object$setPrototypeO;\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar finished = require('./end-of-stream');\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n  if (resolve !== null) {\n    var data = iter[kStream].read();\n    // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n  next: function next() {\n    var _this = this;\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    }\n\n    // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n    var lastPromise = this[kLastPromise];\n    var promise;\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n      promise = new Promise(this[kHandlePromise]);\n    }\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject];\n      // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n      iterator[kError] = err;\n      return;\n    }\n    var resolve = iterator[kLastResolve];\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\nmodule.exports = createReadableStreamAsyncIterator;", "module.exports = function () {\n  throw new Error('Readable.from is not available in the browser')\n};\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/buffer_list');\nvar destroyImpl = require('./internal/streams/destroy');\nvar _require = require('./internal/streams/state'),\n  getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = require('../errors').codes,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n\n// Lazy loaded to improve the startup performance.\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\nrequire('inherits')(Readable, Stream);\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true;\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = options.emitClose !== false;\n\n  // Should .destroy() be called after 'end' (and potentially 'finish')\n  this.autoDestroy = !!options.autoDestroy;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex);\n\n  // legacy\n  this.readable = true;\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n  Stream.call(this);\n}\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  }\n\n  // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n  return er;\n}\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder;\n  // If setEncoding(null), decoder.encoding equals utf8\n  this._readableState.encoding = this._readableState.decoder.encoding;\n\n  // Iterate over current buffer to convert already stored Buffers:\n  var p = this._readableState.buffer.head;\n  var content = '';\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n  this._readableState.buffer.clear();\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n};\n\n// Don't raise the hwm > 1GB\nvar MAX_HWM = 0x40000000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  }\n\n  // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n  return dest;\n};\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {\n      hasUnpiped: false\n    });\n    return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0;\n\n    // Try start flowing on next tick if stream isn't explicitly paused\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n  return res;\n};\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n  return res;\n};\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true;\n\n    // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n  state.paused = false;\n  return this;\n};\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n  if (!state.reading) {\n    stream.read(0);\n  }\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  this._readableState.paused = true;\n  return this;\n};\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null);\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n  return this;\n};\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n    return createReadableStreamAsyncIterator(this);\n  };\n}\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n});\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length);\n\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n    return from(Readable, iterable, opts);\n  };\n}\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\nvar _require$codes = require('../errors').codes,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\nvar Duplex = require('./_stream_duplex');\nrequire('inherits')(Transform, Duplex);\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null)\n    // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\nfunction prefinish() {\n  var _this = this;\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null)\n    // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\nvar Transform = require('./_stream_transform');\nrequire('inherits')(PassThrough, Transform);\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};", "// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n\n'use strict';\n\nvar eos;\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\nvar _require$codes = require('../../../errors').codes,\n  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true;\n\n    // request.destroy just do .end - .abort is what we want\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\nfunction call(fn) {\n  fn();\n}\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\nmodule.exports = pipeline;", "exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\nexports.finished = require('./lib/internal/streams/end-of-stream.js');\nexports.pipeline = require('./lib/internal/streams/pipeline.js');\n", "const Transform = require('readable-stream').Transform\n\nmodule.exports = class Blake extends Transform {\n  constructor (engine, options) {\n    super(options)\n\n    this._engine = engine\n    this._finalized = false\n  }\n\n  _transform (chunk, encoding, callback) {\n    let error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  _flush (callback) {\n    let error = null\n    try {\n      this.push(this.digest())\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  update (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Digest already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._engine.update(data)\n\n    return this\n  }\n\n  digest (encoding) {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    let digest = this._engine.digest()\n    if (encoding !== undefined) digest = digest.toString(encoding)\n\n    return digest\n  }\n}\n", "const Blake = require('./blake')\n\nmodule.exports = (engines) => {\n  const getEngine = (algorithm) => {\n    const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm\n    switch (hash) {\n      case 'blake224': return engines.Blake224\n      case 'blake256': return engines.Blake256\n      case 'blake384': return engines.Blake384\n      case 'blake512': return engines.Blake512\n\n      default: throw new Error('Invald algorithm: ' + algorithm)\n    }\n  }\n\n  return (algorithm, options) => {\n    const Engine = getEngine(algorithm)\n    return new Blake(new Engine(), options)\n  }\n}\n", "class Blake {\n  _lengthCarry (arr) {\n    for (let j = 0; j < arr.length; ++j) {\n      if (arr[j] < 0x0100000000) break\n      arr[j] -= 0x0100000000\n      arr[j + 1] += 1\n    }\n  }\n\n  update (data) {\n    const block = this._block\n    let offset = 0\n\n    while (this._blockOffset + data.length - offset >= block.length) {\n      for (let i = this._blockOffset; i < block.length;) block[i++] = data[offset++]\n\n      this._length[0] += block.length * 8\n      this._lengthCarry(this._length)\n\n      this._compress()\n      this._blockOffset = 0\n    }\n\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]\n  }\n}\n\nBlake.sigma = [\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n  [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],\n  [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],\n  [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],\n  [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],\n  [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9],\n  [12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11],\n  [13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10],\n  [6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5],\n  [10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n  [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],\n  [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],\n  [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],\n  [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],\n  [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]\n]\n\nBlake.u256 = [\n  0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,\n  0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,\n  0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n  0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917\n]\n\nBlake.u512 = [\n  0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,\n  0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,\n  0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n  0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,\n  0x9216d5d9, 0x8979fb1b, 0xd1310ba6, 0x98dfb5ac,\n  0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96,\n  0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,\n  0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69\n]\n\nBlake.padding = Buffer.from([\n  0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n])\n\nmodule.exports = Blake\n", "const Blake = require('./blake')\n\nconst zo = Buffer.from([0x01])\nconst oo = Buffer.from([0x81])\n\nconst rot = (x, n) => ((x << (32 - n)) | (x >>> n)) >>> 0\n\nfunction g (v, m, i, a, b, c, d, e) {\n  const sigma = Blake.sigma\n  const u256 = Blake.u256\n\n  v[a] = (v[a] + ((m[sigma[i][e]] ^ u256[sigma[i][e + 1]]) >>> 0) + v[b]) >>> 0\n  v[d] = rot(v[d] ^ v[a], 16)\n  v[c] = (v[c] + v[d]) >>> 0\n  v[b] = rot(v[b] ^ v[c], 12)\n  v[a] = (v[a] + ((m[sigma[i][e + 1]] ^ u256[sigma[i][e]]) >>> 0) + v[b]) >>> 0\n  v[d] = rot(v[d] ^ v[a], 8)\n  v[c] = (v[c] + v[d]) >>> 0\n  v[b] = rot(v[b] ^ v[c], 7)\n}\n\nmodule.exports = class Blake256 extends Blake {\n  constructor () {\n    super()\n\n    this._h = [\n      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n      0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n    ]\n\n    this._s = [0, 0, 0, 0]\n\n    this._block = Buffer.alloc(64)\n    this._blockOffset = 0\n    this._length = [0, 0]\n\n    this._nullt = false\n\n    this._zo = zo\n    this._oo = oo\n  }\n\n  _compress () {\n    const u256 = Blake.u256\n    const v = new Array(16)\n    const m = new Array(16)\n    let i\n\n    for (i = 0; i < 16; ++i) m[i] = this._block.readUInt32BE(i * 4)\n    for (i = 0; i < 8; ++i) v[i] = this._h[i] >>> 0\n    for (i = 8; i < 12; ++i) v[i] = (this._s[i - 8] ^ u256[i - 8]) >>> 0\n    for (i = 12; i < 16; ++i) v[i] = u256[i - 8]\n\n    if (!this._nullt) {\n      v[12] = (v[12] ^ this._length[0]) >>> 0\n      v[13] = (v[13] ^ this._length[0]) >>> 0\n      v[14] = (v[14] ^ this._length[1]) >>> 0\n      v[15] = (v[15] ^ this._length[1]) >>> 0\n    }\n\n    for (i = 0; i < 14; ++i) {\n      /* column step */\n      g(v, m, i, 0, 4, 8, 12, 0)\n      g(v, m, i, 1, 5, 9, 13, 2)\n      g(v, m, i, 2, 6, 10, 14, 4)\n      g(v, m, i, 3, 7, 11, 15, 6)\n      /* diagonal step */\n      g(v, m, i, 0, 5, 10, 15, 8)\n      g(v, m, i, 1, 6, 11, 12, 10)\n      g(v, m, i, 2, 7, 8, 13, 12)\n      g(v, m, i, 3, 4, 9, 14, 14)\n    }\n\n    for (i = 0; i < 16; ++i) this._h[i % 8] = (this._h[i % 8] ^ v[i]) >>> 0\n    for (i = 0; i < 8; ++i) this._h[i] = (this._h[i] ^ this._s[i % 4]) >>> 0\n  }\n\n  _padding () {\n    let lo = this._length[0] + this._blockOffset * 8\n    let hi = this._length[1]\n    if (lo >= 0x0100000000) {\n      lo -= 0x0100000000\n      hi += 1\n    }\n\n    const msglen = Buffer.alloc(8)\n    msglen.writeUInt32BE(hi, 0)\n    msglen.writeUInt32BE(lo, 4)\n\n    if (this._blockOffset === 55) {\n      this._length[0] -= 8\n      this.update(this._oo)\n    } else {\n      if (this._blockOffset < 55) {\n        if (this._blockOffset === 0) this._nullt = true\n        this._length[0] -= (55 - this._blockOffset) * 8\n        this.update(Blake.padding.slice(0, 55 - this._blockOffset))\n      } else {\n        this._length[0] -= (64 - this._blockOffset) * 8\n        this.update(Blake.padding.slice(0, 64 - this._blockOffset))\n        this._length[0] -= 55 * 8\n        this.update(Blake.padding.slice(1, 1 + 55))\n        this._nullt = true\n      }\n\n      this.update(this._zo)\n      this._length[0] -= 8\n    }\n\n    this._length[0] -= 64\n    this.update(msglen)\n  }\n\n  digest () {\n    this._padding()\n\n    const buffer = Buffer.alloc(32)\n    for (let i = 0; i < 8; ++i) buffer.writeUInt32BE(this._h[i], i * 4)\n    return buffer\n  }\n}\n", "const Blake256 = require('./blake256')\n\nconst zo = Buffer.from([0x00])\nconst oo = Buffer.from([0x80])\n\nmodule.exports = class Blake224 extends Blake256 {\n  constructor () {\n    super()\n\n    this._h = [\n      0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n    ]\n\n    this._zo = zo\n    this._oo = oo\n  }\n\n  digest () {\n    this._padding()\n\n    const buffer = Buffer.alloc(28)\n    for (let i = 0; i < 7; ++i) buffer.writeUInt32BE(this._h[i], i * 4)\n    return buffer\n  }\n}\n", "const Blake = require('./blake')\n\nconst zo = Buffer.from([0x01])\nconst oo = Buffer.from([0x81])\n\nfunction rot (v, i, j, n) {\n  let hi = v[i * 2] ^ v[j * 2]\n  let lo = v[i * 2 + 1] ^ v[j * 2 + 1]\n\n  if (n >= 32) {\n    lo = lo ^ hi\n    hi = lo ^ hi\n    lo = lo ^ hi\n    n -= 32\n  }\n\n  if (n === 0) {\n    v[i * 2] = hi >>> 0\n    v[i * 2 + 1] = lo >>> 0\n  } else {\n    v[i * 2] = ((hi >>> n) | (lo << (32 - n))) >>> 0\n    v[i * 2 + 1] = ((lo >>> n) | (hi << (32 - n))) >>> 0\n  }\n}\n\nfunction g (v, m, i, a, b, c, d, e) {\n  const sigma = Blake.sigma\n  const u512 = Blake.u512\n  let lo\n\n  // v[a] += (m[sigma[i][e]] ^ u512[sigma[i][e+1]]) + v[b];\n  lo = v[a * 2 + 1] + ((m[sigma[i][e] * 2 + 1] ^ u512[sigma[i][e + 1] * 2 + 1]) >>> 0) + v[b * 2 + 1]\n  v[a * 2] = (v[a * 2] + ((m[sigma[i][e] * 2] ^ u512[sigma[i][e + 1] * 2]) >>> 0) + v[b * 2] + ~~(lo / 0x0100000000)) >>> 0\n  v[a * 2 + 1] = lo >>> 0\n\n  // v[d] = ROT( v[d] ^ v[a],32);\n  rot(v, d, a, 32)\n\n  // v[c] += v[d];\n  lo = v[c * 2 + 1] + v[d * 2 + 1]\n  v[c * 2] = (v[c * 2] + v[d * 2] + ~~(lo / 0x0100000000)) >>> 0\n  v[c * 2 + 1] = lo >>> 0\n\n  // v[b] = ROT( v[b] ^ v[c],25);\n  rot(v, b, c, 25)\n\n  // v[a] += (m[sigma[i][e+1]] ^ u512[sigma[i][e]])+v[b];\n  lo = v[a * 2 + 1] + ((m[sigma[i][e + 1] * 2 + 1] ^ u512[sigma[i][e] * 2 + 1]) >>> 0) + v[b * 2 + 1]\n  v[a * 2] = (v[a * 2] + ((m[sigma[i][e + 1] * 2] ^ u512[sigma[i][e] * 2]) >>> 0) + v[b * 2] + ~~(lo / 0x0100000000)) >>> 0\n  v[a * 2 + 1] = lo >>> 0\n\n  // v[d] = ROT( v[d] ^ v[a],16);\n  rot(v, d, a, 16)\n\n  // v[c] += v[d];\n  lo = v[c * 2 + 1] + v[d * 2 + 1]\n  v[c * 2] = (v[c * 2] + v[d * 2] + ~~(lo / 0x0100000000)) >>> 0\n  v[c * 2 + 1] = lo >>> 0\n\n  // v[b] = ROT( v[b] ^ v[c],11)\n  rot(v, b, c, 11)\n}\n\nmodule.exports = class Blake512 extends Blake {\n  constructor () {\n    super()\n\n    this._h = [\n      0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b,\n      0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n      0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f,\n      0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179\n    ]\n\n    this._s = [0, 0, 0, 0, 0, 0, 0, 0]\n\n    this._block = Buffer.alloc(128)\n    this._blockOffset = 0\n    this._length = [0, 0, 0, 0]\n\n    this._nullt = false\n\n    this._zo = zo\n    this._oo = oo\n  }\n\n  _compress () {\n    const u512 = Blake.u512\n    const v = new Array(32)\n    const m = new Array(32)\n    let i\n\n    for (i = 0; i < 32; ++i) m[i] = this._block.readUInt32BE(i * 4)\n    for (i = 0; i < 16; ++i) v[i] = this._h[i] >>> 0\n    for (i = 16; i < 24; ++i) v[i] = (this._s[i - 16] ^ u512[i - 16]) >>> 0\n    for (i = 24; i < 32; ++i) v[i] = u512[i - 16]\n\n    if (!this._nullt) {\n      v[24] = (v[24] ^ this._length[1]) >>> 0\n      v[25] = (v[25] ^ this._length[0]) >>> 0\n      v[26] = (v[26] ^ this._length[1]) >>> 0\n      v[27] = (v[27] ^ this._length[0]) >>> 0\n      v[28] = (v[28] ^ this._length[3]) >>> 0\n      v[29] = (v[29] ^ this._length[2]) >>> 0\n      v[30] = (v[30] ^ this._length[3]) >>> 0\n      v[31] = (v[31] ^ this._length[2]) >>> 0\n    }\n\n    for (i = 0; i < 16; ++i) {\n      /* column step */\n      g(v, m, i, 0, 4, 8, 12, 0)\n      g(v, m, i, 1, 5, 9, 13, 2)\n      g(v, m, i, 2, 6, 10, 14, 4)\n      g(v, m, i, 3, 7, 11, 15, 6)\n      /* diagonal step */\n      g(v, m, i, 0, 5, 10, 15, 8)\n      g(v, m, i, 1, 6, 11, 12, 10)\n      g(v, m, i, 2, 7, 8, 13, 12)\n      g(v, m, i, 3, 4, 9, 14, 14)\n    }\n\n    for (i = 0; i < 16; ++i) {\n      this._h[(i % 8) * 2] = (this._h[(i % 8) * 2] ^ v[i * 2]) >>> 0\n      this._h[(i % 8) * 2 + 1] = (this._h[(i % 8) * 2 + 1] ^ v[i * 2 + 1]) >>> 0\n    }\n\n    for (i = 0; i < 8; ++i) {\n      this._h[i * 2] = (this._h[i * 2] ^ this._s[(i % 4) * 2]) >>> 0\n      this._h[i * 2 + 1] = (this._h[i * 2 + 1] ^ this._s[(i % 4) * 2 + 1]) >>> 0\n    }\n  }\n\n  _padding () {\n    const len = this._length.slice()\n    len[0] += this._blockOffset * 8\n    this._lengthCarry(len)\n\n    const msglen = Buffer.alloc(16)\n    for (let i = 0; i < 4; ++i) msglen.writeUInt32BE(len[3 - i], i * 4)\n\n    if (this._blockOffset === 111) {\n      this._length[0] -= 8\n      this.update(this._oo)\n    } else {\n      if (this._blockOffset < 111) {\n        if (this._blockOffset === 0) this._nullt = true\n        this._length[0] -= (111 - this._blockOffset) * 8\n        this.update(Blake.padding.slice(0, 111 - this._blockOffset))\n      } else {\n        this._length[0] -= (128 - this._blockOffset) * 8\n        this.update(Blake.padding.slice(0, 128 - this._blockOffset))\n        this._length[0] -= 111 * 8\n        this.update(Blake.padding.slice(1, 1 + 111))\n        this._nullt = true\n      }\n\n      this.update(this._zo)\n      this._length[0] -= 8\n    }\n\n    this._length[0] -= 128\n    this.update(msglen)\n  }\n\n  digest () {\n    this._padding()\n\n    const buffer = Buffer.alloc(64)\n    for (let i = 0; i < 16; ++i) buffer.writeUInt32BE(this._h[i], i * 4)\n    return buffer\n  }\n}\n", "const Blake512 = require('./blake512')\n\nconst zo = Buffer.from([0x00])\nconst oo = Buffer.from([0x80])\n\nmodule.exports = class Blake384 extends Blake512 {\n  constructor () {\n    super()\n\n    this._h = [\n      0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507,\n      0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n      0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511,\n      0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4\n    ]\n\n    this._zo = zo\n    this._oo = oo\n  }\n\n  digest () {\n    this._padding()\n\n    const buffer = Buffer.alloc(48)\n    for (let i = 0; i < 12; ++i) buffer.writeUInt32BE(this._h[i], i * 4)\n    return buffer\n  }\n}\n", "module.exports = {\n  Blake224: require('./blake224'),\n  Blake256: require('./blake256'),\n  Blake384: require('./blake384'),\n  Blake512: require('./blake512')\n}\n", "module.exports = require('./lib/api')(require('./lib'))\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexports.bigInt2BytesLE = function bigInt2BytesLE(_a, len) {\n    const b = Array(len);\n    let v = BigInt(_a);\n    for (let i=0; i<len; i++) {\n        b[i] = Number(v & 0xFFn);\n        v = v >> 8n;\n    }\n    return b;\n};\n\nexports.bigInt2U32LE = function bigInt2BytesLE(_a, len) {\n    const b = Array(len);\n    let v = BigInt(_a);\n    for (let i=0; i<len; i++) {\n        b[i] = Number(v & 0xFFFFFFFFn);\n        v = v >> 32n;\n    }\n    return b;\n};\n\nexports.isOcamNum = function(a) {\n    if (!Array.isArray(a)) return false;\n    if (a.length != 3) return false;\n    if (typeof a[0] !== \"number\") return false;\n    if (typeof a[1] !== \"number\") return false;\n    if (!Array.isArray(a[2])) return false;\n    return true;\n};\n\n\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildInt(module, n64, _prefix) {\n\n    const prefix = _prefix || \"int\";\n    if (module.modules[prefix]) return prefix;  // already builded\n    module.modules[prefix] = {};\n\n    const n32 = n64*2;\n    const n8 = n64*8;\n\n    function buildCopy() {\n        const f = module.addFunction(prefix+\"_copy\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pr\"),\n                    i*8,\n                    c.i64_load(\n                        c.getLocal(\"px\"),\n                        i*8\n                    )\n                )\n            );\n        }\n    }\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pr\"),\n                    i*8,\n                    c.i64_const(0)\n                )\n            );\n        }\n    }\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.i64_store(\n                c.getLocal(\"pr\"),\n                0,\n                c.i64_const(1)\n            )\n        );\n        for (let i=1; i<n64; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pr\"),\n                    i*8,\n                    c.i64_const(0)\n                )\n            );\n        }\n    }\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix+\"_isZero\");\n        f.addParam(\"px\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        function getCompCode(n) {\n            if (n==0) {\n                return  c.ret(c.i64_eqz(\n                    c.i64_load(c.getLocal(\"px\"))\n                ));\n            }\n            return c.if(\n                c.i64_eqz(\n                    c.i64_load(c.getLocal(\"px\"), n*8 )\n                ),\n                getCompCode(n-1),\n                c.ret(c.i32_const(0))\n            );\n        }\n\n        f.addCode(getCompCode(n64-1));\n        f.addCode(c.ret(c.i32_const(0)));\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix+\"_eq\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"py\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        function getCompCode(n) {\n            if (n==0) {\n                return  c.ret(c.i64_eq(\n                    c.i64_load(c.getLocal(\"px\")),\n                    c.i64_load(c.getLocal(\"py\"))\n                ));\n            }\n            return c.if(\n                c.i64_eq(\n                    c.i64_load(c.getLocal(\"px\"), n*8 ),\n                    c.i64_load(c.getLocal(\"py\"), n*8 )\n                ),\n                getCompCode(n-1),\n                c.ret(c.i32_const(0))\n            );\n        }\n\n        f.addCode(getCompCode(n64-1));\n        f.addCode(c.ret(c.i32_const(0)));\n    }\n\n\n\n    function buildGte() {\n        const f = module.addFunction(prefix+\"_gte\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"py\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        function getCompCode(n) {\n            if (n==0) {\n                return  c.ret(c.i64_ge_u(\n                    c.i64_load(c.getLocal(\"px\")),\n                    c.i64_load(c.getLocal(\"py\"))\n                ));\n            }\n            return c.if(\n                c.i64_lt_u(\n                    c.i64_load(c.getLocal(\"px\"), n*8 ),\n                    c.i64_load(c.getLocal(\"py\"), n*8 )\n                ),\n                c.ret(c.i32_const(0)),\n                c.if(\n                    c.i64_gt_u(\n                        c.i64_load(c.getLocal(\"px\"), n*8 ),\n                        c.i64_load(c.getLocal(\"py\"), n*8 )\n                    ),\n                    c.ret(c.i32_const(1)),\n                    getCompCode(n-1)\n                )\n            );\n        }\n\n        f.addCode(getCompCode(n64-1));\n        f.addCode(c.ret(c.i32_const(0)));\n    }\n\n\n\n    function buildAdd() {\n\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"c\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_add(\n                c.i64_load32_u(c.getLocal(\"x\")),\n                c.i64_load32_u(c.getLocal(\"y\"))\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"r\"),\n            c.getLocal(\"c\"),\n        ));\n\n        for (let i=1; i<n32; i++) {\n            f.addCode(c.setLocal( \"c\",\n                c.i64_add(\n                    c.i64_add(\n                        c.i64_load32_u(c.getLocal(\"x\"), 4*i),\n                        c.i64_load32_u(c.getLocal(\"y\"), 4*i)\n                    ),\n                    c.i64_shr_u (c.getLocal(\"c\"), c.i64_const(32))\n                )\n            ));\n\n            f.addCode(c.i64_store32(\n                c.getLocal(\"r\"),\n                i*4,\n                c.getLocal(\"c\")\n            ));\n        }\n\n        f.addCode(c.i32_wrap_i64(c.i64_shr_u (c.getLocal(\"c\"), c.i64_const(32))));\n    }\n\n\n    function buildSub() {\n\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"c\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_sub(\n                c.i64_load32_u(c.getLocal(\"x\")),\n                c.i64_load32_u(c.getLocal(\"y\"))\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"r\"),\n            c.i64_and(\n                c.getLocal(\"c\"),\n                c.i64_const(\"0xFFFFFFFF\")\n            )\n        ));\n\n        for (let i=1; i<n32; i++) {\n            f.addCode(c.setLocal( \"c\",\n                c.i64_add(\n                    c.i64_sub(\n                        c.i64_load32_u(c.getLocal(\"x\"), 4*i),\n                        c.i64_load32_u(c.getLocal(\"y\"), 4*i)\n                    ),\n                    c.i64_shr_s (c.getLocal(\"c\"), c.i64_const(32))\n                )\n            ));\n\n            f.addCode(c.i64_store32(\n                c.getLocal(\"r\"),\n                i*4,\n                c.i64_and( c.getLocal(\"c\"), c.i64_const(\"0xFFFFFFFF\"))\n            ));\n        }\n\n        f.addCode(c.i32_wrap_i64 ( c.i64_shr_s (c.getLocal(\"c\"), c.i64_const(32))));\n    }\n\n\n    function buildMul() {\n\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n            f.addLocal(\"y\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const loadX = [];\n        const loadY = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadY[j]) {\n                Y = c.teeLocal(\"y\"+j, c.i64_load32_u( c.getLocal(\"y\"), j*4));\n                loadY[j] = true;\n            } else {\n                Y = c.getLocal(\"y\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            for (let i=Math.max(0, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n\n            }\n\n            f.addCode(\n                c.i64_store32(\n                    c.getLocal(\"r\"),\n                    k*4,\n                    c.getLocal(c0)\n                )\n            );\n            [c0, c1] = [c1, c0];\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_shr_u(\n                        c.getLocal(c0),\n                        c.i64_const(32)\n                    )\n                )\n            );\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4*2-4,\n                c.getLocal(c0)\n            )\n        );\n\n    }\n\n\n\n    function buildSquare() {\n\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n        f.addLocal(\"c0_old\", \"i64\");\n        f.addLocal(\"c1_old\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const loadX = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadX[j]) {\n                Y = c.teeLocal(\"x\"+j, c.i64_load32_u( c.getLocal(\"x\"), j*4));\n                loadX[j] = true;\n            } else {\n                Y = c.getLocal(\"x\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n        let c0_old = \"c0_old\";\n        let c1_old = \"c1_old\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            f.addCode(\n                c.setLocal(c0, c.i64_const(0)),\n                c.setLocal(c1, c.i64_const(0)),\n            );\n\n            for (let i=Math.max(0, k-n32+1); (i<((k+1)>>1) )&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Multiply by 2\n            f.addCode(\n                c.setLocal(c0,\n                    c.i64_shl(\n                        c.i64_and(\n                            c.getLocal(c0),\n                            c.i64_const(0xFFFFFFFF)\n                        ),\n                        c.i64_const(1)\n                    )\n                )\n            );\n\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_add(\n                        c.i64_shl(\n                            c.getLocal(c1),\n                            c.i64_const(1)\n                        ),\n                        c.i64_shr_u(\n                            c.getLocal(c0),\n                            c.i64_const(32)\n                        )\n                    )\n                )\n            );\n\n            if (k%2 == 0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(k>>1, k>>1)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Add the old carry\n\n            if (k>0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            c.i64_and(\n                                c.getLocal(c0_old),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.i64_add(\n                                c.getLocal(c1),\n                                c.i64_shr_u(\n                                    c.getLocal(c0),\n                                    c.i64_const(32)\n                                )\n                            ),\n                            c.getLocal(c1_old)\n                        )\n                    )\n                );\n            }\n\n            f.addCode(\n                c.i64_store32(\n                    c.getLocal(\"r\"),\n                    k*4,\n                    c.getLocal(c0)\n                )\n            );\n\n            f.addCode(\n                c.setLocal(\n                    c0_old,\n                    c.getLocal(c1)\n                ),\n                c.setLocal(\n                    c1_old,\n                    c.i64_shr_u(\n                        c.getLocal(c0_old),\n                        c.i64_const(32)\n                    )\n                )\n            );\n\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4*2-4,\n                c.getLocal(c0_old)\n            )\n        );\n\n    }\n\n\n    function buildSquareOld() {\n        const f = module.addFunction(prefix+\"_squareOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(prefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"x\"), c.getLocal(\"r\")));\n    }\n\n    function _buildMul1() {\n        const f = module.addFunction(prefix+\"__mul1\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"y\", \"i64\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"c\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_mul(\n                c.i64_load32_u(c.getLocal(\"px\"), 0, 0),\n                c.getLocal(\"y\")\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"pr\"),\n            0,\n            0,\n            c.getLocal(\"c\"),\n        ));\n\n        for (let i=1; i<n32; i++) {\n            f.addCode(c.setLocal( \"c\",\n                c.i64_add(\n                    c.i64_mul(\n                        c.i64_load32_u(c.getLocal(\"px\"), 4*i, 0),\n                        c.getLocal(\"y\")\n                    ),\n                    c.i64_shr_u (c.getLocal(\"c\"), c.i64_const(32))\n                )\n            ));\n\n            f.addCode(c.i64_store32(\n                c.getLocal(\"pr\"),\n                i*4,\n                0,\n                c.getLocal(\"c\")\n            ));\n        }\n    }\n\n    function _buildAdd1() {\n        const f = module.addFunction(prefix+\"__add1\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i64\");\n        f.addLocal(\"c\", \"i64\");\n        f.addLocal(\"px\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\"px\", c.getLocal(\"x\")));\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_add(\n                c.i64_load32_u(c.getLocal(\"px\"), 0, 0),\n                c.getLocal(\"y\")\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"px\"),\n            0,\n            0,\n            c.getLocal(\"c\"),\n        ));\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_shr_u(\n                c.getLocal(\"c\"),\n                c.i64_const(32)\n            )\n        ));\n\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.i64_eqz(c.getLocal(\"c\"))\n            ),\n            c.setLocal(\n                \"px\",\n                c.i32_add(\n                    c.getLocal(\"px\"),\n                    c.i32_const(4)\n                )\n            ),\n\n            c.setLocal(\n                \"c\",\n                c.i64_add(\n                    c.i64_load32_u(c.getLocal(\"px\"), 0, 0),\n                    c.getLocal(\"c\")\n                )\n            ),\n\n            c.i64_store32(\n                c.getLocal(\"px\"),\n                0,\n                0,\n                c.getLocal(\"c\"),\n            ),\n\n            c.setLocal(\n                \"c\",\n                c.i64_shr_u(\n                    c.getLocal(\"c\"),\n                    c.i64_const(32)\n                )\n            ),\n\n            c.br(0)\n        )));\n    }\n\n\n    function buildDiv() {\n        _buildMul1();\n        _buildAdd1();\n\n        const f = module.addFunction(prefix+\"_div\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"c\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"rr\", \"i32\");\n        f.addLocal(\"cc\", \"i32\");\n        f.addLocal(\"eX\", \"i32\");\n        f.addLocal(\"eY\", \"i32\");\n        f.addLocal(\"sy\", \"i64\");\n        f.addLocal(\"sx\", \"i64\");\n        f.addLocal(\"ec\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Y = c.i32_const(module.alloc(n8));\n        const Caux = c.i32_const(module.alloc(n8));\n        const Raux = c.i32_const(module.alloc(n8));\n        const C = c.getLocal(\"cc\");\n        const R = c.getLocal(\"rr\");\n        const pr1 = module.alloc(n8*2);\n        const R1 = c.i32_const(pr1);\n        const R2 = c.i32_const(pr1+n8);\n\n        // Ic c is 0 then store it in an auxiliary buffer\n        f.addCode(c.if(\n            c.getLocal(\"c\"),\n            c.setLocal(\"cc\", c.getLocal(\"c\")),\n            c.setLocal(\"cc\", Caux)\n        ));\n\n        // Ic r is 0 then store it in an auxiliary buffer\n        f.addCode(c.if(\n            c.getLocal(\"r\"),\n            c.setLocal(\"rr\", c.getLocal(\"r\")),\n            c.setLocal(\"rr\", Raux)\n        ));\n\n        // Copy\n        f.addCode(c.call(prefix + \"_copy\", c.getLocal(\"x\"), R));\n        f.addCode(c.call(prefix + \"_copy\", c.getLocal(\"y\"), Y));\n        f.addCode(c.call(prefix + \"_zero\", C));\n        f.addCode(c.call(prefix + \"_zero\", R1));\n\n\n        f.addCode(c.setLocal(\"eX\", c.i32_const(n8-1)));\n        f.addCode(c.setLocal(\"eY\", c.i32_const(n8-1)));\n\n        // while (eY>3)&&(Y[eY]==0) ey--;\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.i32_or(\n                    c.i32_load8_u(\n                        c.i32_add(Y , c.getLocal(\"eY\")),\n                        0,\n                        0\n                    ),\n                    c.i32_eq(\n                        c.getLocal(\"eY\"),\n                        c.i32_const(3)\n                    )\n                )\n            ),\n            c.setLocal(\"eY\", c.i32_sub(c.getLocal(\"eY\"), c.i32_const(1))),\n            c.br(0)\n        )));\n\n        f.addCode(\n            c.setLocal(\n                \"sy\",\n                c.i64_add(\n                    c.i64_load32_u(\n                        c.i32_sub(\n                            c.i32_add( Y, c.getLocal(\"eY\")),\n                            c.i32_const(3)\n                        ),\n                        0,\n                        0\n                    ),\n                    c.i64_const(1)\n                )\n            )\n        );\n\n        // Force a divide by 0 if quotien is 0\n        f.addCode(\n            c.if(\n                c.i64_eq(\n                    c.getLocal(\"sy\"),\n                    c.i64_const(1)\n                ),\n                c.drop(c.i64_div_u(c.i64_const(0), c.i64_const(0)))\n            )\n        );\n\n        f.addCode(c.block(c.loop(\n\n            // while (eX>7)&&(Y[eX]==0) ex--;\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_or(\n                        c.i32_load8_u(\n                            c.i32_add(R , c.getLocal(\"eX\")),\n                            0,\n                            0\n                        ),\n                        c.i32_eq(\n                            c.getLocal(\"eX\"),\n                            c.i32_const(7)\n                        )\n                    )\n                ),\n                c.setLocal(\"eX\", c.i32_sub(c.getLocal(\"eX\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            c.setLocal(\n                \"sx\",\n                c.i64_load(\n                    c.i32_sub(\n                        c.i32_add( R, c.getLocal(\"eX\")),\n                        c.i32_const(7)\n                    ),\n                    0,\n                    0\n                )\n            ),\n\n            c.setLocal(\n                \"sx\",\n                c.i64_div_u(\n                    c.getLocal(\"sx\"),\n                    c.getLocal(\"sy\")\n                )\n            ),\n            c.setLocal(\n                \"ec\",\n                c.i32_sub(\n                    c.i32_sub(\n                        c.getLocal(\"eX\"),\n                        c.getLocal(\"eY\")\n                    ),\n                    c.i32_const(4)\n                )\n            ),\n\n            // While greater than 32 bits or ec is neg, shr and inc exp\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_and(\n                        c.i64_eqz(\n                            c.i64_and(\n                                c.getLocal(\"sx\"),\n                                c.i64_const(\"0xFFFFFFFF00000000\")\n                            )\n                        ),\n                        c.i32_ge_s(\n                            c.getLocal(\"ec\"),\n                            c.i32_const(0)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"sx\",\n                    c.i64_shr_u(\n                        c.getLocal(\"sx\"),\n                        c.i64_const(8)\n                    )\n                ),\n\n                c.setLocal(\n                    \"ec\",\n                    c.i32_add(\n                        c.getLocal(\"ec\"),\n                        c.i32_const(1)\n                    )\n                ),\n                c.br(0)\n            )),\n\n            c.if(\n                c.i64_eqz(c.getLocal(\"sx\")),\n                [\n                    ...c.br_if(\n                        2,\n                        c.i32_eqz(c.call(prefix + \"_gte\", R, Y))\n                    ),\n                    ...c.setLocal(\"sx\", c.i64_const(1)),\n                    ...c.setLocal(\"ec\", c.i32_const(0))\n                ]\n            ),\n\n            c.call(prefix + \"__mul1\", Y, c.getLocal(\"sx\"), R2),\n            c.drop(c.call(\n                prefix + \"_sub\",\n                R,\n                c.i32_sub(R2, c.getLocal(\"ec\")),\n                R\n            )),\n            c.call(\n                prefix + \"__add1\",\n                c.i32_add(C, c.getLocal(\"ec\")),\n                c.getLocal(\"sx\")\n            ),\n            c.br(0)\n        )));\n    }\n\n    function buildInverseMod() {\n\n        const f = module.addFunction(prefix+\"_inverseMod\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"pm\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"t\", \"i32\");\n        f.addLocal(\"newt\", \"i32\");\n        f.addLocal(\"r\", \"i32\");\n        f.addLocal(\"qq\", \"i32\");\n        f.addLocal(\"qr\", \"i32\");\n        f.addLocal(\"newr\", \"i32\");\n        f.addLocal(\"swp\", \"i32\");\n        f.addLocal(\"x\", \"i32\");\n        f.addLocal(\"signt\", \"i32\");\n        f.addLocal(\"signnewt\", \"i32\");\n        f.addLocal(\"signx\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux1 = c.i32_const(module.alloc(n8));\n        const aux2 = c.i32_const(module.alloc(n8));\n        const aux3 = c.i32_const(module.alloc(n8));\n        const aux4 = c.i32_const(module.alloc(n8));\n        const aux5 = c.i32_const(module.alloc(n8));\n        const aux6 = c.i32_const(module.alloc(n8));\n        const mulBuff = c.i32_const(module.alloc(n8*2));\n        const aux7 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"t\", aux1),\n            c.call(prefix + \"_zero\", aux1),\n            c.setLocal(\"signt\", c.i32_const(0)),\n        );\n\n        f.addCode(\n            c.setLocal(\"r\", aux2),\n            c.call(prefix + \"_copy\", c.getLocal(\"pm\"), aux2)\n        );\n\n        f.addCode(\n            c.setLocal(\"newt\", aux3),\n            c.call(prefix + \"_one\", aux3),\n            c.setLocal(\"signnewt\", c.i32_const(0)),\n        );\n\n        f.addCode(\n            c.setLocal(\"newr\", aux4),\n            c.call(prefix + \"_copy\", c.getLocal(\"px\"), aux4)\n        );\n\n\n\n\n        f.addCode(c.setLocal(\"qq\", aux5));\n        f.addCode(c.setLocal(\"qr\", aux6));\n        f.addCode(c.setLocal(\"x\", aux7));\n\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.call(prefix + \"_isZero\", c.getLocal(\"newr\") )\n            ),\n            c.call(prefix + \"_div\", c.getLocal(\"r\"), c.getLocal(\"newr\"), c.getLocal(\"qq\"), c.getLocal(\"qr\")),\n\n            c.call(prefix + \"_mul\", c.getLocal(\"qq\"), c.getLocal(\"newt\"), mulBuff),\n\n            c.if(\n                c.getLocal(\"signt\"),\n                c.if(\n                    c.getLocal(\"signnewt\"),\n                    c.if (\n                        c.call(prefix + \"_gte\", mulBuff, c.getLocal(\"t\")),\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(0))\n                        ],\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", c.getLocal(\"t\"), mulBuff, c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(1))\n                        ],\n                    ),\n                    [\n                        ...c.drop(c.call(prefix + \"_add\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                        ...c.setLocal(\"signx\", c.i32_const(1))\n                    ]\n                ),\n                c.if(\n                    c.getLocal(\"signnewt\"),\n                    [\n                        ...c.drop(c.call(prefix + \"_add\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                        ...c.setLocal(\"signx\", c.i32_const(0))\n                    ],\n                    c.if (\n                        c.call(prefix + \"_gte\", c.getLocal(\"t\"), mulBuff),\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", c.getLocal(\"t\"), mulBuff, c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(0))\n                        ],\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(1))\n                        ]\n                    )\n                )\n            ),\n\n            c.setLocal(\"swp\", c.getLocal(\"t\")),\n            c.setLocal(\"t\", c.getLocal(\"newt\")),\n            c.setLocal(\"newt\", c.getLocal(\"x\")),\n            c.setLocal(\"x\", c.getLocal(\"swp\")),\n\n            c.setLocal(\"signt\", c.getLocal(\"signnewt\")),\n            c.setLocal(\"signnewt\", c.getLocal(\"signx\")),\n\n            c.setLocal(\"swp\", c.getLocal(\"r\")),\n            c.setLocal(\"r\", c.getLocal(\"newr\")),\n            c.setLocal(\"newr\", c.getLocal(\"qr\")),\n            c.setLocal(\"qr\", c.getLocal(\"swp\")),\n\n            c.br(0)\n        )));\n\n        f.addCode(c.if(\n            c.getLocal(\"signt\"),\n            c.drop(c.call(prefix + \"_sub\", c.getLocal(\"pm\"), c.getLocal(\"t\"), c.getLocal(\"pr\"))),\n            c.call(prefix + \"_copy\", c.getLocal(\"t\"), c.getLocal(\"pr\"))\n        ));\n    }\n\n\n    buildCopy();\n    buildZero();\n    buildIsZero();\n    buildOne();\n    buildEq();\n    buildGte();\n    buildAdd();\n    buildSub();\n    buildMul();\n    buildSquare();\n    buildSquareOld();\n    buildDiv();\n    buildInverseMod();\n    module.exportFunction(prefix+\"_copy\");\n    module.exportFunction(prefix+\"_zero\");\n    module.exportFunction(prefix+\"_one\");\n    module.exportFunction(prefix+\"_isZero\");\n    module.exportFunction(prefix+\"_eq\");\n    module.exportFunction(prefix+\"_gte\");\n    module.exportFunction(prefix+\"_add\");\n    module.exportFunction(prefix+\"_sub\");\n    module.exportFunction(prefix+\"_mul\");\n    module.exportFunction(prefix+\"_square\");\n    module.exportFunction(prefix+\"_squareOld\");\n    module.exportFunction(prefix+\"_div\");\n    module.exportFunction(prefix+\"_inverseMod\");\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildTimesScalar(module, fnName, elementLen, opAB, opAA, opCopy, opInit) {\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"base\", \"i32\");\n    f.addParam(\"scalar\", \"i32\");\n    f.addParam(\"scalarLength\", \"i32\");\n    f.addParam(\"r\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"b\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const aux = c.i32_const(module.alloc(elementLen));\n\n    f.addCode(\n        c.if(\n            c.i32_eqz(c.getLocal(\"scalarLength\")),\n            [\n                ...c.call(opInit, c.getLocal(\"r\")),\n                ...c.ret([])\n            ]\n        )\n    );\n    f.addCode(c.call(opCopy, c.getLocal(\"base\"), aux));\n    f.addCode(c.call(opInit, c.getLocal(\"r\")));\n    f.addCode(c.setLocal(\"i\", c.getLocal(\"scalarLength\")));\n    f.addCode(c.block(c.loop(\n        c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n\n        c.setLocal(\n            \"b\",\n            c.i32_load8_u(\n                c.i32_add(\n                    c.getLocal(\"scalar\"),\n                    c.getLocal(\"i\")\n                )\n            )\n        ),\n        ...innerLoop(),\n        c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n        c.br(0)\n    )));\n\n\n    function innerLoop() {\n        const code = [];\n        for (let i=0; i<8; i++) {\n            code.push(\n                ...c.call(opAA, c.getLocal(\"r\"), c.getLocal(\"r\")),\n                ...c.if(\n                    c.i32_ge_u( c.getLocal(\"b\"), c.i32_const(0x80 >> i)),\n                    [\n                        ...c.setLocal(\n                            \"b\",\n                            c.i32_sub(\n                                c.getLocal(\"b\"),\n                                c.i32_const(0x80 >> i)\n                            )\n                        ),\n                        ...c.call(opAB, c.getLocal(\"r\"),aux, c.getLocal(\"r\"))\n                    ]\n                )\n            );\n        }\n        return code;\n    }\n\n};\n", "\nmodule.exports = buildBatchInverse;\n\nfunction buildBatchInverse(module, prefix) {\n\n\n    const n8 = module.modules[prefix].n64*8;\n\n    const f = module.addFunction(prefix+\"_batchInverse\");\n    f.addParam(\"pIn\", \"i32\");\n    f.addParam(\"inStep\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addParam(\"outStep\", \"i32\");\n    f.addLocal(\"itAux\", \"i32\");\n    f.addLocal(\"itIn\", \"i32\");\n    f.addLocal(\"itOut\",\"i32\");\n    f.addLocal(\"i\",\"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const AUX = c.i32_const(module.alloc(n8));\n\n\n    // Alloc Working space for accumulated umltiplications\n    f.addCode(\n        c.setLocal(\"itAux\", c.i32_load( c.i32_const(0) )),\n        c.i32_store(\n            c.i32_const(0),\n            c.i32_add(\n                c.getLocal(\"itAux\"),\n                c.i32_mul(\n                    c.i32_add(\n                        c.getLocal(\"n\"),\n                        c.i32_const(1)\n                    ),\n                    c.i32_const(n8)\n                )\n            )\n        )\n    );\n\n    f.addCode(\n\n        // aux[0] = a;\n        c.call(prefix+\"_one\", c.getLocal(\"itAux\")),\n        // for (i=0;i<n;i++) aux[i] = aux[i-1]*in[i]\n        c.setLocal(\"itIn\", c.getLocal(\"pIn\")),\n        c.setLocal(\"itAux\", c.i32_add(c.getLocal(\"itAux\"), c.i32_const(n8))),\n        c.setLocal(\"i\", c.i32_const(0)),\n\n        c.block(c.loop(\n            c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n            c.if(\n                c.call(prefix+\"_isZero\", c.getLocal(\"itIn\")),\n                c.call(\n                    prefix + \"_copy\",\n                    c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    c.getLocal(\"itAux\")\n                ),\n                c.call(\n                    prefix+\"_mul\",\n                    c.getLocal(\"itIn\"),\n                    c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    c.getLocal(\"itAux\")\n                )\n            ),\n            c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.getLocal(\"inStep\"))),\n            c.setLocal(\"itAux\", c.i32_add(c.getLocal(\"itAux\"), c.i32_const(n8))),\n            c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        )),\n\n        // point to the last\n        c.setLocal(\"itIn\", c.i32_sub(c.getLocal(\"itIn\"), c.getLocal(\"inStep\"))),\n        c.setLocal(\"itAux\", c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8))),\n        // itOut = pOut + (n-1)*stepOut   // Point to the last\n        c.setLocal(\n            \"itOut\",\n            c.i32_add(\n                c.getLocal(\"pOut\"),\n                c.i32_mul(\n                    c.i32_sub(c.getLocal(\"n\"), c.i32_const(1)),\n                    c.getLocal(\"outStep\"),\n                )\n            )\n        ),\n\n        // aux[n-1] = 1/aux[n-1]\n        c.call(prefix+\"_inverse\", c.getLocal(\"itAux\"), c.getLocal(\"itAux\") ),\n\n        c.block(c.loop(\n            c.br_if(1, c.i32_eqz( c.getLocal(\"i\"))),\n            c.if(\n                c.call(prefix+\"_isZero\", c.getLocal(\"itIn\")),\n                [\n                    ...c.call(\n                        prefix + \"_copy\",\n                        c.getLocal(\"itAux\"),\n                        c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    ),\n                    ...c.call(\n                        prefix + \"_zero\",\n                        c.getLocal(\"itOut\")\n                    )\n                ],[\n                    ...c.call(prefix + \"_copy\", c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)), AUX),\n                    ...c.call(\n                        prefix+\"_mul\",\n                        c.getLocal(\"itAux\"),\n                        c.getLocal(\"itIn\"),\n                        c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    ),\n                    ...c.call(\n                        prefix+\"_mul\",\n                        c.getLocal(\"itAux\"),\n                        AUX,\n                        c.getLocal(\"itOut\")\n                    )\n                ]\n            ),\n            c.setLocal(\"itIn\", c.i32_sub(c.getLocal(\"itIn\"), c.getLocal(\"inStep\"))),\n            c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.getLocal(\"outStep\"))),\n            c.setLocal(\"itAux\", c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8))),\n            c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        ))\n\n    );\n\n\n    // Recover Old memory\n    f.addCode(\n        c.i32_store(\n            c.i32_const(0),\n            c.getLocal(\"itAux\")\n        )\n    );\n\n}\n", "\n\nmodule.exports = buildBatchConvertion;\n\nfunction buildBatchConvertion(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {\n    if (typeof reverse === \"undefined\") {\n        // Set the reverse in a way that allows to use the same buffer as in/out.\n        if (sizeIn < sizeOut) {\n            reverse = true;\n        } else {\n            reverse = false;\n        }\n    }\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"pIn\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"itIn\", \"i32\");\n    f.addLocal(\"itOut\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    if (reverse) {\n        f.addCode(\n            c.setLocal(\"itIn\",\n                c.i32_add(\n                    c.getLocal(\"pIn\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeIn)\n                    )\n                )\n            ),\n            c.setLocal(\"itOut\",\n                c.i32_add(\n                    c.getLocal(\"pOut\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeOut)\n                    )\n                )\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn\", c.i32_sub(c.getLocal(\"itIn\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    } else {\n        f.addCode(\n            c.setLocal(\"itIn\", c.getLocal(\"pIn\")),\n            c.setLocal(\"itOut\", c.getLocal(\"pOut\")),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    }\n}\n", "\n\nmodule.exports = buildBatchConvertion;\n\nfunction buildBatchConvertion(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {\n    if (typeof reverse === \"undefined\") {\n        // Set the reverse in a way that allows to use the same buffer as in/out.\n        if (sizeIn < sizeOut) {\n            reverse = true;\n        } else {\n            reverse = false;\n        }\n    }\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"pIn1\", \"i32\");\n    f.addParam(\"pIn2\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"itIn1\", \"i32\");\n    f.addLocal(\"itIn2\", \"i32\");\n    f.addLocal(\"itOut\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    if (reverse) {\n        f.addCode(\n            c.setLocal(\"itIn1\",\n                c.i32_add(\n                    c.getLocal(\"pIn1\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeIn)\n                    )\n                )\n            ),\n            c.setLocal(\"itIn2\",\n                c.i32_add(\n                    c.getLocal(\"pIn2\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeIn)\n                    )\n                )\n            ),\n            c.setLocal(\"itOut\",\n                c.i32_add(\n                    c.getLocal(\"pOut\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeOut)\n                    )\n                )\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn1\"), c.getLocal(\"itIn2\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn1\", c.i32_sub(c.getLocal(\"itIn1\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itIn2\", c.i32_sub(c.getLocal(\"itIn2\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    } else {\n        f.addCode(\n            c.setLocal(\"itIn1\", c.getLocal(\"pIn1\")),\n            c.setLocal(\"itIn2\", c.getLocal(\"pIn2\")),\n            c.setLocal(\"itOut\", c.getLocal(\"pOut\")),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn1\"), c.getLocal(\"itIn2\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn1\", c.i32_add(c.getLocal(\"itIn1\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itIn2\", c.i32_add(c.getLocal(\"itIn2\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    }\n}\n", "// Many of these utilities are from the `big-integer` library,\n// but adjusted to only work with native BigInt type\n// Ref https://github.com/peterolson/BigInteger.js/blob/e5d2154d3c417069c51e7116bafc3b91d0b9fe41/BigInteger.js\n// Originally licensed The Unlicense\n\nfunction compare(a, b) {\n    return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction square(n) {\n    return n * n;\n}\n\nfunction isOdd(n) {\n    return n % 2n !== 0n;\n}\n\nfunction isEven(n) {\n    return n % 2n === 0n;\n}\n\nfunction isNegative(n) {\n    return n < 0n;\n}\n\nfunction isPositive(n) {\n    return n > 0n;\n}\n\nfunction bitLength(n) {\n    if (isNegative(n)) {\n        return n.toString(2).length - 1; // discard the - sign\n    } else {\n        return n.toString(2).length;\n    }\n}\n\nfunction abs(n) {\n    return n < 0n ? -n : n;\n}\n\nfunction isUnit(n) {\n    return abs(n) === 1n;\n}\n\nfunction modInv(a, n) {\n    var t = 0n, newT = 1n, r = n, newR = abs(a), q, lastT, lastR;\n    while (newR !== 0n) {\n        q = r / newR;\n        lastT = t;\n        lastR = r;\n        t = newT;\n        r = newR;\n        newT = lastT - (q * newT);\n        newR = lastR - (q * newR);\n    }\n    if (!isUnit(r)) throw new Error(a.toString() + \" and \" + n.toString() + \" are not co-prime\");\n    if (compare(t, 0n) === -1) {\n        t = t + n;\n    }\n    if (isNegative(a)) {\n        return -t;\n    }\n    return t;\n}\n\nfunction modPow(n, exp, mod) {\n    if (mod === 0n) throw new Error(\"Cannot take modPow with modulus 0\");\n    var r = 1n,\n        base = n % mod;\n    if (isNegative(exp)) {\n        exp = exp * -1n;\n        base = modInv(base, mod);\n    }\n    while (isPositive(exp)) {\n        if (base === 0n) return 0n;\n        if (isOdd(exp)) r = r * base % mod;\n        exp = exp / 2n;\n        base = square(base) % mod;\n    }\n    return r;\n}\n\nfunction compareAbs(a, b) {\n    a = a >= 0n ? a : -a;\n    b = b >= 0n ? b : -b;\n    return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction isDivisibleBy(a, n) {\n    if (n === 0n) return false;\n    if (isUnit(n)) return true;\n    if (compareAbs(n, 2n) === 0) return isEven(a);\n    return a % n === 0n;\n}\n\nfunction isBasicPrime(v) {\n    var n = abs(v);\n    if (isUnit(n)) return false;\n    if (n === 2n || n === 3n || n === 5n) return true;\n    if (isEven(n) || isDivisibleBy(n, 3n) || isDivisibleBy(n, 5n)) return false;\n    if (n < 49n) return true;\n    // we don't know if it's prime: let the other functions figure it out\n}\n\nfunction prev(n) {\n    return n - 1n;\n}\n\nfunction millerRabinTest(n, a) {\n    var nPrev = prev(n),\n        b = nPrev,\n        r = 0,\n        d, i, x;\n    while (isEven(b)) b = b / 2n, r++;\n    next: for (i = 0; i < a.length; i++) {\n        if (n < a[i]) continue;\n        x = modPow(BigInt(a[i]), b, n);\n        if (isUnit(x) || x === nPrev) continue;\n        for (d = r - 1; d != 0; d--) {\n            x = square(x) % n;\n            if (isUnit(x)) return false;\n            if (x === nPrev) continue next;\n        }\n        return false;\n    }\n    return true;\n}\n\nfunction isPrime(p) {\n    var isPrime = isBasicPrime(p);\n    if (isPrime !== undefined) return isPrime;\n    var n = abs(p);\n    var bits = bitLength(n);\n    if (bits <= 64)\n        return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\n    var logN = Math.log(2) * Number(bits);\n    var t = Math.ceil(logN);\n    for (var a = [], i = 0; i < t; i++) {\n        a.push(BigInt(i + 2));\n    }\n    return millerRabinTest(n, a);\n}\n\nmodule.exports.bitLength = bitLength;\nmodule.exports.isOdd = isOdd;\nmodule.exports.isNegative = isNegative;\nmodule.exports.abs = abs;\nmodule.exports.isUnit = isUnit;\nmodule.exports.compare = compare;\nmodule.exports.modInv = modInv;\nmodule.exports.modPow = modPow;\nmodule.exports.isPrime = isPrime;\nmodule.exports.square = square;\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildInt = require(\"./build_int.js\");\nconst utils = require(\"./utils.js\");\nconst buildExp = require(\"./build_timesscalar\");\nconst buildBatchInverse = require(\"./build_batchinverse\");\nconst buildBatchConvertion = require(\"./build_batchconvertion\");\nconst buildBatchOp = require(\"./build_batchop\");\nconst { bitLength, modInv, modPow, isPrime, isOdd, square } = require(\"./bigint.js\");\n\nmodule.exports = function buildF1m(module, _q, _prefix, _intPrefix) {\n    const q = BigInt(_q);\n    const n64 = Math.floor((bitLength(q - 1n) - 1)/64) +1;\n    const n32 = n64*2;\n    const n8 = n64*8;\n\n    const prefix = _prefix || \"f1m\";\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const intPrefix = buildInt(module, n64, _intPrefix);\n    const pq = module.alloc(n8, utils.bigInt2BytesLE(q, n8));\n\n    const pR2 = module.alloc(utils.bigInt2BytesLE(square(1n << BigInt(n64*64)) % q, n8));\n    const pOne = module.alloc(utils.bigInt2BytesLE((1n << BigInt(n64*64)) % q, n8));\n    const pZero = module.alloc(utils.bigInt2BytesLE(0n, n8));\n    const _minusOne = q - 1n;\n    const _e = _minusOne >> 1n; // e = (p-1)/2\n    const pe = module.alloc(n8, utils.bigInt2BytesLE(_e, n8));\n\n    const _ePlusOne = _e + 1n; // e = (p-1)/2\n    const pePlusOne = module.alloc(n8, utils.bigInt2BytesLE(_ePlusOne, n8));\n\n    module.modules[prefix] = {\n        pq: pq,\n        pR2: pR2,\n        n64: n64,\n        q: q,\n        pOne: pOne,\n        pZero: pZero,\n        pePlusOne: pePlusOne\n    };\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(intPrefix + \"_copy\", c.i32_const(pOne), c.getLocal(\"pr\")));\n    }\n\n    function buildAdd() {\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.call(intPrefix+\"_add\", c.getLocal(\"x\"),  c.getLocal(\"y\"), c.getLocal(\"r\")),\n                c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                c.if(\n                    c.call(intPrefix+\"_gte\", c.getLocal(\"r\"), c.i32_const(pq)  ),\n                    c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                )\n            )\n        );\n    }\n\n    function buildSub() {\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.call(intPrefix+\"_sub\", c.getLocal(\"x\"),  c.getLocal(\"y\"), c.getLocal(\"r\")),\n                c.drop(c.call(intPrefix+\"_add\", c.getLocal(\"r\"),  c.i32_const(pq), c.getLocal(\"r\")))\n            )\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix+\"_neg\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(prefix + \"_sub\", c.i32_const(pZero), c.getLocal(\"x\"), c.getLocal(\"r\"))\n        );\n    }\n\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(prefix + \"_fromMontgomery\", c.getLocal(\"x\"), AUX),\n            c.call(intPrefix + \"_gte\", AUX, c.i32_const(pePlusOne) )\n        );\n    }\n\n    function buildSign() {\n        const f = module.addFunction(prefix+\"_sign\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if (\n                c.call(intPrefix + \"_isZero\", c.getLocal(\"x\")),\n                c.ret(c.i32_const(0))\n            ),\n            c.call(prefix + \"_fromMontgomery\", c.getLocal(\"x\"), AUX),\n            c.if(\n                c.call(intPrefix + \"_gte\", AUX, c.i32_const(pePlusOne)),\n                c.ret(c.i32_const(-1))\n            ),\n            c.ret(c.i32_const(1))\n        );\n    }\n\n\n    function buildMReduct() {\n        const carries = module.alloc(n32*n32*8);\n\n        const f = module.addFunction(prefix+\"_mReduct\");\n        f.addParam(\"t\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"np32\", \"i64\");\n        f.addLocal(\"c\", \"i64\");\n        f.addLocal(\"m\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        const np32 = Number(0x100000000n - modInv(q, 0x100000000n));\n\n        f.addCode(c.setLocal(\"np32\", c.i64_const(np32)));\n\n        for (let i=0; i<n32; i++) {\n            f.addCode(c.setLocal(\"c\", c.i64_const(0)));\n\n            f.addCode(\n                c.setLocal(\n                    \"m\",\n                    c.i64_and(\n                        c.i64_mul(\n                            c.i64_load32_u(c.getLocal(\"t\"), i*4),\n                            c.getLocal(\"np32\")\n                        ),\n                        c.i64_const(\"0xFFFFFFFF\")\n                    )\n                )\n            );\n\n            for (let j=0; j<n32; j++) {\n\n                f.addCode(\n                    c.setLocal(\"c\",\n                        c.i64_add(\n                            c.i64_add(\n                                c.i64_load32_u(c.getLocal(\"t\"), (i+j)*4),\n                                c.i64_shr_u(c.getLocal(\"c\"), c.i64_const(32))\n                            ),\n                            c.i64_mul(\n                                c.i64_load32_u(c.i32_const(pq), j*4),\n                                c.getLocal(\"m\")\n                            )\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.i64_store32(\n                        c.getLocal(\"t\"),\n                        (i+j)*4,\n                        c.getLocal(\"c\")\n                    )\n                );\n            }\n\n            f.addCode(\n                c.i64_store32(\n                    c.i32_const(carries),\n                    i*4,\n                    c.i64_shr_u(c.getLocal(\"c\"), c.i64_const(32))\n                )\n            );\n        }\n\n        f.addCode(\n            c.call(\n                prefix+\"_add\",\n                c.i32_const(carries),\n                c.i32_add(\n                    c.getLocal(\"t\"),\n                    c.i32_const(n32*4)\n                ),\n                c.getLocal(\"r\")\n            )\n        );\n    }\n\n\n\n    function buildMul() {\n\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n        f.addLocal(\"np32\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n            f.addLocal(\"y\"+i, \"i64\");\n            f.addLocal(\"m\"+i, \"i64\");\n            f.addLocal(\"q\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const np32 = Number(0x100000000n - modInv(q, 0x100000000n));\n\n        f.addCode(c.setLocal(\"np32\", c.i64_const(np32)));\n\n\n        const loadX = [];\n        const loadY = [];\n        const loadQ = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadY[j]) {\n                Y = c.teeLocal(\"y\"+j, c.i64_load32_u( c.getLocal(\"y\"), j*4));\n                loadY[j] = true;\n            } else {\n                Y = c.getLocal(\"y\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        function mulqm(i, j) {\n            let Q,M;\n            if (!loadQ[i]) {\n                Q = c.teeLocal(\"q\"+i, c.i64_load32_u(c.i32_const(0), pq+i*4 ));\n                loadQ[i] = true;\n            } else {\n                Q = c.getLocal(\"q\"+i);\n            }\n            M = c.getLocal(\"m\"+j);\n\n            return c.i64_mul( Q, M );\n        }\n\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            for (let i=Math.max(0, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n\n            for (let i=Math.max(1, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n            if (k<n32) {\n                f.addCode(\n                    c.setLocal(\n                        \"m\"+k,\n                        c.i64_and(\n                            c.i64_mul(\n                                c.i64_and(\n                                    c.getLocal(c0),\n                                    c.i64_const(0xFFFFFFFF)\n                                ),\n                                c.getLocal(\"np32\")\n                            ),\n                            c.i64_const(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(0,k)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n\n            if (k>=n32) {\n                f.addCode(\n                    c.i64_store32(\n                        c.getLocal(\"r\"),\n                        (k-n32)*4,\n                        c.getLocal(c0)\n                    )\n                );\n            }\n            [c0, c1] = [c1, c0];\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_shr_u(\n                        c.getLocal(c0),\n                        c.i64_const(32)\n                    )\n                )\n            );\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4-4,\n                c.getLocal(c0)\n            )\n        );\n\n        f.addCode(\n            c.if(\n                c.i32_wrap_i64(c.getLocal(c1)),\n                c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                c.if(\n                    c.call(intPrefix+\"_gte\", c.getLocal(\"r\"), c.i32_const(pq)  ),\n                    c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                )\n            )\n        );\n    }\n\n\n    function buildSquare() {\n\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n        f.addLocal(\"c0_old\", \"i64\");\n        f.addLocal(\"c1_old\", \"i64\");\n        f.addLocal(\"np32\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n            f.addLocal(\"m\"+i, \"i64\");\n            f.addLocal(\"q\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const np32 = Number(0x100000000n - modInv(q, 0x100000000n));\n\n        f.addCode(c.setLocal(\"np32\", c.i64_const(np32)));\n\n\n        const loadX = [];\n        const loadQ = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadX[j]) {\n                Y = c.teeLocal(\"x\"+j, c.i64_load32_u( c.getLocal(\"x\"), j*4));\n                loadX[j] = true;\n            } else {\n                Y = c.getLocal(\"x\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        function mulqm(i, j) {\n            let Q,M;\n            if (!loadQ[i]) {\n                Q = c.teeLocal(\"q\"+i, c.i64_load32_u(c.i32_const(0), pq+i*4 ));\n                loadQ[i] = true;\n            } else {\n                Q = c.getLocal(\"q\"+i);\n            }\n            M = c.getLocal(\"m\"+j);\n\n            return c.i64_mul( Q, M );\n        }\n\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n        let c0_old = \"c0_old\";\n        let c1_old = \"c1_old\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            f.addCode(\n                c.setLocal(c0, c.i64_const(0)),\n                c.setLocal(c1, c.i64_const(0)),\n            );\n            for (let i=Math.max(0, k-n32+1); (i<((k+1)>>1) )&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Multiply by 2\n            f.addCode(\n                c.setLocal(c0,\n                    c.i64_shl(\n                        c.i64_and(\n                            c.getLocal(c0),\n                            c.i64_const(0xFFFFFFFF)\n                        ),\n                        c.i64_const(1)\n                    )\n                )\n            );\n\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_add(\n                        c.i64_shl(\n                            c.getLocal(c1),\n                            c.i64_const(1)\n                        ),\n                        c.i64_shr_u(\n                            c.getLocal(c0),\n                            c.i64_const(32)\n                        )\n                    )\n                )\n            );\n\n            if (k%2 == 0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(k>>1, k>>1)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Add the old carry\n\n            if (k>0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            c.i64_and(\n                                c.getLocal(c0_old),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.i64_add(\n                                c.getLocal(c1),\n                                c.i64_shr_u(\n                                    c.getLocal(c0),\n                                    c.i64_const(32)\n                                )\n                            ),\n                            c.getLocal(c1_old)\n                        )\n                    )\n                );\n            }\n\n\n            for (let i=Math.max(1, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n            if (k<n32) {\n                f.addCode(\n                    c.setLocal(\n                        \"m\"+k,\n                        c.i64_and(\n                            c.i64_mul(\n                                c.i64_and(\n                                    c.getLocal(c0),\n                                    c.i64_const(0xFFFFFFFF)\n                                ),\n                                c.getLocal(\"np32\")\n                            ),\n                            c.i64_const(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(0,k)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            if (k>=n32) {\n                f.addCode(\n                    c.i64_store32(\n                        c.getLocal(\"r\"),\n                        (k-n32)*4,\n                        c.getLocal(c0)\n                    )\n                );\n            }\n            f.addCode(\n                c.setLocal(\n                    c0_old,\n                    c.getLocal(c1)\n                ),\n                c.setLocal(\n                    c1_old,\n                    c.i64_shr_u(\n                        c.getLocal(c0_old),\n                        c.i64_const(32)\n                    )\n                )\n            );\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4-4,\n                c.getLocal(c0_old)\n            )\n        );\n\n        f.addCode(\n            c.if(\n                c.i32_wrap_i64(c.getLocal(c1_old)),\n                c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                c.if(\n                    c.call(intPrefix+\"_gte\", c.getLocal(\"r\"), c.i32_const(pq)  ),\n                    c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                )\n            )\n        );\n    }\n\n\n    function buildSquareOld() {\n        const f = module.addFunction(prefix+\"_squareOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(prefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"x\"), c.getLocal(\"r\")));\n    }\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix+\"_toMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(prefix+\"_mul\", c.getLocal(\"x\"), c.i32_const(pR2), c.getLocal(\"r\")));\n    }\n\n    function buildFromMontgomery() {\n\n        const pAux2 = module.alloc(n8*2);\n\n        const f = module.addFunction(prefix+\"_fromMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(intPrefix + \"_copy\", c.getLocal(\"x\"), c.i32_const(pAux2) ));\n        f.addCode(c.call(intPrefix + \"_zero\", c.i32_const(pAux2 + n8) ));\n        f.addCode(c.call(prefix+\"_mReduct\", c.i32_const(pAux2), c.getLocal(\"r\")));\n    }\n\n    function buildInverse() {\n\n        const f = module.addFunction(prefix+ \"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(prefix + \"_fromMontgomery\", c.getLocal(\"x\"), c.getLocal(\"r\")));\n        f.addCode(c.call(intPrefix + \"_inverseMod\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\")));\n        f.addCode(c.call(prefix + \"_toMontgomery\", c.getLocal(\"r\"), c.getLocal(\"r\")));\n    }\n\n    // Calculate various valuse needed for sqrt\n\n\n    let _nqr = 2n;\n    if (isPrime(q)) {\n        while (modPow(_nqr, _e, q) !== _minusOne) _nqr = _nqr + 1n;\n    }\n\n    let s2 = 0;\n    let _t = _minusOne;\n\n    while ((!isOdd(_t))&&(_t !== 0n)) {\n        s2++;\n        _t = _t >> 1n;\n    }\n    const pt = module.alloc(n8, utils.bigInt2BytesLE(_t, n8));\n\n    const _nqrToT = modPow(_nqr, _t, q);\n    const pNqrToT = module.alloc(utils.bigInt2BytesLE((_nqrToT << BigInt(n64*64)) % q, n8));\n\n    const _tPlusOneOver2 = (_t + 1n) >> 1n;\n    const ptPlusOneOver2 = module.alloc(n8, utils.bigInt2BytesLE(_tPlusOneOver2, n8));\n\n    function buildSqrt() {\n\n        const f = module.addFunction(prefix+ \"_sqrt\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"m\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const ONE = c.i32_const(pOne);\n        const C = c.i32_const(module.alloc(n8));\n        const T = c.i32_const(module.alloc(n8));\n        const R = c.i32_const(module.alloc(n8));\n        const SQ = c.i32_const(module.alloc(n8));\n        const B = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n\n            // If (n==0) return 0\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"n\")),\n                c.ret(\n                    c.call(prefix + \"_zero\", c.getLocal(\"r\"))\n                )\n            ),\n\n            c.setLocal(\"m\", c.i32_const(s2)),\n            c.call(prefix + \"_copy\", c.i32_const(pNqrToT), C),\n            c.call(prefix + \"_exp\", c.getLocal(\"n\"), c.i32_const(pt), c.i32_const(n8), T),\n            c.call(prefix + \"_exp\", c.getLocal(\"n\"), c.i32_const(ptPlusOneOver2), c.i32_const(n8), R),\n\n            c.block(c.loop(\n                c.br_if(1, c.call(prefix + \"_eq\", T, ONE)),\n\n                c.call(prefix + \"_square\", T, SQ),\n                c.setLocal(\"i\", c.i32_const(1)),\n                c.block(c.loop(\n                    c.br_if(1, c.call(prefix + \"_eq\", SQ, ONE)),\n                    c.call(prefix + \"_square\", SQ, SQ),\n                    c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n\n                c.call(prefix + \"_copy\", C, B),\n                c.setLocal(\"j\", c.i32_sub(c.i32_sub( c.getLocal(\"m\"), c.getLocal(\"i\")), c.i32_const(1)) ),\n                c.block(c.loop(\n                    c.br_if(1, c.i32_eqz(c.getLocal(\"j\"))),\n                    c.call(prefix + \"_square\", B, B),\n                    c.setLocal(\"j\", c.i32_sub(c.getLocal(\"j\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n\n                c.setLocal(\"m\", c.getLocal(\"i\")),\n                c.call(prefix + \"_square\", B, C),\n                c.call(prefix + \"_mul\", T, C, T),\n                c.call(prefix + \"_mul\", R, B, R),\n\n                c.br(0)\n            )),\n\n            c.if(\n                c.call(prefix + \"_isNegative\", R),\n                c.call(prefix + \"_neg\", R, c.getLocal(\"r\")),\n                c.call(prefix + \"_copy\", R, c.getLocal(\"r\")),\n            )\n        );\n    }\n\n    function buildIsSquare() {\n        const f = module.addFunction(prefix+\"_isSquare\");\n        f.addParam(\"n\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const ONE = c.i32_const(pOne);\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"n\")),\n                c.ret(c.i32_const(1))\n            ),\n            c.call(prefix + \"_exp\", c.getLocal(\"n\"), c.i32_const(pe), c.i32_const(n8), AUX),\n            c.call(prefix + \"_eq\", AUX, ONE)\n        );\n    }\n\n\n    function buildLoad() {\n        const f = module.addFunction(prefix+\"_load\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"p\", \"i32\");\n        f.addLocal(\"l\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        const c = f.getCodeBuilder();\n\n        const R = c.i32_const(module.alloc(n8));\n        const pAux = module.alloc(n8);\n        const AUX = c.i32_const(pAux);\n\n        f.addCode(\n            c.call(intPrefix + \"_zero\", c.getLocal(\"r\")),\n            c.setLocal(\"i\", c.i32_const(n8)),\n            c.setLocal(\"p\", c.getLocal(\"scalar\")),\n            c.block(c.loop(\n                c.br_if(1, c.i32_gt_u(c.getLocal(\"i\"), c.getLocal(\"scalarLen\"))),\n\n                c.if(\n                    c.i32_eq(c.getLocal(\"i\"), c.i32_const(n8)),\n                    c.call(prefix + \"_one\", R),\n                    c.call(prefix + \"_mul\", R, c.i32_const(pR2), R)\n                ),\n                c.call(prefix + \"_mul\", c.getLocal(\"p\"), R, AUX),\n                c.call(prefix + \"_add\", c.getLocal(\"r\"), AUX, c.getLocal(\"r\")),\n\n                c.setLocal(\"p\", c.i32_add(c.getLocal(\"p\"), c.i32_const(n8))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(n8))),\n                c.br(0)\n            )),\n\n            c.setLocal(\"l\", c.i32_rem_u( c.getLocal(\"scalarLen\"), c.i32_const(n8))),\n            c.if(c.i32_eqz(c.getLocal(\"l\")), c.ret([])),\n            c.call(intPrefix + \"_zero\", AUX),\n            c.setLocal(\"j\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq(c.getLocal(\"j\"), c.getLocal(\"l\"))),\n\n                c.i32_store8(\n                    c.getLocal(\"j\"),\n                    pAux,\n                    c.i32_load8_u(c.getLocal(\"p\")),\n                ),\n                c.setLocal(\"p\", c.i32_add(c.getLocal(\"p\"), c.i32_const(1))),\n                c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            c.if(\n                c.i32_eq(c.getLocal(\"i\"), c.i32_const(n8)),\n                c.call(prefix + \"_one\", R),\n                c.call(prefix + \"_mul\", R, c.i32_const(pR2), R)\n            ),\n            c.call(prefix + \"_mul\", AUX, R, AUX),\n            c.call(prefix + \"_add\", c.getLocal(\"r\"), AUX, c.getLocal(\"r\")),\n        );\n    }\n\n    function buildTimesScalar() {\n        const f = module.addFunction(prefix+\"_timesScalar\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(prefix + \"_load\", c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), AUX),\n            c.call(prefix + \"_toMontgomery\", AUX, AUX),\n            c.call(prefix + \"_mul\", c.getLocal(\"x\"), AUX, c.getLocal(\"r\")),\n        );\n    }\n\n    function buildIsOne() {\n        const f = module.addFunction(prefix+\"_isOne\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(\n            c.ret(c.call(intPrefix + \"_eq\", c.getLocal(\"x\"), c.i32_const(pOne)))\n        );\n    }\n\n\n    module.exportFunction(intPrefix + \"_copy\", prefix+\"_copy\");\n    module.exportFunction(intPrefix + \"_zero\", prefix+\"_zero\");\n    module.exportFunction(intPrefix + \"_isZero\", prefix+\"_isZero\");\n    module.exportFunction(intPrefix + \"_eq\", prefix+\"_eq\");\n\n    buildIsOne();\n    buildAdd();\n    buildSub();\n    buildNeg();\n    buildMReduct();\n    buildMul();\n    buildSquare();\n    buildSquareOld();\n    buildToMontgomery();\n    buildFromMontgomery();\n    buildIsNegative();\n    buildSign();\n    buildInverse();\n    buildOne();\n    buildLoad();\n    buildTimesScalar();\n    buildBatchInverse(module, prefix);\n    buildBatchConvertion(module, prefix + \"_batchToMontgomery\", prefix + \"_toMontgomery\", n8, n8);\n    buildBatchConvertion(module, prefix + \"_batchFromMontgomery\", prefix + \"_fromMontgomery\", n8, n8);\n    buildBatchConvertion(module, prefix + \"_batchNeg\", prefix + \"_neg\", n8, n8);\n    buildBatchOp(module, prefix + \"_batchAdd\", prefix + \"_add\", n8, n8);\n    buildBatchOp(module, prefix + \"_batchSub\", prefix + \"_sub\", n8, n8);\n    buildBatchOp(module, prefix + \"_batchMul\", prefix + \"_mul\", n8, n8);\n\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_isNegative\");\n    module.exportFunction(prefix + \"_isOne\");\n    module.exportFunction(prefix + \"_sign\");\n    module.exportFunction(prefix + \"_mReduct\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_squareOld\");\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_inverse\");\n    module.exportFunction(prefix + \"_one\");\n    module.exportFunction(prefix + \"_load\");\n    module.exportFunction(prefix + \"_timesScalar\");\n    buildExp(\n        module,\n        prefix + \"_exp\",\n        n8,\n        prefix + \"_mul\",\n        prefix + \"_square\",\n        intPrefix + \"_copy\",\n        prefix + \"_one\",\n    );\n    module.exportFunction(prefix + \"_exp\");\n    module.exportFunction(prefix + \"_batchInverse\");\n    if (isPrime(q)) {\n        buildSqrt();\n        buildIsSquare();\n        module.exportFunction(prefix + \"_sqrt\");\n        module.exportFunction(prefix + \"_isSquare\");\n    }\n    module.exportFunction(prefix + \"_batchToMontgomery\");\n    module.exportFunction(prefix + \"_batchFromMontgomery\");\n    // console.log(module.functionIdxByName);\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildF1m =require(\"./build_f1m.js\");\nconst { bitLength } = require(\"./bigint.js\");\n\nmodule.exports = function buildF1(module, _q, _prefix, _f1mPrefix, _intPrefix) {\n\n    const q = BigInt(_q);\n    const n64 = Math.floor((bitLength(q - 1n) - 1)/64) +1;\n    const n8 = n64*8;\n\n    const prefix = _prefix || \"f1\";\n    if (module.modules[prefix]) return prefix;  // already builded\n    module.modules[prefix] = {\n        n64: n64\n    };\n\n    const intPrefix = _intPrefix || \"int\";\n    const f1mPrefix = buildF1m(module, q, _f1mPrefix, intPrefix);\n\n\n    const pR2 =     module.modules[f1mPrefix].pR2;\n    const pq =     module.modules[f1mPrefix].pq;\n    const pePlusOne = module.modules[f1mPrefix].pePlusOne;\n\n    function buildMul() {\n        const pAux1 = module.alloc(n8);\n\n        const f = module.addFunction(prefix+ \"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(f1mPrefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"y\"), c.i32_const(pAux1)));\n        f.addCode(c.call(f1mPrefix + \"_mul\", c.i32_const(pAux1), c.i32_const(pR2), c.getLocal(\"r\")));\n    }\n\n    function buildSquare() {\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(prefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"x\"), c.getLocal(\"r\")));\n    }\n\n\n    function buildInverse() {\n\n        const f = module.addFunction(prefix+ \"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(intPrefix + \"_inverseMod\", c.getLocal(\"x\"), c.i32_const(pq), c.getLocal(\"r\")));\n    }\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(intPrefix + \"_gte\", c.getLocal(\"x\"), c.i32_const(pePlusOne) )\n        );\n    }\n\n\n    buildMul();\n    buildSquare();\n    buildInverse();\n    buildIsNegative();\n    module.exportFunction(f1mPrefix + \"_add\", prefix + \"_add\");\n    module.exportFunction(f1mPrefix + \"_sub\", prefix + \"_sub\");\n    module.exportFunction(f1mPrefix + \"_neg\", prefix + \"_neg\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_inverse\");\n    module.exportFunction(prefix + \"_isNegative\");\n    module.exportFunction(f1mPrefix + \"_copy\", prefix+\"_copy\");\n    module.exportFunction(f1mPrefix + \"_zero\", prefix+\"_zero\");\n    module.exportFunction(f1mPrefix + \"_one\", prefix+\"_one\");\n    module.exportFunction(f1mPrefix + \"_isZero\", prefix+\"_isZero\");\n    module.exportFunction(f1mPrefix + \"_eq\", prefix+\"_eq\");\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst buildExp = require(\"./build_timesscalar\");\nconst buildBatchInverse = require(\"./build_batchinverse\");\nconst utils = require(\"./utils.js\");\n\nmodule.exports = function buildF2m(module, mulNonResidueFn, prefix, f1mPrefix) {\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const f1n8 = module.modules[f1mPrefix].n64*8;\n    const q = module.modules[f1mPrefix].q;\n\n    module.modules[prefix] = {\n        n64: module.modules[f1mPrefix].n64*2\n    };\n\n    function buildAdd() {\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_add\", x0, y0, r0),\n            c.call(f1mPrefix+\"_add\", x1, y1, r1),\n        );\n    }\n\n    function buildTimesScalar() {\n        const f = module.addFunction(prefix+\"_timesScalar\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_timesScalar\", x0, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r0),\n            c.call(f1mPrefix+\"_timesScalar\", x1, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r1),\n        );\n    }\n\n    function buildSub() {\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_sub\", x0, y0, r0),\n            c.call(f1mPrefix+\"_sub\", x1, y1, r1),\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix+\"_neg\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_neg\", x0, r0),\n            c.call(f1mPrefix+\"_neg\", x1, r1),\n        );\n    }\n\n    function buildConjugate() {\n        const f = module.addFunction(prefix+\"_conjugate\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, r0),\n            c.call(f1mPrefix+\"_neg\", x1, r1),\n        );\n    }\n\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.if(\n                c.call(f1mPrefix+\"_isZero\", x1),\n                c.ret(c.call(f1mPrefix+\"_isNegative\", x0))\n            ),\n            c.ret(c.call(f1mPrefix+\"_isNegative\", x1))\n        );\n    }\n\n    function buildMul() {\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        const A = c.i32_const(module.alloc(f1n8));\n        const B = c.i32_const(module.alloc(f1n8));\n        const C = c.i32_const(module.alloc(f1n8));\n        const D = c.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n            c.call(f1mPrefix + \"_mul\", x0, y0, A),             // A = x0*y0\n            c.call(f1mPrefix + \"_mul\", x1, y1, B),             // B = x1*y1\n\n            c.call(f1mPrefix + \"_add\", x0, x1, C),             // C = x0 + x1\n            c.call(f1mPrefix + \"_add\", y0, y1, D),             // D = y0 + y1\n            c.call(f1mPrefix + \"_mul\", C, D, C),               // C = (x0 + x1)*(y0 + y1) = x0*y0+x0*y1+x1*y0+x1*y1\n\n            //  c.call(f1mPrefix + \"_mul\", B, c.i32_const(pNonResidue), r0),  // r0 = nr*(x1*y1)\n            c.call(mulNonResidueFn, B, r0),  // r0 = nr*(x1*y1)\n            c.call(f1mPrefix + \"_add\", A, r0, r0),             // r0 = x0*y0 + nr*(x1*y1)\n            c.call(f1mPrefix + \"_add\", A, B, r1),             // r1 = x0*y0+x1*y1\n            c.call(f1mPrefix + \"_sub\", C, r1, r1)              // r1 = x0*y0+x0*y1+x1*y0+x1*y1 - x0*y0+x1*y1 = x0*y1+x1*y0\n        );\n\n    }\n\n    function buildMul1() {\n        const f = module.addFunction(prefix+\"_mul1\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y = c.getLocal(\"y\");\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n\n        f.addCode(\n            c.call(f1mPrefix + \"_mul\", x0, y, r0),             // A = x0*y\n            c.call(f1mPrefix + \"_mul\", x1, y, r1),             // B = x1*y\n        );\n    }\n\n    function buildSquare() {\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        const AB = c.i32_const(module.alloc(f1n8));\n        const APB = c.i32_const(module.alloc(f1n8));\n        const APNB = c.i32_const(module.alloc(f1n8));\n        const ABPNAB = c.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n            // AB = x0*y1\n            c.call(f1mPrefix + \"_mul\", x0, x1, AB),\n\n            // APB = x0+y1\n            c.call(f1mPrefix + \"_add\", x0, x1, APB),\n\n            // APBN0 = x0 + nr*x1\n            c.call(mulNonResidueFn, x1, APNB),\n            c.call(f1mPrefix + \"_add\", x0, APNB, APNB),\n\n            // ABPNAB = ab + nr*ab\n            c.call(mulNonResidueFn, AB, ABPNAB),\n            c.call(f1mPrefix + \"_add\", ABPNAB, AB, ABPNAB),\n\n            // r0 = APB * APNB - ABPNAB\n            c.call(f1mPrefix + \"_mul\", APB, APNB, r0),\n            c.call(f1mPrefix + \"_sub\", r0, ABPNAB, r0),\n\n            // r1 = AB + AB\n            c.call(f1mPrefix + \"_add\", AB, AB, r1),\n        );\n\n    }\n\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix+\"_toMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_toMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_toMontgomery\", x1, r1)\n        );\n    }\n\n    function buildFromMontgomery() {\n        const f = module.addFunction(prefix+\"_fromMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_fromMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_fromMontgomery\", x1, r1)\n        );\n    }\n\n    function buildCopy() {\n        const f = module.addFunction(prefix+\"_copy\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, r0),\n            c.call(f1mPrefix+\"_copy\", x1, r1)\n        );\n    }\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_zero\", x0),\n            c.call(f1mPrefix+\"_zero\", x1)\n        );\n    }\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_one\", x0),\n            c.call(f1mPrefix+\"_zero\", x1)\n        );\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix+\"_eq\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.call(f1mPrefix+\"_eq\", x0, y0),\n                c.call(f1mPrefix+\"_eq\", x1, y1)\n            )\n        );\n    }\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix+\"_isZero\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.call(f1mPrefix+\"_isZero\", x0),\n                c.call(f1mPrefix+\"_isZero\", x1)\n            )\n        );\n    }\n\n    function buildInverse() {\n        const f = module.addFunction(prefix+\"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        const t0 = c.i32_const(module.alloc(f1n8));\n        const t1 = c.i32_const(module.alloc(f1n8));\n        const t2 = c.i32_const(module.alloc(f1n8));\n        const t3 = c.i32_const(module.alloc(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_square\", x0, t0),\n            c.call(f1mPrefix+\"_square\", x1, t1),\n            // c.call(f1mPrefix+\"_mul\", t1, c.i32_const(pNonResidue), t2),\n            c.call(mulNonResidueFn, t1, t2),\n\n            c.call(f1mPrefix+\"_sub\", t0, t2, t2),\n            c.call(f1mPrefix+\"_inverse\", t2, t3),\n\n            c.call(f1mPrefix+\"_mul\", x0, t3, r0),\n            c.call(f1mPrefix+\"_mul\", x1, t3, r1),\n            c.call(f1mPrefix+\"_neg\", r1, r1),\n        );\n    }\n\n\n    function buildSign() {\n        const f = module.addFunction(prefix+\"_sign\");\n        f.addParam(\"x\", \"i32\");\n        f.addLocal(\"s\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.setLocal(\"s\" , c.call( f1mPrefix + \"_sign\", x1)),\n            c.if(\n                c.getLocal(\"s\"),\n                c.ret(c.getLocal(\"s\"))\n            ),\n            c.ret(c.call( f1mPrefix + \"_sign\", x0))\n        );\n    }\n\n    function buildIsOne() {\n        const f = module.addFunction(prefix+\"_isOne\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.ret(c.i32_and(\n                c.call(f1mPrefix + \"_isOne\", x0),\n                c.call(f1mPrefix + \"_isZero\", x1),\n            ))\n        );\n    }\n\n\n    // Check here: https://eprint.iacr.org/2012/685.pdf\n    // Alg 9adj\n    function buildSqrt() {\n\n        const f = module.addFunction(prefix+\"_sqrt\");\n        f.addParam(\"a\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        // BigInt can't take `undefined` so we use `|| 0`\n        const e34 = c.i32_const(module.alloc(utils.bigInt2BytesLE((BigInt(q || 0) - 3n) / 4n, f1n8 )));\n        // BigInt can't take `undefined` so we use `|| 0`\n        const e12 = c.i32_const(module.alloc(utils.bigInt2BytesLE((BigInt(q || 0) - 1n) / 2n, f1n8 )));\n\n        const a = c.getLocal(\"a\");\n        const a1 = c.i32_const(module.alloc(f1n8*2));\n        const alpha = c.i32_const(module.alloc(f1n8*2));\n        const a0 = c.i32_const(module.alloc(f1n8*2));\n        const pn1 = module.alloc(f1n8*2);\n        const n1 = c.i32_const(pn1);\n        const n1a = c.i32_const(pn1);\n        const n1b = c.i32_const(pn1+f1n8);\n        const x0 = c.i32_const(module.alloc(f1n8*2));\n        const b = c.i32_const(module.alloc(f1n8*2));\n\n        f.addCode(\n\n            c.call(prefix + \"_one\", n1),\n            c.call(prefix + \"_neg\", n1, n1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_exp\", a, e34, c.i32_const(f1n8), a1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_square\", a1, alpha),\n            c.call(prefix + \"_mul\", a, alpha, alpha),\n\n            // const a0 = F.mul(F.frobenius(1, alfa), alfa);\n            c.call(prefix + \"_conjugate\", alpha, a0),\n            c.call(prefix + \"_mul\", a0, alpha, a0),\n\n            // if (F.eq(a0, F.negone)) return null;\n            c.if(c.call(prefix + \"_eq\",a0,n1), c.unreachable() ),\n\n            // const x0 = F.mul(a1, a);\n            c.call(prefix + \"_mul\", a1, a, x0),\n\n            // if (F.eq(alfa, F.negone)) {\n            c.if(\n                c.call(prefix + \"_eq\", alpha, n1),\n                [\n                    // x = F.mul(x0, [F.F.zero, F.F.one]);\n                    ...c.call(f1mPrefix + \"_zero\", n1a),\n                    ...c.call(f1mPrefix + \"_one\", n1b),\n                    ...c.call(prefix + \"_mul\", n1, x0, c.getLocal(\"pr\")),\n                ],\n                [\n                    // const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);\n                    ...c.call(prefix + \"_one\", b),\n                    ...c.call(prefix + \"_add\", b, alpha, b),\n                    ...c.call(prefix + \"_exp\", b, e12, c.i32_const(f1n8), b),\n\n                    // x = F.mul(b, x0);\n                    ...c.call(prefix + \"_mul\", b, x0, c.getLocal(\"pr\")),\n                ]\n            )\n        );\n\n    }\n\n\n    function buildIsSquare() {\n\n        const f = module.addFunction(prefix+\"_isSquare\");\n        f.addParam(\"a\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        // BigInt can't take `undefined` so we use `|| 0`\n        const e34 = c.i32_const(module.alloc(utils.bigInt2BytesLE((BigInt(q || 0) - 3n) / 4n, f1n8 )));\n\n        const a = c.getLocal(\"a\");\n        const a1 = c.i32_const(module.alloc(f1n8*2));\n        const alpha = c.i32_const(module.alloc(f1n8*2));\n        const a0 = c.i32_const(module.alloc(f1n8*2));\n        const pn1 = module.alloc(f1n8*2);\n        const n1 = c.i32_const(pn1);\n\n        f.addCode(\n\n            c.call(prefix + \"_one\", n1),\n            c.call(prefix + \"_neg\", n1, n1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_exp\", a, e34, c.i32_const(f1n8), a1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_square\", a1, alpha),\n            c.call(prefix + \"_mul\", a, alpha, alpha),\n\n            // const a0 = F.mul(F.frobenius(1, alfa), alfa);\n            c.call(prefix + \"_conjugate\", alpha, a0),\n            c.call(prefix + \"_mul\", a0, alpha, a0),\n\n            // if (F.eq(a0, F.negone)) return null;\n            c.if(\n                c.call(\n                    prefix + \"_eq\",\n                    a0,\n                    n1\n                ),\n                c.ret(c.i32_const(0))\n            ),\n            c.ret(c.i32_const(1))\n        );\n\n    }\n\n\n    buildIsZero();\n    buildIsOne();\n    buildZero();\n    buildOne();\n    buildCopy();\n    buildMul();\n    buildMul1();\n    buildSquare();\n    buildAdd();\n    buildSub();\n    buildNeg();\n    buildConjugate();\n    buildToMontgomery();\n    buildFromMontgomery();\n    buildEq();\n    buildInverse();\n    buildTimesScalar();\n    buildSign();\n    buildIsNegative();\n\n    module.exportFunction(prefix + \"_isZero\");\n    module.exportFunction(prefix + \"_isOne\");\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_one\");\n    module.exportFunction(prefix + \"_copy\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_mul1\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_sign\");\n    module.exportFunction(prefix + \"_conjugate\");\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_eq\");\n    module.exportFunction(prefix + \"_inverse\");\n    buildBatchInverse(module, prefix);\n    buildExp(\n        module,\n        prefix + \"_exp\",\n        f1n8*2,\n        prefix + \"_mul\",\n        prefix + \"_square\",\n        prefix + \"_copy\",\n        prefix + \"_one\",\n    );\n    buildSqrt();\n    buildIsSquare();\n\n    module.exportFunction(prefix + \"_exp\");\n    module.exportFunction(prefix + \"_timesScalar\");\n    module.exportFunction(prefix + \"_batchInverse\");\n    module.exportFunction(prefix + \"_sqrt\");\n    module.exportFunction(prefix + \"_isSquare\");\n    module.exportFunction(prefix + \"_isNegative\");\n\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst buildExp = require(\"./build_timesscalar\");\nconst buildBatchInverse = require(\"./build_batchinverse\");\n\nmodule.exports = function buildF3m(module, mulNonResidueFn, prefix, f1mPrefix) {\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const f1n8 = module.modules[f1mPrefix].n64*8;\n    module.modules[prefix] = {\n        n64: module.modules[f1mPrefix].n64*3\n    };\n\n    function buildAdd() {\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const y2 = c.i32_add(c.getLocal(\"y\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_add\", x0, y0, r0),\n            c.call(f1mPrefix+\"_add\", x1, y1, r1),\n            c.call(f1mPrefix+\"_add\", x2, y2, r2),\n        );\n    }\n\n    function buildTimesScalar() {\n        const f = module.addFunction(prefix+\"_timesScalar\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_timesScalar\", x0, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r0),\n            c.call(f1mPrefix+\"_timesScalar\", x1, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r1),\n            c.call(f1mPrefix+\"_timesScalar\", x2, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r2),\n        );\n    }\n\n\n    function buildSub() {\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const y2 = c.i32_add(c.getLocal(\"y\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_sub\", x0, y0, r0),\n            c.call(f1mPrefix+\"_sub\", x1, y1, r1),\n            c.call(f1mPrefix+\"_sub\", x2, y2, r2),\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix+\"_neg\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_neg\", x0, r0),\n            c.call(f1mPrefix+\"_neg\", x1, r1),\n            c.call(f1mPrefix+\"_neg\", x2, r2),\n        );\n    }\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.if(\n                c.call(f1mPrefix+\"_isZero\", x2),\n                c.if(\n                    c.call(f1mPrefix+\"_isZero\", x1),\n                    c.ret(c.call(f1mPrefix+\"_isNegative\", x0)),\n                    c.ret(c.call(f1mPrefix+\"_isNegative\", x1))\n                )\n            ),\n            c.ret(c.call(f1mPrefix+\"_isNegative\", x2))\n        );\n    }\n\n\n    function buildMul() {\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const cd = f.getCodeBuilder();\n\n        const a = cd.getLocal(\"x\");\n        const b = cd.i32_add(cd.getLocal(\"x\"), cd.i32_const(f1n8));\n        const c = cd.i32_add(cd.getLocal(\"x\"), cd.i32_const(2*f1n8));\n        const A = cd.getLocal(\"y\");\n        const B = cd.i32_add(cd.getLocal(\"y\"), cd.i32_const(f1n8));\n        const C = cd.i32_add(cd.getLocal(\"y\"), cd.i32_const(2*f1n8));\n        const r0 = cd.getLocal(\"r\");\n        const r1 = cd.i32_add(cd.getLocal(\"r\"), cd.i32_const(f1n8));\n        const r2 = cd.i32_add(cd.getLocal(\"r\"), cd.i32_const(2*f1n8));\n\n        const aA = cd.i32_const(module.alloc(f1n8));\n        const bB = cd.i32_const(module.alloc(f1n8));\n        const cC = cd.i32_const(module.alloc(f1n8));\n        const a_b = cd.i32_const(module.alloc(f1n8));\n        const A_B = cd.i32_const(module.alloc(f1n8));\n        const a_c = cd.i32_const(module.alloc(f1n8));\n        const A_C = cd.i32_const(module.alloc(f1n8));\n        const b_c = cd.i32_const(module.alloc(f1n8));\n        const B_C = cd.i32_const(module.alloc(f1n8));\n        const aA_bB = cd.i32_const(module.alloc(f1n8));\n        const aA_cC = cd.i32_const(module.alloc(f1n8));\n        const bB_cC = cd.i32_const(module.alloc(f1n8));\n        const AUX = cd.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n            cd.call(f1mPrefix + \"_mul\", a, A, aA),\n            cd.call(f1mPrefix + \"_mul\", b, B, bB),\n            cd.call(f1mPrefix + \"_mul\", c, C, cC),\n\n            cd.call(f1mPrefix + \"_add\", a, b, a_b),\n            cd.call(f1mPrefix + \"_add\", A, B, A_B),\n            cd.call(f1mPrefix + \"_add\", a, c, a_c),\n            cd.call(f1mPrefix + \"_add\", A, C, A_C),\n            cd.call(f1mPrefix + \"_add\", b, c, b_c),\n            cd.call(f1mPrefix + \"_add\", B, C, B_C),\n\n            cd.call(f1mPrefix + \"_add\", aA, bB, aA_bB),\n            cd.call(f1mPrefix + \"_add\", aA, cC, aA_cC),\n            cd.call(f1mPrefix + \"_add\", bB, cC, bB_cC),\n\n            cd.call(f1mPrefix + \"_mul\", b_c, B_C, r0),\n            cd.call(f1mPrefix + \"_sub\", r0, bB_cC, r0),\n            cd.call(mulNonResidueFn, r0, r0),\n            cd.call(f1mPrefix + \"_add\", aA, r0, r0),\n\n            cd.call(f1mPrefix + \"_mul\", a_b, A_B, r1),\n            cd.call(f1mPrefix + \"_sub\", r1, aA_bB, r1),\n            cd.call(mulNonResidueFn, cC, AUX),\n            cd.call(f1mPrefix + \"_add\", r1, AUX, r1),\n\n            cd.call(f1mPrefix + \"_mul\", a_c, A_C, r2),\n            cd.call(f1mPrefix + \"_sub\", r2, aA_cC, r2),\n            cd.call(f1mPrefix + \"_add\", r2, bB, r2),\n        );\n\n    }\n\n    function buildSquare() {\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const A = c.getLocal(\"x\");\n        const B = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const C = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        const s0 = c.i32_const(module.alloc(f1n8));\n        const ab = c.i32_const(module.alloc(f1n8));\n        const s1 = c.i32_const(module.alloc(f1n8));\n        const s2 = c.i32_const(module.alloc(f1n8));\n        const bc = c.i32_const(module.alloc(f1n8));\n        const s3 = c.i32_const(module.alloc(f1n8));\n        const s4 = c.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n\n            c.call(f1mPrefix + \"_square\", A, s0),\n            c.call(f1mPrefix + \"_mul\", A, B, ab),\n            c.call(f1mPrefix + \"_add\", ab, ab, s1),\n\n            c.call(f1mPrefix + \"_sub\", A, B, s2),\n            c.call(f1mPrefix + \"_add\", s2, C, s2),\n            c.call(f1mPrefix + \"_square\", s2, s2),\n\n            c.call(f1mPrefix + \"_mul\", B, C, bc),\n            c.call(f1mPrefix + \"_add\", bc, bc, s3),\n\n            c.call(f1mPrefix + \"_square\", C, s4),\n\n            c.call(mulNonResidueFn, s3, r0),\n            c.call(f1mPrefix + \"_add\", s0, r0, r0),\n\n            c.call(mulNonResidueFn, s4, r1),\n            c.call(f1mPrefix + \"_add\", s1, r1, r1),\n\n            c.call(f1mPrefix + \"_add\", s0, s4, r2),\n            c.call(f1mPrefix + \"_sub\", s3, r2, r2),\n            c.call(f1mPrefix + \"_add\", s2, r2, r2),\n            c.call(f1mPrefix + \"_add\", s1, r2, r2),\n        );\n\n    }\n\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix+\"_toMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_toMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_toMontgomery\", x1, r1),\n            c.call(f1mPrefix+\"_toMontgomery\", x2, r2)\n        );\n    }\n\n    function buildFromMontgomery() {\n        const f = module.addFunction(prefix+\"_fromMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_fromMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_fromMontgomery\", x1, r1),\n            c.call(f1mPrefix+\"_fromMontgomery\", x2, r2)\n        );\n    }\n\n    function buildCopy() {\n        const f = module.addFunction(prefix+\"_copy\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, r0),\n            c.call(f1mPrefix+\"_copy\", x1, r1),\n            c.call(f1mPrefix+\"_copy\", x2, r2),\n        );\n    }\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_zero\", x0),\n            c.call(f1mPrefix+\"_zero\", x1),\n            c.call(f1mPrefix+\"_zero\", x2),\n        );\n    }\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_one\", x0),\n            c.call(f1mPrefix+\"_zero\", x1),\n            c.call(f1mPrefix+\"_zero\", x2),\n        );\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix+\"_eq\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const y2 = c.i32_add(c.getLocal(\"y\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.i32_and(\n                    c.call(f1mPrefix+\"_eq\", x0, y0),\n                    c.call(f1mPrefix+\"_eq\", x1, y1),\n                ),\n                c.call(f1mPrefix+\"_eq\", x2, y2)\n            )\n        );\n    }\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix+\"_isZero\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.i32_and(\n                    c.call(f1mPrefix+\"_isZero\", x0),\n                    c.call(f1mPrefix+\"_isZero\", x1)\n                ),\n                c.call(f1mPrefix+\"_isZero\", x2)\n            )\n        );\n    }\n\n    function buildInverse() {\n        const f = module.addFunction(prefix+\"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        const t0 = c.i32_const(module.alloc(f1n8));\n        const t1 = c.i32_const(module.alloc(f1n8));\n        const t2 = c.i32_const(module.alloc(f1n8));\n        const t3 = c.i32_const(module.alloc(f1n8));\n        const t4 = c.i32_const(module.alloc(f1n8));\n        const t5 = c.i32_const(module.alloc(f1n8));\n        const c0 = c.i32_const(module.alloc(f1n8));\n        const c1 = c.i32_const(module.alloc(f1n8));\n        const c2 = c.i32_const(module.alloc(f1n8));\n        const t6 = c.i32_const(module.alloc(f1n8));\n        const AUX = c.i32_const(module.alloc(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_square\", x0, t0),\n            c.call(f1mPrefix+\"_square\", x1, t1),\n            c.call(f1mPrefix+\"_square\", x2, t2),\n            c.call(f1mPrefix+\"_mul\", x0, x1, t3),\n            c.call(f1mPrefix+\"_mul\", x0, x2, t4),\n            c.call(f1mPrefix+\"_mul\", x1, x2, t5),\n\n            c.call(mulNonResidueFn, t5, c0),\n            c.call(f1mPrefix+\"_sub\", t0, c0, c0),\n\n            c.call(mulNonResidueFn, t2, c1),\n            c.call(f1mPrefix+\"_sub\", c1, t3, c1),\n\n            c.call(f1mPrefix+\"_sub\", t1, t4, c2),\n\n            c.call(f1mPrefix+\"_mul\", x2, c1, t6),\n            c.call(f1mPrefix+\"_mul\", x1, c2, AUX),\n            c.call(f1mPrefix+\"_add\", t6, AUX, t6),\n            c.call(mulNonResidueFn, t6, t6),\n            c.call(f1mPrefix+\"_mul\", x0, c0, AUX),\n            c.call(f1mPrefix+\"_add\", AUX, t6, t6),\n\n            c.call(f1mPrefix+\"_inverse\", t6, t6),\n\n            c.call(f1mPrefix+\"_mul\", t6, c0, r0),\n            c.call(f1mPrefix+\"_mul\", t6, c1, r1),\n            c.call(f1mPrefix+\"_mul\", t6, c2, r2)\n        );\n    }\n\n\n    function buildSign() {\n        const f = module.addFunction(prefix+\"_sign\");\n        f.addParam(\"x\", \"i32\");\n        f.addLocal(\"s\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.setLocal(\"s\" , c.call( f1mPrefix + \"_sign\", x2)),\n            c.if(\n                c.getLocal(\"s\"),\n                c.ret(c.getLocal(\"s\"))\n            ),\n            c.setLocal(\"s\" , c.call( f1mPrefix + \"_sign\", x1)),\n            c.if(\n                c.getLocal(\"s\"),\n                c.ret(c.getLocal(\"s\"))\n            ),\n            c.ret(c.call( f1mPrefix + \"_sign\", x0))\n        );\n    }\n\n    function buildIsOne() {\n        const f = module.addFunction(prefix+\"_isOne\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8*2));\n\n        f.addCode(\n            c.ret(\n                c.i32_and(\n                    c.i32_and(\n                        c.call(f1mPrefix + \"_isOne\", x0),\n                        c.call(f1mPrefix + \"_isZero\", x1)\n                    ),\n                    c.call(f1mPrefix + \"_isZero\", x2)\n                )\n            )\n        );\n    }\n\n    buildIsZero();\n    buildIsOne();\n    buildZero();\n    buildOne();\n    buildCopy();\n    buildMul();\n    buildSquare();\n    buildAdd();\n    buildSub();\n    buildNeg();\n    buildSign();\n    buildToMontgomery();\n    buildFromMontgomery();\n    buildEq();\n    buildInverse();\n    buildTimesScalar();\n    buildIsNegative();\n\n    module.exportFunction(prefix + \"_isZero\");\n    module.exportFunction(prefix + \"_isOne\");\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_one\");\n    module.exportFunction(prefix + \"_copy\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_sign\");\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_eq\");\n    module.exportFunction(prefix + \"_inverse\");\n    buildBatchInverse(module, prefix);\n    buildExp(\n        module,\n        prefix + \"_exp\",\n        f1n8*3,\n        prefix + \"_mul\",\n        prefix + \"_square\",\n        prefix + \"_copy\",\n        prefix + \"_one\"\n    );\n    module.exportFunction(prefix + \"_exp\");\n    module.exportFunction(prefix + \"_timesScalar\");\n    module.exportFunction(prefix + \"_batchInverse\");\n    module.exportFunction(prefix + \"_isNegative\");\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildTimesScalarNAF(module, fnName, elementLen, opAB, opAA, opAmB, opCopy, opInit) {\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"base\", \"i32\");\n    f.addParam(\"scalar\", \"i32\");\n    f.addParam(\"scalarLength\", \"i32\");\n    f.addParam(\"r\", \"i32\");\n    f.addLocal(\"old0\", \"i32\");\n    f.addLocal(\"nbits\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"last\", \"i32\");\n    f.addLocal(\"cur\", \"i32\");\n    f.addLocal(\"carry\", \"i32\");\n    f.addLocal(\"p\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const aux = c.i32_const(module.alloc(elementLen));\n\n    function getBit(IDX) {\n        return c.i32_and(\n            c.i32_shr_u(\n                c.i32_load(\n                    c.i32_add(\n                        c.getLocal(\"scalar\"),\n                        c.i32_and(\n                            c.i32_shr_u(\n                                IDX,\n                                c.i32_const(3)\n                            ),\n                            c.i32_const(0xFFFFFFFC)\n                        )\n                    )\n                ),\n                c.i32_and(\n                    IDX,\n                    c.i32_const(0x1F)\n                )\n            ),\n            c.i32_const(1)\n        );\n    }\n\n    function pushBit(b) {\n        return [\n            ...c.i32_store8(\n                c.getLocal(\"p\"),\n                c.i32_const(b)\n            ),\n            ...c.setLocal(\n                \"p\",\n                c.i32_add(\n                    c.getLocal(\"p\"),\n                    c.i32_const(1)\n                )\n            )\n        ];\n    }\n\n    f.addCode(\n        c.if(\n            c.i32_eqz(c.getLocal(\"scalarLength\")),\n            [\n                ...c.call(opInit, c.getLocal(\"r\")),\n                ...c.ret([])\n            ]\n        ),\n        c.setLocal(\"nbits\", c.i32_shl(c.getLocal(\"scalarLength\"), c.i32_const(3))),\n        c.setLocal(\"old0\", c.i32_load(c.i32_const(0))),\n        c.setLocal(\"p\", c.getLocal(\"old0\")),\n        c.i32_store(\n            c.i32_const(0),\n            c.i32_and(\n                c.i32_add(\n                    c.i32_add(\n                        c.getLocal(\"old0\"),\n                        c.i32_const(32)\n                    ),\n                    c.getLocal(\"nbits\")\n                ),\n                c.i32_const(0xFFFFFFF8)\n            )\n        ),\n        c.setLocal(\"i\", c.i32_const(1)),\n\n        c.setLocal(\"last\",getBit(c.i32_const(0))),\n        c.setLocal(\"carry\",c.i32_const(0)),\n\n        c.block(c.loop(\n            c.br_if(1, c.i32_eq( c.getLocal(\"i\"), c.getLocal(\"nbits\"))),\n\n            c.setLocal(\"cur\", getBit(c.getLocal(\"i\"))),\n            c.if( c.getLocal(\"last\"),\n                c.if( c.getLocal(\"cur\"),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(1)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(255)\n                        ],\n                    ),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(255)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(1)\n                        ],\n                    ),\n                ),\n                c.if( c.getLocal(\"cur\"),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(0)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(1)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(0)\n                        ],\n                    ),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(1)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(0)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(0)\n                        ],\n                    ),\n                )\n            ),\n            c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        )),\n\n        c.if( c.getLocal(\"last\"),\n            c.if(c.getLocal(\"carry\"),\n                [\n                    ...pushBit(255),\n                    ...pushBit(0),\n                    ...pushBit(1)\n                ]\n                ,\n                [\n                    ...pushBit(1)\n                ],\n            ),\n            c.if(c.getLocal(\"carry\"),\n                [\n                    ...pushBit(0),\n                    ...pushBit(1)\n                ]\n            ),\n        ),\n\n        c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n\n        // p already points to the last bit\n\n        c.call(opCopy, c.getLocal(\"base\"), aux),\n\n        c.call(opInit, c.getLocal(\"r\")),\n\n        c.block(c.loop(\n\n\n            c.call(opAA, c.getLocal(\"r\"), c.getLocal(\"r\")),\n\n\n            c.setLocal(\"cur\",\n                c.i32_load8_u(\n                    c.getLocal(\"p\")\n                )\n            ),\n\n            c.if(\n                c.getLocal(\"cur\"),\n                c.if(\n                    c.i32_eq(c.getLocal(\"cur\"), c.i32_const(1)),\n                    c.call(opAB,  c.getLocal(\"r\"), aux, c.getLocal(\"r\")),\n                    c.call(opAmB, c.getLocal(\"r\"), aux, c.getLocal(\"r\")),\n                )\n            ),\n\n            c.br_if(1, c.i32_eq( c.getLocal(\"old0\"), c.getLocal(\"p\"))),\n            c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n            c.br(0)\n\n        )),\n\n        c.i32_store( c.i32_const(0), c.getLocal(\"old0\"))\n\n    );\n\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildMultiexp(module, prefix, fnName, opAdd, n8b) {\n\n    const n64g = module.modules[prefix].n64;\n    const n8g = n64g*8;\n\n    function buildGetChunk() {\n        const f = module.addFunction(fnName + \"_getChunk\");\n        f.addParam(\"pScalar\", \"i32\");\n        f.addParam(\"scalarSize\", \"i32\");  // Number of bytes of the scalar\n        f.addParam(\"startBit\", \"i32\");  // Bit to start extract\n        f.addParam(\"chunkSize\", \"i32\");  // Chunk size in bits\n        f.addLocal(\"bitsToEnd\", \"i32\");\n        f.addLocal(\"mask\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\"bitsToEnd\",\n                c.i32_sub(\n                    c.i32_mul(\n                        c.getLocal(\"scalarSize\"),\n                        c.i32_const(8)\n                    ),\n                    c.getLocal(\"startBit\")\n                )\n            ),\n            c.if(\n                c.i32_gt_s(\n                    c.getLocal(\"chunkSize\"),\n                    c.getLocal(\"bitsToEnd\")\n                ),\n                c.setLocal(\n                    \"mask\",\n                    c.i32_sub(\n                        c.i32_shl(\n                            c.i32_const(1),\n                            c.getLocal(\"bitsToEnd\")\n                        ),\n                        c.i32_const(1)\n                    )\n                ),\n                c.setLocal(\n                    \"mask\",\n                    c.i32_sub(\n                        c.i32_shl(\n                            c.i32_const(1),\n                            c.getLocal(\"chunkSize\")\n                        ),\n                        c.i32_const(1)\n                    )\n                )\n            ),\n            c.i32_and(\n                c.i32_shr_u(\n                    c.i32_load(\n                        c.i32_add(\n                            c.getLocal(\"pScalar\"),\n                            c.i32_shr_u(\n                                c.getLocal(\"startBit\"),\n                                c.i32_const(3)\n                            )\n                        ),\n                        0,  // offset\n                        0   // align to byte.\n                    ),\n                    c.i32_and(\n                        c.getLocal(\"startBit\"),\n                        c.i32_const(0x7)\n                    )\n                ),\n                c.getLocal(\"mask\")\n            )\n        );\n    }\n\n    function buildMutiexpChunk() {\n        const f = module.addFunction(fnName + \"_chunk\");\n        f.addParam(\"pBases\", \"i32\");\n        f.addParam(\"pScalars\", \"i32\");\n        f.addParam(\"scalarSize\", \"i32\");  // Number of points\n        f.addParam(\"n\", \"i32\");  // Number of points\n        f.addParam(\"startBit\", \"i32\");  // bit where it starts the chunk\n        f.addParam(\"chunkSize\", \"i32\");  // bit where it starts the chunk\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"nChunks\", \"i32\");\n        f.addLocal(\"itScalar\", \"i32\");\n        f.addLocal(\"endScalar\", \"i32\");\n        f.addLocal(\"itBase\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"nTable\", \"i32\");\n        f.addLocal(\"pTable\", \"i32\");\n        f.addLocal(\"idx\", \"i32\");\n        f.addLocal(\"pIdxTable\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.i32_eqz(c.getLocal(\"n\")),\n                [\n                    ...c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n\n            // Allocate memory\n\n            c.setLocal(\n                \"nTable\",\n                c.i32_shl(\n                    c.i32_const(1),\n                    c.getLocal(\"chunkSize\")\n                )\n            ),\n            c.setLocal(\"pTable\", c.i32_load( c.i32_const(0) )),\n            c.i32_store(\n                c.i32_const(0),\n                c.i32_add(\n                    c.getLocal(\"pTable\"),\n                    c.i32_mul(\n                        c.getLocal(\"nTable\"),\n                        c.i32_const(n8g)\n                    )\n                )\n            ),\n\n            // Reset Table\n            c.setLocal(\"j\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"j\"),\n                        c.getLocal(\"nTable\")\n                    )\n                ),\n\n                c.call(\n                    prefix + \"_zero\",\n                    c.i32_add(\n                        c.getLocal(\"pTable\"),\n                        c.i32_mul(\n                            c.getLocal(\"j\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            // Distribute elements\n            c.setLocal(\"itBase\", c.getLocal(\"pBases\")),\n            c.setLocal(\"itScalar\", c.getLocal(\"pScalars\")),\n            c.setLocal(\"endScalar\",\n                c.i32_add(\n                    c.getLocal(\"pScalars\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.getLocal(\"scalarSize\")\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"itScalar\"),\n                        c.getLocal(\"endScalar\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx\",\n                    c.call(fnName + \"_getChunk\",\n                        c.getLocal(\"itScalar\"),\n                        c.getLocal(\"scalarSize\"),\n                        c.getLocal(\"startBit\"),\n                        c.getLocal(\"chunkSize\")\n                    )\n                ),\n\n                c.if(\n                    c.getLocal(\"idx\"),\n                    [\n                        ...c.setLocal(\n                            \"pIdxTable\",\n                            c.i32_add(\n                                c.getLocal(\"pTable\"),\n                                c.i32_mul(\n                                    c.i32_sub(\n                                        c.getLocal(\"idx\"),\n                                        c.i32_const(1)\n                                    ),\n                                    c.i32_const(n8g)\n                                )\n                            )\n                        ),\n                        ...c.call(\n                            opAdd,\n                            c.getLocal(\"pIdxTable\"),\n                            c.getLocal(\"itBase\"),\n                            c.getLocal(\"pIdxTable\"),\n                        )\n                    ]\n                ),\n\n                c.setLocal(\"itScalar\", c.i32_add(c.getLocal(\"itScalar\"), c.getLocal(\"scalarSize\"))),\n                c.setLocal(\"itBase\", c.i32_add(c.getLocal(\"itBase\"), c.i32_const(n8b))),\n                c.br(0)\n            )),\n\n            c.call(fnName + \"_reduceTable\", c.getLocal(\"pTable\"), c.getLocal(\"chunkSize\")),\n            c.call(\n                prefix + \"_copy\",\n                c.getLocal(\"pTable\"),\n                c.getLocal(\"pr\")\n            ),\n\n\n            c.i32_store(\n                c.i32_const(0),\n                c.getLocal(\"pTable\")\n            )\n\n        );\n    }\n\n    function buildMultiexp() {\n        const f = module.addFunction(fnName);\n        f.addParam(\"pBases\", \"i32\");\n        f.addParam(\"pScalars\", \"i32\");\n        f.addParam(\"scalarSize\", \"i32\");  // Number of points\n        f.addParam(\"n\", \"i32\");  // Number of points\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"chunkSize\", \"i32\");\n        f.addLocal(\"nChunks\", \"i32\");\n        f.addLocal(\"itScalar\", \"i32\");\n        f.addLocal(\"endScalar\", \"i32\");\n        f.addLocal(\"itBase\", \"i32\");\n        f.addLocal(\"itBit\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"nTable\", \"i32\");\n        f.addLocal(\"pTable\", \"i32\");\n        f.addLocal(\"idx\", \"i32\");\n        f.addLocal(\"pIdxTable\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8g));\n\n        const pTSizes = module.alloc([\n            17, 17, 17, 17,   17, 17, 17, 17,\n            17, 17, 16, 16,   15, 14, 13, 13,\n            12, 11, 10,  9,    8,  7,  7,  6,\n            5 ,  4,  3,  2,    1,  1,  1,  1\n        ]);\n\n        f.addCode(\n            c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n            c.if(\n                c.i32_eqz(c.getLocal(\"n\")),\n                c.ret([])\n            ),\n            c.setLocal(\"chunkSize\", c.i32_load8_u( c.i32_clz(c.getLocal(\"n\")),  pTSizes )),\n            c.setLocal(\n                \"nChunks\",\n                c.i32_add(\n                    c.i32_div_u(\n                        c.i32_sub(\n                            c.i32_shl(\n                                c.getLocal(\"scalarSize\"),\n                                c.i32_const(3)\n                            ),\n                            c.i32_const(1)\n                        ),\n                        c.getLocal(\"chunkSize\")\n                    ),\n                    c.i32_const(1)\n                )\n            ),\n\n\n            // Allocate memory\n\n            c.setLocal(\n                \"itBit\",\n                c.i32_mul(\n                    c.i32_sub(\n                        c.getLocal(\"nChunks\"),\n                        c.i32_const(1)\n                    ),\n                    c.getLocal(\"chunkSize\")\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_lt_s(\n                        c.getLocal(\"itBit\"),\n                        c.i32_const(0)\n                    )\n                ),\n\n                // Double nChunk times\n                c.if(\n                    c.i32_eqz(c.call(prefix + \"_isZero\", c.getLocal(\"pr\"))),\n                    [\n                        ...c.setLocal(\"j\", c.i32_const(0)),\n                        ...c.block(c.loop(\n                            c.br_if(\n                                1,\n                                c.i32_eq(\n                                    c.getLocal(\"j\"),\n                                    c.getLocal(\"chunkSize\")\n                                )\n                            ),\n\n                            c.call(prefix + \"_double\", c.getLocal(\"pr\"), c.getLocal(\"pr\")),\n\n                            c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                            c.br(0)\n                        ))\n                    ]\n                ),\n\n                c.call(\n                    fnName + \"_chunk\",\n                    c.getLocal(\"pBases\"),\n                    c.getLocal(\"pScalars\"),\n                    c.getLocal(\"scalarSize\"),\n                    c.getLocal(\"n\"),\n                    c.getLocal(\"itBit\"),\n                    c.getLocal(\"chunkSize\"),\n                    aux\n                ),\n\n                c.call(\n                    prefix + \"_add\",\n                    c.getLocal(\"pr\"),\n                    aux,\n                    c.getLocal(\"pr\")\n                ),\n                c.setLocal(\"itBit\", c.i32_sub(c.getLocal(\"itBit\"), c.getLocal(\"chunkSize\"))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildReduceTable() {\n        const f = module.addFunction(fnName + \"_reduceTable\");\n        f.addParam(\"pTable\", \"i32\");\n        f.addParam(\"p\", \"i32\");  // Number of bits of the table\n        f.addLocal(\"half\", \"i32\");\n        f.addLocal(\"it1\", \"i32\");\n        f.addLocal(\"it2\", \"i32\");\n        f.addLocal(\"pAcc\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.i32_eq(c.getLocal(\"p\"), c.i32_const(1)),\n                c.ret([])\n            ),\n            c.setLocal(\n                \"half\",\n                c.i32_shl(\n                    c.i32_const(1),\n                    c.i32_sub(\n                        c.getLocal(\"p\"),\n                        c.i32_const(1)\n                    )\n                )\n            ),\n\n            c.setLocal(\"it1\", c.getLocal(\"pTable\")),\n            c.setLocal(\n                \"it2\",\n                c.i32_add(\n                    c.getLocal(\"pTable\"),\n                    c.i32_mul(\n                        c.getLocal(\"half\"),\n                        c.i32_const(n8g)\n                    )\n                )\n            ),\n            c.setLocal(\"pAcc\",\n                c.i32_sub(\n                    c.getLocal(\"it2\"),\n                    c.i32_const(n8g)\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"it1\"),\n                        c.getLocal(\"pAcc\")\n                    )\n                ),\n                c.call(\n                    prefix + \"_add\",\n                    c.getLocal(\"it1\"),\n                    c.getLocal(\"it2\"),\n                    c.getLocal(\"it1\")\n                ),\n                c.call(\n                    prefix + \"_add\",\n                    c.getLocal(\"pAcc\"),\n                    c.getLocal(\"it2\"),\n                    c.getLocal(\"pAcc\")\n                ),\n                c.setLocal(\"it1\", c.i32_add(c.getLocal(\"it1\"), c.i32_const(n8g))),\n                c.setLocal(\"it2\", c.i32_add(c.getLocal(\"it2\"), c.i32_const(n8g))),\n                c.br(0)\n            )),\n\n            c.call(\n                fnName + \"_reduceTable\",\n                c.getLocal(\"pTable\"),\n                c.i32_sub(\n                    c.getLocal(\"p\"),\n                    c.i32_const(1)\n                )\n            ),\n\n            c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eqz(c.getLocal(\"p\"))),\n                c.call(prefix + \"_double\", c.getLocal(\"pAcc\"), c.getLocal(\"pAcc\")),\n                c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            c.call(prefix + \"_add\", c.getLocal(\"pTable\"), c.getLocal(\"pAcc\"), c.getLocal(\"pTable\"))\n        );\n    }\n\n    buildGetChunk();\n    buildReduceTable();\n    buildMutiexpChunk();\n    buildMultiexp();\n\n    module.exportFunction(fnName);\n    module.exportFunction(fnName +\"_chunk\");\n\n\n};\n\n\n\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildTimesScalarNAF = require(\"./build_timesscalarnaf\");\n//const buildTimesScalar = require(\"./build_timesscalar\");\nconst buildBatchConvertion = require(\"./build_batchconvertion\");\nconst buildMultiexp = require(\"./build_multiexp\");\n\nmodule.exports = function buildCurve(module, prefix, prefixField, pB) {\n\n\n    const n64 = module.modules[prefixField].n64;\n    const n8 = n64*8;\n\n    if (module.modules[prefix]) return prefix;  // already builded\n    module.modules[prefix] = {\n        n64: n64*3\n    };\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix + \"_isZero\");\n        f.addParam(\"p1\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_isZero\",\n            c.i32_add(\n                c.getLocal(\"p1\"),\n                c.i32_const(n8*2)\n            )\n        ));\n    }\n    function buildIsZeroAffine() {\n        const f = module.addFunction(prefix + \"_isZeroAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.i32_and(\n                c.call(\n                    prefixField + \"_isZero\",\n                    c.getLocal(\"p1\")\n                ),\n                c.call(\n                    prefixField + \"_isZero\",\n                    c.i32_add(\n                        c.getLocal(\"p1\"),\n                        c.i32_const(n8)\n                    )\n                )\n            )\n        );\n    }\n\n    function buildCopy() {\n        const f = module.addFunction(prefix + \"_copy\");\n        f.addParam(\"ps\", \"i32\");\n        f.addParam(\"pd\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64*3; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pd\"),\n                    i*8,\n                    c.i64_load(\n                        c.getLocal(\"ps\"),\n                        i*8\n                    )\n                )\n            );\n        }\n    }\n\n\n    function buildCopyAffine() {\n        const f = module.addFunction(prefix + \"_copyAffine\");\n        f.addParam(\"ps\", \"i32\");\n        f.addParam(\"pd\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64*2; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pd\"),\n                    i*8,\n                    c.i64_load(\n                        c.getLocal(\"ps\"),\n                        i*8\n                    )\n                )\n            );\n        }\n\n    }\n\n\n    function buildZero() {\n        const f = module.addFunction(prefix + \"_zero\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.getLocal(\"pr\")\n        ));\n\n        f.addCode(c.call(\n            prefixField + \"_one\",\n            c.i32_add(\n                c.getLocal(\"pr\"),\n                c.i32_const(n8)\n            )\n        ));\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.i32_add(\n                c.getLocal(\"pr\"),\n                c.i32_const(n8*2)\n            )\n        ));\n    }\n\n\n    function buildZeroAffine() {\n        const f = module.addFunction(prefix + \"_zeroAffine\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.getLocal(\"pr\")\n        ));\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.i32_add(\n                c.getLocal(\"pr\"),\n                c.i32_const(n8)\n            )\n        ));\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix + \"_eq\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"z1\", \"i32\");\n        f.addLocal(\"z2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z2\", c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8*2))));\n        const z2 = c.getLocal(\"z2\");\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const Z2Z2 = c.i32_const(module.alloc(n8));\n        const U1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const Z2_cubed = c.i32_const(module.alloc(n8));\n        const S1 = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                c.ret( c.call(prefix + \"_isZero\", c.getLocal(\"p2\"))),\n            ),\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p2\")),\n                c.ret(c.i32_const(0))\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                c.ret(c.call(prefix + \"_eqMixed\", c.getLocal(\"p2\"), c.getLocal(\"p1\")))\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z2),\n                c.ret(c.call(prefix + \"_eqMixed\", c.getLocal(\"p1\"), c.getLocal(\"p2\")))\n            ),\n\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_square\", z2, Z2Z2),\n            c.call(prefixField + \"_mul\", x1, Z2Z2, U1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", z2, Z2Z2, Z2_cubed),\n            c.call(prefixField + \"_mul\", y1, Z2_cubed, S1),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", U1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", S1, S2),\n                    c.ret(c.i32_const(1))\n                )\n            ),\n            c.ret(c.i32_const(0))\n        );\n    }\n\n\n    function buildEqMixed() {\n        const f = module.addFunction(prefix + \"_eqMixed\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                c.ret( c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\"))),\n            ),\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\")),\n                c.ret(c.i32_const(0))\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                c.ret(c.call(prefix + \"_eqAffine\", c.getLocal(\"p1\"), c.getLocal(\"p2\")))\n            ),\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", x1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", y1, S2),\n                    c.ret(c.i32_const(1))\n                )\n            ),\n            c.ret(c.i32_const(0))\n        );\n    }\n\n    function buildDouble() {\n        const f = module.addFunction(prefix + \"_double\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const A = c.i32_const(module.alloc(n8));\n        const B = c.i32_const(module.alloc(n8));\n        const C = c.i32_const(module.alloc(n8));\n        const D = c.i32_const(module.alloc(n8));\n        const E = c.i32_const(module.alloc(n8));\n        const F = c.i32_const(module.alloc(n8));\n        const G = c.i32_const(module.alloc(n8));\n        const eightC = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z),\n                [\n                    ...c.ret(c.call(prefix + \"_doubleAffine\", c.getLocal(\"p1\"), c.getLocal(\"pr\"))),\n                    ...c.ret([])\n                ]\n            ),\n\n            c.call(prefixField + \"_square\", x, A),\n            c.call(prefixField + \"_square\", y, B),\n            c.call(prefixField + \"_square\", B, C),\n\n            c.call(prefixField + \"_add\", x, B, D),\n            c.call(prefixField + \"_square\", D, D),\n            c.call(prefixField + \"_sub\", D, A, D),\n            c.call(prefixField + \"_sub\", D, C, D),\n            c.call(prefixField + \"_add\", D, D, D),\n\n            c.call(prefixField + \"_add\", A, A, E),\n            c.call(prefixField + \"_add\", E, A, E),\n            c.call(prefixField + \"_square\", E, F),\n\n            c.call(prefixField + \"_mul\", y, z, G),\n\n            c.call(prefixField + \"_add\", D, D, x3),\n            c.call(prefixField + \"_sub\", F, x3, x3),\n\n            c.call(prefixField + \"_add\", C, C, eightC),\n            c.call(prefixField + \"_add\", eightC, eightC, eightC),\n            c.call(prefixField + \"_add\", eightC, eightC, eightC),\n\n            c.call(prefixField + \"_sub\", D, x3, y3),\n            c.call(prefixField + \"_mul\", y3, E, y3),\n            c.call(prefixField + \"_sub\", y3, eightC, y3),\n\n            c.call(prefixField + \"_add\", G, G, z3),\n        );\n    }\n\n\n    function buildDoubleAffine() {\n        const f = module.addFunction(prefix + \"_doubleAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const XX = c.i32_const(module.alloc(n8));\n        const YY = c.i32_const(module.alloc(n8));\n        const YYYY = c.i32_const(module.alloc(n8));\n        const S = c.i32_const(module.alloc(n8));\n        const M = c.i32_const(module.alloc(n8));\n        const eightYYYY = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_toJacobian\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n\n            // XX = X1^2\n            c.call(prefixField + \"_square\", x, XX),\n\n            // YY = Y1^2\n            c.call(prefixField + \"_square\", y, YY),\n\n            // YYYY = YY^2\n            c.call(prefixField + \"_square\", YY, YYYY),\n\n            // S = 2*((X1+YY)^2-XX-YYYY)\n            c.call(prefixField + \"_add\", x, YY, S),\n            c.call(prefixField + \"_square\", S, S),\n            c.call(prefixField + \"_sub\", S, XX, S),\n            c.call(prefixField + \"_sub\", S, YYYY, S),\n            c.call(prefixField + \"_add\", S, S, S),\n\n            // M = 3*XX+a  (Hera a=0)\n            c.call(prefixField + \"_add\", XX, XX, M),\n            c.call(prefixField + \"_add\", M, XX, M),\n\n            // Z3 = 2*Y1\n            c.call(prefixField + \"_add\", y, y, z3),\n\n            // T = M^2-2*S\n            // X3 = T\n            c.call(prefixField + \"_square\", M, x3),\n            c.call(prefixField + \"_sub\", x3, S, x3),\n            c.call(prefixField + \"_sub\", x3, S, x3),\n\n            // Y3 = M*(S-T)-8*YYYY\n            c.call(prefixField + \"_add\", YYYY, YYYY, eightYYYY),\n            c.call(prefixField + \"_add\", eightYYYY, eightYYYY, eightYYYY),\n            c.call(prefixField + \"_add\", eightYYYY, eightYYYY, eightYYYY),\n            c.call(prefixField + \"_sub\", S, x3, y3),\n            c.call(prefixField + \"_mul\", y3, M, y3),\n            c.call(prefixField + \"_sub\", y3, eightYYYY, y3),\n        );\n    }\n\n\n    function buildEqAffine() {\n        const f = module.addFunction(prefix + \"_eqAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.ret(c.i32_and(\n                c.call(\n                    prefixField + \"_eq\",\n                    c.getLocal(\"p1\"),\n                    c.getLocal(\"p2\")\n                ),\n                c.call(\n                    prefixField + \"_eq\",\n                    c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8)),\n                    c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8))\n                )\n            ))\n        );\n    }\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix + \"_toMontgomery\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_toMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<3; i++) {\n            f.addCode(c.call(\n                prefixField + \"_toMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n    function buildToMontgomeryAffine() {\n        const f = module.addFunction(prefix + \"_toMontgomeryAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_toMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<2; i++) {\n            f.addCode(c.call(\n                prefixField + \"_toMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n    function buildFromMontgomery() {\n        const f = module.addFunction(prefix + \"_fromMontgomery\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_fromMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<3; i++) {\n            f.addCode(c.call(\n                prefixField + \"_fromMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n\n    function buildFromMontgomeryAffine() {\n        const f = module.addFunction(prefix + \"_fromMontgomeryAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_fromMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<2; i++) {\n            f.addCode(c.call(\n                prefixField + \"_fromMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n    function buildAdd() {\n\n        const f = module.addFunction(prefix + \"_add\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"z1\", \"i32\");\n        f.addLocal(\"z2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z2\", c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8*2))));\n        const z2 = c.getLocal(\"z2\");\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const Z2Z2 = c.i32_const(module.alloc(n8));\n        const U1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const Z2_cubed = c.i32_const(module.alloc(n8));\n        const S1 = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n        const H = c.i32_const(module.alloc(n8));\n        const S2_minus_S1 = c.i32_const(module.alloc(n8));\n        const I = c.i32_const(module.alloc(n8));\n        const J = c.i32_const(module.alloc(n8));\n        const r = c.i32_const(module.alloc(n8));\n        const r2 = c.i32_const(module.alloc(n8));\n        const V = c.i32_const(module.alloc(n8));\n        const V2 = c.i32_const(module.alloc(n8));\n        const S1_J2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p2\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                [\n                    ...c.call(prefix + \"_addMixed\", x2, x1, x3),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z2),\n                [\n                    ...c.call(prefix + \"_addMixed\", x1, x2, x3),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_square\", z2, Z2Z2),\n            c.call(prefixField + \"_mul\", x1, Z2Z2, U1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", z2, Z2Z2, Z2_cubed),\n            c.call(prefixField + \"_mul\", y1, Z2_cubed, S1),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", U1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", S1, S2),\n                    [\n                        ...c.call(prefix + \"_double\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                        ...c.ret([])\n                    ]\n                )\n            ),\n\n            c.call(prefixField + \"_sub\", U2, U1, H),\n            c.call(prefixField + \"_sub\", S2, S1, S2_minus_S1),\n            c.call(prefixField + \"_add\", H, H, I),\n            c.call(prefixField + \"_square\", I, I),\n            c.call(prefixField + \"_mul\", H, I, J),\n            c.call(prefixField + \"_add\", S2_minus_S1, S2_minus_S1, r),\n            c.call(prefixField + \"_mul\", U1, I, V),\n            c.call(prefixField + \"_square\", r, r2),\n            c.call(prefixField + \"_add\", V, V, V2),\n\n            c.call(prefixField + \"_sub\", r2, J, x3),\n            c.call(prefixField + \"_sub\", x3, V2, x3),\n\n            c.call(prefixField + \"_mul\", S1, J, S1_J2),\n            c.call(prefixField + \"_add\", S1_J2, S1_J2, S1_J2),\n\n            c.call(prefixField + \"_sub\", V, x3, y3),\n            c.call(prefixField + \"_mul\", y3, r, y3),\n            c.call(prefixField + \"_sub\", y3, S1_J2, y3),\n\n            c.call(prefixField + \"_add\", z1, z2, z3),\n            c.call(prefixField + \"_square\", z3, z3),\n            c.call(prefixField + \"_sub\", z3, Z1Z1, z3),\n            c.call(prefixField + \"_sub\", z3, Z2Z2, z3),\n            c.call(prefixField + \"_mul\", z3, H, z3),\n        );\n\n    }\n\n\n    function buildAddMixed() {\n\n        const f = module.addFunction(prefix + \"_addMixed\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n        const H = c.i32_const(module.alloc(n8));\n        const HH = c.i32_const(module.alloc(n8));\n        const S2_minus_y1 = c.i32_const(module.alloc(n8));\n        const I = c.i32_const(module.alloc(n8));\n        const J = c.i32_const(module.alloc(n8));\n        const r = c.i32_const(module.alloc(n8));\n        const r2 = c.i32_const(module.alloc(n8));\n        const V = c.i32_const(module.alloc(n8));\n        const V2 = c.i32_const(module.alloc(n8));\n        const y1_J2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copyAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                    ...c.call(prefixField + \"_one\", c.i32_add(c.getLocal(\"pr\") , c.i32_const(n8*2))),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                [\n                    ...c.call(prefix + \"_addAffine\", x1, x2, x3),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", x1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", y1, S2),\n                    [\n                        ...c.call(prefix + \"_doubleAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                        ...c.ret([])\n                    ]\n                )\n            ),\n\n            c.call(prefixField + \"_sub\", U2, x1, H),\n            c.call(prefixField + \"_sub\", S2, y1, S2_minus_y1),\n            c.call(prefixField + \"_square\", H, HH),\n            c.call(prefixField + \"_add\", HH , HH, I),\n            c.call(prefixField + \"_add\", I , I, I),\n            c.call(prefixField + \"_mul\", H, I, J),\n            c.call(prefixField + \"_add\", S2_minus_y1, S2_minus_y1, r),\n            c.call(prefixField + \"_mul\", x1, I, V),\n            c.call(prefixField + \"_square\", r, r2),\n            c.call(prefixField + \"_add\", V, V, V2),\n\n            c.call(prefixField + \"_sub\", r2, J, x3),\n            c.call(prefixField + \"_sub\", x3, V2, x3),\n\n            c.call(prefixField + \"_mul\", y1, J, y1_J2),\n            c.call(prefixField + \"_add\", y1_J2, y1_J2, y1_J2),\n\n            c.call(prefixField + \"_sub\", V, x3, y3),\n            c.call(prefixField + \"_mul\", y3, r, y3),\n            c.call(prefixField + \"_sub\", y3, y1_J2, y3),\n\n            c.call(prefixField + \"_add\", z1, H, z3),\n            c.call(prefixField + \"_square\", z3, z3),\n            c.call(prefixField + \"_sub\", z3, Z1Z1, z3),\n            c.call(prefixField + \"_sub\", z3, HH, z3),\n        );\n    }\n\n\n    function buildAddAffine() {\n\n        const f = module.addFunction(prefix + \"_addAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const H = c.i32_const(module.alloc(n8));\n        const HH = c.i32_const(module.alloc(n8));\n        const y2_minus_y1 = c.i32_const(module.alloc(n8));\n        const I = c.i32_const(module.alloc(n8));\n        const J = c.i32_const(module.alloc(n8));\n        const r = c.i32_const(module.alloc(n8));\n        const r2 = c.i32_const(module.alloc(n8));\n        const V = c.i32_const(module.alloc(n8));\n        const V2 = c.i32_const(module.alloc(n8));\n        const y1_J2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copyAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                    ...c.call(prefixField + \"_one\", c.i32_add(c.getLocal(\"pr\") , c.i32_const(n8*2))),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\")),\n                [\n                    ...c.call(prefix + \"_copyAffine\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.call(prefixField + \"_one\", c.i32_add(c.getLocal(\"pr\") , c.i32_const(n8*2))),\n                    ...c.ret([])\n                ]\n            ),\n\n\n            c.if(\n                c.call(prefixField + \"_eq\", x1, x2),\n                c.if(\n                    c.call(prefixField + \"_eq\", y1, y2),\n                    [\n                        ...c.call(prefix + \"_doubleAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                        ...c.ret([])\n                    ]\n                )\n            ),\n\n            c.call(prefixField + \"_sub\", x2, x1, H),\n            c.call(prefixField + \"_sub\", y2, y1, y2_minus_y1),\n            c.call(prefixField + \"_square\", H, HH),\n            c.call(prefixField + \"_add\", HH , HH, I),\n            c.call(prefixField + \"_add\", I , I, I),\n            c.call(prefixField + \"_mul\", H, I, J),\n            c.call(prefixField + \"_add\", y2_minus_y1, y2_minus_y1, r),\n            c.call(prefixField + \"_mul\", x1, I, V),\n            c.call(prefixField + \"_square\", r, r2),\n            c.call(prefixField + \"_add\", V, V, V2),\n\n            c.call(prefixField + \"_sub\", r2, J, x3),\n            c.call(prefixField + \"_sub\", x3, V2, x3),\n\n            c.call(prefixField + \"_mul\", y1, J, y1_J2),\n            c.call(prefixField + \"_add\", y1_J2, y1_J2, y1_J2),\n\n            c.call(prefixField + \"_sub\", V, x3, y3),\n            c.call(prefixField + \"_mul\", y3, r, y3),\n            c.call(prefixField + \"_sub\", y3, y1_J2, y3),\n\n            c.call(prefixField + \"_add\", H, H, z3),\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix + \"_neg\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        f.addCode(\n            c.call(prefixField + \"_copy\", x, x3),\n            c.call(prefixField + \"_neg\", y, y3),\n            c.call(prefixField + \"_copy\", z, z3)\n        );\n    }\n\n\n    function buildNegAffine() {\n        const f = module.addFunction(prefix + \"_negAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n\n        f.addCode(\n            c.call(prefixField + \"_copy\", x, x3),\n            c.call(prefixField + \"_neg\", y, y3),\n        );\n    }\n\n\n    function buildSub() {\n        const f = module.addFunction(prefix + \"_sub\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8*3));\n\n        f.addCode(\n            c.call(prefix + \"_neg\", c.getLocal(\"p2\"), AUX),\n            c.call(prefix + \"_add\", c.getLocal(\"p1\"), AUX, c.getLocal(\"pr\")),\n        );\n    }\n\n    function buildSubMixed() {\n        const f = module.addFunction(prefix + \"_subMixed\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8*3));\n\n        f.addCode(\n            c.call(prefix + \"_negAffine\", c.getLocal(\"p2\"), AUX),\n            c.call(prefix + \"_addMixed\", c.getLocal(\"p1\"), AUX, c.getLocal(\"pr\")),\n        );\n    }\n\n\n    function buildSubAffine() {\n        const f = module.addFunction(prefix + \"_subAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8*3));\n\n        f.addCode(\n            c.call(prefix + \"_negAffine\", c.getLocal(\"p2\"), AUX),\n            c.call(prefix + \"_addAffine\", c.getLocal(\"p1\"), AUX, c.getLocal(\"pr\")),\n        );\n    }\n\n    // This sets Z to One\n    function buildNormalize() {\n        const f = module.addFunction(prefix + \"_normalize\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n\n        const Z_inv = c.i32_const(module.alloc(n8));\n        const Z2_inv = c.i32_const(module.alloc(n8));\n        const Z3_inv = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n                [\n                    ...c.call(prefixField + \"_inverse\", z, Z_inv),\n                    ...c.call(prefixField + \"_square\", Z_inv, Z2_inv),\n                    ...c.call(prefixField + \"_mul\", Z_inv, Z2_inv, Z3_inv),\n                    ...c.call(prefixField + \"_mul\", x, Z2_inv, x3),\n                    ...c.call(prefixField + \"_mul\", y, Z3_inv, y3),\n                    ...c.call(prefixField + \"_one\", z3),\n                ]\n            )\n        );\n    }\n\n\n    // Does not set Z.\n    function buildToAffine() {\n        const f = module.addFunction(prefix + \"_toAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n\n\n        const Z_inv = c.i32_const(module.alloc(n8));\n        const Z2_inv = c.i32_const(module.alloc(n8));\n        const Z3_inv = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefixField + \"_zero\", x3),\n                    ...c.call(prefixField + \"_zero\", y3),\n                ],\n                [\n                    ...c.call(prefixField + \"_inverse\", z, Z_inv),\n                    ...c.call(prefixField + \"_square\", Z_inv, Z2_inv),\n                    ...c.call(prefixField + \"_mul\", Z_inv, Z2_inv, Z3_inv),\n                    ...c.call(prefixField + \"_mul\", x, Z2_inv, x3),\n                    ...c.call(prefixField + \"_mul\", y, Z3_inv, y3),\n                ]\n            )\n        );\n    }\n\n\n    function buildToJacobian() {\n        const f = module.addFunction(prefix + \"_toJacobian\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p1\")),\n                c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n                [\n                    ...c.call(prefixField + \"_one\", z3),\n                    ...c.call(prefixField + \"_copy\", y, y3),\n                    ...c.call(prefixField + \"_copy\", x, x3)\n                ]\n            )\n        );\n    }\n\n    function buildBatchToAffine() {\n        const f = module.addFunction(prefix + \"_batchToAffine\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n        f.addLocal(\"pAux\", \"i32\");\n        f.addLocal(\"itIn\", \"i32\");\n        f.addLocal(\"itAux\", \"i32\");\n        f.addLocal(\"itOut\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const tmp = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"pAux\", c.i32_load( c.i32_const(0) )),\n            c.i32_store(\n                c.i32_const(0),\n                c.i32_add(\n                    c.getLocal(\"pAux\"),\n                    c.i32_mul(c.getLocal(\"n\"), c.i32_const(n8))\n                )\n            ),\n\n            c.call(\n                prefixField + \"_batchInverse\",\n                c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8*2)),\n                c.i32_const(n8*3),\n                c.getLocal(\"n\"),\n                c.getLocal(\"pAux\"),\n                c.i32_const(n8)\n            ),\n\n            c.setLocal(\"itIn\", c.getLocal(\"pIn\")),\n            c.setLocal(\"itAux\", c.getLocal(\"pAux\")),\n            c.setLocal(\"itOut\", c.getLocal(\"pOut\")),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.if(\n                    c.call(prefixField + \"_isZero\", c.getLocal(\"itAux\")),\n                    [\n                        ...c.call(prefixField + \"_zero\", c.getLocal(\"itOut\")),\n                        ...c.call(prefixField + \"_zero\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(n8)))\n                    ],\n                    [\n                        ...c.call(\n                            prefixField+\"_mul\",\n                            c.getLocal(\"itAux\"),\n                            c.i32_add(c.getLocal(\"itIn\"), c.i32_const(n8)),\n                            tmp,\n                        ),\n                        ...c.call(\n                            prefixField+\"_square\",\n                            c.getLocal(\"itAux\"),\n                            c.getLocal(\"itAux\")\n                        ),\n                        ...c.call(\n                            prefixField+\"_mul\",\n                            c.getLocal(\"itAux\"),\n                            c.getLocal(\"itIn\"),\n                            c.getLocal(\"itOut\"),\n                        ),\n                        ...c.call(\n                            prefixField+\"_mul\",\n                            c.getLocal(\"itAux\"),\n                            tmp,\n                            c.i32_add(c.getLocal(\"itOut\"), c.i32_const(n8)),\n                        ),\n                    ]\n                ),\n\n                c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.i32_const(n8*3))),\n                c.setLocal(\"itOut\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(n8*2))),\n                c.setLocal(\"itAux\", c.i32_add(c.getLocal(\"itAux\"), c.i32_const(n8))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n            c.i32_store(\n                c.i32_const(0),\n                c.getLocal(\"pAux\")\n            )\n        );\n    }\n\n\n    // This function is private and does not allow to OVERLAP buffers.\n    function buildReverseBytes() {\n        const f = module.addFunction(prefix + \"__reverseBytes\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n        f.addLocal(\"itOut\", \"i32\");\n        f.addLocal(\"itIn\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\n                \"itOut\",\n                c.i32_sub(\n                    c.i32_add(\n                        c.getLocal(\"pOut\"),\n                        c.getLocal(\"n\")\n                    ),\n                    c.i32_const(1)\n                )\n            ),\n            c.setLocal(\n                \"itIn\",\n                c.getLocal(\"pIn\")\n            ),\n            c.block(c.loop(\n                c.br_if(1, c.i32_lt_s( c.getLocal(\"itOut\"), c.getLocal(\"pOut\") )),\n                c.i32_store8(\n                    c.getLocal(\"itOut\"),\n                    c.i32_load8_u(c.getLocal(\"itIn\")),\n                ),\n                c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.i32_const(1))),\n                c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n\n    }\n\n    function buildLEMtoC() {\n        const f = module.addFunction(prefix + \"_LEMtoC\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const tmp = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"pIn\")),\n                [\n                    ...c.call(prefixField + \"_zero\", c.getLocal(\"pOut\")),\n                    ...c.i32_store8(\n                        c.getLocal(\"pOut\"),\n                        c.i32_const(0x40)\n                    ),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefixField + \"_fromMontgomery\", c.getLocal(\"pIn\"), tmp),\n            c.call(prefix + \"__reverseBytes\", tmp, c.i32_const(n8), c.getLocal(\"pOut\")),\n            c.if(\n                c.i32_eq(\n                    c.call(prefixField + \"_sign\", c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8))),\n                    c.i32_const(-1)\n                ),\n                c.i32_store8(\n                    c.getLocal(\"pOut\"),\n                    c.i32_or(\n                        c.i32_load8_u(c.getLocal(\"pOut\")),\n                        c.i32_const(0x80)\n                    )\n                )\n            ),\n        );\n    }\n\n    function buildLEMtoU() {\n        const f = module.addFunction(prefix + \"_LEMtoU\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const pTmp = module.alloc(n8*2);\n        const tmp = c.i32_const(pTmp);\n        const tmpX = c.i32_const(pTmp);\n        const tmpY = c.i32_const(pTmp + n8);\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"pIn\")),\n                [\n                    ...c.call(prefix + \"_zeroAffine\", c.getLocal(\"pOut\")),\n                    ...c.ret([])\n                ]\n            ),\n\n            c.call(prefix + \"_fromMontgomeryAffine\", c.getLocal(\"pIn\"), tmp),\n\n            c.call(prefix + \"__reverseBytes\", tmpX, c.i32_const(n8), c.getLocal(\"pOut\")),\n            c.call(prefix + \"__reverseBytes\", tmpY, c.i32_const(n8), c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8))),\n        );\n    }\n\n    function buildUtoLEM() {\n        const f = module.addFunction(prefix + \"_UtoLEM\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const pTmp = module.alloc(n8*2);\n        const tmp = c.i32_const(pTmp);\n        const tmpX = c.i32_const(pTmp);\n        const tmpY = c.i32_const(pTmp + n8);\n\n        f.addCode(\n            c.if(\n                c.i32_and(c.i32_load8_u(c.getLocal(\"pIn\")), c.i32_const(0x40)),\n                [\n                    ...c.call(prefix + \"_zeroAffine\", c.getLocal(\"pOut\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefix + \"__reverseBytes\", c.getLocal(\"pIn\"), c.i32_const(n8), tmpX),\n            c.call(prefix + \"__reverseBytes\", c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8)), c.i32_const(n8), tmpY),\n            c.call(prefix + \"_toMontgomeryAffine\", tmp,  c.getLocal(\"pOut\"))\n        );\n    }\n\n    function buildCtoLEM() {\n        const f = module.addFunction(prefix + \"_CtoLEM\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n        f.addLocal(\"firstByte\", \"i32\");\n        f.addLocal(\"greatest\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const pTmp = module.alloc(n8*2);\n        const tmpX = c.i32_const(pTmp);\n        const tmpY = c.i32_const(pTmp + n8);\n\n        f.addCode(\n            c.setLocal(\"firstByte\", c.i32_load8_u(c.getLocal(\"pIn\"))),\n            c.if(\n                c.i32_and(\n                    c.getLocal(\"firstByte\"),\n                    c.i32_const(0x40)\n                ),\n                [\n                    ...c.call(prefix + \"_zeroAffine\", c.getLocal(\"pOut\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.setLocal(\n                \"greatest\",\n                c.i32_and(\n                    c.getLocal(\"firstByte\"),\n                    c.i32_const(0x80)\n                )\n            ),\n\n            c.call(prefixField + \"_copy\", c.getLocal(\"pIn\"), tmpY),\n            c.i32_store8(tmpY, c.i32_and(c.getLocal(\"firstByte\"), c.i32_const(0x3F))),\n            c.call(prefix + \"__reverseBytes\", tmpY, c.i32_const(n8), tmpX),\n            c.call(prefixField + \"_toMontgomery\", tmpX, c.getLocal(\"pOut\")),\n\n            c.call(prefixField + \"_square\", c.getLocal(\"pOut\"), tmpY),\n            c.call(prefixField + \"_mul\", c.getLocal(\"pOut\"), tmpY,  tmpY),\n            c.call(prefixField + \"_add\", tmpY, c.i32_const(pB),  tmpY),\n\n            c.call(prefixField + \"_sqrt\", tmpY, tmpY),\n            c.call(prefixField + \"_neg\", tmpY, tmpX),\n\n            c.if(\n                c.i32_eq(\n                    c.call(prefixField + \"_sign\", tmpY),\n                    c.i32_const(-1)\n                ),\n                c.if(\n                    c.getLocal(\"greatest\"),\n                    c.call(prefixField + \"_copy\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8))),\n                    c.call(prefixField + \"_neg\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8)))\n                ),\n                c.if(\n                    c.getLocal(\"greatest\"),\n                    c.call(prefixField + \"_neg\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8))),\n                    c.call(prefixField + \"_copy\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8)))\n                ),\n            )\n\n        );\n    }\n\n    function buildInCurveAffine() {\n        const f = module.addFunction(prefix + \"_inCurveAffine\");\n        f.addParam(\"pIn\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"pIn\");\n        const y = c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8));\n\n        const y2 = c.i32_const(module.alloc(n8));\n        const x3b = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(prefixField + \"_square\", y, y2),\n            c.call(prefixField + \"_square\", x, x3b),\n            c.call(prefixField + \"_mul\", x, x3b, x3b),\n            c.call(prefixField + \"_add\", x3b, c.i32_const(pB), x3b),\n\n            c.ret(\n                c.call(prefixField + \"_eq\", y2, x3b)\n            )\n        );\n    }\n\n    function buildInCurve() {\n        const f = module.addFunction(prefix + \"_inCurve\");\n        f.addParam(\"pIn\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8*2));\n\n        f.addCode(\n            c.call(prefix + \"_toAffine\", c.getLocal(\"pIn\"), aux),\n\n            c.ret(\n                c.call(prefix + \"_inCurveAffine\", aux),\n            )\n        );\n    }\n\n    buildIsZeroAffine();\n    buildIsZero();\n    buildZeroAffine();\n    buildZero();\n    buildCopyAffine();\n    buildCopy();\n    buildToJacobian();\n    buildEqAffine();\n    buildEqMixed();\n    buildEq();\n    buildDoubleAffine();\n    buildDouble();\n    buildAddAffine();\n    buildAddMixed();\n    buildAdd();\n    buildNegAffine();\n    buildNeg();\n    buildSubAffine();\n    buildSubMixed();\n    buildSub();\n    buildFromMontgomeryAffine();\n    buildFromMontgomery();\n    buildToMontgomeryAffine();\n    buildToMontgomery();\n    buildToAffine();\n    buildInCurveAffine();\n    buildInCurve();\n\n    buildBatchToAffine();\n\n    buildNormalize();\n\n\n    buildReverseBytes();\n\n    buildLEMtoU();\n    buildLEMtoC();\n    buildUtoLEM();\n    buildCtoLEM();\n\n    buildBatchConvertion(module, prefix + \"_batchLEMtoU\", prefix + \"_LEMtoU\", n8*2, n8*2);\n    buildBatchConvertion(module, prefix + \"_batchLEMtoC\", prefix + \"_LEMtoC\", n8*2, n8);\n    buildBatchConvertion(module, prefix + \"_batchUtoLEM\", prefix + \"_UtoLEM\", n8*2, n8*2);\n    buildBatchConvertion(module, prefix + \"_batchCtoLEM\", prefix + \"_CtoLEM\", n8, n8*2, true);\n\n    buildBatchConvertion(module, prefix + \"_batchToJacobian\", prefix + \"_toJacobian\", n8*2, n8*3, true);\n\n    buildMultiexp(module, prefix, prefix + \"_multiexp\", prefix + \"_add\", n8*3);\n    buildMultiexp(module, prefix, prefix + \"_multiexpAffine\", prefix + \"_addMixed\", n8*2);\n\n    /*\n    buildTimesScalar(\n        module,\n        prefix + \"_timesScalarOld\",\n        n8*3,\n        prefix + \"_add\",\n        prefix + \"_double\",\n        prefix + \"_copy\",\n        prefix + \"_zero\",\n    );\n    */\n    buildTimesScalarNAF(\n        module,\n        prefix + \"_timesScalar\",\n        n8*3,\n        prefix + \"_add\",\n        prefix + \"_double\",\n        prefix + \"_sub\",\n        prefix + \"_copy\",\n        prefix + \"_zero\"\n    );\n\n    buildTimesScalarNAF(\n        module,\n        prefix + \"_timesScalarAffine\",\n        n8*2,\n        prefix + \"_addMixed\",\n        prefix + \"_double\",\n        prefix + \"_subMixed\",\n        prefix + \"_copyAffine\",\n        prefix + \"_zero\"\n    );\n\n    module.exportFunction(prefix + \"_isZero\");\n    module.exportFunction(prefix + \"_isZeroAffine\");\n\n    module.exportFunction(prefix + \"_eq\");\n    module.exportFunction(prefix + \"_eqMixed\");\n    module.exportFunction(prefix + \"_eqAffine\");\n\n    module.exportFunction(prefix + \"_copy\");\n    module.exportFunction(prefix + \"_copyAffine\");\n\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_zeroAffine\");\n\n    module.exportFunction(prefix + \"_double\");\n    module.exportFunction(prefix + \"_doubleAffine\");\n\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_addMixed\");\n    module.exportFunction(prefix + \"_addAffine\");\n\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_negAffine\");\n\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_subMixed\");\n    module.exportFunction(prefix + \"_subAffine\");\n\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_fromMontgomeryAffine\");\n\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomeryAffine\");\n\n    module.exportFunction(prefix + \"_timesScalar\");\n    module.exportFunction(prefix + \"_timesScalarAffine\");\n\n    module.exportFunction(prefix + \"_normalize\");\n\n    // Convertion functions\n    module.exportFunction(prefix + \"_LEMtoU\");\n    module.exportFunction(prefix + \"_LEMtoC\");\n    module.exportFunction(prefix + \"_UtoLEM\");\n    module.exportFunction(prefix + \"_CtoLEM\");\n\n    module.exportFunction(prefix + \"_batchLEMtoU\");\n    module.exportFunction(prefix + \"_batchLEMtoC\");\n    module.exportFunction(prefix + \"_batchUtoLEM\");\n    module.exportFunction(prefix + \"_batchCtoLEM\");\n\n    module.exportFunction(prefix + \"_toAffine\");\n    module.exportFunction(prefix + \"_toJacobian\");\n\n    module.exportFunction(prefix + \"_batchToAffine\");\n    module.exportFunction(prefix + \"_batchToJacobian\");\n\n    module.exportFunction(prefix + \"_inCurve\");\n    module.exportFunction(prefix + \"_inCurveAffine\");\n\n    /*\n    buildG1MulScalar(module, zq);\n    module.exportFunction(\"g1MulScalar\");\n    */\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst { isOdd, modInv, modPow } = require(\"./bigint.js\");\nconst utils = require(\"./utils.js\");\n\nmodule.exports = function buildFFT(module, prefix, gPrefix, fPrefix, opGtimesF) {\n\n    const n64f = module.modules[fPrefix].n64;\n    const n8f = n64f*8;\n\n    const n64g = module.modules[gPrefix].n64;\n    const n8g = n64g*8;\n\n    const q = module.modules[fPrefix].q;\n\n    let rem = q - 1n;\n    let maxBits = 0;\n    while (!isOdd(rem)) {\n        maxBits ++;\n        rem = rem >> 1n;\n    }\n\n    let nr = 2n;\n\n    while ( modPow(nr, q >> 1n, q) === 1n ) nr = nr + 1n;\n\n    // console.log(nr);\n\n    const w = new Array(maxBits+1);\n    w[maxBits] = modPow(nr, rem, q);\n\n    let n=maxBits-1;\n    while (n>=0) {\n        w[n] = modPow(w[n+1], 2n, q);\n        n--;\n    }\n\n    const bytes = [];\n    const R = (1n << BigInt(n8f*8)) % q;\n\n    for (let i=0; i<w.length; i++) {\n        const m = w[i] * R % q;\n        bytes.push(...utils.bigInt2BytesLE(m, n8f));\n    }\n\n    const ROOTs = module.alloc(bytes);\n\n    const i2 = new Array(maxBits+1);\n    i2[0] = 1n;\n\n    for (let i=1; i<=maxBits; i++) {\n        i2[i] = i2[i-1] * 2n;\n    }\n\n    const bytesi2 =[];\n    for (let i=0; i<=maxBits; i++) {\n        const m = modInv(i2[i], q) * R % q;\n        bytesi2.push(...utils.bigInt2BytesLE(m, n8f));\n    }\n\n    const INV2 = module.alloc(bytesi2);\n\n    const shift = modPow(nr, 2n, q);\n    const bytesShiftToSmallM =[];\n    const bytesSConst =[];\n    for (let i=0; i<=maxBits; i++) {\n        const shiftToSmallM = modPow(shift, 2n ** BigInt(i), q);\n        const sConst = modInv(q + 1n - shiftToSmallM, q);\n        bytesShiftToSmallM.push(...utils.bigInt2BytesLE(shiftToSmallM * R % q, n8f));\n        bytesSConst.push(...utils.bigInt2BytesLE(sConst * R % q, n8f));\n    }\n\n    const SHIFT_TO_M = module.alloc( bytesShiftToSmallM  );\n    const SCONST = module.alloc( bytesSConst  );\n\n    function rev(x) {\n        let r=0;\n        for (let i=0; i<8; i++) {\n            if (x & (1 << i)) {\n                r = r | (0x80 >> i);\n            }\n        }\n        return r;\n    }\n\n    const rtable = Array(256);\n    for (let i=0; i<256; i++) {\n        rtable[i] = rev(i);\n    }\n\n    const REVTABLE = module.alloc(rtable);\n\n\n    function buildLog2() {\n        const f = module.addFunction(prefix+\"__log2\");\n        f.addParam(\"n\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"bits\", \"i32\");\n        f.addLocal(\"aux\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\n                \"aux\",\n                c.i32_shr_u(\n                    c.getLocal(\"n\"),\n                    c.i32_const(1)\n                )\n            )\n        );\n        f.addCode(c.setLocal(\"bits\", c.i32_const(0)));\n\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.i32_eqz(c.getLocal(\"aux\"))\n            ),\n\n            c.setLocal(\n                \"aux\",\n                c.i32_shr_u(\n                    c.getLocal(\"aux\"),\n                    c.i32_const(1)\n                )\n            ),\n\n            c.setLocal(\n                \"bits\",\n                c.i32_add(\n                    c.getLocal(\"bits\"),\n                    c.i32_const(1)\n                )\n            ),\n\n            c.br(0)\n        )));\n\n        f.addCode(c.if(\n            c.i32_ne(\n                c.getLocal(\"n\"),\n                c.i32_shl(\n                    c.i32_const(1),\n                    c.getLocal(\"bits\")\n                )\n            ),\n            c.unreachable()\n        ));\n\n        f.addCode(c.if(\n            c.i32_gt_u(\n                c.getLocal(\"bits\"),\n                c.i32_const(maxBits)\n            ),\n            c.unreachable()\n        ));\n\n        f.addCode(c.getLocal(\"bits\"));\n    }\n\n    function buildFFT() {\n        const f = module.addFunction(prefix+\"_fft\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n\n        f.addLocal(\"bits\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const One = c.i32_const(module.alloc(n8f));\n\n        f.addCode(\n            c.setLocal(\n                \"bits\",\n                c.call(\n                    prefix + \"__log2\",\n                    c.getLocal(\"n\")\n                )\n            ),\n            c.call(fPrefix + \"_one\", One),\n            c.call(\n                prefix+\"_rawfft\",\n                c.getLocal(\"px\"),\n                c.getLocal(\"bits\"),\n                c.i32_const(0),\n                One\n            )\n        );\n\n    }\n\n    function buildIFFT() {\n        const f = module.addFunction(prefix+\"_ifft\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addLocal(\"bits\", \"i32\");\n        f.addLocal(\"pInv2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\n                \"bits\",\n                c.call(\n                    prefix + \"__log2\",\n                    c.getLocal(\"n\")\n                )\n            ),\n            c.setLocal(\n                \"pInv2\",\n                c.i32_add(\n                    c.i32_const(INV2),\n                    c.i32_mul(\n                        c.getLocal(\"bits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n            c.call(\n                prefix+\"_rawfft\",\n                c.getLocal(\"px\"),\n                c.getLocal(\"bits\"),\n                c.i32_const(1),\n                c.getLocal(\"pInv2\")\n            ),\n        );\n    }\n\n    function buildRawFFT() {\n        const f = module.addFunction(prefix+\"_rawfft\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"bits\", \"i32\"); // 2 power\n        f.addParam(\"reverse\", \"i32\");\n        f.addParam(\"mulFactor\", \"i32\");\n\n        f.addLocal(\"s\", \"i32\");\n        f.addLocal(\"k\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"m\", \"i32\");\n        f.addLocal(\"mdiv2\", \"i32\");\n        f.addLocal(\"n\", \"i32\");\n        f.addLocal(\"pwm\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const T = c.i32_const(module.alloc(n8g));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.call(prefix + \"__reversePermutation\", c.getLocal(\"px\"), c.getLocal(\"bits\")),\n            c.setLocal(\"n\", c.i32_shl(c.i32_const(1), c.getLocal(\"bits\"))),\n            c.setLocal(\"s\", c.i32_const(1)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_gt_u(\n                        c.getLocal(\"s\"),\n                        c.getLocal(\"bits\")\n                    )\n                ),\n                c.setLocal(\"m\", c.i32_shl(c.i32_const(1), c.getLocal(\"s\"))),\n                c.setLocal(\"pwm\",\n                    c.i32_add(\n                        c.i32_const(ROOTs),\n                        c.i32_mul(\n                            c.getLocal(\"s\"),\n                            c.i32_const(n8f)\n                        )\n                    )\n                ),\n                c.setLocal(\"k\", c.i32_const(0)),\n                c.block(c.loop(\n                    c.br_if(\n                        1,\n                        c.i32_ge_u(\n                            c.getLocal(\"k\"),\n                            c.getLocal(\"n\")\n                        )\n                    ),\n\n                    c.call(fPrefix + \"_one\", W),\n\n                    c.setLocal(\"mdiv2\", c.i32_shr_u(c.getLocal(\"m\"), c.i32_const(1)) ),\n                    c.setLocal(\"j\", c.i32_const(0)),\n                    c.block(c.loop(\n                        c.br_if(\n                            1,\n                            c.i32_ge_u(\n                                c.getLocal(\"j\"),\n                                c.getLocal(\"mdiv2\")\n                            )\n                        ),\n\n                        c.setLocal(\n                            \"idx1\",\n                            c.i32_add(\n                                c.getLocal(\"px\"),\n                                c.i32_mul(\n                                    c.i32_add(\n                                        c.getLocal(\"k\"),\n                                        c.getLocal(\"j\")\n                                    ),\n                                    c.i32_const(n8g)\n                                )\n                            )\n                        ),\n\n                        c.setLocal(\n                            \"idx2\",\n                            c.i32_add(\n                                c.getLocal(\"idx1\"),\n                                c.i32_mul(\n                                    c.getLocal(\"mdiv2\"),\n                                    c.i32_const(n8g)\n                                )\n                            )\n                        ),\n\n                        c.call(\n                            opGtimesF,\n                            c.getLocal(\"idx2\"),\n                            W,\n                            T\n                        ),\n\n                        c.call(\n                            gPrefix + \"_copy\",\n                            c.getLocal(\"idx1\"),\n                            U\n                        ),\n\n                        c.call(\n                            gPrefix + \"_add\",\n                            U,\n                            T,\n                            c.getLocal(\"idx1\"),\n                        ),\n\n                        c.call(\n                            gPrefix + \"_sub\",\n                            U,\n                            T,\n                            c.getLocal(\"idx2\"),\n                        ),\n\n                        c.call(\n                            fPrefix + \"_mul\",\n                            W,\n                            c.getLocal(\"pwm\"),\n                            W,\n                        ),\n\n                        c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                        c.br(0)\n                    )),\n\n                    c.setLocal(\"k\", c.i32_add(c.getLocal(\"k\"), c.getLocal(\"m\"))),\n                    c.br(0)\n                )),\n\n                c.setLocal(\"s\", c.i32_add(c.getLocal(\"s\"), c.i32_const(1))),\n                c.br(0)\n            )),\n            c.call(\n                prefix + \"__fftFinal\",\n                c.getLocal(\"px\"),\n                c.getLocal(\"bits\"),\n                c.getLocal(\"reverse\"),\n                c.getLocal(\"mulFactor\")\n            )\n        );\n    }\n\n\n    function buildFinalInverse() {\n        const f = module.addFunction(prefix+\"__fftFinal\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"bits\", \"i32\");\n        f.addParam(\"reverse\", \"i32\");\n        f.addParam(\"mulFactor\", \"i32\");\n        f.addLocal(\"n\", \"i32\");\n        f.addLocal(\"ndiv2\", \"i32\");\n        f.addLocal(\"pInv2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"mask\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const T = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.if(\n                c.i32_and(\n                    c.i32_eqz(c.getLocal(\"reverse\")),\n                    c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\"))\n                ),\n                c.ret([])\n            ),\n            c.setLocal(\"n\", c.i32_shl( c.i32_const(1), c.getLocal(\"bits\"))),\n\n            c.setLocal(\"mask\", c.i32_sub( c.getLocal(\"n\") , c.i32_const(1))),\n            c.setLocal(\"i\", c.i32_const(1)),\n            c.setLocal(\n                \"ndiv2\",\n                c.i32_shr_u(\n                    c.getLocal(\"n\"),\n                    c.i32_const(1)\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_ge_u(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"ndiv2\")\n                    )\n                ),\n\n                c.setLocal(\"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.i32_sub(\n                                c.getLocal(\"n\"),\n                                c.getLocal(\"i\")\n                            ),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.if(\n                    c.getLocal(\"reverse\"),\n                    c.if(\n                        c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\")),\n                        [\n                            ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx1\"), T),\n                            ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx2\") , c.getLocal(\"idx1\") ),\n                            ...c.call(gPrefix + \"_copy\", T , c.getLocal(\"idx2\")),\n                        ],\n                        [\n                            ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx1\"), T),\n                            ...c.call(opGtimesF , c.getLocal(\"idx2\") , c.getLocal(\"mulFactor\"), c.getLocal(\"idx1\") ),\n                            ...c.call(opGtimesF , T , c.getLocal(\"mulFactor\"), c.getLocal(\"idx2\")),\n                        ]\n                    ),\n                    c.if(\n                        c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\")),\n                        [\n                            // Do nothing (It should not be here)\n                        ],\n                        [\n                            ...c.call(opGtimesF , c.getLocal(\"idx1\") , c.getLocal(\"mulFactor\"), c.getLocal(\"idx1\") ),\n                            ...c.call(opGtimesF , c.getLocal(\"idx2\") , c.getLocal(\"mulFactor\"), c.getLocal(\"idx2\")),\n                        ]\n                    )\n                ),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n\n                c.br(0)\n            )),\n\n            c.if(\n                c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\")),\n                [\n                    // Do nothing (It should not be here)\n                ],\n                [\n                    ...c.call(opGtimesF, c.getLocal(\"px\") , c.getLocal(\"mulFactor\"), c.getLocal(\"px\")),\n                    ...c.setLocal(\"idx2\",\n                        c.i32_add(\n                            c.getLocal(\"px\"),\n                            c.i32_mul(\n                                c.getLocal(\"ndiv2\"),\n                                c.i32_const(n8g)\n                            )\n                        )\n                    ),\n                    ...c.call(opGtimesF, c.getLocal(\"idx2\"),c.getLocal(\"mulFactor\"), c.getLocal(\"idx2\"))\n                ]\n            )\n        );\n    }\n\n    function buildReversePermutation() {\n        const f = module.addFunction(prefix+\"__reversePermutation\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"bits\", \"i32\");\n        f.addLocal(\"n\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"ri\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const T = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.setLocal(\"n\", c.i32_shl( c.i32_const(1), c.getLocal(\"bits\"))),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\"ri\", c.call(prefix + \"__rev\", c.getLocal(\"i\"), c.getLocal(\"bits\"))),\n\n                c.setLocal(\"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.getLocal(\"ri\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.if(\n                    c.i32_lt_u(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"ri\")\n                    ),\n                    [\n                        ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx1\"), T),\n                        ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx2\") , c.getLocal(\"idx1\")),\n                        ...c.call(gPrefix + \"_copy\", T , c.getLocal(\"idx2\"))\n                    ]\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildRev() {\n        const f = module.addFunction(prefix+\"__rev\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"bits\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.i32_rotl(\n                c.i32_add(\n                    c.i32_add(\n                        c.i32_shl(\n                            c.i32_load8_u(\n                                c.i32_and(\n                                    c.getLocal(\"x\"),\n                                    c.i32_const(0xFF)\n                                ),\n                                REVTABLE,\n                                0\n                            ),\n                            c.i32_const(24)\n                        ),\n                        c.i32_shl(\n                            c.i32_load8_u(\n                                c.i32_and(\n                                    c.i32_shr_u(\n                                        c.getLocal(\"x\"),\n                                        c.i32_const(8)\n                                    ),\n                                    c.i32_const(0xFF)\n                                ),\n                                REVTABLE,\n                                0\n                            ),\n                            c.i32_const(16)\n                        ),\n                    ),\n                    c.i32_add(\n                        c.i32_shl(\n                            c.i32_load8_u(\n                                c.i32_and(\n                                    c.i32_shr_u(\n                                        c.getLocal(\"x\"),\n                                        c.i32_const(16)\n                                    ),\n                                    c.i32_const(0xFF)\n                                ),\n                                REVTABLE,\n                                0\n                            ),\n                            c.i32_const(8)\n                        ),\n                        c.i32_load8_u(\n                            c.i32_and(\n                                c.i32_shr_u(\n                                    c.getLocal(\"x\"),\n                                    c.i32_const(24)\n                                ),\n                                c.i32_const(0xFF)\n                            ),\n                            REVTABLE,\n                            0\n                        ),\n                    )\n                ),\n                c.getLocal(\"bits\")\n            )\n        );\n    }\n\n\n    function buildFFTJoin() {\n        const f = module.addFunction(prefix+\"_fftJoin\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const T = c.i32_const(module.alloc(n8g));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    T\n                ),\n\n                c.call(\n                    gPrefix + \"_copy\",\n                    c.getLocal(\"idx1\"),\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_add\",\n                    U,\n                    T,\n                    c.getLocal(\"idx1\"),\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    U,\n                    T,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W,\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n    function buildFFTJoinExt() {\n        const f = module.addFunction(prefix+\"_fftJoinExt\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addParam(\"totalBits\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"pShiftToM\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n\n            c.setLocal(\"pShiftToM\",\n                c.i32_add(\n                    c.i32_const(SHIFT_TO_M),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    gPrefix + \"_add\",\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx2\"),\n                    U\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"pShiftToM\"),\n                    c.getLocal(\"idx2\")\n                ),\n\n                c.call(\n                    gPrefix + \"_add\",\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"idx2\")\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    gPrefix + \"_copy\",\n                    U,\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildFFTJoinExtInv() {\n        const f = module.addFunction(prefix+\"_fftJoinExtInv\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addParam(\"totalBits\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"pShiftToM\", \"i32\");\n        f.addLocal(\"pSConst\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n\n            c.setLocal(\"pShiftToM\",\n                c.i32_add(\n                    c.i32_const(SHIFT_TO_M),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n            c.setLocal(\"pSConst\",\n                c.i32_add(\n                    c.i32_const(SCONST),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    c.getLocal(\"idx1\"),\n                    U,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"pSConst\"),\n                    c.getLocal(\"idx2\")\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"pShiftToM\"),\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    U,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"pSConst\"),\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n\n    function buildPrepareLagrangeEvaluation() {\n        const f = module.addFunction(prefix+\"_prepareLagrangeEvaluation\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addParam(\"totalBits\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"pShiftToM\", \"i32\");\n        f.addLocal(\"pSConst\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n\n            c.setLocal(\"pShiftToM\",\n                c.i32_add(\n                    c.i32_const(SHIFT_TO_M),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n            c.setLocal(\"pSConst\",\n                c.i32_add(\n                    c.i32_const(SCONST),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"pShiftToM\"),\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    c.getLocal(\"idx2\"),\n                    U,\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    opGtimesF,\n                    U,\n                    c.getLocal(\"pSConst\"),\n                    c.getLocal(\"idx1\"),\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildFFTMix() {\n        const f = module.addFunction(prefix+\"_fftMix\");\n        f.addParam(\"pBuff\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"exp\", \"i32\");\n        f.addLocal(\"nGroups\", \"i32\");\n        f.addLocal(\"nPerGroup\", \"i32\");\n        f.addLocal(\"nPerGroupDiv2\", \"i32\");\n        f.addLocal(\"pairOffset\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"pwm\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const T = c.i32_const(module.alloc(n8g));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.setLocal(\"nPerGroup\", c.i32_shl(c.i32_const(1), c.getLocal(\"exp\"))),\n            c.setLocal(\"nPerGroupDiv2\", c.i32_shr_u(c.getLocal(\"nPerGroup\"), c.i32_const(1))),\n            c.setLocal(\"nGroups\", c.i32_shr_u(c.getLocal(\"n\"), c.getLocal(\"exp\"))),\n            c.setLocal(\"pairOffset\", c.i32_mul(c.getLocal(\"nPerGroupDiv2\"), c.i32_const(n8g))),\n            c.setLocal(\"pwm\",\n                c.i32_add(\n                    c.i32_const(ROOTs),\n                    c.i32_mul(\n                        c.getLocal(\"exp\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"nGroups\")\n                    )\n                ),\n                c.call( fPrefix + \"_one\", W),\n                c.setLocal(\"j\", c.i32_const(0)),\n                c.block(c.loop(\n                    c.br_if(\n                        1,\n                        c.i32_eq(\n                            c.getLocal(\"j\"),\n                            c.getLocal(\"nPerGroupDiv2\")\n                        )\n                    ),\n\n                    c.setLocal(\n                        \"idx1\",\n                        c.i32_add(\n                            c.getLocal(\"pBuff\"),\n                            c.i32_mul(\n                                c.i32_add(\n                                    c.i32_mul(\n                                        c.getLocal(\"i\"),\n                                        c.getLocal(\"nPerGroup\")\n                                    ),\n                                    c.getLocal(\"j\")\n                                ),\n                                c.i32_const(n8g)\n                            )\n                        )\n                    ),\n\n                    c.setLocal(\n                        \"idx2\",\n                        c.i32_add(\n                            c.getLocal(\"idx1\"),\n                            c.getLocal(\"pairOffset\")\n                        )\n                    ),\n\n                    c.call(\n                        opGtimesF,\n                        c.getLocal(\"idx2\"),\n                        W,\n                        T\n                    ),\n\n                    c.call(\n                        gPrefix + \"_copy\",\n                        c.getLocal(\"idx1\"),\n                        U\n                    ),\n\n                    c.call(\n                        gPrefix + \"_add\",\n                        U,\n                        T,\n                        c.getLocal(\"idx1\"),\n                    ),\n\n                    c.call(\n                        gPrefix + \"_sub\",\n                        U,\n                        T,\n                        c.getLocal(\"idx2\"),\n                    ),\n\n                    c.call(\n                        fPrefix + \"_mul\",\n                        W,\n                        c.getLocal(\"pwm\"),\n                        W,\n                    ),\n                    c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n    // Reverse all and multiply by factor\n    function buildFFTFinal() {\n        const f = module.addFunction(prefix+\"_fftFinal\");\n        f.addParam(\"pBuff\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"factor\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"ndiv2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const T = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.setLocal(\"ndiv2\", c.i32_shr_u(c.getLocal(\"n\"), c.i32_const(1))),\n            c.if(\n                c.i32_and(\n                    c.getLocal(\"n\"),\n                    c.i32_const(1)\n                ),\n                c.call(\n                    opGtimesF,\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.getLocal(\"ndiv2\"),\n                            c.i32_const(n8g)\n                        )\n                    ),\n                    c.getLocal(\"factor\"),\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.getLocal(\"ndiv2\"),\n                            c.i32_const(n8g)\n                        )\n                    ),\n                ),\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_ge_u(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"ndiv2\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.i32_sub(\n                                c.i32_sub(\n                                    c.getLocal(\"n\"),\n                                    c.i32_const(1)\n                                ),\n                                c.getLocal(\"i\")\n                            ),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"factor\"),\n                    T\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"factor\"),\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    gPrefix + \"_copy\",\n                    T,\n                    c.getLocal(\"idx1\"),\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n    buildRev();\n    buildReversePermutation();\n    buildFinalInverse();\n    buildRawFFT();\n    buildLog2();\n    buildFFT();\n    buildIFFT();\n    buildFFTJoin();\n    buildFFTJoinExt();\n    buildFFTJoinExtInv();\n    buildFFTMix();\n    buildFFTFinal();\n    buildPrepareLagrangeEvaluation();\n\n    module.exportFunction(prefix+\"_fft\");\n    module.exportFunction(prefix+\"_ifft\");\n    module.exportFunction(prefix+\"_rawfft\");\n    module.exportFunction(prefix+\"_fftJoin\");\n    module.exportFunction(prefix+\"_fftJoinExt\");\n    module.exportFunction(prefix+\"_fftJoinExtInv\");\n    module.exportFunction(prefix+\"_fftMix\");\n    module.exportFunction(prefix+\"_fftFinal\");\n    module.exportFunction(prefix+\"_prepareLagrangeEvaluation\");\n\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildPol(module, prefix, prefixField) {\n\n    const n64 = module.modules[prefixField].n64;\n    const n8 = n64*8;\n\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addLocal(\"lastp\", \"i32\");\n        f.addLocal(\"p\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\"p\", c.getLocal(\"px\")),\n            c.setLocal(\n                \"lastp\",\n                c.i32_add(\n                    c.getLocal(\"px\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"p\"),\n                        c.getLocal(\"lastp\")\n                    )\n                ),\n                c.call(prefixField + \"_zero\", c.getLocal(\"p\")),\n                c.setLocal(\"p\", c.i32_add(c.getLocal(\"p\"), c.i32_const(n8))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildConstructLC() {\n        const f = module.addFunction(prefix+\"_constructLC\");\n        f.addParam(\"ppolynomials\", \"i32\");\n        f.addParam(\"psignals\", \"i32\");\n        f.addParam(\"nSignals\", \"i32\");\n        f.addParam(\"pres\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"pp\", \"i32\");\n        f.addLocal(\"ps\", \"i32\");\n        f.addLocal(\"pd\", \"i32\");\n        f.addLocal(\"ncoefs\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.setLocal(\"pp\", c.getLocal(\"ppolynomials\")),\n            c.setLocal(\"ps\", c.getLocal(\"psignals\")),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"nSignals\")\n                    )\n                ),\n\n                c.setLocal(\"ncoefs\", c.i32_load(c.getLocal(\"pp\"))),\n                c.setLocal(\"pp\", c.i32_add(c.getLocal(\"pp\"), c.i32_const(4))),\n\n                c.setLocal(\"j\", c.i32_const(0)),\n                c.block(c.loop(\n                    c.br_if(\n                        1,\n                        c.i32_eq(\n                            c.getLocal(\"j\"),\n                            c.getLocal(\"ncoefs\")\n                        )\n                    ),\n\n                    c.setLocal(\n                        \"pd\",\n                        c.i32_add(\n                            c.getLocal(\"pres\"),\n                            c.i32_mul(\n                                c.i32_load(c.getLocal(\"pp\")),\n                                c.i32_const(n8)\n                            )\n                        )\n                    ),\n\n                    c.setLocal(\"pp\", c.i32_add(c.getLocal(\"pp\"), c.i32_const(4))),\n\n\n                    c.call(\n                        prefixField + \"_mul\",\n                        c.getLocal(\"ps\"),\n                        c.getLocal(\"pp\"),\n                        aux\n                    ),\n\n                    c.call(\n                        prefixField + \"_add\",\n                        aux,\n                        c.getLocal(\"pd\"),\n                        c.getLocal(\"pd\")\n                    ),\n\n                    c.setLocal(\"pp\", c.i32_add(c.getLocal(\"pp\"), c.i32_const(n8))),\n                    c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n\n                c.setLocal(\"ps\", c.i32_add(c.getLocal(\"ps\"), c.i32_const(n8))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n\n    }\n\n    buildZero();\n    buildConstructLC();\n\n\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_constructLC\");\n\n    return prefix;\n\n\n\n\n};\n", "\nmodule.exports = function buildQAP(module, prefix, prefixField) {\n\n    const n64 = module.modules[prefixField].n64;\n    const n8 = n64*8;\n\n\n    function buildBuildABC() {\n        const f = module.addFunction(prefix+\"_buildABC\");\n        f.addParam(\"pCoefs\", \"i32\");\n        f.addParam(\"nCoefs\", \"i32\");\n        f.addParam(\"pWitness\", \"i32\");\n        f.addParam(\"pA\", \"i32\");\n        f.addParam(\"pB\", \"i32\");\n        f.addParam(\"pC\", \"i32\");\n        f.addParam(\"offsetOut\", \"i32\");\n        f.addParam(\"nOut\", \"i32\");\n        f.addParam(\"offsetWitness\", \"i32\");\n        f.addParam(\"nWitness\", \"i32\");\n        f.addLocal(\"it\", \"i32\");\n        f.addLocal(\"ita\", \"i32\");\n        f.addLocal(\"itb\", \"i32\");\n        f.addLocal(\"last\", \"i32\");\n        f.addLocal(\"m\", \"i32\");\n        f.addLocal(\"c\", \"i32\");\n        f.addLocal(\"s\", \"i32\");\n        f.addLocal(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n\n            // Set output a and b to 0\n            c.setLocal(\"ita\", c.getLocal(\"pA\")),\n            c.setLocal(\"itb\", c.getLocal(\"pB\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pA\"),\n                    c.i32_mul(\n                        c.getLocal(\"nOut\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(prefixField + \"_zero\", c.getLocal(\"ita\")),\n                c.call(prefixField + \"_zero\", c.getLocal(\"itb\")),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.br(0)\n            )),\n\n\n            c.setLocal(\"it\", c.getLocal(\"pCoefs\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pCoefs\"),\n                    c.i32_mul(\n                        c.getLocal(\"nCoefs\"),\n                        c.i32_const(n8+12)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"it\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.setLocal(\n                    \"s\",\n                    c.i32_load(c.getLocal(\"it\"), 8)\n                ),\n                c.if(\n                    c.i32_or(\n                        c.i32_lt_u(\n                            c.getLocal(\"s\"),\n                            c.getLocal(\"offsetWitness\"),\n                        ),\n                        c.i32_ge_u(\n                            c.getLocal(\"s\"),\n                            c.i32_add(\n                                c.getLocal(\"offsetWitness\"),\n                                c.getLocal(\"nWitness\"),\n                            )\n                        )\n                    ),\n                    [\n                        ...c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                        ...c.br(1)\n                    ]\n                ),\n\n                c.setLocal(\n                    \"m\",\n                    c.i32_load(c.getLocal(\"it\"))\n                ),\n                c.if(\n                    c.i32_eq(c.getLocal(\"m\"), c.i32_const(0)),\n                    c.setLocal(\"pOut\", c.getLocal(\"pA\")),\n                    c.if(\n                        c.i32_eq(c.getLocal(\"m\"), c.i32_const(1)),\n                        c.setLocal(\"pOut\", c.getLocal(\"pB\")),\n                        [\n                            ...c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                            ...c.br(1)\n                        ]\n                    )\n                ),\n                c.setLocal(\n                    \"c\",\n                    c.i32_load(c.getLocal(\"it\"), 4)\n                ),\n                c.if(\n                    c.i32_or(\n                        c.i32_lt_u(\n                            c.getLocal(\"c\"),\n                            c.getLocal(\"offsetOut\"),\n                        ),\n                        c.i32_ge_u(\n                            c.getLocal(\"c\"),\n                            c.i32_add(\n                                c.getLocal(\"offsetOut\"),\n                                c.getLocal(\"nOut\"),\n                            )\n                        )\n                    ),\n                    [\n                        ...c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                        ...c.br(1)\n                    ]\n                ),\n                c.setLocal(\n                    \"pOut\",\n                    c.i32_add(\n                        c.getLocal(\"pOut\"),\n                        c.i32_mul(\n                            c.i32_sub(\n                                c.getLocal(\"c\"),\n                                c.getLocal(\"offsetOut\")\n                            ),\n                            c.i32_const(n8)\n                        )\n                    )\n                ),\n                c.call(\n                    prefixField + \"_mul\",\n                    c.i32_add(\n                        c.getLocal(\"pWitness\"),\n                        c.i32_mul(\n                            c.i32_sub(c.getLocal(\"s\"), c.getLocal(\"offsetWitness\")),\n                            c.i32_const(n8)\n                        )\n                    ),\n                    c.i32_add( c.getLocal(\"it\"), c.i32_const(12)),\n                    aux\n                ),\n                c.call(\n                    prefixField + \"_add\",\n                    c.getLocal(\"pOut\"),\n                    aux,\n                    c.getLocal(\"pOut\"),\n                ),\n                c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                c.br(0)\n            )),\n\n            c.setLocal(\"ita\", c.getLocal(\"pA\")),\n            c.setLocal(\"itb\", c.getLocal(\"pB\")),\n            c.setLocal(\"it\", c.getLocal(\"pC\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pA\"),\n                    c.i32_mul(\n                        c.getLocal(\"nOut\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(\n                    prefixField + \"_mul\",\n                    c.getLocal(\"ita\"),\n                    c.getLocal(\"itb\"),\n                    c.getLocal(\"it\")\n                ),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8))),\n                c.br(0)\n            )),\n\n        );\n    }\n\n    function buildJoinABC() {\n        const f = module.addFunction(prefix+\"_joinABC\");\n        f.addParam(\"pA\", \"i32\");\n        f.addParam(\"pB\", \"i32\");\n        f.addParam(\"pC\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pP\", \"i32\");\n        f.addLocal(\"ita\", \"i32\");\n        f.addLocal(\"itb\", \"i32\");\n        f.addLocal(\"itc\", \"i32\");\n        f.addLocal(\"itp\", \"i32\");\n        f.addLocal(\"last\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"ita\", c.getLocal(\"pA\")),\n            c.setLocal(\"itb\", c.getLocal(\"pB\")),\n            c.setLocal(\"itc\", c.getLocal(\"pC\")),\n            c.setLocal(\"itp\", c.getLocal(\"pP\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pA\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(\n                    prefixField + \"_mul\",\n                    c.getLocal(\"ita\"),\n                    c.getLocal(\"itb\"),\n                    aux\n                ),\n                c.call(\n                    prefixField + \"_sub\",\n                    aux,\n                    c.getLocal(\"itc\"),\n                    c.getLocal(\"itp\"),\n                ),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.setLocal(\"itc\", c.i32_add(c.getLocal(\"itc\"), c.i32_const(n8))),\n                c.setLocal(\"itp\", c.i32_add(c.getLocal(\"itp\"), c.i32_const(n8))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildBatchAdd() {\n        const f = module.addFunction(prefix+\"_batchAdd\");\n        f.addParam(\"pa\", \"i32\");\n        f.addParam(\"pb\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"ita\", \"i32\");\n        f.addLocal(\"itb\", \"i32\");\n        f.addLocal(\"itr\", \"i32\");\n        f.addLocal(\"last\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\"ita\", c.getLocal(\"pa\")),\n            c.setLocal(\"itb\", c.getLocal(\"pb\")),\n            c.setLocal(\"itr\", c.getLocal(\"pr\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pa\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(\n                    prefixField + \"_add\",\n                    c.getLocal(\"ita\"),\n                    c.getLocal(\"itb\"),\n                    c.getLocal(\"itr\"),\n                ),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.setLocal(\"itr\", c.i32_add(c.getLocal(\"itr\"), c.i32_const(n8))),\n                c.br(0)\n            ))\n        );\n    }\n\n    buildBuildABC();\n    buildJoinABC();\n    buildBatchAdd();\n\n    module.exportFunction(prefix + \"_buildABC\");\n    module.exportFunction(prefix + \"_joinABC\");\n    module.exportFunction(prefix + \"_batchAdd\");\n\n    return prefix;\n\n};\n\n", "\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildApplyKey(module, fnName, gPrefix, frPrefix, sizeGIn, sizeGOut, sizeF, opGtimesF) {\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"pIn\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pFirst\", \"i32\");\n    f.addParam(\"pInc\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addLocal(\"pOldFree\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"pFrom\", \"i32\");\n    f.addLocal(\"pTo\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const t = c.i32_const(module.alloc(sizeF));\n\n    f.addCode(\n        c.setLocal(\"pFrom\", c.getLocal(\"pIn\")),\n        c.setLocal(\"pTo\", c.getLocal(\"pOut\")),\n    );\n\n    // t = first\n    f.addCode(\n        c.call(\n            frPrefix + \"_copy\",\n            c.getLocal(\"pFirst\"),\n            t\n        )\n    );\n    f.addCode(\n        c.setLocal(\"i\", c.i32_const(0)),\n        c.block(c.loop(\n            c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n            c.call(\n                opGtimesF,\n                c.getLocal(\"pFrom\"),\n                t,\n                c.getLocal(\"pTo\")\n            ),\n            c.setLocal(\"pFrom\", c.i32_add(c.getLocal(\"pFrom\"), c.i32_const(sizeGIn))),\n            c.setLocal(\"pTo\", c.i32_add(c.getLocal(\"pTo\"), c.i32_const(sizeGOut))),\n\n            // t = t* inc\n            c.call(\n                frPrefix + \"_mul\",\n                t,\n                c.getLocal(\"pInc\"),\n                t\n            ),\n            c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        ))\n    );\n\n    module.exportFunction(fnName);\n\n};\n", "const utils = require(\"../utils\");\n\nconst buildF1m =require(\"../build_f1m.js\");\nconst buildF1 =require(\"../build_f1.js\");\nconst buildF2m =require(\"../build_f2m.js\");\nconst buildF3m =require(\"../build_f3m.js\");\nconst buildCurve =require(\"../build_curve_jacobian_a0.js\");\nconst buildFFT = require(\"../build_fft\");\nconst buildPol = require(\"../build_pol\");\nconst buildQAP = require(\"../build_qap\");\nconst buildApplyKey = require(\"../build_applykey\");\nconst { bitLength, modInv, isOdd, isNegative } = require(\"../bigint.js\");\n\nmodule.exports = function buildBN128(module, _prefix) {\n\n    const prefix = _prefix || \"bn128\";\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const q = 21888242871839275222246405745257275088696311157297823662689037894645226208583n;\n    const r = 21888242871839275222246405745257275088548364400416034343698204186575808495617n;\n\n\n    const n64 = Math.floor((bitLength(q - 1n) - 1)/64) +1;\n    const n8 = n64*8;\n    const frsize = n8;\n    const f1size = n8;\n    const f2size = f1size * 2;\n    const ftsize = f1size * 12;\n\n    const pr = module.alloc(utils.bigInt2BytesLE( r, frsize ));\n\n    const f1mPrefix = buildF1m(module, q, \"f1m\");\n    buildF1(module, r, \"fr\", \"frm\");\n\n    const pG1b = module.alloc(utils.bigInt2BytesLE( toMontgomery(3n), f1size ));\n    const g1mPrefix = buildCurve(module, \"g1m\", \"f1m\", pG1b);\n\n    buildFFT(module, \"frm\", \"frm\", \"frm\", \"frm_mul\");\n\n    buildPol(module, \"pol\", \"frm\");\n    buildQAP(module, \"qap\", \"frm\");\n\n    const f2mPrefix = buildF2m(module, \"f1m_neg\", \"f2m\", \"f1m\");\n    const pG2b = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(19485874751759354771024239261021720505790618469301721065564631296452457478373n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(266929791119991161246907387137283842545076965332900288569378510910307636690n), f1size )\n    ]);\n    const g2mPrefix = buildCurve(module, \"g2m\", \"f2m\", pG2b);\n\n\n    function buildGTimesFr(fnName, opMul) {\n        const f = module.addFunction(fnName);\n        f.addParam(\"pG\", \"i32\");\n        f.addParam(\"pFr\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(\"frm_fromMontgomery\", c.getLocal(\"pFr\"), AUX),\n            c.call(\n                opMul,\n                c.getLocal(\"pG\"),\n                AUX,\n                c.i32_const(n8),\n                c.getLocal(\"pr\")\n            )\n        );\n\n        module.exportFunction(fnName);\n    }\n    buildGTimesFr(\"g1m_timesFr\", \"g1m_timesScalar\");\n    buildFFT(module, \"g1m\", \"g1m\", \"frm\", \"g1m_timesFr\");\n\n    buildGTimesFr(\"g2m_timesFr\", \"g2m_timesScalar\");\n    buildFFT(module, \"g2m\", \"g2m\", \"frm\", \"g2m_timesFr\");\n\n    buildGTimesFr(\"g1m_timesFrAffine\", \"g1m_timesScalarAffine\");\n    buildGTimesFr(\"g2m_timesFrAffine\", \"g2m_timesScalarAffine\");\n\n    buildApplyKey(module, \"frm_batchApplyKey\", \"fmr\", \"frm\", n8, n8, n8, \"frm_mul\");\n    buildApplyKey(module, \"g1m_batchApplyKey\", \"g1m\", \"frm\", n8*3, n8*3, n8, \"g1m_timesFr\");\n    buildApplyKey(module, \"g1m_batchApplyKeyMixed\", \"g1m\", \"frm\", n8*2, n8*3, n8, \"g1m_timesFrAffine\");\n    buildApplyKey(module, \"g2m_batchApplyKey\", \"g2m\", \"frm\", n8*2*3, n8*3*2, n8, \"g2m_timesFr\");\n    buildApplyKey(module, \"g2m_batchApplyKeyMixed\", \"g2m\", \"frm\", n8*2*2, n8*3*2, n8, \"g2m_timesFrAffine\");\n\n    function toMontgomery(a) {\n        return BigInt(a) * ( 1n << BigInt(f1size*8)) % q;\n    }\n\n    const G1gen = [\n        1n,\n        2n,\n        1n\n    ];\n\n    const pG1gen = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[2]), f1size ),\n        ]\n    );\n\n    const G1zero = [\n        0n,\n        1n,\n        0n\n    ];\n\n    const pG1zero = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[2]), f1size )\n        ]\n    );\n\n    const G2gen = [\n        [\n            10857046999023057135944570762232829481370756359578518086990519993285655852781n,\n            11559732032986387107991004021392285783925812861821192530917403151452391805634n,\n        ],[\n            8495653923123431417604973247489272438418190587263600148770280649306958101930n,\n            4082367875863433681332203403145435568316851327593401208105741076214120093531n,\n        ],[\n            1n,\n            0n,\n        ]\n    ];\n\n    const pG2gen = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[0][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[0][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[1][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[1][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[2][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[2][1]), f1size ),\n        ]\n    );\n\n    const G2zero = [\n        [\n            0n,\n            0n,\n        ],[\n            1n,\n            0n,\n        ],[\n            0n,\n            0n,\n        ]\n    ];\n\n    const pG2zero = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[0][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[0][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[1][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[1][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[2][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[2][1]), f1size ),\n        ]\n    );\n\n    const pOneT = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(1), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n    ]);\n\n    const pNonResidueF6 = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(9), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(1), f1size ),\n    ]);\n\n    const pTwoInv = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(  modInv(2n, q)), f1size ),\n        ...utils.bigInt2BytesLE( 0n, f1size )\n    ]);\n\n    const pAltBn128Twist = pNonResidueF6;\n\n    const pTwistCoefB = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(19485874751759354771024239261021720505790618469301721065564631296452457478373n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(266929791119991161246907387137283842545076965332900288569378510910307636690n), f1size ),\n    ]);\n\n    function build_mulNR6() {\n        const f = module.addFunction(prefix + \"_mulNR6\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(\n                f2mPrefix + \"_mul\",\n                c.i32_const(pNonResidueF6),\n                c.getLocal(\"x\"),\n                c.getLocal(\"pr\")\n            )\n        );\n    }\n    build_mulNR6();\n\n    const f6mPrefix = buildF3m(module, prefix+\"_mulNR6\", \"f6m\", \"f2m\");\n\n    function build_mulNR12() {\n        const f = module.addFunction(prefix + \"_mulNR12\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(\n                f2mPrefix + \"_mul\",\n                c.i32_const(pNonResidueF6),\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8*4)),\n                c.getLocal(\"pr\")\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.getLocal(\"x\"),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2)),\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8*2)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*4)),\n            )\n        );\n    }\n    build_mulNR12();\n\n    const ftmPrefix = buildF2m(module, prefix+\"_mulNR12\", \"ftm\", f6mPrefix);\n\n\n    const ateLoopCount = 29793968203157093288n;\n    const ateLoopBitBytes = bits(ateLoopCount);\n    const pAteLoopBitBytes = module.alloc(ateLoopBitBytes);\n    const isLoopNegative = false;\n\n    const ateCoefSize = 3 * f2size;\n    const ateNDblCoefs = ateLoopBitBytes.length-1;\n    const ateNAddCoefs = ateLoopBitBytes.reduce((acc, b) =>  acc + ( b!=0 ? 1 : 0)   ,0);\n    const ateNCoefs = ateNAddCoefs + ateNDblCoefs + 1;\n    const prePSize = 3*2*n8;\n    const preQSize = 3*n8*2 + ateNCoefs*ateCoefSize;\n    const finalExpIsNegative = false;\n\n\n    module.modules[prefix] = {\n        n64: n64,\n        pG1gen: pG1gen,\n        pG1zero: pG1zero,\n        pG1b: pG1b,\n        pG2gen: pG2gen,\n        pG2zero: pG2zero,\n        pG2b: pG2b,\n        pq: module.modules[\"f1m\"].pq,\n        pr: pr,\n        pOneT: pOneT,\n        prePSize: prePSize,\n        preQSize: preQSize,\n        r: r.toString(),\n        q: q.toString()\n    };\n\n    // console.log(\"PrePSize: \" +prePSize);\n    // console.log(\"PreQSize: \" +preQSize);\n\n    const finalExpZ = 4965661367192848881n;\n\n    function naf(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd(E)) {\n                const z = 2 - Number(E % 4n);\n                res.push( z );\n                E = E - BigInt(z);\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function bits(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd(E)) {\n                res.push( 1 );\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function buildPrepareG1() {\n        const f = module.addFunction(prefix+ \"_prepareG1\");\n        f.addParam(\"pP\", \"i32\");\n        f.addParam(\"ppreP\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(g1mPrefix + \"_normalize\", c.getLocal(\"pP\"), c.getLocal(\"ppreP\")),  // TODO Remove if already in affine\n        );\n    }\n\n    function buildPrepAddStep() {\n        const f = module.addFunction(prefix+ \"_prepAddStep\");\n        f.addParam(\"pQ\", \"i32\");\n        f.addParam(\"pR\", \"i32\");\n        f.addParam(\"pCoef\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const X2  = c.getLocal(\"pQ\");\n        const Y2  = c.i32_add(c.getLocal(\"pQ\"), c.i32_const(f2size));\n\n        const X1  = c.getLocal(\"pR\");\n        const Y1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f2size));\n        const Z1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(2*f2size));\n\n        const ELL_0  = c.getLocal(\"pCoef\");\n        const ELL_VW = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(f2size));\n        const ELL_VV  = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(2*f2size));\n\n        const D = ELL_VW;\n        const E = c.i32_const(module.alloc(f2size));\n        const F = c.i32_const(module.alloc(f2size));\n        const G = c.i32_const(module.alloc(f2size));\n        const H = c.i32_const(module.alloc(f2size));\n        const I = c.i32_const(module.alloc(f2size));\n        const J = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n            // D = X1 - X2*Z1\n            c.call(f2mPrefix + \"_mul\", X2, Z1, D),\n            c.call(f2mPrefix + \"_sub\", X1, D, D),\n\n            // E = Y1 - Y2*Z1\n            c.call(f2mPrefix + \"_mul\", Y2, Z1, E),\n            c.call(f2mPrefix + \"_sub\", Y1, E, E),\n\n            // F = D^2\n            c.call(f2mPrefix + \"_square\", D, F),\n\n            // G = E^2\n            c.call(f2mPrefix + \"_square\", E, G),\n\n            // H = D*F\n            c.call(f2mPrefix + \"_mul\", D, F, H),\n\n            // I = X1 * F\n            c.call(f2mPrefix + \"_mul\", X1, F, I),\n\n            // J = H + Z1*G - (I+I)\n            c.call(f2mPrefix + \"_add\", I, I, AUX),\n            c.call(f2mPrefix + \"_mul\", Z1, G, J),\n            c.call(f2mPrefix + \"_add\", H, J, J),\n            c.call(f2mPrefix + \"_sub\", J, AUX, J),\n\n\n            // X3 (X1) = D*J\n            c.call(f2mPrefix + \"_mul\", D, J, X1),\n\n            // Y3 (Y1) = E*(I-J)-(H*Y1)\n            c.call(f2mPrefix + \"_mul\", H, Y1, Y1),\n            c.call(f2mPrefix + \"_sub\", I, J, AUX),\n            c.call(f2mPrefix + \"_mul\", E, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", AUX, Y1, Y1),\n\n            // Z3 (Z1) = Z1*H\n            c.call(f2mPrefix + \"_mul\", Z1, H, Z1),\n\n            // ell_0 = xi * (E * X2 - D * Y2)\n            c.call(f2mPrefix + \"_mul\", D, Y2, AUX),\n            c.call(f2mPrefix + \"_mul\", E, X2, ELL_0),\n            c.call(f2mPrefix + \"_sub\", ELL_0, AUX, ELL_0),\n            c.call(f2mPrefix + \"_mul\", ELL_0, c.i32_const(pAltBn128Twist), ELL_0),\n\n\n            // ell_VV = - E (later: * xP)\n            c.call(f2mPrefix + \"_neg\", E, ELL_VV),\n\n            // ell_VW = D (later: * yP    )\n            // Already assigned\n\n        );\n    }\n\n\n\n    function buildPrepDoubleStep() {\n        const f = module.addFunction(prefix+ \"_prepDblStep\");\n        f.addParam(\"pR\", \"i32\");\n        f.addParam(\"pCoef\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const X1  = c.getLocal(\"pR\");\n        const Y1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f2size));\n        const Z1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(2*f2size));\n\n        const ELL_0  = c.getLocal(\"pCoef\");\n        const ELL_VW = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(f2size));\n        const ELL_VV  = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(2*f2size));\n\n        const A = c.i32_const(module.alloc(f2size));\n        const B = c.i32_const(module.alloc(f2size));\n        const C = c.i32_const(module.alloc(f2size));\n        const D = c.i32_const(module.alloc(f2size));\n        const E = c.i32_const(module.alloc(f2size));\n        const F = c.i32_const(module.alloc(f2size));\n        const G = c.i32_const(module.alloc(f2size));\n        const H = c.i32_const(module.alloc(f2size));\n        const I = c.i32_const(module.alloc(f2size));\n        const J = c.i32_const(module.alloc(f2size));\n        const E2 = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // A = X1 * Y1 / 2\n            c.call(f2mPrefix + \"_mul\", Y1, c.i32_const(pTwoInv), A),\n            c.call(f2mPrefix + \"_mul\", X1, A, A),\n\n            // B = Y1^2\n            c.call(f2mPrefix + \"_square\", Y1, B),\n\n            // C = Z1^2\n            c.call(f2mPrefix + \"_square\", Z1, C),\n\n            // D = 3 * C\n            c.call(f2mPrefix + \"_add\", C, C, D),\n            c.call(f2mPrefix + \"_add\", D, C, D),\n\n            // E = twist_b * D\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pTwistCoefB), D, E),\n\n            // F = 3 * E\n            c.call(f2mPrefix + \"_add\", E, E, F),\n            c.call(f2mPrefix + \"_add\", E, F, F),\n\n            // G = (B+F)/2\n            c.call(f2mPrefix + \"_add\", B, F, G),\n            c.call(f2mPrefix + \"_mul\", G, c.i32_const(pTwoInv), G),\n\n            // H = (Y1+Z1)^2-(B+C)\n            c.call(f2mPrefix + \"_add\", B, C, AUX),\n            c.call(f2mPrefix + \"_add\", Y1, Z1, H),\n            c.call(f2mPrefix + \"_square\", H, H),\n            c.call(f2mPrefix + \"_sub\", H, AUX, H),\n\n            // I = E-B\n            c.call(f2mPrefix + \"_sub\", E, B, I),\n\n            // J = X1^2\n            c.call(f2mPrefix + \"_square\", X1, J),\n\n            // E_squared = E^2\n            c.call(f2mPrefix + \"_square\", E, E2),\n\n            // X3 (X1) = A * (B-F)\n            c.call(f2mPrefix + \"_sub\", B, F, AUX),\n            c.call(f2mPrefix + \"_mul\", A, AUX, X1),\n\n            // Y3 (Y1) = G^2 - 3*E^2\n            c.call(f2mPrefix + \"_add\", E2, E2, AUX),\n            c.call(f2mPrefix + \"_add\", E2, AUX, AUX),\n            c.call(f2mPrefix + \"_square\", G, Y1),\n            c.call(f2mPrefix + \"_sub\", Y1, AUX, Y1),\n\n            // Z3 (Z1) = B * H\n            c.call(f2mPrefix + \"_mul\", B, H, Z1),\n\n            // ell_0 = xi * I\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pAltBn128Twist), I, ELL_0),\n\n            // ell_VW = - H (later: * yP)\n            c.call(f2mPrefix + \"_neg\", H, ELL_VW),\n\n            // ell_VV = 3*J (later: * xP)\n            c.call(f2mPrefix + \"_add\", J, J, ELL_VV),\n            c.call(f2mPrefix + \"_add\", J, ELL_VV, ELL_VV),\n\n        );\n    }\n\n    function buildMulByQ() {\n        const f = module.addFunction(prefix + \"_mulByQ\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(f2size));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(f2size*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(f2size));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(f2size*2));\n\n        const MulByQX = c.i32_const(module.alloc([\n            ...utils.bigInt2BytesLE( toMontgomery(\"21575463638280843010398324269430826099269044274347216827212613867836435027261\"), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(\"10307601595873709700152284273816112264069230130616436755625194854815875713954\"), f1size ),\n        ]));\n\n        const MulByQY = c.i32_const(module.alloc([\n            ...utils.bigInt2BytesLE( toMontgomery(\"2821565182194536844548159561693502659359617185244120367078079554186484126554\"), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(\"3505843767911556378687030309984248845540243509899259641013678093033130930403\"), f1size ),\n        ]));\n\n        f.addCode(\n            // The frobeniusMap(1) in this field, is the conjugate\n            c.call(f2mPrefix + \"_conjugate\", x, x3),\n            c.call(f2mPrefix + \"_mul\", MulByQX, x3, x3),\n            c.call(f2mPrefix + \"_conjugate\", y, y3),\n            c.call(f2mPrefix + \"_mul\", MulByQY, y3, y3),\n            c.call(f2mPrefix + \"_conjugate\", z, z3),\n        );\n    }\n\n\n    function buildPrepareG2() {\n        buildMulByQ();\n        const f = module.addFunction(prefix+ \"_prepareG2\");\n        f.addParam(\"pQ\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const QX = c.getLocal(\"pQ\");\n\n        const pR = module.alloc(f2size*3);\n        const R = c.i32_const(pR);\n        const RX = c.i32_const(pR);\n        const RY = c.i32_const(pR+f2size);\n        const RZ = c.i32_const(pR+2*f2size);\n\n        const cQX = c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(0));\n        const cQY = c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size));\n\n        const pQ1 = module.alloc(f2size*3);\n        const Q1 = c.i32_const(pQ1);\n\n        const pQ2 = module.alloc(f2size*3);\n        const Q2 = c.i32_const(pQ2);\n        const Q2Y = c.i32_const(pQ2 + f2size);\n\n        f.addCode(\n            c.call(g2mPrefix + \"_normalize\", QX, cQX),  // TODO Remove if already in affine\n            c.call(f2mPrefix + \"_copy\", cQX, RX),\n            c.call(f2mPrefix + \"_copy\", cQY, RY),\n            c.call(f2mPrefix + \"_one\", RZ),\n        );\n\n        f.addCode(\n            c.setLocal(\"pCoef\", c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n                c.call(prefix + \"_prepDblStep\", R, c.getLocal(\"pCoef\")),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(prefix + \"_prepAddStep\", cQX, R, c.getLocal(\"pCoef\")),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n                    ]\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n\n        f.addCode(\n            c.call(prefix + \"_mulByQ\", cQX, Q1),\n            c.call(prefix + \"_mulByQ\", Q1, Q2)\n        );\n\n        if (isLoopNegative) {\n            f.addCode(\n                c.call(f2mPrefix + \"_neg\", RY, RY),\n            );\n        }\n\n        f.addCode(\n            c.call(f2mPrefix + \"_neg\", Q2Y, Q2Y),\n\n            c.call(prefix + \"_prepAddStep\", Q1, R, c.getLocal(\"pCoef\")),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n            c.call(prefix + \"_prepAddStep\", Q2, R, c.getLocal(\"pCoef\")),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n        );\n    }\n\n    function buildMulBy024Old() {\n        const f = module.addFunction(prefix+ \"__mulBy024Old\");\n        f.addParam(\"pEll0\", \"i32\");\n        f.addParam(\"pEllVW\", \"i32\");\n        f.addParam(\"pEllVV\", \"i32\");\n        f.addParam(\"pR\", \"i32\");            // Result in F12\n\n        const c = f.getCodeBuilder();\n\n        const x0  = c.getLocal(\"pEll0\");\n        const x2  = c.getLocal(\"pEllVV\");\n        const x4  = c.getLocal(\"pEllVW\");\n\n        const z0  = c.getLocal(\"pR\");\n\n        const pAUX12 = module.alloc(ftsize);\n        const AUX12 = c.i32_const(pAUX12);\n        const AUX12_0 = c.i32_const(pAUX12);\n        const AUX12_2 = c.i32_const(pAUX12+f2size);\n        const AUX12_4 = c.i32_const(pAUX12+f2size*2);\n        const AUX12_6 = c.i32_const(pAUX12+f2size*3);\n        const AUX12_8 = c.i32_const(pAUX12+f2size*4);\n        const AUX12_10 = c.i32_const(pAUX12+f2size*5);\n\n        f.addCode(\n\n            c.call(f2mPrefix + \"_copy\", x0, AUX12_0),\n            c.call(f2mPrefix + \"_zero\", AUX12_2),\n            c.call(f2mPrefix + \"_copy\", x2, AUX12_4),\n            c.call(f2mPrefix + \"_zero\", AUX12_6),\n            c.call(f2mPrefix + \"_copy\", x4, AUX12_8),\n            c.call(f2mPrefix + \"_zero\", AUX12_10),\n            c.call(ftmPrefix + \"_mul\", AUX12, z0, z0),\n        );\n    }\n\n    function buildMulBy024() {\n        const f = module.addFunction(prefix+ \"__mulBy024\");\n        f.addParam(\"pEll0\", \"i32\");\n        f.addParam(\"pEllVW\", \"i32\");\n        f.addParam(\"pEllVV\", \"i32\");\n        f.addParam(\"pR\", \"i32\");            // Result in F12\n\n        const c = f.getCodeBuilder();\n\n        const x0  = c.getLocal(\"pEll0\");\n        const x2  = c.getLocal(\"pEllVV\");\n        const x4  = c.getLocal(\"pEllVW\");\n\n        const z0  = c.getLocal(\"pR\");\n        const z1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(2*n8));\n        const z2  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(4*n8));\n        const z3  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(6*n8));\n        const z4  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(8*n8));\n        const z5  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(10*n8));\n\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const s0 = c.i32_const(module.alloc(f2size));\n        const T3 = c.i32_const(module.alloc(f2size));\n        const T4 = c.i32_const(module.alloc(f2size));\n        const D0 = c.i32_const(module.alloc(f2size));\n        const D2 = c.i32_const(module.alloc(f2size));\n        const D4 = c.i32_const(module.alloc(f2size));\n        const S1 = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // D0 = z0 * x0;\n            c.call(f2mPrefix + \"_mul\", z0, x0, D0),\n            // D2 = z2 * x2;\n            c.call(f2mPrefix + \"_mul\", z2, x2, D2),\n            // D4 = z4 * x4;\n            c.call(f2mPrefix + \"_mul\", z4, x4, D4),\n            // t2 = z0 + z4;\n            c.call(f2mPrefix + \"_add\", z0, z4, t2),\n            // t1 = z0 + z2;\n            c.call(f2mPrefix + \"_add\", z0, z2, t1),\n            // s0 = z1 + z3 + z5;\n            c.call(f2mPrefix + \"_add\", z1, z3, s0),\n            c.call(f2mPrefix + \"_add\", s0, z5, s0),\n\n\n            // For z.a_.a_ = z0.\n            // S1 = z1 * x2;\n            c.call(f2mPrefix + \"_mul\", z1, x2, S1),\n            // T3 = S1 + D4;\n            c.call(f2mPrefix + \"_add\", S1, D4, T3),\n            // T4 = my_Fp6::non_residue * T3 + D0;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            c.call(f2mPrefix + \"_add\", T4, D0, z0),\n            // z0 = T4;\n\n            // For z.a_.b_ = z1\n            // T3 = z5 * x4;\n            c.call(f2mPrefix + \"_mul\", z5, x4, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T3 = T3 + D2;\n            c.call(f2mPrefix + \"_add\", T3, D2, T3),\n            // T4 = my_Fp6::non_residue * T3;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            // T3 = z1 * x0;\n            c.call(f2mPrefix + \"_mul\", z1, x0, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T4 = T4 + T3;\n            c.call(f2mPrefix + \"_add\", T4, T3, z1),\n            // z1 = T4;\n\n\n\n            // For z.a_.c_ = z2\n            // t0 = x0 + x2;\n            c.call(f2mPrefix + \"_add\", x0, x2, t0),\n            // T3 = t1 * t0 - D0 - D2;\n            c.call(f2mPrefix + \"_mul\", t1, t0, T3),\n            c.call(f2mPrefix + \"_add\", D0, D2, AUX),\n            c.call(f2mPrefix + \"_sub\", T3, AUX, T3),\n            // T4 = z3 * x4;\n            c.call(f2mPrefix + \"_mul\", z3, x4, T4),\n            // S1 = S1 + T4;\n            c.call(f2mPrefix + \"_add\", S1, T4, S1),\n\n\n            // For z.b_.a_ = z3 (z3 needs z2)\n            // t0 = z2 + z4;\n            c.call(f2mPrefix + \"_add\", z2, z4, t0),\n            // T3 = T3 + T4;\n            // z2 = T3;\n            c.call(f2mPrefix + \"_add\", T3, T4, z2),\n            // t1 = x2 + x4;\n            c.call(f2mPrefix + \"_add\", x2, x4, t1),\n            // T3 = t0 * t1 - D2 - D4;\n            c.call(f2mPrefix + \"_mul\", t1, t0, T3),\n            c.call(f2mPrefix + \"_add\", D2, D4, AUX),\n            c.call(f2mPrefix + \"_sub\", T3, AUX, T3),\n            // T4 = my_Fp6::non_residue * T3;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            // T3 = z3 * x0;\n            c.call(f2mPrefix + \"_mul\", z3, x0, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T4 = T4 + T3;\n            c.call(f2mPrefix + \"_add\", T4, T3, z3),\n            // z3 = T4;\n\n            // For z.b_.b_ = z4\n            // T3 = z5 * x2;\n            c.call(f2mPrefix + \"_mul\", z5, x2, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T4 = my_Fp6::non_residue * T3;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            // t0 = x0 + x4;\n            c.call(f2mPrefix + \"_add\", x0, x4, t0),\n            // T3 = t2 * t0 - D0 - D4;\n            c.call(f2mPrefix + \"_mul\", t2, t0, T3),\n            c.call(f2mPrefix + \"_add\", D0, D4, AUX),\n            c.call(f2mPrefix + \"_sub\", T3, AUX, T3),\n            // T4 = T4 + T3;\n            c.call(f2mPrefix + \"_add\", T4, T3, z4),\n            // z4 = T4;\n\n            // For z.b_.c_ = z5.\n            // t0 = x0 + x2 + x4;\n            c.call(f2mPrefix + \"_add\", x0, x2, t0),\n            c.call(f2mPrefix + \"_add\", t0, x4, t0),\n            // T3 = s0 * t0 - S1;\n            c.call(f2mPrefix + \"_mul\", s0, t0, T3),\n            c.call(f2mPrefix + \"_sub\", T3, S1, z5),\n            // z5 = T3;\n\n        );\n    }\n\n\n    function buildMillerLoop() {\n        const f = module.addFunction(prefix+ \"_millerLoop\");\n        f.addParam(\"ppreP\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const preP_PX = c.getLocal(\"ppreP\");\n        const preP_PY = c.i32_add(c.getLocal(\"ppreP\"), c.i32_const(f1size));\n\n        const ELL_0  = c.getLocal(\"pCoef\");\n        const ELL_VW = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(f2size));\n        const ELL_VV  = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(2*f2size));\n\n\n        const pVW = module.alloc(f2size);\n        const VW = c.i32_const(pVW);\n        const pVV = module.alloc(f2size);\n        const VV = c.i32_const(pVV);\n\n        const F = c.getLocal(\"r\");\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_one\", F),\n\n            c.setLocal(\"pCoef\", c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n\n                c.call(ftmPrefix + \"_square\", F, F),\n\n                c.call(f2mPrefix + \"_mul1\", ELL_VW,preP_PY, VW),\n                c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n                c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(f2mPrefix + \"_mul1\", ELL_VW, preP_PY, VW),\n                        ...c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n\n                        ...c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                    ]\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n\n        );\n\n        if (isLoopNegative) {\n            f.addCode(\n                c.call(ftmPrefix + \"_inverse\", F, F),\n            );\n        }\n\n        f.addCode(\n            c.call(f2mPrefix + \"_mul1\", ELL_VW, preP_PY, VW),\n            c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n            c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n            c.call(f2mPrefix + \"_mul1\", ELL_VW, preP_PY, VW),\n            c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n            c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n        );\n\n    }\n\n\n    function buildFrobeniusMap(n) {\n        const F12 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [8376118865763821496583973867626364092589906065868298776909617916018768340080n, 16469823323077808223889137241176536799009286646108169935659301613961712198316n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556617n, 0n],\n                [11697423496358154304825782922584725312912383441159505038794027105778954184319n, 303847389135065887422783454877609941456349188919719272345083954437860409601n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556616n, 0n],\n                [3321304630594332808241809054958361220322477375291206261884409189760185844239n, 5722266937896532885780051958958348231143373700109372999374820235121374419868n],\n                [21888242871839275222246405745257275088696311157297823662689037894645226208582n, 0n],\n                [13512124006075453725662431877630910996106405091429524885779419978626457868503n, 5418419548761466998357268504080738289687024511189653727029736280683514010267n],\n                [2203960485148121921418603742825762020974279258880205651966n, 0n],\n                [10190819375481120917420622822672549775783927716138318623895010788866272024264n, 21584395482704209334823622290379665147239961968378104390343953940207365798982n],\n                [2203960485148121921418603742825762020974279258880205651967n, 0n],\n                [18566938241244942414004596690298913868373833782006617400804628704885040364344n, 16165975933942742336466353786298926857552937457188450663314217659523851788715n],\n            ]\n        ];\n\n        const F6 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [21575463638280843010398324269430826099269044274347216827212613867836435027261n, 10307601595873709700152284273816112264069230130616436755625194854815875713954n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556616n, 0n],\n                [3772000881919853776433695186713858239009073593817195771773381919316419345261n, 2236595495967245188281701248203181795121068902605861227855261137820944008926n],\n                [2203960485148121921418603742825762020974279258880205651966n, 0n],\n                [18429021223477853657660792034369865839114504446431234726392080002137598044644n, 9344045779998320333812420223237981029506012124075525679208581902008406485703n],\n            ],\n            [\n                [1n, 0n],\n                [2581911344467009335267311115468803099551665605076196740867805258568234346338n, 19937756971775647987995932169929341994314640652964949448313374472400716661030n],\n                [2203960485148121921418603742825762020974279258880205651966n, 0n],\n                [5324479202449903542726783395506214481928257762400643279780343368557297135718n, 16208900380737693084919495127334387981393726419856888799917914180988844123039n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556616n, 0n],\n                [13981852324922362344252311234282257507216387789820983642040889267519694726527n, 7629828391165209371577384193250820201684255241773809077146787135900891633097n],\n            ]\n        ];\n\n        const f = module.addFunction(prefix+ \"__frobeniusMap\"+n);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<6; i++) {\n            const X = (i==0) ? c.getLocal(\"x\") : c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size));\n            const Xc0 = X;\n            const Xc1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size + f1size));\n            const R = (i==0) ? c.getLocal(\"r\") : c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size));\n            const Rc0 = R;\n            const Rc1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size + f1size));\n            const coef = mul2(F12[Math.floor(i/3)][n%12] , F6[i%3][n%6]);\n            const pCoef = module.alloc([\n                ...utils.bigInt2BytesLE(toMontgomery(coef[0]), 32),\n                ...utils.bigInt2BytesLE(toMontgomery(coef[1]), 32),\n            ]);\n            if (n%2 == 1) {\n                f.addCode(\n                    c.call(f1mPrefix + \"_copy\", Xc0, Rc0),\n                    c.call(f1mPrefix + \"_neg\", Xc1, Rc1),\n                    c.call(f2mPrefix + \"_mul\", R, c.i32_const(pCoef), R),\n                );\n            } else {\n                f.addCode(c.call(f2mPrefix + \"_mul\", X, c.i32_const(pCoef), R));\n            }\n        }\n\n        function mul2(a, b) {\n            const ac0 = BigInt(a[0]);\n            const ac1 = BigInt(a[1]);\n            const bc0 = BigInt(b[0]);\n            const bc1 = BigInt(b[1]);\n            const res = [\n                (ac0 * bc0 - (  ac1 * bc1)  ) % q,\n                (ac0 * bc1 + (  ac1 * bc0)  ) % q,\n            ];\n            if (isNegative(res[0])) res[0] = res[0] + q;\n            return res;\n        }\n\n    }\n\n\n\n    function buildFinalExponentiationFirstChunk() {\n\n        const f = module.addFunction(prefix+ \"__finalExponentiationFirstChunk\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const eltC0 = elt;\n        const eltC1 = c.i32_add(elt, c.i32_const(n8*6));\n        const r = c.getLocal(\"r\");\n        const pA = module.alloc(ftsize);\n        const A = c.i32_const(pA);\n        const Ac0 = A;\n        const Ac1 = c.i32_const(pA + n8*6);\n        const B = c.i32_const(module.alloc(ftsize));\n        const C = c.i32_const(module.alloc(ftsize));\n        const D = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n            // const alt_bn128_Fq12 A = alt_bn128_Fq12(elt.c0,-elt.c1);\n            c.call(f6mPrefix + \"_copy\", eltC0, Ac0),\n            c.call(f6mPrefix + \"_neg\", eltC1, Ac1),\n\n            // const alt_bn128_Fq12 B = elt.inverse();\n            c.call(ftmPrefix + \"_inverse\", elt, B),\n\n            // const alt_bn128_Fq12 C = A * B;\n            c.call(ftmPrefix + \"_mul\", A, B, C),\n            // const alt_bn128_Fq12 D = C.Frobenius_map(2);\n            c.call(prefix + \"__frobeniusMap2\", C, D),\n            // const alt_bn128_Fq12 result = D * C;\n            c.call(ftmPrefix + \"_mul\", C, D, r),\n        );\n    }\n\n    function buildCyclotomicSquare() {\n        const f = module.addFunction(prefix+ \"__cyclotomicSquare\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x4 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f2size));\n        const x3 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f2size));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(3*f2size));\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(4*f2size));\n        const x5 = c.i32_add(c.getLocal(\"x\"), c.i32_const(5*f2size));\n\n        const r0 = c.getLocal(\"r\");\n        const r4 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f2size));\n        const r3 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f2size));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(3*f2size));\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*f2size));\n        const r5 = c.i32_add(c.getLocal(\"r\"), c.i32_const(5*f2size));\n\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t3 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n        const tmp = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n\n        f.addCode(\n            //    // t0 + t1*y = (z0 + z1*y)^2 = a^2\n            //    tmp = z0 * z1;\n            //    t0 = (z0 + z1) * (z0 + my_Fp6::non_residue * z1) - tmp - my_Fp6::non_residue * tmp;\n            //    t1 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x0, x1, tmp),\n            c.call(f2mPrefix + \"_mul\", x1, c.i32_const(pNonResidueF6), t0),\n            c.call(f2mPrefix + \"_add\", x0, t0, t0),\n            c.call(f2mPrefix + \"_add\", x0, x1, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t0, t0),\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t0, AUX, t0),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t1),\n\n            //  // t2 + t3*y = (z2 + z3*y)^2 = b^2\n            //  tmp = z2 * z3;\n            //  t2 = (z2 + z3) * (z2 + my_Fp6::non_residue * z3) - tmp - my_Fp6::non_residue * tmp;\n            //  t3 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x2, x3, tmp),\n            c.call(f2mPrefix + \"_mul\", x3, c.i32_const(pNonResidueF6), t2),\n            c.call(f2mPrefix + \"_add\", x2, t2, t2),\n            c.call(f2mPrefix + \"_add\", x2, x3, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t2, t2),\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t2, AUX, t2),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t3),\n\n            //  // t4 + t5*y = (z4 + z5*y)^2 = c^2\n            //  tmp = z4 * z5;\n            //  t4 = (z4 + z5) * (z4 + my_Fp6::non_residue * z5) - tmp - my_Fp6::non_residue * tmp;\n            //  t5 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x4, x5, tmp),\n            c.call(f2mPrefix + \"_mul\", x5, c.i32_const(pNonResidueF6), t4),\n            c.call(f2mPrefix + \"_add\", x4, t4, t4),\n            c.call(f2mPrefix + \"_add\", x4, x5, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t4, t4),\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t4, AUX, t4),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t5),\n\n            // For A\n            // z0 = 3 * t0 - 2 * z0\n            c.call(f2mPrefix + \"_sub\", t0, x0, r0),\n            c.call(f2mPrefix + \"_add\", r0, r0, r0),\n            c.call(f2mPrefix + \"_add\", t0, r0, r0),\n            // z1 = 3 * t1 + 2 * z1\n            c.call(f2mPrefix + \"_add\", t1, x1, r1),\n            c.call(f2mPrefix + \"_add\", r1, r1, r1),\n            c.call(f2mPrefix + \"_add\", t1, r1, r1),\n\n            // For B\n            // z2 = 3 * (xi * t5) + 2 * z2\n            c.call(f2mPrefix + \"_mul\", t5, c.i32_const(pAltBn128Twist), AUX),\n            c.call(f2mPrefix + \"_add\", AUX, x2, r2),\n            c.call(f2mPrefix + \"_add\", r2, r2, r2),\n            c.call(f2mPrefix + \"_add\", AUX, r2, r2),\n            // z3 = 3 * t4 - 2 * z3\n            c.call(f2mPrefix + \"_sub\", t4, x3, r3),\n            c.call(f2mPrefix + \"_add\", r3, r3, r3),\n            c.call(f2mPrefix + \"_add\", t4, r3, r3),\n\n            // For C\n            // z4 = 3 * t2 - 2 * z4\n            c.call(f2mPrefix + \"_sub\", t2, x4, r4),\n            c.call(f2mPrefix + \"_add\", r4, r4, r4),\n            c.call(f2mPrefix + \"_add\", t2, r4, r4),\n            // z5 = 3 * t3 + 2 * z5\n            c.call(f2mPrefix + \"_add\", t3, x5, r5),\n            c.call(f2mPrefix + \"_add\", r5, r5, r5),\n            c.call(f2mPrefix + \"_add\", t3, r5, r5),\n\n        );\n    }\n\n\n    function buildCyclotomicExp(exponent, fnName) {\n        const exponentNafBytes = naf(exponent).map( (b) => (b==-1 ? 0xFF: b) );\n        const pExponentNafBytes = module.alloc(exponentNafBytes);\n\n        const f = module.addFunction(prefix+ \"__cyclotomicExp_\"+fnName);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"bit\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"x\");\n\n        const res = c.getLocal(\"r\");\n\n        const inverse = c.i32_const(module.alloc(ftsize));\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_conjugate\", x, inverse),\n            c.call(ftmPrefix + \"_one\", res),\n\n            c.if(\n                c.teeLocal(\"bit\", c.i32_load8_s(c.i32_const(exponentNafBytes.length-1), pExponentNafBytes)),\n                c.if(\n                    c.i32_eq(\n                        c.getLocal(\"bit\"),\n                        c.i32_const(1)\n                    ),\n                    c.call(ftmPrefix + \"_mul\", res, x, res),\n                    c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                )\n            ),\n\n            c.setLocal(\"i\", c.i32_const(exponentNafBytes.length-2)),\n            c.block(c.loop(\n                c.call(prefix + \"__cyclotomicSquare\", res, res),\n                c.if(\n                    c.teeLocal(\"bit\", c.i32_load8_s(c.getLocal(\"i\"), pExponentNafBytes)),\n                    c.if(\n                        c.i32_eq(\n                            c.getLocal(\"bit\"),\n                            c.i32_const(1)\n                        ),\n                        c.call(ftmPrefix + \"_mul\", res, x, res),\n                        c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                    )\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n\n    function buildFinalExponentiationLastChunk() {\n        buildCyclotomicSquare();\n        buildCyclotomicExp(finalExpZ, \"w0\");\n\n        const f = module.addFunction(prefix+ \"__finalExponentiationLastChunk\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const result = c.getLocal(\"r\");\n        const A = c.i32_const(module.alloc(ftsize));\n        const B = c.i32_const(module.alloc(ftsize));\n        const C = c.i32_const(module.alloc(ftsize));\n        const D = c.i32_const(module.alloc(ftsize));\n        const E = c.i32_const(module.alloc(ftsize));\n        const F = c.i32_const(module.alloc(ftsize));\n        const G = c.i32_const(module.alloc(ftsize));\n        const H = c.i32_const(module.alloc(ftsize));\n        const I = c.i32_const(module.alloc(ftsize));\n        const J = c.i32_const(module.alloc(ftsize));\n        const K = c.i32_const(module.alloc(ftsize));\n        const L = c.i32_const(module.alloc(ftsize));\n        const M = c.i32_const(module.alloc(ftsize));\n        const N = c.i32_const(module.alloc(ftsize));\n        const O = c.i32_const(module.alloc(ftsize));\n        const P = c.i32_const(module.alloc(ftsize));\n        const Q = c.i32_const(module.alloc(ftsize));\n        const R = c.i32_const(module.alloc(ftsize));\n        const S = c.i32_const(module.alloc(ftsize));\n        const T = c.i32_const(module.alloc(ftsize));\n        const U = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n\n\n            // A = exp_by_neg_z(elt)  // = elt^(-z)\n            c.call(prefix + \"__cyclotomicExp_w0\", elt, A),\n            finalExpIsNegative ? [] : c.call(ftmPrefix + \"_conjugate\", A, A),\n            // B = A^2                // = elt^(-2*z)\n            c.call(prefix + \"__cyclotomicSquare\", A, B),\n            // C = B^2                // = elt^(-4*z)\n            c.call(prefix + \"__cyclotomicSquare\", B, C),\n            // D = C * B              // = elt^(-6*z)\n            c.call(ftmPrefix + \"_mul\", C, B, D),\n            // E = exp_by_neg_z(D)    // = elt^(6*z^2)\n            c.call(prefix + \"__cyclotomicExp_w0\", D, E),\n            finalExpIsNegative ? [] : c.call(ftmPrefix + \"_conjugate\", E, E),\n            // F = E^2                // = elt^(12*z^2)\n            c.call(prefix + \"__cyclotomicSquare\", E, F),\n            // G = epx_by_neg_z(F)    // = elt^(-12*z^3)\n            c.call(prefix + \"__cyclotomicExp_w0\", F, G),\n            finalExpIsNegative ? [] : c.call(ftmPrefix + \"_conjugate\", G, G),\n            // H = conj(D)            // = elt^(6*z)\n            c.call(ftmPrefix + \"_conjugate\", D, H),\n            // I = conj(G)            // = elt^(12*z^3)\n            c.call(ftmPrefix + \"_conjugate\", G, I),\n            // J = I * E              // = elt^(12*z^3 + 6*z^2)\n            c.call(ftmPrefix + \"_mul\", I, E, J),\n            // K = J * H              // = elt^(12*z^3 + 6*z^2 + 6*z)\n            c.call(ftmPrefix + \"_mul\", J, H, K),\n            // L = K * B              // = elt^(12*z^3 + 6*z^2 + 4*z)\n            c.call(ftmPrefix + \"_mul\", K, B, L),\n            // M = K * E              // = elt^(12*z^3 + 12*z^2 + 6*z)\n            c.call(ftmPrefix + \"_mul\", K, E, M),\n\n            // N = M * elt            // = elt^(12*z^3 + 12*z^2 + 6*z + 1)\n            c.call(ftmPrefix + \"_mul\", M, elt, N),\n\n            // O = L.Frobenius_map(1) // = elt^(q*(12*z^3 + 6*z^2 + 4*z))\n            c.call(prefix + \"__frobeniusMap1\", L, O),\n            // P = O * N              // = elt^(q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))\n            c.call(ftmPrefix + \"_mul\", O, N, P),\n            // Q = K.Frobenius_map(2) // = elt^(q^2 * (12*z^3 + 6*z^2 + 6*z))\n            c.call(prefix + \"__frobeniusMap2\", K, Q),\n            // R = Q * P              // = elt^(q^2 * (12*z^3 + 6*z^2 + 6*z) + q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))\n            c.call(ftmPrefix + \"_mul\", Q, P, R),\n            // S = conj(elt)          // = elt^(-1)\n            c.call(ftmPrefix + \"_conjugate\", elt, S),\n            // T = S * L              // = elt^(12*z^3 + 6*z^2 + 4*z - 1)\n            c.call(ftmPrefix + \"_mul\", S, L, T),\n            // U = T.Frobenius_map(3) // = elt^(q^3(12*z^3 + 6*z^2 + 4*z - 1))\n            c.call(prefix + \"__frobeniusMap3\", T, U),\n            // V = U * R              // = elt^(q^3(12*z^3 + 6*z^2 + 4*z - 1) + q^2 * (12*z^3 + 6*z^2 + 6*z) + q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))\n            c.call(ftmPrefix + \"_mul\", U, R, result),\n            // result = V\n        );\n    }\n\n\n    function buildFinalExponentiation() {\n        buildFinalExponentiationFirstChunk();\n        buildFinalExponentiationLastChunk();\n        const f = module.addFunction(prefix+ \"_finalExponentiation\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const result = c.getLocal(\"r\");\n        const eltToFirstChunk = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n            c.call(prefix + \"__finalExponentiationFirstChunk\", elt, eltToFirstChunk ),\n            c.call(prefix + \"__finalExponentiationLastChunk\", eltToFirstChunk, result )\n        );\n    }\n\n\n    function buildFinalExponentiationOld() {\n        const f = module.addFunction(prefix+ \"_finalExponentiationOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const exponent = 552484233613224096312617126783173147097382103762957654188882734314196910839907541213974502761540629817009608548654680343627701153829446747810907373256841551006201639677726139946029199968412598804882391702273019083653272047566316584365559776493027495458238373902875937659943504873220554161550525926302303331747463515644711876653177129578303191095900909191624817826566688241804408081892785725967931714097716709526092261278071952560171111444072049229123565057483750161460024353346284167282452756217662335528813519139808291170539072125381230815729071544861602750936964829313608137325426383735122175229541155376346436093930287402089517426973178917569713384748081827255472576937471496195752727188261435633271238710131736096299798168852925540549342330775279877006784354801422249722573783561685179618816480037695005515426162362431072245638324744480n;\n\n        const pExponent = module.alloc(utils.bigInt2BytesLE( exponent, 352 ));\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(ftmPrefix + \"_exp\", c.getLocal(\"x\"), c.i32_const(pExponent), c.i32_const(352), c.getLocal(\"r\")),\n        );\n    }\n\n\n\n\n    const pPreP = module.alloc(prePSize);\n    const pPreQ = module.alloc(preQSize);\n\n    function buildPairingEquation(nPairings) {\n\n        const f = module.addFunction(prefix+ \"_pairingEq\"+nPairings);\n        for (let i=0; i<nPairings; i++) {\n            f.addParam(\"p_\"+i, \"i32\");\n            f.addParam(\"q_\"+i, \"i32\");\n        }\n        f.addParam(\"c\", \"i32\");\n        f.setReturnType(\"i32\");\n\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n        const auxT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(ftmPrefix + \"_one\", resT ));\n\n        for (let i=0; i<nPairings; i++) {\n\n            f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p_\"+i), c.i32_const(pPreP) ));\n            f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q_\"+i), c.i32_const(pPreQ) ));\n            f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), auxT ));\n\n            f.addCode(c.call(ftmPrefix + \"_mul\", resT, auxT, resT ));\n        }\n\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, resT ));\n\n        f.addCode(c.call(ftmPrefix + \"_eq\", resT, c.getLocal(\"c\")));\n    }\n\n\n    function buildPairing() {\n\n        const f = module.addFunction(prefix+ \"_pairing\");\n        f.addParam(\"p\", \"i32\");\n        f.addParam(\"q\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p\"), c.i32_const(pPreP) ));\n        f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q\"), c.i32_const(pPreQ) ));\n        f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), resT ));\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, c.getLocal(\"r\") ));\n    }\n\n\n    buildPrepAddStep();\n    buildPrepDoubleStep();\n\n    buildPrepareG1();\n    buildPrepareG2();\n\n    buildMulBy024();\n    buildMulBy024Old();\n    buildMillerLoop();\n\n\n    for (let i=0; i<10; i++) {\n        buildFrobeniusMap(i);\n        module.exportFunction(prefix + \"__frobeniusMap\"+i);\n    }\n\n    buildFinalExponentiationOld();\n    buildFinalExponentiation();\n\n    for (let i=1; i<=5; i++) {\n        buildPairingEquation(i);\n        module.exportFunction(prefix + \"_pairingEq\"+i);\n    }\n\n    buildPairing();\n\n    module.exportFunction(prefix + \"_pairing\");\n\n    module.exportFunction(prefix + \"_prepareG1\");\n    module.exportFunction(prefix + \"_prepareG2\");\n    module.exportFunction(prefix + \"_millerLoop\");\n    module.exportFunction(prefix + \"_finalExponentiation\");\n    module.exportFunction(prefix + \"_finalExponentiationOld\");\n    module.exportFunction(prefix + \"__mulBy024\");\n    module.exportFunction(prefix + \"__mulBy024Old\");\n    module.exportFunction(prefix + \"__cyclotomicSquare\");\n    module.exportFunction(prefix + \"__cyclotomicExp_w0\");\n\n    // console.log(module.functionIdxByName);\n\n};\n\n", "const utils = require(\"../utils\");\n\nconst buildF1m =require(\"../build_f1m.js\");\nconst buildF1 =require(\"../build_f1.js\");\nconst buildF2m =require(\"../build_f2m.js\");\nconst buildF3m =require(\"../build_f3m.js\");\nconst buildCurve =require(\"../build_curve_jacobian_a0.js\");\nconst buildFFT = require(\"../build_fft\");\nconst buildPol = require(\"../build_pol\");\nconst buildQAP = require(\"../build_qap\");\nconst buildApplyKey = require(\"../build_applykey\");\nconst { bitLength, isOdd, isNegative } = require(\"../bigint.js\");\n\n// Definition here: https://electriccoin.co/blog/new-snark-curve/\n\nmodule.exports = function buildBLS12381(module, _prefix) {\n\n    const prefix = _prefix || \"bls12381\";\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const q = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    const r = 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001n;\n\n    const n64q = Math.floor((bitLength(q - 1n) - 1)/64) +1;\n    const n8q = n64q*8;\n    const f1size = n8q;\n    const f2size = f1size * 2;\n    const ftsize = f1size * 12;\n\n    const n64r = Math.floor((bitLength(r - 1n) - 1)/64) +1;\n    const n8r = n64r*8;\n    const frsize = n8r;\n\n\n    const pr = module.alloc(utils.bigInt2BytesLE( r, frsize ));\n\n    const f1mPrefix = buildF1m(module, q, \"f1m\", \"intq\");\n    buildF1(module, r, \"fr\", \"frm\", \"intr\");\n    const pG1b = module.alloc(utils.bigInt2BytesLE( toMontgomery(4n), f1size ));\n    const g1mPrefix = buildCurve(module, \"g1m\", \"f1m\", pG1b);\n\n    buildFFT(module, \"frm\", \"frm\", \"frm\", \"frm_mul\");\n\n    buildPol(module, \"pol\", \"frm\");\n    buildQAP(module, \"qap\", \"frm\");\n\n    const f2mPrefix = buildF2m(module, \"f1m_neg\", \"f2m\", \"f1m\");\n    const pG2b = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(4n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(4n), f1size )\n    ]);\n    const g2mPrefix = buildCurve(module, \"g2m\", \"f2m\", pG2b);\n\n\n    function buildGTimesFr(fnName, opMul) {\n        const f = module.addFunction(fnName);\n        f.addParam(\"pG\", \"i32\");\n        f.addParam(\"pFr\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8r));\n\n        f.addCode(\n            c.call(\"frm_fromMontgomery\", c.getLocal(\"pFr\"), AUX),\n            c.call(\n                opMul,\n                c.getLocal(\"pG\"),\n                AUX,\n                c.i32_const(n8r),\n                c.getLocal(\"pr\")\n            )\n        );\n\n        module.exportFunction(fnName);\n    }\n    buildGTimesFr(\"g1m_timesFr\", \"g1m_timesScalar\");\n    buildFFT(module, \"g1m\", \"g1m\", \"frm\", \"g1m_timesFr\");\n\n    buildGTimesFr(\"g2m_timesFr\", \"g2m_timesScalar\");\n    buildFFT(module, \"g2m\", \"g2m\", \"frm\", \"g2m_timesFr\");\n\n    buildGTimesFr(\"g1m_timesFrAffine\", \"g1m_timesScalarAffine\");\n    buildGTimesFr(\"g2m_timesFrAffine\", \"g2m_timesScalarAffine\");\n\n    buildApplyKey(module, \"frm_batchApplyKey\", \"fmr\", \"frm\", n8r, n8r, n8r, \"frm_mul\");\n    buildApplyKey(module, \"g1m_batchApplyKey\", \"g1m\", \"frm\", n8q*3, n8q*3, n8r, \"g1m_timesFr\");\n    buildApplyKey(module, \"g1m_batchApplyKeyMixed\", \"g1m\", \"frm\", n8q*2, n8q*3, n8r, \"g1m_timesFrAffine\");\n    buildApplyKey(module, \"g2m_batchApplyKey\", \"g2m\", \"frm\", n8q*2*3, n8q*3*2, n8r, \"g2m_timesFr\");\n    buildApplyKey(module, \"g2m_batchApplyKeyMixed\", \"g2m\", \"frm\", n8q*2*2, n8q*3*2, n8r, \"g2m_timesFrAffine\");\n\n\n    function toMontgomery(a) {\n        return BigInt(a) * (1n << BigInt(f1size*8)) % q;\n    }\n\n    const G1gen = [\n        3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507n,\n        1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569n,\n        1n\n    ];\n\n    const pG1gen = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[2]), f1size ),\n        ]\n    );\n\n    const G1zero = [\n        0n,\n        1n,\n        0n\n    ];\n\n    const pG1zero = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[2]), f1size )\n        ]\n    );\n\n    const G2gen = [\n        [\n            352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160n,\n            3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758n,\n        ],[\n            1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905n,\n            927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582n,\n        ],[\n            1n,\n            0n,\n        ]\n    ];\n\n    const pG2gen = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[0][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[0][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[1][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[1][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[2][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[2][1]), f1size ),\n        ]\n    );\n\n    const G2zero = [\n        [\n            0n,\n            0n,\n        ],[\n            1n,\n            0n,\n        ],[\n            0n,\n            0n,\n        ]\n    ];\n\n    const pG2zero = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[0][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[0][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[1][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[1][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[2][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[2][1]), f1size ),\n        ]\n    );\n\n    const pOneT = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(1n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n    ]);\n\n    const pBls12381Twist =  module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(1n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(1n), f1size ),\n    ]);\n\n    function build_mulNR2() {\n        const f = module.addFunction(f2mPrefix + \"_mulNR\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0c = c.i32_const(module.alloc(f1size));\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1size));\n        const r0 = c.getLocal(\"pr\");\n        const r1 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(f1size));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, x0c),\n            c.call(f1mPrefix+\"_sub\", x0, x1, r0),\n            c.call(f1mPrefix+\"_add\", x0c, x1, r1),\n        );\n    }\n    build_mulNR2();\n\n    const f6mPrefix = buildF3m(module, f2mPrefix+\"_mulNR\", \"f6m\", \"f2m\");\n\n    function build_mulNR6() {\n        const f = module.addFunction(f6mPrefix + \"_mulNR\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const c0copy = c.i32_const(module.alloc(f1size*2));\n\n        f.addCode(\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.getLocal(\"x\"),\n                c0copy\n            ),\n            c.call(\n                f2mPrefix + \"_mulNR\",\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8q*4)),\n                c.getLocal(\"pr\")\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8q*2)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8q*4)),\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c0copy,\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8q*2)),\n            ),\n        );\n    }\n    build_mulNR6();\n\n    const ftmPrefix = buildF2m(module, f6mPrefix+\"_mulNR\", \"ftm\", f6mPrefix);\n\n    const ateLoopCount = 0xd201000000010000n;\n    const ateLoopBitBytes = bits(ateLoopCount);\n    const pAteLoopBitBytes = module.alloc(ateLoopBitBytes);\n    const isLoopNegative = true;\n\n    const ateCoefSize = 3 * f2size;\n    const ateNDblCoefs = ateLoopBitBytes.length-1;\n    const ateNAddCoefs = ateLoopBitBytes.reduce((acc, b) =>  acc + ( b!=0 ? 1 : 0)   ,0);\n    const ateNCoefs = ateNAddCoefs + ateNDblCoefs + 1;\n    const prePSize = 3*2*n8q;\n    const preQSize = 3*n8q*2 + ateNCoefs*ateCoefSize;\n    const finalExpIsNegative = true;\n\n    const finalExpZ = 15132376222941642752n;\n\n\n    module.modules[prefix] = {\n        n64q: n64q,\n        n64r: n64r,\n        n8q: n8q,\n        n8r: n8r,\n        pG1gen: pG1gen,\n        pG1zero: pG1zero,\n        pG1b: pG1b,\n        pG2gen: pG2gen,\n        pG2zero: pG2zero,\n        pG2b: pG2b,\n        pq: module.modules[\"f1m\"].pq,\n        pr: pr,\n        pOneT: pOneT,\n        r: r,\n        q: q,\n        prePSize: prePSize,\n        preQSize: preQSize\n    };\n\n\n    function naf(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd(E)) {\n                const z = 2 - Number(E % 4n);\n                res.push( z );\n                E = E - BigInt(z);\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function bits(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd(E)) {\n                res.push( 1 );\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function buildPrepareG1() {\n        const f = module.addFunction(prefix+ \"_prepareG1\");\n        f.addParam(\"pP\", \"i32\");\n        f.addParam(\"ppreP\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(g1mPrefix + \"_normalize\", c.getLocal(\"pP\"), c.getLocal(\"ppreP\")),  // TODO Remove if already in affine\n        );\n    }\n\n\n\n    function buildPrepDoubleStep() {\n        const f = module.addFunction(prefix+ \"_prepDblStep\");\n        f.addParam(\"R\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Rx  = c.getLocal(\"R\");\n        const Ry  = c.i32_add(c.getLocal(\"R\"), c.i32_const(2*n8q));\n        const Rz  = c.i32_add(c.getLocal(\"R\"), c.i32_const(4*n8q));\n\n        const t0  = c.getLocal(\"r\");\n        const t3  = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*n8q));\n        const t6  = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*n8q));\n\n\n        const zsquared = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // tmp0 = r.x.square();\n            c.call(f2mPrefix + \"_square\", Rx, t0),\n\n            // tmp1 = r.y.square();\n            c.call(f2mPrefix + \"_square\", Ry, t1),\n\n            // tmp2 = tmp1.square();\n            c.call(f2mPrefix + \"_square\", t1, t2),\n\n            // tmp3 = (tmp1 + r.x).square() - tmp0 - tmp2;\n            c.call(f2mPrefix + \"_add\", t1, Rx, t3),\n            c.call(f2mPrefix + \"_square\", t3, t3),\n            c.call(f2mPrefix + \"_sub\", t3, t0, t3),\n            c.call(f2mPrefix + \"_sub\", t3, t2, t3),\n\n            // tmp3 = tmp3 + tmp3;\n            c.call(f2mPrefix + \"_add\", t3, t3, t3),\n\n            // tmp4 = tmp0 + tmp0 + tmp0;\n            c.call(f2mPrefix + \"_add\", t0, t0, t4),\n            c.call(f2mPrefix + \"_add\", t4, t0, t4),\n\n            // tmp6 = r.x + tmp4;\n            c.call(f2mPrefix + \"_add\", Rx, t4, t6),\n\n            // tmp5 = tmp4.square();\n            c.call(f2mPrefix + \"_square\", t4, t5),\n\n            // zsquared = r.z.square();\n            c.call(f2mPrefix + \"_square\", Rz, zsquared),\n\n            // r.x = tmp5 - tmp3 - tmp3;\n            c.call(f2mPrefix + \"_sub\", t5, t3, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t3, Rx),\n\n            // r.z = (r.z + r.y).square() - tmp1 - zsquared;\n            c.call(f2mPrefix + \"_add\", Rz, Ry, Rz),\n            c.call(f2mPrefix + \"_square\", Rz, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, t1, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, zsquared, Rz),\n\n            // r.y = (tmp3 - r.x) * tmp4;\n            c.call(f2mPrefix + \"_sub\", t3, Rx, Ry),\n            c.call(f2mPrefix + \"_mul\", Ry, t4, Ry),\n\n            // tmp2 = tmp2 + tmp2;\n            c.call(f2mPrefix + \"_add\", t2, t2, t2),\n\n            // tmp2 = tmp2 + tmp2;\n            c.call(f2mPrefix + \"_add\", t2, t2, t2),\n\n            // tmp2 = tmp2 + tmp2;\n            c.call(f2mPrefix + \"_add\", t2, t2, t2),\n\n            // r.y -= tmp2;\n            c.call(f2mPrefix + \"_sub\", Ry, t2, Ry),\n\n            // tmp3 = tmp4 * zsquared;\n            c.call(f2mPrefix + \"_mul\", t4, zsquared, t3),\n\n            // tmp3 = tmp3 + tmp3;\n            c.call(f2mPrefix + \"_add\", t3, t3, t3),\n\n            // tmp3 = -tmp3;\n            c.call(f2mPrefix + \"_neg\", t3, t3),\n\n            // tmp6 = tmp6.square() - tmp0 - tmp5;\n            c.call(f2mPrefix + \"_square\", t6, t6),\n            c.call(f2mPrefix + \"_sub\", t6, t0, t6),\n            c.call(f2mPrefix + \"_sub\", t6, t5, t6),\n\n            // tmp1 = tmp1 + tmp1;\n            c.call(f2mPrefix + \"_add\", t1, t1, t1),\n\n            // tmp1 = tmp1 + tmp1;\n            c.call(f2mPrefix + \"_add\", t1, t1, t1),\n\n            // tmp6 = tmp6 - tmp1;\n            c.call(f2mPrefix + \"_sub\", t6, t1, t6),\n\n            // tmp0 = r.z * zsquared;\n            c.call(f2mPrefix + \"_mul\", Rz, zsquared, t0),\n\n            // tmp0 = tmp0 + tmp0;\n            c.call(f2mPrefix + \"_add\", t0, t0, t0),\n\n        );\n    }\n\n    function buildPrepAddStep() {\n        const f = module.addFunction(prefix+ \"_prepAddStep\");\n        f.addParam(\"R\", \"i32\");\n        f.addParam(\"Q\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Rx  = c.getLocal(\"R\");\n        const Ry  = c.i32_add(c.getLocal(\"R\"), c.i32_const(2*n8q));\n        const Rz  = c.i32_add(c.getLocal(\"R\"), c.i32_const(4*n8q));\n\n        const Qx  = c.getLocal(\"Q\");\n        const Qy  = c.i32_add(c.getLocal(\"Q\"), c.i32_const(2*n8q));\n\n        const t10  = c.getLocal(\"r\");\n        const t1  = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*n8q));\n        const t9  = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*n8q));\n\n        const zsquared = c.i32_const(module.alloc(f2size));\n        const ysquared = c.i32_const(module.alloc(f2size));\n        const ztsquared = c.i32_const(module.alloc(f2size));\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t3 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n        const t6 = c.i32_const(module.alloc(f2size));\n        const t7 = c.i32_const(module.alloc(f2size));\n        const t8 = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // zsquared = r.z.square();\n            c.call(f2mPrefix + \"_square\", Rz, zsquared),\n\n            // ysquared = q.y.square();\n            c.call(f2mPrefix + \"_square\", Qy, ysquared),\n\n            // t0 = zsquared * q.x;\n            c.call(f2mPrefix + \"_mul\", zsquared, Qx, t0),\n\n            // t1 = ((q.y + r.z).square() - ysquared - zsquared) * zsquared;\n            c.call(f2mPrefix + \"_add\", Qy, Rz, t1),\n            c.call(f2mPrefix + \"_square\", t1, t1),\n            c.call(f2mPrefix + \"_sub\", t1, ysquared, t1),\n            c.call(f2mPrefix + \"_sub\", t1, zsquared, t1),\n            c.call(f2mPrefix + \"_mul\", t1, zsquared, t1),\n\n            // t2 = t0 - r.x;\n            c.call(f2mPrefix + \"_sub\", t0, Rx, t2),\n\n            // t3 = t2.square();\n            c.call(f2mPrefix + \"_square\", t2, t3),\n\n            // t4 = t3 + t3;\n            c.call(f2mPrefix + \"_add\", t3, t3, t4),\n\n            // t4 = t4 + t4;\n            c.call(f2mPrefix + \"_add\", t4, t4, t4),\n\n            // t5 = t4 * t2;\n            c.call(f2mPrefix + \"_mul\", t4, t2, t5),\n\n            // t6 = t1 - r.y - r.y;\n            c.call(f2mPrefix + \"_sub\", t1, Ry, t6),\n            c.call(f2mPrefix + \"_sub\", t6, Ry, t6),\n\n            // t9 = t6 * q.x;\n            c.call(f2mPrefix + \"_mul\", t6, Qx, t9),\n\n            // t7 = t4 * r.x;\n            c.call(f2mPrefix + \"_mul\", t4, Rx, t7),\n\n            // r.x = t6.square() - t5 - t7 - t7;\n            c.call(f2mPrefix + \"_square\", t6, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t5, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t7, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t7, Rx),\n\n            // r.z = (r.z + t2).square() - zsquared - t3;\n            c.call(f2mPrefix + \"_add\", Rz, t2, Rz),\n            c.call(f2mPrefix + \"_square\", Rz, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, zsquared, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, t3, Rz),\n\n            // t10 = q.y + r.z;\n            c.call(f2mPrefix + \"_add\", Qy, Rz, t10),\n\n            // t8 = (t7 - r.x) * t6;\n            c.call(f2mPrefix + \"_sub\", t7, Rx, t8),\n            c.call(f2mPrefix + \"_mul\", t8, t6, t8),\n\n            // t0 = r.y * t5;\n            c.call(f2mPrefix + \"_mul\", Ry, t5, t0),\n\n            // t0 = t0 + t0;\n            c.call(f2mPrefix + \"_add\", t0, t0, t0),\n\n            // r.y = t8 - t0;\n            c.call(f2mPrefix + \"_sub\", t8, t0, Ry),\n\n            // t10 = t10.square() - ysquared;\n            c.call(f2mPrefix + \"_square\", t10, t10),\n            c.call(f2mPrefix + \"_sub\", t10, ysquared, t10),\n\n            // ztsquared = r.z.square();\n            c.call(f2mPrefix + \"_square\", Rz, ztsquared),\n\n            // t10 = t10 - ztsquared;\n            c.call(f2mPrefix + \"_sub\", t10, ztsquared, t10),\n\n            // t9 = t9 + t9 - t10;\n            c.call(f2mPrefix + \"_add\", t9, t9, t9),\n            c.call(f2mPrefix + \"_sub\", t9, t10, t9),\n\n            // t10 = r.z + r.z;\n            c.call(f2mPrefix + \"_add\", Rz, Rz, t10),\n\n            // t6 = -t6;\n            c.call(f2mPrefix + \"_neg\", t6, t6),\n\n            // t1 = t6 + t6;\n            c.call(f2mPrefix + \"_add\", t6, t6, t1),\n        );\n    }\n\n\n    function buildPrepareG2() {\n        const f = module.addFunction(prefix+ \"_prepareG2\");\n        f.addParam(\"pQ\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n\n        const Q = c.getLocal(\"pQ\");\n\n        const pR = module.alloc(f2size*3);\n        const R = c.i32_const(pR);\n\n        const base = c.getLocal(\"ppreQ\");\n\n        f.addCode(\n            c.call(g2mPrefix + \"_normalize\", Q, base),\n            c.if(\n                c.call(g2mPrefix + \"_isZero\", base),\n                c.ret([])\n            ),\n            c.call(g2mPrefix + \"_copy\", base, R),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n        );\n\n        f.addCode(\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n                c.call(prefix + \"_prepDblStep\", R, c.getLocal(\"pCoef\")),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(prefix + \"_prepAddStep\", R, base, c.getLocal(\"pCoef\")),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n                    ]\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n    function buildF6Mul1() {\n        const f = module.addFunction(f6mPrefix+ \"_mul1\");\n        f.addParam(\"pA\", \"i32\");    // F6\n        f.addParam(\"pC1\", \"i32\");   // F2\n        f.addParam(\"pR\", \"i32\");    // F6\n\n        const c = f.getCodeBuilder();\n\n        const A_c0 = c.getLocal(\"pA\");\n        const A_c1 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*2));\n        const A_c2 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*4));\n\n        const c1  = c.getLocal(\"pC1\");\n\n        const t1 = c.getLocal(\"pR\");\n        const t2 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*2));\n        const b_b = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*4));\n\n        const Ac0_Ac1 = c.i32_const(module.alloc(f1size*2));\n        const Ac1_Ac2 = c.i32_const(module.alloc(f1size*2));\n\n        f.addCode(\n\n            c.call(f2mPrefix + \"_add\", A_c0, A_c1, Ac0_Ac1),\n            c.call(f2mPrefix + \"_add\", A_c1, A_c2, Ac1_Ac2),\n\n            // let b_b = self.c1 * c1;\n            c.call(f2mPrefix + \"_mul\", A_c1, c1, b_b),\n\n            // let t1 = (self.c1 + self.c2) * c1 - b_b;\n            c.call(f2mPrefix + \"_mul\", Ac1_Ac2, c1, t1),\n            c.call(f2mPrefix + \"_sub\", t1, b_b, t1),\n\n            // let t1 = t1.mul_by_nonresidue();\n            c.call(f2mPrefix + \"_mulNR\", t1, t1),\n\n            // let t2 = (self.c0 + self.c1) * c1 - b_b;\n            c.call(f2mPrefix + \"_mul\", Ac0_Ac1, c1, t2),\n            c.call(f2mPrefix + \"_sub\", t2, b_b, t2),\n        );\n    }\n    buildF6Mul1();\n\n    function buildF6Mul01() {\n        const f = module.addFunction(f6mPrefix+ \"_mul01\");\n        f.addParam(\"pA\", \"i32\");    // F6\n        f.addParam(\"pC0\", \"i32\");   // F2\n        f.addParam(\"pC1\", \"i32\");   // F2\n        f.addParam(\"pR\", \"i32\");    // F6\n\n        const c = f.getCodeBuilder();\n\n        const A_c0 = c.getLocal(\"pA\");\n        const A_c1 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*2));\n        const A_c2 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*4));\n\n        const c0  = c.getLocal(\"pC0\");\n        const c1  = c.getLocal(\"pC1\");\n\n        const t1 = c.getLocal(\"pR\");\n        const t2 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*2));\n        const t3 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*4));\n\n        const a_a = c.i32_const(module.alloc(f1size*2));\n        const b_b = c.i32_const(module.alloc(f1size*2));\n        const Ac0_Ac1 = c.i32_const(module.alloc(f1size*2));\n        const Ac0_Ac2 = c.i32_const(module.alloc(f1size*2));\n\n        f.addCode(\n            // let a_a = self.c0 * c0;\n            c.call(f2mPrefix + \"_mul\", A_c0, c0, a_a),\n\n            // let b_b = self.c1 * c1;\n            c.call(f2mPrefix + \"_mul\", A_c1, c1, b_b),\n\n\n            c.call(f2mPrefix + \"_add\", A_c0, A_c1, Ac0_Ac1),\n            c.call(f2mPrefix + \"_add\", A_c0, A_c2, Ac0_Ac2),\n\n            // let t1 = (self.c1 + self.c2) * c1 - b_b;\n            c.call(f2mPrefix + \"_add\", A_c1, A_c2, t1),\n            c.call(f2mPrefix + \"_mul\", t1, c1, t1),\n            c.call(f2mPrefix + \"_sub\", t1, b_b, t1),\n\n            // let t1 = t1.mul_by_nonresidue() + a_a;\n            c.call(f2mPrefix + \"_mulNR\", t1, t1),\n            c.call(f2mPrefix + \"_add\", t1, a_a, t1),\n\n            // let t2 = (c0 + c1) * (self.c0 + self.c1) - a_a - b_b;\n            c.call(f2mPrefix + \"_add\", c0, c1, t2),\n            c.call(f2mPrefix + \"_mul\", t2, Ac0_Ac1, t2),\n            c.call(f2mPrefix + \"_sub\", t2, a_a, t2),\n            c.call(f2mPrefix + \"_sub\", t2, b_b, t2),\n\n            // let t3 = (self.c0 + self.c2) * c0 - a_a + b_b;\n            c.call(f2mPrefix + \"_mul\", Ac0_Ac2, c0, t3),\n            c.call(f2mPrefix + \"_sub\", t3, a_a, t3),\n            c.call(f2mPrefix + \"_add\", t3, b_b, t3),\n\n\n        );\n    }\n    buildF6Mul01();\n\n\n    function buildF12Mul014() {\n\n        const f = module.addFunction(ftmPrefix+ \"_mul014\");\n        f.addParam(\"pA\", \"i32\");    // F12\n        f.addParam(\"pC0\", \"i32\");   // F2\n        f.addParam(\"pC1\", \"i32\");   // F2\n        f.addParam(\"pC4\", \"i32\");   // F2\n        f.addParam(\"pR\", \"i32\");    // F12\n\n        const c = f.getCodeBuilder();\n\n\n        const A_c0 = c.getLocal(\"pA\");\n        const A_c1 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*6));\n\n        const c0  = c.getLocal(\"pC0\");\n        const c1  = c.getLocal(\"pC1\");\n        const c4  = c.getLocal(\"pC4\");\n\n        const aa = c.i32_const(module.alloc(f1size*6));\n        const bb = c.i32_const(module.alloc(f1size*6));\n        const o = c.i32_const(module.alloc(f1size*2));\n\n        const R_c0 = c.getLocal(\"pR\");\n        const R_c1 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*6));\n\n        f.addCode(\n            // let aa = self.c0.mul_by_01(c0, c1);\n            c.call(f6mPrefix + \"_mul01\", A_c0, c0, c1, aa),\n\n            // let bb = self.c1.mul_by_1(c4);\n            c.call(f6mPrefix + \"_mul1\", A_c1, c4, bb),\n\n            // let o = c1 + c4;\n            c.call(f2mPrefix + \"_add\", c1, c4, o),\n\n            // let c1 = self.c1 + self.c0;\n            c.call(f6mPrefix + \"_add\", A_c1, A_c0, R_c1),\n\n            // let c1 = c1.mul_by_01(c0, &o);\n            c.call(f6mPrefix + \"_mul01\", R_c1, c0, o, R_c1),\n\n            // let c1 = c1 - aa - bb;\n            c.call(f6mPrefix + \"_sub\", R_c1, aa, R_c1),\n            c.call(f6mPrefix + \"_sub\", R_c1, bb, R_c1),\n\n            // let c0 = bb;\n            c.call(f6mPrefix + \"_copy\", bb, R_c0),\n\n            // let c0 = c0.mul_by_nonresidue();\n            c.call(f6mPrefix + \"_mulNR\", R_c0, R_c0),\n\n            // let c0 = c0 + aa;\n            c.call(f6mPrefix + \"_add\", R_c0, aa, R_c0),\n        );\n    }\n    buildF12Mul014();\n\n\n    function buildELL() {\n        const f = module.addFunction(prefix+ \"_ell\");\n        f.addParam(\"pP\", \"i32\");\n        f.addParam(\"pCoefs\", \"i32\");\n        f.addParam(\"pF\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Px  = c.getLocal(\"pP\");\n        const Py  = c.i32_add(c.getLocal(\"pP\"), c.i32_const(n8q));\n\n        const F  = c.getLocal(\"pF\");\n\n        const coef0_0  = c.getLocal(\"pCoefs\");\n        const coef0_1  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size));\n        const coef1_0  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size*2));\n        const coef1_1  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size*3));\n        const coef2  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size*4));\n\n        const pc0 = module.alloc(f1size*2);\n        const c0  = c.i32_const(pc0);\n        const c0_c0 = c.i32_const(pc0);\n        const c0_c1 = c.i32_const(pc0+f1size);\n\n        const pc1 = module.alloc(f1size*2);\n        const c1  = c.i32_const(pc1);\n        const c1_c0 = c.i32_const(pc1);\n        const c1_c1 = c.i32_const(pc1+f1size);\n        f.addCode(\n            //     let mut c0 = coeffs.0;\n            //     let mut c1 = coeffs.1;\n            //\n            //    c0.c0 *= p.y;\n            //    c0.c1 *= p.y;\n            //\n            //    c1.c0 *= p.x;\n            //    c1.c1 *= p.x;\n            //\n            //     f.mul_by_014(&coeffs.2, &c1, &c0)\n\n            c.call(f1mPrefix + \"_mul\", coef0_0, Py, c0_c0),\n            c.call(f1mPrefix + \"_mul\", coef0_1, Py, c0_c1),\n            c.call(f1mPrefix + \"_mul\", coef1_0, Px, c1_c0),\n            c.call(f1mPrefix + \"_mul\", coef1_1, Px, c1_c1),\n\n            c.call(ftmPrefix + \"_mul014\", F, coef2, c1, c0, F),\n\n        );\n\n    }\n    buildELL();\n\n    function buildMillerLoop() {\n        const f = module.addFunction(prefix+ \"_millerLoop\");\n        f.addParam(\"ppreP\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const preP = c.getLocal(\"ppreP\");\n\n        const coefs  = c.getLocal(\"pCoef\");\n\n        const F = c.getLocal(\"r\");\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_one\", F),\n\n            c.if(\n                c.call(g1mPrefix + \"_isZero\", preP),\n                c.ret([])\n            ),\n            c.if(\n                c.call(g1mPrefix + \"_isZero\", c.getLocal(\"ppreQ\")),\n                c.ret([])\n            ),\n            c.setLocal(\"pCoef\", c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n\n                c.call(prefix + \"_ell\", preP, coefs,  F),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(prefix + \"_ell\", preP, coefs,  F),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n                    ]\n                ),\n                c.call(ftmPrefix + \"_square\", F, F),\n\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.i32_const(1) )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n            c.call(prefix + \"_ell\", preP, coefs,  F),\n\n        );\n\n\n        if (isLoopNegative) {\n            f.addCode(\n                c.call(ftmPrefix + \"_conjugate\", F, F),\n            );\n        }\n    }\n\n\n    function buildFrobeniusMap(n) {\n        const F12 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760n, 151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351n, 0n],\n                [2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n, 1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n, 0n],\n                [3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557n, 877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230n],\n                [4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786n, 0n],\n                [151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027n, 3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n, 0n],\n                [1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257n, 2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437n, 0n],\n                [877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230n, 3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557n],\n            ]\n        ];\n\n        const F6 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [0n, 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n, 0n],\n                [0n, 1n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n, 0n],\n                [0n, 793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n],\n            ],\n            [\n                [1n, 0n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437n, 0n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n, 0n],\n                [4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786n, 0n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n, 0n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351n, 0n],\n            ]\n        ];\n\n        const f = module.addFunction(ftmPrefix + \"_frobeniusMap\"+n);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<6; i++) {\n            const X = (i==0) ? c.getLocal(\"x\") : c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size));\n            const Xc0 = X;\n            const Xc1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size + f1size));\n            const R = (i==0) ? c.getLocal(\"r\") : c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size));\n            const Rc0 = R;\n            const Rc1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size + f1size));\n            const coef = mul2(F12[Math.floor(i/3)][n%12] , F6[i%3][n%6]);\n            const pCoef = module.alloc([\n                ...utils.bigInt2BytesLE(toMontgomery(coef[0]), n8q),\n                ...utils.bigInt2BytesLE(toMontgomery(coef[1]), n8q),\n            ]);\n            if (n%2 == 1) {\n                f.addCode(\n                    c.call(f1mPrefix + \"_copy\", Xc0, Rc0),\n                    c.call(f1mPrefix + \"_neg\", Xc1, Rc1),\n                    c.call(f2mPrefix + \"_mul\", R, c.i32_const(pCoef), R),\n                );\n            } else {\n                f.addCode(c.call(f2mPrefix + \"_mul\", X, c.i32_const(pCoef), R));\n            }\n        }\n\n        function mul2(a, b) {\n            const ac0 = a[0];\n            const ac1 = a[1];\n            const bc0 = b[0];\n            const bc1 = b[1];\n            const res = [\n                (ac0 * bc0 - (ac1 * bc1)) % q,\n                (ac0 * bc1 + (ac1 * bc0)) % q,\n            ];\n            if (isNegative(res[0])) res[0] = res[0] + q;\n            return res;\n        }\n\n    }\n\n\n    function buildCyclotomicSquare() {\n        const f = module.addFunction(prefix+ \"__cyclotomicSquare\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x4 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f2size));\n        const x3 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f2size));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(3*f2size));\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(4*f2size));\n        const x5 = c.i32_add(c.getLocal(\"x\"), c.i32_const(5*f2size));\n\n        const r0 = c.getLocal(\"r\");\n        const r4 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f2size));\n        const r3 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f2size));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(3*f2size));\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*f2size));\n        const r5 = c.i32_add(c.getLocal(\"r\"), c.i32_const(5*f2size));\n\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t3 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n        const tmp = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n\n        f.addCode(\n            //    // t0 + t1*y = (z0 + z1*y)^2 = a^2\n            //    tmp = z0 * z1;\n            //    t0 = (z0 + z1) * (z0 + my_Fp6::non_residue * z1) - tmp - my_Fp6::non_residue * tmp;\n            //    t1 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x0, x1, tmp),\n            c.call(f2mPrefix + \"_mulNR\", x1, t0),\n            c.call(f2mPrefix + \"_add\", x0, t0, t0),\n            c.call(f2mPrefix + \"_add\", x0, x1, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t0, t0),\n            c.call(f2mPrefix + \"_mulNR\", tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t0, AUX, t0),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t1),\n\n            //  // t2 + t3*y = (z2 + z3*y)^2 = b^2\n            //  tmp = z2 * z3;\n            //  t2 = (z2 + z3) * (z2 + my_Fp6::non_residue * z3) - tmp - my_Fp6::non_residue * tmp;\n            //  t3 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x2, x3, tmp),\n            c.call(f2mPrefix + \"_mulNR\", x3, t2),\n            c.call(f2mPrefix + \"_add\", x2, t2, t2),\n            c.call(f2mPrefix + \"_add\", x2, x3, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t2, t2),\n            c.call(f2mPrefix + \"_mulNR\", tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t2, AUX, t2),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t3),\n\n            //  // t4 + t5*y = (z4 + z5*y)^2 = c^2\n            //  tmp = z4 * z5;\n            //  t4 = (z4 + z5) * (z4 + my_Fp6::non_residue * z5) - tmp - my_Fp6::non_residue * tmp;\n            //  t5 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x4, x5, tmp),\n            c.call(f2mPrefix + \"_mulNR\", x5, t4),\n            c.call(f2mPrefix + \"_add\", x4, t4, t4),\n            c.call(f2mPrefix + \"_add\", x4, x5, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t4, t4),\n            c.call(f2mPrefix + \"_mulNR\", tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t4, AUX, t4),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t5),\n\n            // For A\n            // z0 = 3 * t0 - 2 * z0\n            c.call(f2mPrefix + \"_sub\", t0, x0, r0),\n            c.call(f2mPrefix + \"_add\", r0, r0, r0),\n            c.call(f2mPrefix + \"_add\", t0, r0, r0),\n            // z1 = 3 * t1 + 2 * z1\n            c.call(f2mPrefix + \"_add\", t1, x1, r1),\n            c.call(f2mPrefix + \"_add\", r1, r1, r1),\n            c.call(f2mPrefix + \"_add\", t1, r1, r1),\n\n            // For B\n            // z2 = 3 * (xi * t5) + 2 * z2\n            c.call(f2mPrefix + \"_mul\", t5, c.i32_const(pBls12381Twist), AUX),\n            c.call(f2mPrefix + \"_add\", AUX, x2, r2),\n            c.call(f2mPrefix + \"_add\", r2, r2, r2),\n            c.call(f2mPrefix + \"_add\", AUX, r2, r2),\n            // z3 = 3 * t4 - 2 * z3\n            c.call(f2mPrefix + \"_sub\", t4, x3, r3),\n            c.call(f2mPrefix + \"_add\", r3, r3, r3),\n            c.call(f2mPrefix + \"_add\", t4, r3, r3),\n\n            // For C\n            // z4 = 3 * t2 - 2 * z4\n            c.call(f2mPrefix + \"_sub\", t2, x4, r4),\n            c.call(f2mPrefix + \"_add\", r4, r4, r4),\n            c.call(f2mPrefix + \"_add\", t2, r4, r4),\n            // z5 = 3 * t3 + 2 * z5\n            c.call(f2mPrefix + \"_add\", t3, x5, r5),\n            c.call(f2mPrefix + \"_add\", r5, r5, r5),\n            c.call(f2mPrefix + \"_add\", t3, r5, r5),\n\n        );\n    }\n\n\n    function buildCyclotomicExp(exponent, isExpNegative, fnName) {\n        const exponentNafBytes = naf(exponent).map( (b) => (b==-1 ? 0xFF: b) );\n        const pExponentNafBytes = module.alloc(exponentNafBytes);\n        // const pExponent = module.alloc(utils.bigInt2BytesLE(exponent, n8));\n\n        const f = module.addFunction(prefix+ \"__cyclotomicExp_\"+fnName);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"bit\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"x\");\n\n        const res = c.getLocal(\"r\");\n\n        const inverse = c.i32_const(module.alloc(ftsize));\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_conjugate\", x, inverse),\n            c.call(ftmPrefix + \"_one\", res),\n\n            c.if(\n                c.teeLocal(\"bit\", c.i32_load8_s(c.i32_const(exponentNafBytes.length-1), pExponentNafBytes)),\n                c.if(\n                    c.i32_eq(\n                        c.getLocal(\"bit\"),\n                        c.i32_const(1)\n                    ),\n                    c.call(ftmPrefix + \"_mul\", res, x, res),\n                    c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                )\n            ),\n\n            c.setLocal(\"i\", c.i32_const(exponentNafBytes.length-2)),\n            c.block(c.loop(\n                c.call(prefix + \"__cyclotomicSquare\", res, res),\n                c.if(\n                    c.teeLocal(\"bit\", c.i32_load8_s(c.getLocal(\"i\"), pExponentNafBytes)),\n                    c.if(\n                        c.i32_eq(\n                            c.getLocal(\"bit\"),\n                            c.i32_const(1)\n                        ),\n                        c.call(ftmPrefix + \"_mul\", res, x, res),\n                        c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                    )\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n\n        if (isExpNegative) {\n            f.addCode(\n                c.call(ftmPrefix + \"_conjugate\", res, res),\n            );\n        }\n\n    }\n\n    function buildFinalExponentiation() {\n        buildCyclotomicSquare();\n        buildCyclotomicExp(finalExpZ, finalExpIsNegative, \"w0\");\n\n        const f = module.addFunction(prefix+ \"_finalExponentiation\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const res = c.getLocal(\"r\");\n        const t0 = c.i32_const(module.alloc(ftsize));\n        const t1 = c.i32_const(module.alloc(ftsize));\n        const t2 = c.i32_const(module.alloc(ftsize));\n        const t3 = c.i32_const(module.alloc(ftsize));\n        const t4 = c.i32_const(module.alloc(ftsize));\n        const t5 = c.i32_const(module.alloc(ftsize));\n        const t6 = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n\n            // let mut t0 = f.frobenius_map(6)\n            c.call(ftmPrefix + \"_frobeniusMap6\", elt, t0),\n\n            // let t1 = f.invert()\n            c.call(ftmPrefix + \"_inverse\", elt, t1),\n\n            // let mut t2 = t0 * t1;\n            c.call(ftmPrefix + \"_mul\", t0, t1, t2),\n\n            // t1 = t2.clone();\n            c.call(ftmPrefix + \"_copy\", t2, t1),\n\n            // t2 = t2.frobenius_map().frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap2\", t2, t2),\n\n            // t2 *= t1;\n            c.call(ftmPrefix + \"_mul\", t2, t1, t2),\n\n\n            // t1 = cyclotomic_square(t2).conjugate();\n            c.call(prefix + \"__cyclotomicSquare\", t2, t1),\n            c.call(ftmPrefix + \"_conjugate\", t1, t1),\n\n            // let mut t3 = cycolotomic_exp(t2);\n            c.call(prefix + \"__cyclotomicExp_w0\", t2, t3),\n\n            // let mut t4 = cyclotomic_square(t3);\n            c.call(prefix + \"__cyclotomicSquare\", t3, t4),\n\n            // let mut t5 = t1 * t3;\n            c.call(ftmPrefix + \"_mul\", t1, t3, t5),\n\n            // t1 = cycolotomic_exp(t5);\n            c.call(prefix + \"__cyclotomicExp_w0\", t5, t1),\n\n            // t0 = cycolotomic_exp(t1);\n            c.call(prefix + \"__cyclotomicExp_w0\", t1, t0),\n\n            // let mut t6 = cycolotomic_exp(t0);\n            c.call(prefix + \"__cyclotomicExp_w0\", t0, t6),\n\n            // t6 *= t4;\n            c.call(ftmPrefix + \"_mul\", t6, t4, t6),\n\n            // t4 = cycolotomic_exp(t6);\n            c.call(prefix + \"__cyclotomicExp_w0\", t6, t4),\n\n            // t5 = t5.conjugate();\n            c.call(ftmPrefix + \"_conjugate\", t5, t5),\n\n            // t4 *= t5 * t2;\n            c.call(ftmPrefix + \"_mul\", t4, t5, t4),\n            c.call(ftmPrefix + \"_mul\", t4, t2, t4),\n\n            // t5 = t2.conjugate();\n            c.call(ftmPrefix + \"_conjugate\", t2, t5),\n\n            // t1 *= t2;\n            c.call(ftmPrefix + \"_mul\", t1, t2, t1),\n\n            // t1 = t1.frobenius_map().frobenius_map().frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap3\", t1, t1),\n\n            // t6 *= t5;\n            c.call(ftmPrefix + \"_mul\", t6, t5, t6),\n\n            // t6 = t6.frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap1\", t6, t6),\n\n            // t3 *= t0;\n            c.call(ftmPrefix + \"_mul\", t3, t0, t3),\n\n            // t3 = t3.frobenius_map().frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap2\", t3, t3),\n\n            // t3 *= t1;\n            c.call(ftmPrefix + \"_mul\", t3, t1, t3),\n\n            // t3 *= t6;\n            c.call(ftmPrefix + \"_mul\", t3, t6, t3),\n\n            // f = t3 * t4;\n            c.call(ftmPrefix + \"_mul\", t3, t4, res),\n\n        );\n    }\n\n\n    function buildFinalExponentiationOld() {\n        const f = module.addFunction(prefix+ \"_finalExponentiationOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const exponent = 322277361516934140462891564586510139908379969514828494218366688025288661041104682794998680497580008899973249814104447692778988208376779573819485263026159588510513834876303014016798809919343532899164848730280942609956670917565618115867287399623286813270357901731510188149934363360381614501334086825442271920079363289954510565375378443704372994881406797882676971082200626541916413184642520269678897559532260949334760604962086348898118982248842634379637598665468817769075878555493752214492790122785850202957575200176084204422751485957336465472324810982833638490904279282696134323072515220044451592646885410572234451732790590013479358343841220074174848221722017083597872017638514103174122784843925578370430843522959600095676285723737049438346544753168912974976791528535276317256904336520179281145394686565050419250614107803233314658825463117900250701199181529205942363159325765991819433914303908860460720581408201373164047773794825411011922305820065611121544561808414055302212057471395719432072209245600258134364584636810093520285711072578721435517884103526483832733289802426157301542744476740008494780363354305116978805620671467071400711358839553375340724899735460480144599782014906586543813292157922220645089192130209334926661588737007768565838519456601560804957985667880395221049249803753582637708560n;\n\n        const pExponent = module.alloc(utils.bigInt2BytesLE( exponent, 544 ));\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(ftmPrefix + \"_exp\", c.getLocal(\"x\"), c.i32_const(pExponent), c.i32_const(544), c.getLocal(\"r\")),\n        );\n    }\n\n\n    const pPreP = module.alloc(prePSize);\n    const pPreQ = module.alloc(preQSize);\n\n    function buildPairingEquation(nPairings) {\n\n        const f = module.addFunction(prefix+ \"_pairingEq\"+nPairings);\n        for (let i=0; i<nPairings; i++) {\n            f.addParam(\"p_\"+i, \"i32\");\n            f.addParam(\"q_\"+i, \"i32\");\n        }\n        f.addParam(\"c\", \"i32\");\n        f.setReturnType(\"i32\");\n\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n        const auxT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(ftmPrefix + \"_one\", resT ));\n\n        for (let i=0; i<nPairings; i++) {\n\n            f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p_\"+i), c.i32_const(pPreP) ));\n            f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q_\"+i), c.i32_const(pPreQ) ));\n\n            // Checks\n            f.addCode(\n                c.if(\n                    c.i32_eqz(c.call(g1mPrefix + \"_inGroupAffine\", c.i32_const(pPreP))),\n                    c.ret(c.i32_const(0))\n                ),\n                c.if(\n                    c.i32_eqz(c.call(g2mPrefix + \"_inGroupAffine\", c.i32_const(pPreQ))),\n                    c.ret(c.i32_const(0))\n                )\n            );\n\n            f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), auxT ));\n\n            f.addCode(c.call(ftmPrefix + \"_mul\", resT, auxT, resT ));\n        }\n\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, resT ));\n\n        f.addCode(c.call(ftmPrefix + \"_eq\", resT, c.getLocal(\"c\")));\n    }\n\n\n    function buildPairing() {\n\n        const f = module.addFunction(prefix+ \"_pairing\");\n        f.addParam(\"p\", \"i32\");\n        f.addParam(\"q\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p\"), c.i32_const(pPreP) ));\n        f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q\"), c.i32_const(pPreQ) ));\n        f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), resT ));\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, c.getLocal(\"r\") ));\n    }\n\n\n    function buildInGroupG2() {\n        const f = module.addFunction(g2mPrefix+ \"_inGroupAffine\");\n        f.addParam(\"p\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const WINV = [\n            2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279894n,\n            2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279893n\n        ];\n\n        const FROB2X = 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n;\n        const FROB3Y = [\n            2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n,\n            2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n\n        ];\n\n        const wInv = c.i32_const(module.alloc([\n            ...utils.bigInt2BytesLE(toMontgomery(WINV[0]), n8q),\n            ...utils.bigInt2BytesLE(toMontgomery(WINV[1]), n8q),\n        ]));\n\n        const frob2X = c.i32_const(module.alloc(utils.bigInt2BytesLE(toMontgomery(FROB2X), n8q)));\n        const frob3Y = c.i32_const(module.alloc([\n            ...utils.bigInt2BytesLE(toMontgomery(FROB3Y[0]), n8q),\n            ...utils.bigInt2BytesLE(toMontgomery(FROB3Y[1]), n8q),\n        ]));\n\n        const z = c.i32_const(module.alloc(utils.bigInt2BytesLE(finalExpZ, 8)));\n\n        const px = c.getLocal(\"p\");\n        const py = c.i32_add(c.getLocal(\"p\"), c.i32_const(f2size));\n\n        const aux = c.i32_const(module.alloc(f1size));\n\n        const x_winv = c.i32_const(module.alloc(f2size));\n        const y_winv = c.i32_const(module.alloc(f2size));\n        const pf2 = module.alloc(f2size*2);\n        const f2 = c.i32_const(pf2);\n        const f2x = c.i32_const(pf2);\n        const f2x_c1 = c.i32_const(pf2);\n        const f2x_c2 = c.i32_const(pf2+f1size);\n        const f2y = c.i32_const(pf2+f2size);\n        const f2y_c1 = c.i32_const(pf2+f2size);\n        const f2y_c2 = c.i32_const(pf2+f2size+f1size);\n        const pf3 = module.alloc(f2size*3);\n        const f3 = c.i32_const(pf3);\n        const f3x = c.i32_const(pf3);\n        const f3x_c1 = c.i32_const(pf3);\n        const f3x_c2 = c.i32_const(pf3+f1size);\n        const f3y = c.i32_const(pf3+f2size);\n        const f3y_c1 = c.i32_const(pf3+f2size);\n        const f3y_c2 = c.i32_const(pf3+f2size+f1size);\n        const f3z = c.i32_const(pf3+f2size*2);\n\n\n        f.addCode(\n            c.if(\n                c.call(g2mPrefix + \"_isZeroAffine\", c.getLocal(\"p\")),\n                c.ret( c.i32_const(1)),\n            ),\n            c.if(\n                c.i32_eqz(c.call(g2mPrefix + \"_inCurveAffine\", c.getLocal(\"p\"))),\n                c.ret( c.i32_const(0)),\n            ),\n            c.call(f2mPrefix + \"_mul\", px, wInv, x_winv),\n            c.call(f2mPrefix + \"_mul\", py, wInv, y_winv),\n\n            c.call(f2mPrefix + \"_mul1\", x_winv, frob2X, f2x),\n            c.call(f2mPrefix + \"_neg\", y_winv, f2y),\n\n            c.call(f2mPrefix + \"_neg\", x_winv, f3x),\n            c.call(f2mPrefix + \"_mul\", y_winv, frob3Y, f3y),\n\n            c.call(f1mPrefix + \"_sub\", f2x_c1, f2x_c2, aux),\n            c.call(f1mPrefix + \"_add\", f2x_c1, f2x_c2, f2x_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f2x_c1),\n\n            c.call(f1mPrefix + \"_sub\", f2y_c1, f2y_c2, aux),\n            c.call(f1mPrefix + \"_add\", f2y_c1, f2y_c2, f2y_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f2y_c1),\n\n            c.call(f1mPrefix + \"_add\", f3x_c1, f3x_c2, aux),\n            c.call(f1mPrefix + \"_sub\", f3x_c1, f3x_c2, f3x_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f3x_c1),\n\n            c.call(f1mPrefix + \"_sub\", f3y_c2, f3y_c1, aux),\n            c.call(f1mPrefix + \"_add\", f3y_c1, f3y_c2, f3y_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f3y_c1),\n\n            c.call(f2mPrefix + \"_one\", f3z),\n\n            c.call(g2mPrefix + \"_timesScalar\", f3, z, c.i32_const(8), f3),\n            c.call(g2mPrefix + \"_addMixed\", f3, f2, f3),\n\n            c.ret(\n                c.call(g2mPrefix + \"_eqMixed\", f3, c.getLocal(\"p\"))\n            )\n        );\n\n        const fInGroup = module.addFunction(g2mPrefix + \"_inGroup\");\n        fInGroup.addParam(\"pIn\", \"i32\");\n        fInGroup.setReturnType(\"i32\");\n\n        const c2 = fInGroup.getCodeBuilder();\n\n        const aux2 = c2.i32_const(module.alloc(f2size*2));\n\n        fInGroup.addCode(\n            c2.call(g2mPrefix + \"_toAffine\", c2.getLocal(\"pIn\"), aux2),\n\n            c2.ret(\n                c2.call(g2mPrefix + \"_inGroupAffine\", aux2),\n            )\n        );\n\n    }\n\n    function buildInGroupG1() {\n        const f = module.addFunction(g1mPrefix+ \"_inGroupAffine\");\n        f.addParam(\"p\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const BETA = 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n;\n        const BETA2 = 793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n;\n        const Z2M1D3 = (finalExpZ * finalExpZ - 1n) / 3n;\n\n        const beta = c.i32_const(module.alloc(utils.bigInt2BytesLE(toMontgomery(BETA), n8q)));\n        const beta2 = c.i32_const(module.alloc(utils.bigInt2BytesLE(toMontgomery(BETA2), n8q)));\n\n        const z2m1d3 = c.i32_const(module.alloc(utils.bigInt2BytesLE(Z2M1D3, 16)));\n\n\n        const px = c.getLocal(\"p\");\n        const py = c.i32_add(c.getLocal(\"p\"), c.i32_const(f1size));\n\n        const psp = module.alloc(f1size*3);\n        const sp = c.i32_const(psp);\n        const spx = c.i32_const(psp);\n        const spy = c.i32_const(psp+f1size);\n\n        const ps2p = module.alloc(f1size*2);\n        const s2p = c.i32_const(ps2p);\n        const s2px = c.i32_const(ps2p);\n        const s2py = c.i32_const(ps2p+f1size);\n\n        f.addCode(\n            c.if(\n                c.call(g1mPrefix + \"_isZeroAffine\", c.getLocal(\"p\")),\n                c.ret( c.i32_const(1)),\n            ),\n            c.if(\n                c.i32_eqz(c.call(g1mPrefix + \"_inCurveAffine\", c.getLocal(\"p\"))),\n                c.ret( c.i32_const(0)),\n            ),\n\n            c.call(f1mPrefix + \"_mul\", px, beta, spx),\n            c.call(f1mPrefix + \"_copy\", py, spy),\n\n            c.call(f1mPrefix + \"_mul\", px, beta2, s2px),\n            c.call(f1mPrefix + \"_copy\", py, s2py),\n\n\n            c.call(g1mPrefix + \"_doubleAffine\", sp, sp),\n            c.call(g1mPrefix + \"_subMixed\", sp, c.getLocal(\"p\"), sp),\n            c.call(g1mPrefix + \"_subMixed\", sp, s2p, sp),\n\n            c.call(g1mPrefix + \"_timesScalar\", sp, z2m1d3, c.i32_const(16), sp),\n\n            c.ret(\n                c.call(g1mPrefix + \"_eqMixed\", sp, s2p)\n            )\n\n        );\n\n        const fInGroup = module.addFunction(g1mPrefix + \"_inGroup\");\n        fInGroup.addParam(\"pIn\", \"i32\");\n        fInGroup.setReturnType(\"i32\");\n\n        const c2 = fInGroup.getCodeBuilder();\n\n        const aux2 = c2.i32_const(module.alloc(f1size*2));\n\n        fInGroup.addCode(\n            c2.call(g1mPrefix + \"_toAffine\", c2.getLocal(\"pIn\"), aux2),\n\n            c2.ret(\n                c2.call(g1mPrefix + \"_inGroupAffine\", aux2),\n            )\n        );\n    }\n\n    for (let i=0; i<10; i++) {\n        buildFrobeniusMap(i);\n        module.exportFunction(ftmPrefix + \"_frobeniusMap\"+i);\n    }\n\n\n    buildInGroupG1();\n    buildInGroupG2();\n\n    buildPrepAddStep();\n    buildPrepDoubleStep();\n\n    buildPrepareG1();\n    buildPrepareG2();\n\n    buildMillerLoop();\n\n    buildFinalExponentiationOld();\n    buildFinalExponentiation();\n\n    for (let i=1; i<=5; i++) {\n        buildPairingEquation(i);\n        module.exportFunction(prefix + \"_pairingEq\"+i);\n    }\n\n    buildPairing();\n\n    module.exportFunction(prefix + \"_pairing\");\n\n\n    module.exportFunction(prefix + \"_prepareG1\");\n    module.exportFunction(prefix + \"_prepareG2\");\n    module.exportFunction(prefix + \"_millerLoop\");\n    module.exportFunction(prefix + \"_finalExponentiation\");\n    module.exportFunction(prefix + \"_finalExponentiationOld\");\n    module.exportFunction(prefix + \"__cyclotomicSquare\");\n    module.exportFunction(prefix + \"__cyclotomicExp_w0\");\n\n    module.exportFunction(f6mPrefix + \"_mul1\");\n    module.exportFunction(f6mPrefix + \"_mul01\");\n    module.exportFunction(ftmPrefix + \"_mul014\");\n\n    module.exportFunction(g1mPrefix + \"_inGroupAffine\");\n    module.exportFunction(g1mPrefix + \"_inGroup\");\n    module.exportFunction(g2mPrefix + \"_inGroupAffine\");\n    module.exportFunction(g2mPrefix + \"_inGroup\");\n\n    // console.log(module.functionIdxByName);\n};\n\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n// module.exports.bn128_wasm = require(\"./build/bn128_wasm.js\");\n// module.exports.bls12381_wasm = require(\"./build/bls12381_wasm.js\");\n// module.exports.mnt6753_wasm = require(\"./build/mnt6753_wasm.js\");\n\nmodule.exports.buildBn128 = require(\"./src/bn128/build_bn128.js\");\nmodule.exports.buildBls12381 = require(\"./src/bls12381/build_bls12381.js\");\n// module.exports.buildMnt6753 = require(\"./src/mnt6753/build_mnt7.js\");\n\nmodule.exports.buildF1m = require(\"./src/build_f1m\");\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nmodule.exports = Worker;", "export * from './constants/index';\nexport * from './lib/index';\nexport * from './types/index';\n", "export * from './hash';\nexport * from './node';\nexport * from './data';\nexport * from './proof';\nexport * from './field';\n", "export const HASH_BYTES_LENGTH = 32;\n", "// middle node.ts with children\nimport { NodeType } from '../types';\n\nexport const NODE_TYPE_MIDDLE: NodeType = 0;\n// Leaf node.ts with a key and a value\nexport const NODE_TYPE_LEAF: NodeType = 1;\n// empty node.ts\nexport const NODE_TYPE_EMPTY: NodeType = 2;\n\nexport const NODE_VALUE_BYTE_ARR_LENGTH = 65;\n\nexport const EMPTY_NODE_VALUE = new Uint8Array(NODE_VALUE_BYTE_ARR_LENGTH);\n\nexport const EMPTY_NODE_STRING = 'empty';\n", "export const ELEM_BYTES_LEN = 32;\nexport const DATA_LEN = 8;\nexport const DATA_LEN_BYTES = DATA_LEN * ELEM_BYTES_LEN;\n", "import { ELEM_BYTES_LEN } from './data';\nexport const PROOF_FLAG_LEN = 2;\nexport const NOT_EMPTIES_LEN = ELEM_BYTES_LEN - PROOF_FLAG_LEN;\n", "const qString = '21888242871839275222246405745257275088548364400416034343698204186575808495617';\n\nexport const FIELD_SIZE = BigInt(qString);\nexport const MAX_NUM_IN_FIELD = FIELD_SIZE - BigInt('1');\n", "export * from './db/index';\nexport * from './entry/index';\nexport * from './errors/index';\nexport * from './hash/hash';\nexport * from './merkletree';\nexport * from './node/node';\nexport * from './utils/index';\n", "export * from './inMemory';\nexport * from './localStorage';\nexport * from './indexedDB';\n", "// in Memory Database implementation\n\nimport { Bytes, Node } from '../../types';\nimport { ITreeStorage } from '../../types/storage';\nimport { Hash, ZERO_HASH } from '../hash/hash';\n\nexport class InMemoryDB implements ITreeStorage {\n  prefix: Bytes;\n  #kvMap: {\n    [k in string]: Node;\n  };\n  #currentRoot: Hash;\n\n  constructor(_prefix: Bytes) {\n    this.prefix = _prefix;\n    this.#kvMap = {};\n    this.#currentRoot = ZERO_HASH;\n  }\n\n  async get(k: Bytes): Promise<Node | undefined> {\n    const kBytes = new Uint8Array([...this.prefix, ...k]);\n    const val = this.#kvMap[kBytes.toString()] ? this.#kvMap[kBytes.toString()] : undefined;\n    return val;\n  }\n\n  async put(k: Bytes, n: Node): Promise<void> {\n    const kBytes = new Uint8Array([...this.prefix, ...k]);\n    this.#kvMap[kBytes.toString()] = n;\n  }\n\n  async getRoot(): Promise<Hash> {\n    return this.#currentRoot;\n  }\n\n  async setRoot(r: Hash): Promise<void> {\n    this.#currentRoot = r;\n  }\n}\n", "import { HASH_BYTES_LENGTH } from '../../constants';\nimport { bytesEqual, swapEndianness, bytes2Hex, bytes2BinaryString } from '../utils';\nimport { Bytes, IHash } from '../../types';\n\nexport class Hash implements IHash {\n  // little endian\n  bytes: Bytes;\n\n  constructor(_bytes?: Bytes) {\n    if (_bytes?.length) {\n      if (_bytes.length !== HASH_BYTES_LENGTH) {\n        throw new Error(`Expected ${HASH_BYTES_LENGTH} bytes, found ${_bytes.length} bytes`);\n      }\n      this.bytes = _bytes;\n    } else {\n      this.bytes = new Uint8Array(HASH_BYTES_LENGTH);\n    }\n  }\n\n  // returns a new copy, in little endian\n  get value(): Bytes {\n    return this.bytes;\n  }\n\n  // bytes should be in big-endian\n  set value(bytes: Bytes) {\n    if (bytes.length !== HASH_BYTES_LENGTH) {\n      throw `Expected 32 bytes, found ${bytes.length} bytes`;\n    }\n    this.bytes = swapEndianness(bytes);\n  }\n\n  string(): string {\n    return this.bigInt().toString(10);\n  }\n\n  hex(): string {\n    return bytes2Hex(this.bytes);\n  }\n\n  equals(hash: Hash): boolean {\n    return bytesEqual(this.value, hash.value);\n  }\n\n  bigInt(): bigint {\n    const bytes = swapEndianness(this.value);\n    return BigInt(bytes2BinaryString(bytes));\n  }\n}\n\nexport const ZERO_HASH = new Hash();\n", "export * from './bytes';\nexport * from './hash';\nexport * from './poseidon';\nexport * from './entry';\nexport * from './circom';\nexport * from './merkletree';\nexport * from './proof';\n", "import { Bytes } from '../../types';\nimport { HASH_BYTES_LENGTH } from '../../constants';\nimport { checkBigIntInField } from './crypto';\n\nexport const bytesEqual: (b1: Bytes, b2: Bytes) => boolean = (b1, b2) => {\n  let areEqual = true;\n  b1.forEach((ele, idx) => {\n    if (ele !== b2[idx]) {\n      areEqual = false;\n    }\n  });\n  return areEqual;\n};\n\n// TODO: might be make this generic over typed arrays?\nexport const swapEndianness = (bytes: Bytes): Bytes => {\n  const tempBuffer = new ArrayBuffer(bytes.length);\n  const tempBytes = new Uint8Array(tempBuffer);\n\n  bytes.forEach((_, idx) => {\n    tempBytes[idx] = bytes[bytes.length - 1 - idx];\n  });\n\n  return tempBytes;\n};\n\nexport const bytes2BinaryString = (bytes: Bytes): string => {\n  return '0b' + bytes.reduce((acc, i) => acc + i.toString(2).padStart(8, '0'), '');\n};\n\nexport const testBit = (bitMap: Bytes, n: number): boolean => {\n  return (bitMap[parseInt((n / 8).toString())] & (1 << n % 8)) !== 0;\n};\n\nexport const testBitBigEndian = (bitMap: Bytes, n: number): boolean => {\n  return (bitMap[bitMap.length - parseInt(`${n / 8}`) - 1] & (1 << n % 8)) !== 0;\n};\n\n// SetBitBigEndian sets the bit n in the bitmap to 1, in Big Endian.\nexport const setBitBigEndian = (bitMap: Bytes, n: number): void => {\n  bitMap[bitMap.length - parseInt(`${n / 8}`) - 1] |= 1 << n % 8;\n};\n\nconst hextable = '0123456789abcdef';\nexport const bytes2Hex = (u: Bytes): string => {\n  const arr = new Array(u.length * 2);\n  let j = 0;\n  u.forEach((v) => {\n    arr[j] = hextable[parseInt((v >> 4).toString(10))];\n    arr[j + 1] = hextable[parseInt((v & 15).toString(10))];\n    j += 2;\n  });\n\n  return arr.join('');\n};\n\n// NOTE: `bytes` should be big endian\n// bytes recieved from Hash.value getter are safe to use since their endianness is swapped, for the same reason the private Hash.bytes { stored in little endian } should never be used\nexport const newBigIntFromBytes = (bytes: Bytes): bigint => {\n  if (bytes.length !== HASH_BYTES_LENGTH) {\n    throw `Expected 32 bytes, found ${bytes.length} bytes`;\n  }\n\n  const bigNum = BigInt(bytes2BinaryString(bytes));\n  if (!checkBigIntInField(bigNum)) {\n    throw 'NewBigIntFromHashBytes: Value not inside the Finite Field';\n  }\n\n  return bigNum;\n};\n\nexport const str2Bytes = (str: string): Bytes =>\n  new Uint8Array(str.length * 2).map((_, i) => str.charCodeAt(i));\n", "import { FIELD_SIZE } from '../../constants/field';\n\nexport const checkBigIntInField = (bigNum: bigint): boolean => {\n  return bigNum < FIELD_SIZE;\n};\n", "import { checkBigIntInField } from './crypto';\nimport { Hash, ZERO_HASH } from '../hash/hash';\n\nimport { bigIntToUINT8Array } from './bigint';\nimport { Hex } from '@iden3/js-crypto';\nimport { swapEndianness } from './bytes';\n\n// returned bytes endianess will be big-endian\nexport const newHashFromBigInt = (bigNum: bigint): Hash => {\n  if (!checkBigIntInField(bigNum)) {\n    throw 'NewBigIntFromHashBytes: Value not inside the Finite Field';\n  }\n\n  const bytes = bigIntToUINT8Array(bigNum);\n\n  const hash = new Hash();\n  hash.value = bytes;\n  return hash;\n};\n\nexport const newHashFromHex = (h: string): Hash => {\n  if (!h) {\n    return ZERO_HASH;\n  }\n\n  // TODO: add in field check\n\n  const hash = new Hash();\n  hash.value = swapEndianness(Hex.decodeString(h));\n  return hash;\n};\n\n// return object of class Hash from a decimal string\nexport const newHashFromString = (decimalString: string): Hash => {\n  const bigNum = BigInt(decimalString);\n\n  if (!checkBigIntInField(bigNum)) {\n    throw 'NewBigIntFromHashBytes: Value not inside the Finite Field';\n  }\n\n  return newHashFromBigInt(bigNum);\n};\n", "import { HASH_BYTES_LENGTH } from '../../constants';\nimport { Bytes } from '../../types';\n\nexport const bigint2Array = (bigNum: bigint, radix?: number): Array<number> => {\n  return bigNum\n    .toString(radix ? radix : 10)\n    .split('')\n    .map((n) => {\n      return parseInt(n);\n    });\n};\n\nexport const bigIntToUINT8Array = (bigNum: bigint): Bytes => {\n  const n256 = BigInt(256);\n  const bytes = new Uint8Array(HASH_BYTES_LENGTH);\n  let i = 0;\n  while (bigNum > BigInt(0)) {\n    bytes[HASH_BYTES_LENGTH - 1 - i] = Number(bigNum % n256);\n    bigNum = bigNum / n256;\n    i += 1;\n  }\n  return bytes;\n};\n", null, null, null, null, null, null, "\nimport * as _Scalar  from \"./src/scalar.js\";\nexport const Scalar=_Scalar;\n\nexport {default as PolField} from \"./src/polfield.js\";\nexport {default as F1Field} from \"./src/f1field.js\";\nexport {default as F2Field} from \"./src/f2field.js\";\nexport {default as F3Field} from \"./src/f3field.js\";\n\nexport {default as ZqField} from \"./src/f1field.js\";\n\nexport {default as EC} from \"./src/ec.js\";\n\nexport {default as buildBn128} from \"./src/bn128.js\";\nexport {default as buildBls12381} from \"./src/bls12381.js\";\n\nimport * as _utils from \"./src/utils.js\";\nexport const utils = _utils;\nexport {default as ChaCha} from \"./src/chacha.js\";\n\nexport {default as BigBuffer} from \"./src/bigbuffer.js\";\n\nexport {getCurveFromR, getCurveFromQ, getCurveFromName} from \"./src/curves.js\";\n\n", "\n/* global BigInt */\nconst hexLen = [ 0, 1, 2, 2, 3, 3, 3, 3, 4 ,4 ,4 ,4 ,4 ,4 ,4 ,4];\n\nexport function fromString(s, radix) {\n    if ((!radix)||(radix==10)) {\n        return BigInt(s);\n    } else if (radix==16) {\n        if (s.slice(0,2) == \"0x\") {\n            return BigInt(s);\n        } else {\n            return BigInt(\"0x\"+s);\n        }\n    }\n}\n\nexport const e = fromString;\n\nexport function fromArray(a, radix) {\n    let acc =BigInt(0);\n    radix = BigInt(radix);\n    for (let i=0; i<a.length; i++) {\n        acc = acc*radix + BigInt(a[i]);\n    }\n    return acc;\n}\n\nexport function bitLength(a) {\n    const aS =a.toString(16);\n    return (aS.length-1)*4 +hexLen[parseInt(aS[0], 16)];\n}\n\nexport function isNegative(a) {\n    return BigInt(a) < BigInt(0);\n}\n\nexport function isZero(a) {\n    return !a;\n}\n\nexport function shiftLeft(a, n) {\n    return BigInt(a) << BigInt(n);\n}\n\nexport function shiftRight(a, n) {\n    return BigInt(a) >> BigInt(n);\n}\n\nexport const shl = shiftLeft;\nexport const shr = shiftRight;\n\nexport function isOdd(a) {\n    return (BigInt(a) & BigInt(1)) == BigInt(1);\n}\n\n\nexport function naf(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            const z = 2 - Number(E % BigInt(4));\n            res.push( z );\n            E = E - BigInt(z);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\n\nexport function bits(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            res.push(1);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\nexport function toNumber(s) {\n    if (s>BigInt(Number.MAX_SAFE_INTEGER )) {\n        throw new Error(\"Number too big\");\n    }\n    return Number(s);\n}\n\nexport function toArray(s, radix) {\n    const res = [];\n    let rem = BigInt(s);\n    radix = BigInt(radix);\n    while (rem) {\n        res.unshift( Number(rem % radix));\n        rem = rem / radix;\n    }\n    return res;\n}\n\n\nexport function add(a, b) {\n    return BigInt(a) + BigInt(b);\n}\n\nexport function sub(a, b) {\n    return BigInt(a) - BigInt(b);\n}\n\nexport function neg(a) {\n    return -BigInt(a);\n}\n\nexport function mul(a, b) {\n    return BigInt(a) * BigInt(b);\n}\n\nexport function square(a) {\n    return BigInt(a) * BigInt(a);\n}\n\nexport function pow(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nexport function exp(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nexport function abs(a) {\n    return BigInt(a) >= 0 ? BigInt(a) : -BigInt(a);\n}\n\nexport function div(a, b) {\n    return BigInt(a) / BigInt(b);\n}\n\nexport function mod(a, b) {\n    return BigInt(a) % BigInt(b);\n}\n\nexport function eq(a, b) {\n    return BigInt(a) == BigInt(b);\n}\n\nexport function neq(a, b) {\n    return BigInt(a) != BigInt(b);\n}\n\nexport function lt(a, b) {\n    return BigInt(a) < BigInt(b);\n}\n\nexport function gt(a, b) {\n    return BigInt(a) > BigInt(b);\n}\n\nexport function leq(a, b) {\n    return BigInt(a) <= BigInt(b);\n}\n\nexport function geq(a, b) {\n    return BigInt(a) >= BigInt(b);\n}\n\nexport function band(a, b) {\n    return BigInt(a) & BigInt(b);\n}\n\nexport function bor(a, b) {\n    return BigInt(a) | BigInt(b);\n}\n\nexport function bxor(a, b) {\n    return BigInt(a) ^ BigInt(b);\n}\n\nexport function land(a, b) {\n    return BigInt(a) && BigInt(b);\n}\n\nexport function lor(a, b) {\n    return BigInt(a) || BigInt(b);\n}\n\nexport function lnot(a) {\n    return !BigInt(a);\n}\n\n// Returns a buffer with Little Endian Representation\nexport function toRprLE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new Uint32Array(buff.buffer, buff.byteOffset + o, n8/4);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v[i] = parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16);\n    for (let i=l; i<v.length; i++) v[i] = 0;\n    for (let i=v.length*4; i<n8; i++) buff[i] = toNumber(band(shiftRight(e, i*8), 0xFF));\n}\n\n// Returns a buffer with Big Endian Representation\nexport function toRprBE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v.setUint32(n8-i*4 -4, parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16), false);\n    for (let i=0; i<n8/4-l; i++) v[i] = 0;\n}\n\n// Pases a buffer with Little Endian Representation\nexport function fromRprLE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new Uint32Array(buff.buffer, buff.byteOffset + o, n8/4);\n    const a = new Array(n8/4);\n    v.forEach( (ch,i) => a[a.length-i-1] = ch.toString(16).padStart(8,\"0\") );\n    return fromString(a.join(\"\"), 16);\n}\n\n// Pases a buffer with Big Endian Representation\nexport function fromRprBE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const a = new Array(n8/4);\n    for (let i=0; i<n8/4; i++) {\n        a[i] = v.getUint32(i*4, false).toString(16).padStart(8, \"0\");\n    }\n    return fromString(a.join(\"\"), 16);\n}\n\nexport function toString(a, radix) {\n    return a.toString(radix);\n}\n\nexport function toLEBuff(a) {\n    const buff = new Uint8Array(Math.floor((bitLength(a) - 1) / 8) +1);\n    toRprLE(buff, 0, a, buff.byteLength);\n    return buff;\n}\n\nexport const zero = e(0);\nexport const one = e(1);\n\n\n\n\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nexport default class PolField {\n    constructor (F) {\n        this.F = F;\n\n        let rem = F.sqrt_t;\n        let s = F.sqrt_s;\n\n        const five = this.F.add(this.F.add(this.F.two, this.F.two), this.F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(five, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n/*        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n    */\n        this._setRoots(15);\n    }\n\n    _setRoots(n) {\n        if (n > this.F.sqrt_s) n = this.s;\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n            this.roots[i] = rootsi;\n        }\n    }\n\n    add(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.add(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.sub(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    mulScalar(p, b) {\n        if (this.F.eq(b, this.F.zero)) return [];\n        if (this.F.eq(b, this.F.one)) return p;\n        const res = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.mul(p[i], b);\n        }\n        return res;\n    }\n\n\n\n    mul(a, b) {\n        if (a.length == 0) return [];\n        if (b.length == 0) return [];\n        if (a.length == 1) return this.mulScalar(b, a[0]);\n        if (b.length == 1) return this.mulScalar(a, b[0]);\n\n        if (b.length > a.length) {\n            [b, a] = [a, b];\n        }\n\n        if ((b.length <= 2) || (b.length < log2(a.length))) {\n            return this.mulNormal(a,b);\n        } else {\n            return this.mulFFT(a,b);\n        }\n    }\n\n    mulNormal(a, b) {\n        let res = [];\n        for (let i=0; i<b.length; i++) {\n            res = this.add(res, this.scaleX(this.mulScalar(a, b[i]), i) );\n        }\n        return res;\n    }\n\n    mulFFT(a,b) {\n        const longestN = Math.max(a.length, b.length);\n        const bitsResult = log2(longestN-1)+2;\n        this._setRoots(bitsResult);\n\n        const m = 1 << bitsResult;\n        const ea = this.extend(a,m);\n        const eb = this.extend(b,m);\n\n        const ta = __fft(this, ea, bitsResult, 0, 1, false);\n        const tb = __fft(this, eb, bitsResult, 0, 1, false);\n\n        const tres = new Array(m);\n\n        for (let i=0; i<m; i++) {\n            tres[i] = this.F.mul(ta[i], tb[i]);\n        }\n\n        const res = __fft(this, tres, bitsResult, 0, 1, true);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return this.reduce(resn);\n    }\n\n\n\n    square(a) {\n        return this.mul(a,a);\n    }\n\n    scaleX(p, n) {\n        if (n==0) {\n            return p;\n        } else if (n>0) {\n            const z = new Array(n).fill(this.F.zero);\n            return z.concat(p);\n        } else {\n            if (-n >= p.length) return [];\n            return p.slice(-n);\n        }\n    }\n\n    eval2(p, x) {\n        let v = this.F.zero;\n        let ix = this.F.one;\n        for (let i=0; i<p.length; i++) {\n            v = this.F.add(v, this.F.mul(p[i], ix));\n            ix = this.F.mul(ix, x);\n        }\n        return v;\n    }\n\n    eval(p,x) {\n        const F = this.F;\n        if (p.length == 0) return F.zero;\n        const m = this._next2Power(p.length);\n        const ep = this.extend(p, m);\n\n        return _eval(ep, x, 0, 1, m);\n\n        function _eval(p, x, offset, step, n) {\n            if (n==1) return p[offset];\n            const newX = F.square(x);\n            const res= F.add(\n                _eval(p, newX, offset, step << 1, n >> 1),\n                F.mul(\n                    x,\n                    _eval(p, newX, offset+step , step << 1, n >> 1)));\n            return res;\n        }\n    }\n\n    lagrange(points) {\n        let roots = [this.F.one];\n        for (let i=0; i<points.length; i++) {\n            roots = this.mul(roots, [this.F.neg(points[i][0]), this.F.one]);\n        }\n\n        let sum = [];\n        for (let i=0; i<points.length; i++) {\n            let mpol = this.ruffini(roots, points[i][0]);\n            const factor =\n                this.F.mul(\n                    this.F.inv(this.eval(mpol, points[i][0])),\n                    points[i][1]);\n            mpol = this.mulScalar(mpol, factor);\n            sum = this.add(sum, mpol);\n        }\n        return sum;\n    }\n\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res = __fft(this, ep, bits, 0, 1);\n        return res;\n    }\n\n    fft2(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res = __fft2(this, ep, bits);\n        return res;\n    }\n\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res =  __fft(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n\n    ifft2(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res =  __fft2(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n    _fft(pall, bits, offset, step) {\n\n        const n = 1 << bits;\n        if (n==1) {\n            return [ pall[offset] ];\n        }\n\n        const ndiv2 = n >> 1;\n        const p1 = this._fft(pall, bits-1, offset, step*2);\n        const p2 = this._fft(pall, bits-1, offset+step, step*2);\n\n        const out = new Array(n);\n\n        let m= this.F.one;\n        for (let i=0; i<ndiv2; i++) {\n            out[i] = this.F.add(p1[i], this.F.mul(m, p2[i]));\n            out[i+ndiv2] = this.F.sub(p1[i], this.F.mul(m, p2[i]));\n            m = this.F.mul(m, this.w[bits]);\n        }\n\n        return out;\n    }\n\n    extend(p, e) {\n        if (e == p.length) return p;\n        const z = new Array(e-p.length).fill(this.F.zero);\n\n        return p.concat(z);\n    }\n\n    reduce(p) {\n        if (p.length == 0) return p;\n        if (! this.F.eq(p[p.length-1], this.F.zero) ) return p;\n        let i=p.length-1;\n        while( i>0 && this.F.eq(p[i], this.F.zero) ) i--;\n        return p.slice(0, i+1);\n    }\n\n    eq(a, b) {\n        const pa = this.reduce(a);\n        const pb = this.reduce(b);\n\n        if (pa.length != pb.length) return false;\n        for (let i=0; i<pb.length; i++) {\n            if (!this.F.eq(pa[i], pb[i])) return false;\n        }\n\n        return true;\n    }\n\n    ruffini(p, r) {\n        const res = new Array(p.length-1);\n        res[res.length-1] = p[p.length-1];\n        for (let i = res.length-2; i>=0; i--) {\n            res[i] = this.F.add(this.F.mul(res[i+1], r), p[i+1]);\n        }\n        return res;\n    }\n\n    _next2Power(v) {\n        v--;\n        v |= v >> 1;\n        v |= v >> 2;\n        v |= v >> 4;\n        v |= v >> 8;\n        v |= v >> 16;\n        v++;\n        return v;\n    }\n\n    toString(p) {\n        const ap = this.normalize(p);\n        let S = \"\";\n        for (let i=ap.length-1; i>=0; i--) {\n            if (!this.F.eq(p[i], this.F.zero)) {\n                if (S!=\"\") S += \" + \";\n                S = S + p[i].toString(10);\n                if (i>0) {\n                    S = S + \"x\";\n                    if (i>1) {\n                        S = S + \"^\" +i;\n                    }\n                }\n            }\n        }\n        return S;\n    }\n\n    normalize(p) {\n        const res  = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.normalize(p[i]);\n        }\n        return res;\n    }\n\n\n    _reciprocal(p, bits) {\n        const k = 1 << bits;\n        if (k==1) {\n            return [ this.F.inv(p[0]) ];\n        }\n        const np = this.scaleX(p, -k/2);\n        const q = this._reciprocal(np, bits-1);\n        const a = this.scaleX(this.double(q), 3*k/2-2);\n        const b = this.mul( this.square(q), p);\n\n        return this.scaleX(this.sub(a,b),   -(k-2));\n    }\n\n    // divides x^m / v\n    _div2(m, v) {\n        const kbits = log2(v.length-1)+1;\n        const k = 1 << kbits;\n\n        const scaleV = k - v.length;\n\n        // rec = x^(k - 2) / v* x^scaleV =>\n        // rec = x^(k-2-scaleV)/ v\n        //\n        // res = x^m/v = x^(m + (2*k-2 - scaleV) - (2*k-2 - scaleV)) /v =>\n        // res = rec * x^(m - (2*k-2 - scaleV)) =>\n        // res = rec * x^(m - 2*k + 2 + scaleV)\n\n        const rec = this._reciprocal(this.scaleX(v, scaleV), kbits);\n        const res = this.scaleX(rec, m - 2*k + 2 + scaleV);\n\n        return res;\n    }\n\n    div(_u, _v) {\n        if (_u.length < _v.length) return [];\n        const kbits = log2(_v.length-1)+1;\n        const k = 1 << kbits;\n\n        const u = this.scaleX(_u, k-_v.length);\n        const v = this.scaleX(_v, k-_v.length);\n\n        const n = v.length-1;\n        let m = u.length-1;\n\n        const s = this._reciprocal(v, kbits);\n        let t;\n        if (m>2*n) {\n            t = this.sub(this.scaleX([this.F.one], 2*n), this.mul(s, v));\n        }\n\n        let q = [];\n        let rem = u;\n        let us, ut;\n        let finish = false;\n\n        while (!finish) {\n            us = this.mul(rem, s);\n            q = this.add(q, this.scaleX(us, -2*n));\n\n            if ( m > 2*n ) {\n                ut = this.mul(rem, t);\n                rem = this.scaleX(ut, -2*n);\n                m = rem.length-1;\n            } else {\n                finish = true;\n            }\n        }\n\n        return q;\n    }\n\n\n    // returns the ith nth-root of one\n    oneRoot(n, i) {\n        let nbits = log2(n-1)+1;\n        let res = this.F.one;\n        let r = i;\n\n        if(i>=n) {\n            throw new Error(\"Given 'i' should be lower than 'n'\");\n        }\n        else if (1<<nbits !== n) {\n            throw new Error(`Internal errlr: ${n} should equal ${1<<nbits}`);\n        }\n\n        while (r>0) {\n            if (r & 1 == 1) {\n                res = this.F.mul(res, this.w[nbits]);\n            }\n            r = r >> 1;\n            nbits --;\n        }\n        return res;\n    }\n\n    computeVanishingPolinomial(bits, t) {\n        const m = 1 << bits;\n        return this.F.sub(this.F.pow(t, m), this.F.one);\n    }\n\n    evaluateLagrangePolynomials(bits, t) {\n        const m= 1 << bits;\n        const tm = this.F.pow(t, m);\n        const u= new Array(m).fill(this.F.zero);\n        this._setRoots(bits);\n        const omega = this.w[bits];\n\n        if (this.F.eq(tm, this.F.one)) {\n            for (let i = 0; i < m; i++) {\n                if (this.F.eq(this.roots[bits][0],t)) { // i.e., t equals omega^i\n                    u[i] = this.F.one;\n                    return u;\n                }\n            }\n        }\n\n        const z = this.F.sub(tm, this.F.one);\n        //        let l = this.F.mul(z,  this.F.pow(this.F.twoinv, m));\n        let l = this.F.mul(z,  this.F.inv(this.F.e(m)));\n        for (let i = 0; i < m; i++) {\n            u[i] = this.F.mul(l, this.F.inv(this.F.sub(t,this.roots[bits][i])));\n            l = this.F.mul(l, omega);\n        }\n\n        return u;\n    }\n\n    log2(V) {\n        return log2(V);\n    }\n}\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.F.add(pall[offset], pall[offset + step]),\n            PF.F.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\n\nfunction __fft2(PF, pall, bits) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[0] ];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft2(PF, pall.slice(0, ndiv2), bits-1);\n    const p2 = __fft2(PF, pall.slice(ndiv2), bits-1);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\nconst _revTable = [];\nfor (let i=0; i<256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res =0;\n    let a = idx;\n    for (let i=0; i<bits; i++) {\n        res <<= 1;\n        res = res | (a &1);\n        a >>=1;\n    }\n    return res;\n}\n\nfunction rev(idx, bits) {\n    return (\n        _revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xFF] << 8) |\n        (_revTable[(idx >>> 8) & 0xFF] << 16) |\n        (_revTable[idx & 0xFF] << 24)\n    ) >>> (32-bits);\n}\n\nfunction __bitReverse(p, bits) {\n    for (let k=0; k<p.length; k++) {\n        const r = rev(k, bits);\n        if (r>k) {\n            const tmp= p[k];\n            p[k] = p[r];\n            p[r] = tmp;\n        }\n    }\n\n}\n\n\n", "/* global BigInt */\nimport * as Scalar from \"./scalar.js\";\nimport * as futils from \"./futils.js\";\nimport buildSqrt from \"./fsqrt.js\";\nimport {getRandomBytes} from \"./random.js\";\nimport FFFT from \"./fft.js\";\n\nexport default class ZqField {\n    constructor(p) {\n        this.type=\"F1\";\n        this.one = BigInt(1);\n        this.zero = BigInt(0);\n        this.p = BigInt(p);\n        this.m = 1;\n        this.negone = this.p-this.one;\n        this.two = BigInt(2);\n        this.half = this.p >> this.one;\n        this.bitLength = Scalar.bitLength(this.p);\n        this.mask = (this.one << BigInt(this.bitLength)) - this.one;\n\n        this.n64 = Math.floor((this.bitLength - 1) / 64)+1;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n        this.R = this.e(this.one << BigInt(this.n64*64));\n        this.Ri = this.inv(this.R);\n\n        const e = this.negone >> this.one;\n        this.nqr = this.two;\n        let r = this.pow(this.nqr, e);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.nqr + this.one;\n            r = this.pow(this.nqr, e);\n        }\n\n\n        this.s = 0;\n        this.t = this.negone;\n\n        while ((this.t & this.one) == this.zero) {\n            this.s = this.s + 1;\n            this.t = this.t >> this.one;\n        }\n\n        this.nqr_to_t = this.pow(this.nqr, this.t);\n\n        buildSqrt(this);\n\n        this.FFT = new FFFT(this, this, this.mul.bind(this));\n\n        this.fft = this.FFT.fft.bind(this.FFT);\n        this.ifft = this.FFT.ifft.bind(this.FFT);\n        this.w = this.FFT.w;\n        this.wi = this.FFT.wi; \n    \n        this.shift = this.square(this.nqr);\n        this.k = this.exp(this.nqr, 2**this.s);\n    }\n\n    e(a,b) {\n        let res;\n        if (!b) {\n            res = BigInt(a);\n        } else if (b==16) {\n            res = BigInt(\"0x\"+a);\n        }\n        if (res < 0) {\n            let nres = -res;\n            if (nres >= this.p) nres = nres % this.p;\n            return this.p - nres;\n        } else {\n            return (res>= this.p) ? res%this.p : res;\n        }\n\n    }\n\n    add(a, b) {\n        const res = a + b;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    sub(a, b) {\n        return (a >= b) ? a-b : this.p-b+a;\n    }\n\n    neg(a) {\n        return a ? this.p-a : a;\n    }\n\n    mul(a, b) {\n        return (a*b)%this.p;\n    }\n\n    mulScalar(base, s) {\n        return (base * this.e(s)) % this.p;\n    }\n\n    square(a) {\n        return (a*a) % this.p;\n    }\n\n    eq(a, b) {\n        return a==b;\n    }\n\n    neq(a, b) {\n        return a!=b;\n    }\n\n    lt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa < bb;\n    }\n\n    gt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa > bb;\n    }\n\n    leq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa <= bb;\n    }\n\n    geq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa >= bb;\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    idiv(a, b) {\n        if (!b) throw new Error(\"Division by zero\");\n        return a / b;\n    }\n\n    inv(a) {\n        if (!a) throw new Error(\"Division by zero\");\n\n        let t = this.zero;\n        let r = this.p;\n        let newt = this.one;\n        let newr = a % this.p;\n        while (newr) {\n            let q = r/newr;\n            [t, newt] = [newt, t-q*newt];\n            [r, newr] = [newr, r-q*newr];\n        }\n        if (t<this.zero) t += this.p;\n        return t;\n    }\n\n    mod(a, b) {\n        return a % b;\n    }\n\n    pow(b, e) {\n        return futils.exp(this, b, e);\n    }\n\n    exp(b, e) {\n        return futils.exp(this, b, e);\n    }\n\n    band(a, b) {\n        const res =  ((a & b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bor(a, b) {\n        const res =  ((a | b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bxor(a, b) {\n        const res =  ((a ^ b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bnot(a) {\n        const res = a ^ this.mask;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    shl(a, b) {\n        if (Number(b) < this.bitLength) {\n            const res = (a << b) & this.mask;\n            return res >= this.p ? res-this.p : res;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                return a >> nb;\n            } else {\n                return this.zero;\n            }\n        }\n    }\n\n    shr(a, b) {\n        if (Number(b) < this.bitLength) {\n            return a >> b;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                const res = (a << nb) & this.mask;\n                return res >= this.p ? res-this.p : res;\n            } else {\n                return 0;\n            }\n        }\n    }\n\n    land(a, b) {\n        return (a && b) ? this.one : this.zero;\n    }\n\n    lor(a, b) {\n        return (a || b) ? this.one : this.zero;\n    }\n\n    lnot(a) {\n        return (a) ? this.zero : this.one;\n    }\n\n    sqrt_old(n) {\n\n        if (n == this.zero) return this.zero;\n\n        // Test that have solution\n        const res = this.pow(n, this.negone >> this.one);\n        if ( res != this.one ) return null;\n\n        let m = this.s;\n        let c = this.nqr_to_t;\n        let t = this.pow(n, this.t);\n        let r = this.pow(n, this.add(this.t, this.one) >> this.one );\n\n        while ( t != this.one ) {\n            let sq = this.square(t);\n            let i = 1;\n            while (sq != this.one ) {\n                i++;\n                sq = this.square(sq);\n            }\n\n            // b = c ^ m-i-1\n            let b = c;\n            for (let j=0; j< m-i-1; j ++) b = this.square(b);\n\n            m = i;\n            c = this.square(b);\n            t = this.mul(t, c);\n            r = this.mul(r, b);\n        }\n\n        if (r > (this.p >> this.one)) {\n            r = this.neg(r);\n        }\n\n        return r;\n    }\n\n    normalize(a, b) {\n        a = BigInt(a,b);\n        if (a < 0) {\n            let na = -a;\n            if (na >= this.p) na = na % this.p;\n            return this.p - na;\n        } else {\n            return (a>= this.p) ? a%this.p : a;\n        }\n    }\n\n    random() {\n        const nBytes = (this.bitLength*2 / 8);\n        let res =this.zero;\n        for (let i=0; i<nBytes; i++) {\n            res = (res << BigInt(8)) + BigInt(getRandomBytes(1)[0]);\n        }\n        return res % this.p;\n    }\n\n    toString(a, base) {\n        base = base || 10;\n        let vs;\n        if ((a > this.half)&&(base == 10)) {\n            const v = this.p-a;\n            vs = \"-\"+v.toString(base);\n        } else {\n            vs = a.toString(base);\n        }\n        return vs;\n    }\n\n    isZero(a) {\n        return a == this.zero;\n    }\n\n    fromRng(rng) {\n        let v;\n        do {\n            v=this.zero;\n            for (let i=0; i<this.n64; i++) {\n                v += rng.nextU64() << BigInt(64 *i);\n            }\n            v &= this.mask;\n        } while (v >= this.p);\n        v = (v * this.Ri) % this.p;   // Convert from montgomery\n        return v;\n    }\n\n    fft(a) {\n        return this.FFT.fft(a);\n    }\n\n    ifft(a) {\n        return this.FFT.ifft(a);\n    }\n\n    // Returns a buffer with Little Endian Representation\n    toRprLE(buff, o, e) {\n        Scalar.toRprLE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Representation\n    toRprBE(buff, o, e) {\n        Scalar.toRprBE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Montgomery Representation\n    toRprBEM(buff, o, e) {\n        return this.toRprBE(buff, o, this.mul(this.R, e));\n    }\n\n    toRprLEM(buff, o, e) {\n        return this.toRprLE(buff, o, this.mul(this.R, e));\n    }\n\n\n    // Pases a buffer with Little Endian Representation\n    fromRprLE(buff, o) {\n        return Scalar.fromRprLE(buff, o, this.n8);\n    }\n\n    // Pases a buffer with Big Endian Representation\n    fromRprBE(buff, o) {\n        return Scalar.fromRprBE(buff, o, this.n8);\n    }\n\n    fromRprLEM(buff, o) {\n        return this.mul(this.fromRprLE(buff, o), this.Ri);\n    }\n\n    fromRprBEM(buff, o) {\n        return this.mul(this.fromRprBE(buff, o), this.Ri);\n    }\n\n    toObject(a) {\n        return a;\n    }\n}", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as Scalar from \"./scalar.js\";\n\n\nexport function mulScalar(F, base, e) {\n    let res;\n\n    if (Scalar.isZero(e)) return F.zero;\n\n    const n = Scalar.naf(e);\n\n    if (n[n.length-1] == 1) {\n        res = base;\n    } else if (n[n.length-1] == -1) {\n        res = F.neg(base);\n    } else {\n        throw new Error(\"invlaud NAF\");\n    }\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.double(res);\n\n        if (n[i] == 1) {\n            res = F.add(res, base);\n        } else if (n[i] == -1) {\n            res = F.sub(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n/*\nexports.mulScalar = (F, base, e) =>{\n    let res = F.zero;\n    let rem = bigInt(e);\n    let exp = base;\n\n    while (! rem.eq(bigInt.zero)) {\n        if (rem.and(bigInt.one).eq(bigInt.one)) {\n            res = F.add(res, exp);\n        }\n        exp = F.double(exp);\n        rem = rem.shiftRight(1);\n    }\n\n    return res;\n};\n*/\n\n\nexport function exp(F, base, e) {\n\n    if (Scalar.isZero(e)) return F.one;\n\n    const n = Scalar.bits(e);\n\n    if (n.length==0) return F.one;\n\n    let res = base;\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.square(res);\n\n        if (n[i]) {\n            res = F.mul(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n", "import * as Scalar from \"./scalar.js\";\n// Check here: https://eprint.iacr.org/2012/685.pdf\n\nexport default function buildSqrt (F) {\n    if ((F.m % 2) == 1) {\n        if (Scalar.eq(Scalar.mod(F.p, 4), 1 )) {\n            if (Scalar.eq(Scalar.mod(F.p, 8), 1 )) {\n                if (Scalar.eq(Scalar.mod(F.p, 16), 1 )) {\n                    // alg7_muller(F);\n                    alg5_tonelliShanks(F);\n                } else if (Scalar.eq(Scalar.mod(F.p, 16), 9 )) {\n                    alg4_kong(F);\n                } else {\n                    throw new Error(\"Field withot sqrt\");\n                }\n            } else if (Scalar.eq(Scalar.mod(F.p, 8), 5 )) {\n                alg3_atkin(F);\n            } else {\n                throw new Error(\"Field withot sqrt\");\n            }\n        } else if (Scalar.eq(Scalar.mod(F.p, 4), 3 )) {\n            alg2_shanks(F);\n        }\n    } else {\n        const pm2mod4 = Scalar.mod(Scalar.pow(F.p, F.m/2), 4);\n        if (pm2mod4 == 1) {\n            alg10_adj(F);\n        } else if (pm2mod4 == 3) {\n            alg9_adj(F);\n        } else {\n            alg8_complex(F);\n        }\n\n    }\n}\n\n\nfunction alg5_tonelliShanks(F) {\n    F.sqrt_q = Scalar.pow(F.p, F.m);\n\n    F.sqrt_s = 0;\n    F.sqrt_t = Scalar.sub(F.sqrt_q, 1);\n\n    while (!Scalar.isOdd(F.sqrt_t)) {\n        F.sqrt_s = F.sqrt_s + 1;\n        F.sqrt_t = Scalar.div(F.sqrt_t, 2);\n    }\n\n    let c0 = F.one;\n\n    while (F.eq(c0, F.one)) {\n        const c = F.random();\n        F.sqrt_z = F.pow(c, F.sqrt_t);\n        c0 = F.pow(F.sqrt_z, 2 ** (F.sqrt_s-1) );\n    }\n\n    F.sqrt_tm1d2 = Scalar.div(Scalar.sub(F.sqrt_t, 1),2);\n\n    F.sqrt = function(a) {\n        const F=this;\n        if (F.isZero(a)) return F.zero;\n        let w = F.pow(a, F.sqrt_tm1d2);\n        const a0 = F.pow( F.mul(F.square(w), a), 2 ** (F.sqrt_s-1) );\n        if (F.eq(a0, F.negone)) return null;\n\n        let v = F.sqrt_s;\n        let x = F.mul(a, w);\n        let b = F.mul(x, w);\n        let z = F.sqrt_z;\n        while (!F.eq(b, F.one)) {\n            let b2k = F.square(b);\n            let k=1;\n            while (!F.eq(b2k, F.one)) {\n                b2k = F.square(b2k);\n                k++;\n            }\n\n            w = z;\n            for (let i=0; i<v-k-1; i++) {\n                w = F.square(w);\n            }\n            z = F.square(w);\n            b = F.mul(b, z);\n            x = F.mul(x, w);\n            v = k;\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg4_kong(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 4 not implemented\");\n    };\n}\n\nfunction alg3_atkin(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 3 not implemented\");\n    };\n}\n\nfunction alg2_shanks(F) {\n\n    F.sqrt_q = Scalar.pow(F.p, F.m);\n    F.sqrt_e1 = Scalar.div( Scalar.sub(F.sqrt_q, 3) , 4);\n\n    F.sqrt = function(a) {\n        if (this.isZero(a)) return this.zero;\n\n        // Test that have solution\n        const a1 = this.pow(a, this.sqrt_e1);\n\n        const a0 = this.mul(this.square(a1), a);\n\n        if ( this.eq(a0, this.negone) ) return null;\n\n        const x = this.mul(a1, a);\n\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg10_adj(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 10 not implemented\");\n    };\n}\n\nfunction alg9_adj(F) {\n    F.sqrt_q = Scalar.pow(F.p, F.m/2);\n    F.sqrt_e34 = Scalar.div( Scalar.sub(F.sqrt_q, 3) , 4);\n    F.sqrt_e12 = Scalar.div( Scalar.sub(F.sqrt_q, 1) , 2);\n\n    F.frobenius = function(n, x) {\n        if ((n%2) == 1) {\n            return F.conjugate(x);\n        } else {\n            return x;\n        }\n    };\n\n    F.sqrt = function(a) {\n        const F = this;\n        const a1 = F.pow(a, F.sqrt_e34);\n        const alfa = F.mul(F.square(a1), a);\n        const a0 = F.mul(F.frobenius(1, alfa), alfa);\n        if (F.eq(a0, F.negone)) return null;\n        const x0 = F.mul(a1, a);\n        let x;\n        if (F.eq(alfa, F.negone)) {\n            x = F.mul(x0, [F.F.zero, F.F.one]);\n        } else {\n            const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);\n            x = F.mul(b, x0);\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\n\nfunction alg8_complex(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 8 not implemented\");\n    };\n}\n", "import ChaCha from \"./chacha.js\";\nimport crypto from \"crypto\";\n\nexport function getRandomBytes(n) {\n    let array = new Uint8Array(n);\n    if (process.browser) { // Browser\n        if (typeof globalThis.crypto !== \"undefined\") { // Supported\n            globalThis.crypto.getRandomValues(array);\n        } else { // fallback\n            for (let i=0; i<n; i++) {\n                array[i] = (Math.random()*4294967296)>>>0;\n            }\n        }\n    }\n    else { // NodeJS\n        crypto.randomFillSync(array);\n    }\n    return array;\n}\n\nexport function getRandomSeed() {\n    const arr = getRandomBytes(32);\n    const arrV = new Uint32Array(arr.buffer);\n    const seed = [];\n    for (let i=0; i<8; i++) {\n        seed.push(arrV[i]);\n    }\n    return seed;\n}\n\nlet threadRng = null;\n\nexport function getThreadRng() {\n    if (threadRng) return threadRng;\n    threadRng = new ChaCha(getRandomSeed());\n    return threadRng;\n}\n", "\n\nimport * as Scalar from \"./scalar.js\";\n\n\nfunction quarterRound(st, a, b, c, d) {\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 16) | ((st[d]>>>16) & 0xFFFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 12) | ((st[b]>>>20) & 0xFFF)) >>> 0;\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 8) | ((st[d]>>>24) & 0xFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 7) | ((st[b]>>>25) & 0x7F)) >>> 0;\n}\n\nfunction doubleRound(st) {\n    quarterRound(st, 0, 4, 8,12);\n    quarterRound(st, 1, 5, 9,13);\n    quarterRound(st, 2, 6,10,14);\n    quarterRound(st, 3, 7,11,15);\n\n    quarterRound(st, 0, 5,10,15);\n    quarterRound(st, 1, 6,11,12);\n    quarterRound(st, 2, 7, 8,13);\n    quarterRound(st, 3, 4, 9,14);\n}\n\nexport default class ChaCha {\n\n    constructor(seed) {\n        seed = seed || [0,0,0,0,0,0,0,0];\n        this.state = [\n            0x61707865,\n            0x3320646E,\n            0x79622D32,\n            0x6B206574,\n            seed[0],\n            seed[1],\n            seed[2],\n            seed[3],\n            seed[4],\n            seed[5],\n            seed[6],\n            seed[7],\n            0,\n            0,\n            0,\n            0\n        ];\n        this.idx = 16;\n        this.buff = new Array(16);\n    }\n\n    nextU32() {\n        if (this.idx == 16) this.update();\n        return this.buff[this.idx++];\n    }\n\n    nextU64() {\n        return Scalar.add(Scalar.mul(this.nextU32(), 0x100000000), this.nextU32());\n    }\n\n    nextBool() {\n        return (this.nextU32() & 1) == 1;\n    }\n\n    update() {\n        // Copy the state\n        for (let i=0; i<16; i++) this.buff[i] = this.state[i];\n\n        // Apply the rounds\n        for (let i=0; i<10; i++) doubleRound(this.buff);\n\n        // Add to the initial\n        for (let i=0; i<16; i++) this.buff[i] = (this.buff[i] + this.state[i]) >>> 0;\n\n        this.idx = 0;\n\n        this.state[12] = (this.state[12] + 1) >>> 0;\n        if (this.state[12] != 0) return;\n        this.state[13] = (this.state[13] + 1) >>> 0;\n        if (this.state[13] != 0) return;\n        this.state[14] = (this.state[14] + 1) >>> 0;\n        if (this.state[14] != 0) return;\n        this.state[15] = (this.state[15] + 1) >>> 0;\n    }\n}\n", "export default {};\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nexport default class FFT {\n    constructor (G, F, opMulGF) {\n        this.F = F;\n        this.G = G;\n        this.opMulGF = opMulGF;\n\n        let rem = F.sqrt_t || F.t;\n        let s = F.sqrt_s || F.s;\n\n        let nqr = F.one;\n        while (F.eq(F.pow(nqr, F.half), F.one)) nqr = F.add(nqr, F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(nqr, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n        /*\n        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n        */\n        this._setRoots(Math.min(s, 15));\n    }\n\n    _setRoots(n) {\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots[i] = rootsi;\n        }\n    }\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res = __fft(this, p, bits, 0, 1);\n        return res;\n    }\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res =  __fft(this, p, bits, 0, 1);\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.opMulGF(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n    }\n\n\n}\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.G.add(pall[offset], pall[offset + step]),\n            PF.G.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.G.add(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n        out[i+ndiv2] = PF.G.sub(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n    }\n\n    return out;\n}\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fUtils from \"./futils.js\";\nimport buildSqrt from \"./fsqrt.js\";\n\nexport default class F2Field {\n    constructor(F, nonResidue) {\n        this.type=\"F2\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*2;\n        this.p = F.p;\n        this.n64 = F.n64*2;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n\n        buildSqrt(this);\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    conjugate(a) {\n        return [\n            a[0],\n            this.F.neg(a[1])\n        ];\n    }\n\n    mul(a, b) {\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n\n        return [\n            this.F.add( aA , this._mulByNonResidue(bB)),\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]),\n                    this.F.add(b[0], b[1])),\n                this.F.add(aA, bB))];\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);\n        const t1 = this.F.square(a[1]);\n        const t2 = this.F.sub(t0, this._mulByNonResidue(t1));\n        const t3 = this.F.inv(t2);\n        return [\n            this.F.mul(a[0], t3),\n            this.F.neg(this.F.mul( a[1], t3)) ];\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const ab = this.F.mul(a[0] , a[1]);\n\n        /*\n        [\n            (a + b) * (a + non_residue * b) - ab - non_residue * ab,\n            ab + ab\n        ];\n        */\n\n        return [\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]) ,\n                    this.F.add(\n                        a[0] ,\n                        this._mulByNonResidue(a[1]))),\n                this.F.add(\n                    ab,\n                    this._mulByNonResidue(ab))),\n            this.F.add(ab, ab)\n        ];\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]);\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        return [c0, c1];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        return false;\n    }\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBE(buff, o);\n        const c0 = this.F.fromRprBE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBEM(buff, o);\n        const c0 = this.F.fromRprBEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    toObject(a) {\n        return a;\n    }\n\n}\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fUtils from \"./futils.js\";\n\nexport default class F3Field {\n    constructor(F, nonResidue) {\n        this.type=\"F3\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*3;\n        this.p = F.p;\n        this.n64 = F.n64*3;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1]), this.F.copy(a[2])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1]),\n            this.F.add(a[2], b[2])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1]),\n            this.F.sub(a[2], b[2])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    mul(a, b) {\n\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n        const cC = this.F.mul(a[2] , b[2]);\n\n        return [\n            this.F.add(\n                aA,\n                this._mulByNonResidue(\n                    this.F.sub(\n                        this.F.mul(\n                            this.F.add(a[1], a[2]),\n                            this.F.add(b[1], b[2])),\n                        this.F.add(bB, cC)))),    // aA + non_residue*((b+c)*(B+C)-bB-cC),\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[1]),\n                        this.F.add(b[0], b[1])),\n                    this.F.add(aA, bB)),\n                this._mulByNonResidue( cC)),   // (a+b)*(A+B)-aA-bB+non_residue*cC\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[2]),\n                        this.F.add(b[0], b[2])),\n                    this.F.add(aA, cC)),\n                bB)];                           // (a+c)*(A+C)-aA+bB-cC)\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);             // t0 = a^2 ;\n        const t1 = this.F.square(a[1]);             // t1 = b^2 ;\n        const t2 = this.F.square(a[2]);             // t2 = c^2;\n        const t3 = this.F.mul(a[0],a[1]);           // t3 = ab\n        const t4 = this.F.mul(a[0],a[2]);           // t4 = ac\n        const t5 = this.F.mul(a[1],a[2]);           // t5 = bc;\n        // c0 = t0 - non_residue * t5;\n        const c0 = this.F.sub(t0, this._mulByNonResidue(t5));\n        // c1 = non_residue * t2 - t3;\n        const c1 = this.F.sub(this._mulByNonResidue(t2), t3);\n        const c2 = this.F.sub(t1, t4);              // c2 = t1-t4\n\n        // t6 = (a * c0 + non_residue * (c * c1 + b * c2)).inv();\n        const t6 =\n            this.F.inv(\n                this.F.add(\n                    this.F.mul(a[0], c0),\n                    this._mulByNonResidue(\n                        this.F.add(\n                            this.F.mul(a[2], c1),\n                            this.F.mul(a[1], c2)))));\n\n        return [\n            this.F.mul(t6, c0),         // t6*c0\n            this.F.mul(t6, c1),         // t6*c1\n            this.F.mul(t6, c2)];        // t6*c2\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const s0 = this.F.square(a[0]);                   // s0 = a^2\n        const ab = this.F.mul(a[0], a[1]);                // ab = a*b\n        const s1 = this.F.add(ab, ab);                    // s1 = 2ab;\n        const s2 = this.F.square(\n            this.F.add(this.F.sub(a[0],a[1]), a[2]));     // s2 = (a - b + c)^2;\n        const bc = this.F.mul(a[1],a[2]);                 // bc = b*c\n        const s3 = this.F.add(bc, bc);                    // s3 = 2*bc\n        const s4 = this.F.square(a[2]);                   // s4 = c^2\n\n\n        return [\n            this.F.add(\n                s0,\n                this._mulByNonResidue(s3)),           // s0 + non_residue * s3,\n            this.F.add(\n                s1,\n                this._mulByNonResidue(s4)),           // s1 + non_residue * s4,\n            this.F.sub(\n                this.F.add( this.F.add(s1, s2) , s3 ),\n                this.F.add(s0, s4))];                      // s1 + s2 + s3 - s0 - s4\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]) && this.F.isZero(a[2]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]) && this.F.eq(a[2], b[2]);\n    }\n\n    affine(a) {\n        return [this.F.affine(a[0]), this.F.affine(a[1]), this.F.affine(a[2])];\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])}, ${this.F.toString(a[2])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        return [c0, c1, c2];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        if (this.F.gt(b[1], a[1])) return false;\n        if (this.F.gt(a[2], b[2])) return true;\n        return false;\n    }\n\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n        this.F.toRprLE(buff, o+this.F.n8*2, e[2]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[2]);\n        this.F.toRprBE(buff, o+this.F.n8, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8*2, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprLEM(buff, o+this.F.n8*2, e[2]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[2]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8*2, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.n8);\n        const c2 = this.F.fromRprLE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBE(buff, o);\n        const c1 = this.F.fromRprBE(buff, o+this.n8);\n        const c0 = this.F.fromRprBE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.n8);\n        const c2 = this.F.fromRprLEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBEM(buff, o);\n        const c1 = this.F.fromRprBEM(buff, o+this.n8);\n        const c0 = this.F.fromRprBEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    toObject(a) {\n        return a;\n    }\n}\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n\nimport * as fUtils from \"./futils.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nfunction isGreatest(F, a) {\n    if (Array.isArray(a)) {\n        for (let i=a.length-1; i>=0; i--) {\n            if (!F.F.isZero(a[i])) {\n                return isGreatest(F.F, a[i]);\n            }\n        }\n        return 0;\n    } else {\n        const na = F.neg(a);\n        return Scalar.gt(a, na);\n    }\n}\n\n\nexport default class EC {\n\n    constructor(F, g) {\n        this.F = F;\n        this.g = g;\n        if (this.g.length == 2) this.g[2] = this.F.one;\n        this.zero = [this.F.zero, this.F.one, this.F.zero];\n    }\n\n    add(p1, p2) {\n\n        const F = this.F;\n\n        if (this.eq(p1, this.zero)) return p2;\n        if (this.eq(p2, this.zero)) return p1;\n\n        const res = new Array(3);\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );     // U1 = X1  * Z2Z2\n        const U2 = F.mul( p2[0] , Z1Z1 );     // U2 = X2  * Z1Z1\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);  // S1 = Y1 * Z2 * Z2Z2\n        const S2 = F.mul( p2[1] , Z1_cubed);  // S2 = Y2 * Z1 * Z1Z1\n\n        if (F.eq(U1,U2) && F.eq(S1,S2)) {\n            return this.double(p1);\n        }\n\n        const H = F.sub( U2 , U1 );                    // H = U2-U1\n\n        const S2_minus_S1 = F.sub( S2 , S1 );\n\n        const I = F.square( F.add(H,H) );         // I = (2 * H)^2\n        const J = F.mul( H , I );                      // J = H * I\n\n        const r = F.add( S2_minus_S1 , S2_minus_S1 );  // r = 2 * (S2-S1)\n        const V = F.mul( U1 , I );                     // V = U1 * I\n\n        res[0] =\n            F.sub(\n                F.sub( F.square(r) , J ),\n                F.add( V , V ));                       // X3 = r^2 - J - 2 * V\n\n        const S1_J = F.mul( S1 , J );\n\n        res[1] =\n            F.sub(\n                F.mul( r , F.sub(V,res[0])),\n                F.add( S1_J,S1_J ));                   // Y3 = r * (V-X3)-2 S1 J\n\n        res[2] =\n            F.mul(\n                H,\n                F.sub(\n                    F.square( F.add(p1[2],p2[2]) ),\n                    F.add( Z1Z1 , Z2Z2 )));            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2) * H\n\n        return res;\n    }\n\n    neg(p) {\n        return [p[0], this.F.neg(p[1]), p[2]];\n    }\n\n    sub(a, b) {\n        return this.add(a, this.neg(b));\n    }\n\n    double(p) {\n        const F = this.F;\n\n        const res = new Array(3);\n\n        if (this.eq(p, this.zero)) return p;\n\n        const A = F.square( p[0] );                    // A = X1^2\n        const B = F.square( p[1] );                    // B = Y1^2\n        const C = F.square( B );                       // C = B^2\n\n        let D =\n            F.sub(\n                F.square( F.add(p[0] , B )),\n                F.add( A , C));\n        D = F.add(D,D);                    // D = 2 * ((X1 + B)^2 - A - C)\n\n        const E = F.add( F.add(A,A), A);          // E = 3 * A\n        const FF =F.square( E );                       // F = E^2\n\n        res[0] = F.sub( FF , F.add(D,D) );         // X3 = F - 2 D\n\n        let eightC = F.add( C , C );\n        eightC = F.add( eightC , eightC );\n        eightC = F.add( eightC , eightC );\n\n        res[1] =\n            F.sub(\n                F.mul(\n                    E,\n                    F.sub( D, res[0] )),\n                eightC);                                    // Y3 = E * (D - X3) - 8 * C\n\n        const Y1Z1 = F.mul( p[1] , p[2] );\n        res[2] = F.add( Y1Z1 , Y1Z1 );                 // Z3 = 2 * Y1 * Z1\n\n        return res;\n    }\n\n    timesScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    affine(p) {\n        const F = this.F;\n        if (this.isZero(p)) {\n            return this.zero;\n        } else if (F.eq(p[2], F.one)) {\n            return p;\n        } else {\n            const Z_inv = F.inv(p[2]);\n            const Z2_inv = F.square(Z_inv);\n            const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n            const res = new Array(3);\n            res[0] = F.mul(p[0],Z2_inv);\n            res[1] = F.mul(p[1],Z3_inv);\n            res[2] = F.one;\n\n            return res;\n        }\n    }\n\n    multiAffine(arr) {\n        const keys = Object.keys(arr);\n        const F = this.F;\n        const accMul = new Array(keys.length+1);\n        accMul[0] = F.one;\n        for (let i = 0; i< keys.length; i++) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i+1] = accMul[i];\n            } else {\n                accMul[i+1] = F.mul(accMul[i], arr[keys[i]][2]);\n            }\n        }\n\n        accMul[keys.length] = F.inv(accMul[keys.length]);\n\n        for (let i = keys.length-1; i>=0; i--) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i] = accMul[i+1];\n                arr[keys[i]] = this.zero;\n            } else {\n                const Z_inv = F.mul(accMul[i], accMul[i+1]);\n                accMul[i] = F.mul(arr[keys[i]][2], accMul[i+1]);\n\n                const Z2_inv = F.square(Z_inv);\n                const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n                arr[keys[i]][0] = F.mul(arr[keys[i]][0],Z2_inv);\n                arr[keys[i]][1] = F.mul(arr[keys[i]][1],Z3_inv);\n                arr[keys[i]][2] = F.one;\n            }\n        }\n\n    }\n\n    eq(p1, p2) {\n        const F = this.F;\n\n        if (this.F.eq(p1[2], this.F.zero)) return this.F.eq(p2[2], this.F.zero);\n        if (this.F.eq(p2[2], this.F.zero)) return false;\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );\n        const U2 = F.mul( p2[0] , Z1Z1 );\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);\n        const S2 = F.mul( p2[1] , Z1_cubed);\n\n        return (F.eq(U1,U2) && F.eq(S1,S2));\n    }\n\n    isZero(p) {\n        return this.F.isZero(p[2]);\n    }\n\n    toString(p) {\n        const cp = this.affine(p);\n        return `[ ${this.F.toString(cp[0])} , ${this.F.toString(cp[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n            P[1] = F.sqrt(x3b);\n        } while ((P[1] == null)||(F.isZero[P]));\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        if (this.cofactor) {\n            P = this.mulScalar(P, this.cofactor);\n        }\n\n        P = this.affine(P);\n\n        return P;\n\n    }\n\n    toRprLE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLE(buff, o, p[0]);\n        this.F.toRprLE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprBE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n        this.F.toRprBE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEJM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n        this.F.toRprLEM(buff, o+2*this.F.n8, p[2]);\n    }\n\n\n    toRprBEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBEM(buff, o, p[0]);\n        this.F.toRprBEM(buff, o+this.F.n8, p[1]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLE(buff, o);\n        const y = this.F.fromRprLE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBE(buff, o);\n        const y = this.F.fromRprBE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEJM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        const z = this.F.fromRprLEM(buff, o+this.F.n8*2);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, z];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBEM(buff, o);\n        const y = this.F.fromRprBEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprCompressed(buff, o) {\n        const F = this.F;\n        const v = new Uint8Array(buff.buffer, o, F.n8);\n        if (v[0] & 0x40) return this.zero;\n        const P = new Array(3);\n\n        const greatest = ((v[0] & 0x80) != 0);\n        v[0] = v[0] & 0x7F;\n        P[0] = F.fromRprBE(buff, o);\n        if (greatest) v[0] = v[0] | 0x80;  // set back again the old value\n\n        const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        P[1] = F.sqrt(x3b);\n\n        if (P[1] === null) {\n            throw new Error(\"Invalid Point!\");\n        }\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        return P;\n    }\n\n    toRprCompressed(buff, o, p) {\n        p = this.affine(p);\n        const v = new Uint8Array(buff.buffer, o, this.F.n8);\n        if (this.isZero(p)) {\n            v.fill(0);\n            v[0] = 0x40;\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n\n        if (isGreatest(this.F, p[1])) {\n            v[0] = v[0] | 0x80;\n        }\n    }\n\n\n    fromRprUncompressed(buff, o) {\n        if (buff[0] & 0x40) return this.zero;\n\n        return this.fromRprBE(buff, o);\n    }\n\n    toRprUncompressed(buff, o, p) {\n        this.toRprBE(buff, o, p);\n\n        if (this.isZero(p)) {\n            buff[o] = buff[o] | 0x40;\n        }\n    }\n\n\n}\n\n\n", "import { buildBn128 as buildBn128wasm } from \"wasmcurves\";\nimport buildEngine from \"./engine.js\";\nimport * as Scalar from \"./scalar.js\";\nimport { ModuleBuilder } from \"wasmbuilder\";\n\nglobalThis.curve_bn128 = null;\n\nexport default async function buildBn128(singleThread, plugins) {\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBn128wasm(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bn128wasm = {};\n\n    bn128wasm.code = moduleBuilder.build();\n    bn128wasm.pq = moduleBuilder.modules.f1m.pq;\n    bn128wasm.pr = moduleBuilder.modules.frm.pq;\n    bn128wasm.pG1gen = moduleBuilder.modules.bn128.pG1gen;\n    bn128wasm.pG1zero = moduleBuilder.modules.bn128.pG1zero;\n    bn128wasm.pG1b = moduleBuilder.modules.bn128.pG1b;\n    bn128wasm.pG2gen = moduleBuilder.modules.bn128.pG2gen;\n    bn128wasm.pG2zero = moduleBuilder.modules.bn128.pG2zero;\n    bn128wasm.pG2b = moduleBuilder.modules.bn128.pG2b;\n    bn128wasm.pOneT = moduleBuilder.modules.bn128.pOneT;\n    bn128wasm.prePSize = moduleBuilder.modules.bn128.prePSize;\n    bn128wasm.preQSize = moduleBuilder.modules.bn128.preQSize;\n    bn128wasm.n8q = 32;\n    bn128wasm.n8r = 32;\n    bn128wasm.q = moduleBuilder.modules.bn128.q;\n    bn128wasm.r = moduleBuilder.modules.bn128.r;\n\n    if ((!singleThread) && (globalThis.curve_bn128)) return globalThis.curve_bn128;\n    const params = {\n        name: \"bn128\",\n        wasm: bn128wasm,\n        q: Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\"),\n        r: Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"),\n        n8q: 32,\n        n8r: 32,\n        cofactorG2: Scalar.e(\"30644e72e131a029b85045b68181585e06ceecda572a2489345f2299c0f9fa8d\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bn128 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bn128 = curve;\n    }\n\n    return curve;\n}\n\n", "import WasmField1 from \"./wasm_field1.js\";\nimport WasmField2 from \"./wasm_field2.js\";\nimport WasmField3 from \"./wasm_field3.js\";\nimport WasmCurve from \"./wasm_curve.js\";\nimport buildThreadManager from \"./threadman.js\";\nimport * as Scalar from \"./scalar.js\";\nimport buildBatchApplyKey from \"./engine_applykey.js\";\nimport buildPairing from \"./engine_pairing.js\";\nimport buildMultiExp from \"./engine_multiexp.js\";\nimport buildFFT from \"./engine_fft.js\";\n\nexport default async function buildEngine(params) {\n\n    const tm = await buildThreadManager(params.wasm, params.singleThread);\n\n\n    const curve = {};\n\n    curve.q = Scalar.e(params.wasm.q.toString());\n    curve.r = Scalar.e(params.wasm.r.toString());\n    curve.name = params.name;\n    curve.tm = tm;\n    curve.prePSize = params.wasm.prePSize;\n    curve.preQSize = params.wasm.preQSize;\n    curve.Fr = new WasmField1(tm, \"frm\", params.n8r, params.r);\n    curve.F1 = new WasmField1(tm, \"f1m\", params.n8q, params.q);\n    curve.F2 = new WasmField2(tm, \"f2m\", curve.F1);\n    curve.G1 = new WasmCurve(tm, \"g1m\", curve.F1, params.wasm.pG1gen, params.wasm.pG1b, params.cofactorG1);\n    curve.G2 = new WasmCurve(tm, \"g2m\", curve.F2, params.wasm.pG2gen, params.wasm.pG2b, params.cofactorG2);\n    curve.F6 = new WasmField3(tm, \"f6m\", curve.F2);\n    curve.F12 = new WasmField2(tm, \"ftm\", curve.F6);\n\n    curve.Gt = curve.F12;\n\n    buildBatchApplyKey(curve, \"G1\");\n    buildBatchApplyKey(curve, \"G2\");\n    buildBatchApplyKey(curve, \"Fr\");\n\n    buildMultiExp(curve, \"G1\");\n    buildMultiExp(curve, \"G2\");\n\n    buildFFT(curve, \"G1\");\n    buildFFT(curve, \"G2\");\n    buildFFT(curve, \"Fr\");\n\n    buildPairing(curve);\n\n    curve.array2buffer = function(arr, sG) {\n        const buff = new Uint8Array(sG*arr.length);\n\n        for (let i=0; i<arr.length; i++) {\n            buff.set(arr[i], i*sG);\n        }\n\n        return buff;\n    };\n\n    curve.buffer2array = function(buff , sG) {\n        const n= buff.byteLength / sG;\n        const arr = new Array(n);\n        for (let i=0; i<n; i++) {\n            arr[i] = buff.slice(i*sG, i*sG+sG);\n        }\n        return arr;\n    };\n\n    return curve;\n}\n\n\n", "import * as Scalar from \"./scalar.js\";\nimport * as utils from \"./utils.js\";\nimport { getThreadRng } from \"./random.js\";\nimport buildBatchConvert from \"./engine_batchconvert.js\";\nimport BigBuffer from \"./bigbuffer.js\";\n\n\nexport default class WasmField1 {\n\n    constructor(tm, prefix, n8, p) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.p = p;\n        this.n8 = n8;\n        this.type = \"F1\";\n        this.m = 1;\n\n        this.half = Scalar.shiftRight(p, Scalar.one);\n        this.bitLength = Scalar.bitLength(p);\n        this.mask = Scalar.sub(Scalar.shiftLeft(Scalar.one, this.bitLength), Scalar.one);\n\n        this.pOp1 = tm.alloc(n8);\n        this.pOp2 = tm.alloc(n8);\n        this.pOp3 = tm.alloc(n8);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = this.tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.n64 = Math.floor(n8/8);\n        this.n32 = Math.floor(n8/4);\n\n        if(this.n64*8 != this.n8) {\n            throw new Error(\"n8 must be a multiple of 8\");\n        }\n\n        this.half = Scalar.shiftRight(this.p, Scalar.one);\n        this.nqr = this.two;\n        let r = this.exp(this.nqr, this.half);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.add(this.nqr, this.one);\n            r = this.exp(this.nqr, this.half);\n        }\n\n        this.shift = this.mul(this.nqr, this.nqr);\n        this.shiftInv = this.inv(this.shift);\n\n        this.s = 0;\n        let t = Scalar.sub(this.p, Scalar.one);\n\n        while ( !Scalar.isOdd(t) ) {\n            this.s = this.s + 1;\n            t = Scalar.shiftRight(t, Scalar.one);\n        }\n\n        this.w = [];\n        this.w[this.s] = this.exp(this.nqr, t);\n\n        for (let i= this.s-1; i>=0; i--) {\n            this.w[i] = this.square(this.w[i+1]);\n        }\n\n        if (!this.eq(this.w[0], this.one)) {\n            throw new Error(\"Error calculating roots of unity\");\n        }\n\n        this.batchToMontgomery = buildBatchConvert(tm, prefix + \"_batchToMontgomery\", this.n8, this.n8);\n        this.batchFromMontgomery = buildBatchConvert(tm, prefix + \"_batchFromMontgomery\", this.n8, this.n8);\n    }\n\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        let ra = Scalar.e(a, b);\n        if (Scalar.isNegative(ra)) {\n            ra = Scalar.neg(ra);\n            if (Scalar.gt(ra, this.p)) {\n                ra = Scalar.mod(ra, this.p);\n            }\n            ra = Scalar.sub(this.p, ra);\n        } else {\n            if (Scalar.gt(ra, this.p)) {\n                ra = Scalar.mod(ra, this.p);\n            }\n        }\n        const buff = utils.leInt2Buff(ra, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toString(a, radix) {\n        const an = this.fromMontgomery(a);\n        const s = Scalar.fromRprLE(an, 0);\n        return Scalar.toString(s, radix);\n    }\n\n    fromRng(rng) {\n        let v;\n        const buff = new Uint8Array(this.n8);\n        do {\n            v = Scalar.zero;\n            for (let i=0; i<this.n64; i++) {\n                v = Scalar.add(v,  Scalar.shiftLeft(rng.nextU64(), 64*i));\n            }\n            v = Scalar.band(v, this.mask);\n        } while (Scalar.geq(v, this.p));\n        Scalar.toRprLE(buff, 0, v, this.n8);\n        return buff;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const an = this.fromMontgomery(a);\n        return Scalar.fromRprLE(an, 0);\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.n8);\n        Scalar.toRprLE(buff, 0, a, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toRprLE(buff, offset, a) {\n        buff.set(this.fromMontgomery(a), offset);\n    }\n\n    toRprBE(buff, offset, a) {\n        const buff2 = this.fromMontgomery(a);\n        for (let i=0; i<this.n8/2; i++) {\n            const aux = buff2[i];\n            buff2[i] = buff2[this.n8-1-i];\n            buff2[this.n8-1-i] = aux;\n        }\n        buff.set(buff2, offset);\n    }\n\n    fromRprLE(buff, offset) {\n        offset = offset || 0;\n        const res = buff.slice(offset, offset + this.n8);\n        return this.toMontgomery(res);\n    }\n\n    async batchInverse(buffIn) {\n        let returnArray = false;\n        const sIn = this.n8;\n        const sOut = this.n8;\n\n        if (Array.isArray(buffIn)) {\n            buffIn = utils.array2buffer(buffIn, sIn );\n            returnArray = true;\n        } else {\n            buffIn = buffIn.slice(0, buffIn.byteLength);\n        }\n\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/this.tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<this.tm.concurrency; i++) {\n            let n;\n            if (i< this.tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: this.prefix + \"_batchInverse\", params: [\n                    {var: 0},\n                    {val: sIn},\n                    {val: n},\n                    {var: 1},\n                    {val: sOut},\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                this.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        if (returnArray) {\n            return utils.buffer2array(fullBuffOut, sOut);\n        } else {\n            return fullBuffOut;\n        }\n\n    }\n\n}\n\n\n", "/* global BigInt */\nimport * as Scalar from \"./scalar.js\";\n\nexport function stringifyBigInts(o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return Scalar.fromRprLE(o, 0);\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyBigInts);\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function unstringifyBigInts(o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return BigInt(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return BigInt(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyBigInts);\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function beBuff2int(buff) {\n    let res = BigInt(0);\n    let i = buff.length;\n    let offset = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i > 0) {\n        if (i >= 4) {\n            i -= 4;\n            res += BigInt(buffV.getUint32(i)) << BigInt(offset * 8);\n            offset += 4;\n        } else if (i >= 2) {\n            i -= 2;\n            res += BigInt(buffV.getUint16(i)) << BigInt(offset * 8);\n            offset += 2;\n        } else {\n            i -= 1;\n            res += BigInt(buffV.getUint8(i)) << BigInt(offset * 8);\n            offset += 1;\n        }\n    }\n    return res;\n}\n\nexport function beInt2Buff(n, len) {\n    let r = n;\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = len;\n    while (o > 0) {\n        if (o - 4 >= 0) {\n            o -= 4;\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)));\n            r = r >> BigInt(32);\n        } else if (o - 2 >= 0) {\n            o -= 2;\n            buffV.setUint16(o, Number(r & BigInt(0xffff)));\n            r = r >> BigInt(16);\n        } else {\n            o -= 1;\n            buffV.setUint8(o, Number(r & BigInt(0xff)));\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nexport function leBuff2int(buff) {\n    let res = BigInt(0);\n    let i = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i < buff.length) {\n        if (i + 4 <= buff.length) {\n            res += BigInt(buffV.getUint32(i, true)) << BigInt(i * 8);\n            i += 4;\n        } else if (i + 2 <= buff.length) {\n            res += BigInt(buffV.getUint16(i, true)) << BigInt(i * 8);\n            i += 2;\n        } else {\n            res += BigInt(buffV.getUint8(i, true)) << BigInt(i * 8);\n            i += 1;\n        }\n    }\n    return res;\n}\n\nexport function leInt2Buff(n, len) {\n    let r = n;\n    if (typeof len === \"undefined\") {\n        len = Math.floor((Scalar.bitLength(n) - 1) / 8) + 1;\n        if (len == 0) len = 1;\n    }\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = 0;\n    while (o < len) {\n        if (o + 4 <= len) {\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)), true);\n            o += 4;\n            r = r >> BigInt(32);\n        } else if (o + 2 <= len) {\n            buffV.setUint16(o, Number(r & BigInt(0xffff)), true);\n            o += 2;\n            r = r >> BigInt(16);\n        } else {\n            buffV.setUint8(o, Number(r & BigInt(0xff)), true);\n            o += 1;\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nexport function stringifyFElements(F, o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return F.toString(F.e(o));\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function unstringifyFElements(F, o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return F.e(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return F.e(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nconst _revTable = [];\nfor (let i = 0; i < 256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res = 0;\n    let a = idx;\n    for (let i = 0; i < bits; i++) {\n        res <<= 1;\n        res = res | (a & 1);\n        a >>= 1;\n    }\n    return res;\n}\n\nexport function bitReverse(idx, bits) {\n    return (\n        (_revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xff] << 8) |\n        (_revTable[(idx >>> 8) & 0xff] << 16) |\n        (_revTable[idx & 0xff] << 24)) >>>\n        (32 - bits)\n    );\n}\n\nexport function log2(V) {\n    return (\n        ((V & 0xffff0000) !== 0 ? ((V &= 0xffff0000), 16) : 0) |\n        ((V & 0xff00ff00) !== 0 ? ((V &= 0xff00ff00), 8) : 0) |\n        ((V & 0xf0f0f0f0) !== 0 ? ((V &= 0xf0f0f0f0), 4) : 0) |\n        ((V & 0xcccccccc) !== 0 ? ((V &= 0xcccccccc), 2) : 0) |\n        ((V & 0xaaaaaaaa) !== 0)\n    );\n}\n\nexport function buffReverseBits(buff, eSize) {\n    const n = buff.byteLength / eSize;\n    const bits = log2(n);\n    if (n != 1 << bits) {\n        throw new Error(\"Invalid number of pointers\");\n    }\n    for (let i = 0; i < n; i++) {\n        const r = bitReverse(i, bits);\n        if (i > r) {\n            const tmp = buff.slice(i * eSize, (i + 1) * eSize);\n            buff.set(buff.slice(r * eSize, (r + 1) * eSize), i * eSize);\n            buff.set(tmp, r * eSize);\n        }\n    }\n}\n\nexport function array2buffer(arr, sG) {\n    const buff = new Uint8Array(sG * arr.length);\n\n    for (let i = 0; i < arr.length; i++) {\n        buff.set(arr[i], i * sG);\n    }\n\n    return buff;\n}\n\nexport function buffer2array(buff, sG) {\n    const n = buff.byteLength / sG;\n    const arr = new Array(n);\n    for (let i = 0; i < n; i++) {\n        arr[i] = buff.slice(i * sG, i * sG + sG);\n    }\n    return arr;\n}\n", "import BigBuffer from \"./bigbuffer.js\";\n\nexport default function buildBatchConvert(tm, fnName, sIn, sOut) {\n    return async function batchConvert(buffIn) {\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1}\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n", "\nconst PAGE_SIZE = 1<<30;\n\nexport default class BigBuffer {\n\n    constructor(size) {\n        this.buffers = [];\n        this.byteLength = size;\n        for (let i=0; i<size; i+= PAGE_SIZE) {\n            const n = Math.min(size-i, PAGE_SIZE);\n            this.buffers.push(new Uint8Array(n));\n        }\n\n    }\n\n    slice(fr, to) {\n        if ( to === undefined ) to = this.byteLength;\n        if ( fr === undefined ) fr = 0;\n        const len = to-fr;\n\n        const firstPage = Math.floor(fr / PAGE_SIZE);\n        const lastPage = Math.floor((fr+len-1) / PAGE_SIZE);\n\n        if ((firstPage == lastPage)||(len==0))\n            return this.buffers[firstPage].slice(fr%PAGE_SIZE, fr%PAGE_SIZE + len);\n\n        let buff;\n\n        let p = firstPage;\n        let o = fr % PAGE_SIZE;\n        // Remaining bytes to read\n        let r = len;\n        while (r>0) {\n            // bytes to copy from this page\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset+o, l);\n            if (l == len) return srcView.slice();\n            if (!buff) {\n                if (len <= PAGE_SIZE) {\n                    buff = new Uint8Array(len);\n                } else {\n                    buff = new BigBuffer(len);\n                }\n            }\n            buff.set(srcView, len-r);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n        return buff;\n    }\n\n    set(buff, offset) {\n        if (offset === undefined) offset = 0;\n\n        const len = buff.byteLength;\n\n        if (len==0) return;\n\n        const firstPage = Math.floor(offset / PAGE_SIZE);\n        const lastPage = Math.floor((offset+len-1) / PAGE_SIZE);\n\n        if (firstPage == lastPage) {\n            if ((buff instanceof BigBuffer)&&(buff.buffers.length==1)) {\n                return this.buffers[firstPage].set(buff.buffers[0], offset % PAGE_SIZE);\n            } else {\n                return this.buffers[firstPage].set(buff, offset % PAGE_SIZE);\n            }\n\n        }\n\n\n        let p = firstPage;\n        let o = offset % PAGE_SIZE;\n        let r = len;\n        while (r>0) {\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = buff.slice( len -r, len -r+l);\n            const dstView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset + o, l);\n            dstView.set(srcView);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n    }\n}\n", "import { getThreadRng } from \"./random.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nexport default class WasmField2 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F2\";\n        this.m = F.m * 2;\n        this.n8 = this.F.n8*2;\n        this.n32 = this.F.n32*2;\n        this.n64 = this.F.n64*2;\n\n        this.pOp1 = tm.alloc(F.n8*2);\n        this.pOp2 = tm.alloc(F.n8*2);\n        this.pOp3 = tm.alloc(F.n8*2);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    mul1(a,b) {\n        return this.op2(\"_mul1\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 2)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const res = new Uint8Array(this.F.n8*2);\n            res.set(c1);\n            res.set(c2, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F2\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8), radix);\n        return `[${s1}, ${s2}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*2);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        return [c1, c2];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8);\n    }\n\n}\n\n", "\n\nimport { getThreadRng } from \"./random.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nexport default class WasmField3 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F3\";\n        this.m = F.m * 3;\n        this.n8 = this.F.n8*3;\n        this.n32 = this.F.n32*3;\n        this.n64 = this.F.n64*3;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 3)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const c3 = this.F.e(a[2], b);\n            const res = new Uint8Array(this.F.n8*3);\n            res.set(c1);\n            res.set(c2, this.F.n8);\n            res.set(c3, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F3\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n        const s3 = this.F.toString(a.slice(this.F.n8*2), radix);\n        return `[${s1}, ${s2}, ${s3}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const c3 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*3);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        res.set(c3, this.F.n8*2);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        const c3 = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        return [c1, c2, c3];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*3);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        const b3 = this.F.fromObject(a[2]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        buff.set(b3, this.F.n8*2);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8, this.F.n8*2);\n    }\n\n    c3(a) {\n        return a.slice(this.F.n8*2);\n    }\n\n}\n\n\n", "\n\nimport * as Scalar from \"./scalar.js\";\nimport buildBatchConvert from \"./engine_batchconvert.js\";\n\nexport default class WasmCurve {\n\n    constructor(tm, prefix, F, pGen, pGb, cofactor) {\n        this.tm = tm;\n        this.prefix = prefix;\n        this.F = F;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, F.n8*3);\n        this.tm.instance.exports[prefix + \"_zeroAffine\"](this.pOp1);\n        this.zeroAffine = this.tm.getBuff(this.pOp1, F.n8*2);\n        this.one = this.tm.getBuff(pGen, F.n8*3);\n        this.g = this.one;\n        this.oneAffine = this.tm.getBuff(pGen, F.n8*2);\n        this.gAffine = this.oneAffine;\n        this.b = this.tm.getBuff(pGb, F.n8);\n\n        if (cofactor) {\n            this.cofactor = Scalar.toLEBuff(cofactor);\n        }\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.batchLEMtoC = buildBatchConvert(tm, prefix + \"_batchLEMtoC\", F.n8*2, F.n8);\n        this.batchLEMtoU = buildBatchConvert(tm, prefix + \"_batchLEMtoU\", F.n8*2, F.n8*2);\n        this.batchCtoLEM = buildBatchConvert(tm, prefix + \"_batchCtoLEM\", F.n8, F.n8*2);\n        this.batchUtoLEM = buildBatchConvert(tm, prefix + \"_batchUtoLEM\", F.n8*2, F.n8*2);\n        this.batchToJacobian = buildBatchConvert(tm, prefix + \"_batchToJacobian\", F.n8*2, F.n8*3);\n        this.batchToAffine = buildBatchConvert(tm, prefix + \"_batchToAffine\", F.n8*3, F.n8*2);\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op2bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op1Affine(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*2);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_add\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_addMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    sub(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_sub\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_subMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    neg(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_neg\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Affine(\"_negAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    double(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_double\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_doubleAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isZero(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Bool(\"_isZero\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Bool(\"_isZeroAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    timesScalar(a, s) {\n        if (!(s instanceof Uint8Array)) {\n            s = Scalar.toLEBuff(Scalar.e(s));\n        }\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesScalar\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesScalarAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, s.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    timesFr(a, s) {\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesFr\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesFrAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    eq(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eq\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eqMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toAffine(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Affine(\"_toAffine\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return a;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toJacobian(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return a;\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_toJacobian\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toRprUncompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoU\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n        arr.set(res, offset);\n    }\n\n    fromRprUncompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8*2);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_UtoLEM\"](this.pOp1, this.pOp1);\n        return this.tm.getBuff(this.pOp1, this.F.n8*2);\n    }\n\n    toRprCompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoC\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8);\n        arr.set(res, offset);\n    }\n\n    fromRprCompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_CtoLEM\"](this.pOp1, this.pOp2);\n        return this.tm.getBuff(this.pOp2, this.F.n8*2);\n    }\n\n    toUncompressed(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        this.toRprUncompressed(buff, 0, a);\n        return buff;\n    }\n\n    toRprLEM(arr, offset, a) {\n        if (a.byteLength == this.F.n8*2) {\n            arr.set(a, offset);\n            return;\n        } else if (a.byteLength == this.F.n8*3) {\n            this.tm.setBuff(this.pOp1, a);\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n            const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n            arr.set(res, offset);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    fromRprLEM(arr, offset) {\n        offset = offset || 0;\n        return arr.slice(offset, offset+this.F.n8*2);\n    }\n\n    toString(a, radix) {\n        if (a.byteLength == this.F.n8*3) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n            const z = this.F.toString(a.slice(this.F.n8*2), radix);\n            return `[ ${x}, ${y}, ${z} ]`;\n        } else if (a.byteLength == this.F.n8*2) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8), radix);\n            return `[ ${x}, ${y} ]`;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isValid(a) {\n        if (this.isZero(a)) return true;\n        const F = this.F;\n        const aa = this.toAffine(a);\n        const x = aa.slice(0, this.F.n8);\n        const y = aa.slice(this.F.n8, this.F.n8*2);\n        const x3b = F.add(F.mul(F.square(x),x), this.b);\n        const y2 = F.square(y);\n        return F.eq(x3b, y2);\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        let x3b;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        } while (!F.isSquare(x3b));\n\n        P[1] = F.sqrt(x3b);\n\n        const s = F.isNegative(P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n\n        let Pbuff = new Uint8Array(this.F.n8*2);\n        Pbuff.set(P[0]);\n        Pbuff.set(P[1], this.F.n8);\n\n        if (this.cofactor) {\n            Pbuff = this.timesScalar(Pbuff, this.cofactor);\n        }\n\n        return Pbuff;\n    }\n\n\n\n    toObject(a) {\n        if (this.isZero(a)) {\n            return [\n                this.F.toObject(this.F.zero),\n                this.F.toObject(this.F.one),\n                this.F.toObject(this.F.zero),\n            ];\n        }\n        const x = this.F.toObject(a.slice(0, this.F.n8));\n        const y = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        let z;\n        if (a.byteLength == this.F.n8*3) {\n            z = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        } else {\n            z = this.F.toObject(this.F.one);\n        }\n        return [x, y, z];\n    }\n\n    fromObject(a) {\n        const x = this.F.fromObject(a[0]);\n        const y = this.F.fromObject(a[1]);\n        let z;\n        if (a.length==3) {\n            z = this.F.fromObject(a[2]);\n        } else {\n            z = this.F.one;\n        }\n        if (this.F.isZero(z, this.F.one)) {\n            return this.zeroAffine;\n        } else if (this.F.eq(z, this.F.one)) {\n            const buff = new Uint8Array(this.F.n8*2);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            return buff;\n        } else {\n            const buff = new Uint8Array(this.F.n8*3);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            buff.set(z, this.F.n8*2);\n            return buff;\n        }\n    }\n\n    e(a) {\n        if (a instanceof Uint8Array) return a;\n        return this.fromObject(a);\n    }\n\n    x(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(0, this.F.n8);\n    }\n\n    y(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(this.F.n8);\n    }\n\n}\n\n\n", "/* global navigator, WebAssembly */\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// const MEM_SIZE = 1000;  // Memory size in 64K Pakes (512Mb)\nconst MEM_SIZE = 25;  // Memory size in 64K Pakes (1600Kb)\n\n\nimport thread from \"./threadman_thread.js\";\nimport os from \"os\";\nimport Worker from \"web-worker\";\n\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject)=> {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction stringToBase64(str) {\n    if (process.browser) {\n        return globalThis.btoa(str);\n    } else {\n        return Buffer.from(str).toString(\"base64\");\n    }\n}\n\nconst threadSource = stringToBase64(\"(\" + thread.toString() + \")(self)\");\nconst workerSource = \"data:application/javascript;base64,\" + threadSource;\n\n\n\nexport default async function buildThreadManager(wasm, singleThread) {\n    const tm = new ThreadManager();\n\n    tm.memory = new WebAssembly.Memory({initial:MEM_SIZE});\n    tm.u8 = new Uint8Array(tm.memory.buffer);\n    tm.u32 = new Uint32Array(tm.memory.buffer);\n\n    const wasmModule = await WebAssembly.compile(wasm.code);\n\n    tm.instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": tm.memory\n        }\n    });\n\n    tm.singleThread = singleThread;\n    tm.initalPFree = tm.u32[0];   // Save the Pointer to free space.\n    tm.pq = wasm.pq;\n    tm.pr = wasm.pr;\n    tm.pG1gen = wasm.pG1gen;\n    tm.pG1zero = wasm.pG1zero;\n    tm.pG2gen = wasm.pG2gen;\n    tm.pG2zero = wasm.pG2zero;\n    tm.pOneT = wasm.pOneT;\n\n    //    tm.pTmp0 = tm.alloc(curve.G2.F.n8*3);\n    //    tm.pTmp1 = tm.alloc(curve.G2.F.n8*3);\n\n\n    if (singleThread) {\n        tm.code = wasm.code;\n        tm.taskManager = thread();\n        await tm.taskManager([{\n            cmd: \"INIT\",\n            init: MEM_SIZE,\n            code: tm.code.slice()\n        }]);\n        tm.concurrency  = 1;\n    } else {\n        tm.workers = [];\n        tm.pendingDeferreds = [];\n        tm.working = [];\n\n        let concurrency;\n\n        if ((typeof(navigator) === \"object\") && navigator.hardwareConcurrency) {\n            concurrency = navigator.hardwareConcurrency;\n        } else {\n            concurrency = os.cpus().length;\n        }\n\n        if(concurrency == 0){\n            concurrency = 2;\n        }\n\n        // Limit to 64 threads for memory reasons.\n        if (concurrency>64) concurrency=64;\n        tm.concurrency = concurrency;\n\n        for (let i = 0; i<concurrency; i++) {\n\n            tm.workers[i] = new Worker(workerSource);\n\n            tm.workers[i].addEventListener(\"message\", getOnMsg(i));\n\n            tm.working[i]=false;\n        }\n\n        const initPromises = [];\n        for (let i=0; i<tm.workers.length;i++) {\n            const copyCode = wasm.code.slice();\n            initPromises.push(tm.postAction(i, [{\n                cmd: \"INIT\",\n                init: MEM_SIZE,\n                code: copyCode\n            }], [copyCode.buffer]));\n        }\n\n        await Promise.all(initPromises);\n\n    }\n    return tm;\n\n    function getOnMsg(i) {\n        return function(e) {\n            let data;\n            if ((e)&&(e.data)) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            tm.working[i]=false;\n            tm.pendingDeferreds[i].resolve(data);\n            tm.processWorks();\n        };\n    }\n\n}\n\nclass ThreadManager {\n    constructor() {\n        this.actionQueue = [];\n        this.oldPFree = 0;\n    }\n\n    startSyncOp() {\n        if (this.oldPFree != 0) throw new Error(\"Sync operation in progress\");\n        this.oldPFree = this.u32[0];\n    }\n\n    endSyncOp() {\n        if (this.oldPFree == 0) throw new Error(\"No sync operation in progress\");\n        this.u32[0] = this.oldPFree;\n        this.oldPFree = 0;\n    }\n\n    postAction(workerId, e, transfers, _deferred) {\n        if (this.working[workerId]) {\n            throw new Error(\"Posting a job t a working worker\");\n        }\n        this.working[workerId] = true;\n\n        this.pendingDeferreds[workerId] = _deferred ? _deferred : new Deferred();\n        this.workers[workerId].postMessage(e, transfers);\n\n        return this.pendingDeferreds[workerId].promise;\n    }\n\n    processWorks() {\n        for (let i=0; (i<this.workers.length)&&(this.actionQueue.length > 0); i++) {\n            if (this.working[i] == false) {\n                const work = this.actionQueue.shift();\n                this.postAction(i, work.data, work.transfers, work.deferred);\n            }\n        }\n    }\n\n    queueAction(actionData, transfers) {\n        const d = new Deferred();\n\n        if (this.singleThread) {\n            const res = this.taskManager(actionData);\n            d.resolve(res);\n        } else {\n            this.actionQueue.push({\n                data: actionData,\n                transfers: transfers,\n                deferred: d\n            });\n            this.processWorks();\n        }\n        return d.promise;\n    }\n\n    resetMemory() {\n        this.u32[0] = this.initalPFree;\n    }\n\n    allocBuff(buff) {\n        const pointer = this.alloc(buff.byteLength);\n        this.setBuff(pointer, buff);\n        return pointer;\n    }\n\n    getBuff(pointer, length) {\n        return this.u8.slice(pointer, pointer+ length);\n    }\n\n    setBuff(pointer, buffer) {\n        this.u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    alloc(length) {\n        while (this.u32[0] & 3) this.u32[0]++;  // Return always aligned pointers\n        const res = this.u32[0];\n        this.u32[0] += length;\n        return res;\n    }\n\n    async terminate() {\n        for (let i=0; i<this.workers.length; i++) {\n            this.workers[i].postMessage([{cmd: \"TERMINATE\"}]);\n        }\n        await sleep(200);\n    }\n\n}\n", "/* global WebAssembly */\n\nexport default function thread(self) {\n    const MAXMEM = 32767;\n    let instance;\n    let memory;\n\n    if (self) {\n        self.onmessage = function(e) {\n            let data;\n            if (e.data) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            if (data[0].cmd == \"INIT\") {\n                init(data[0]).then(function() {\n                    self.postMessage(data.result);\n                });\n            } else if (data[0].cmd == \"TERMINATE\") {\n                self.close();\n            } else {\n                const res = runTask(data);\n                self.postMessage(res);\n            }\n        };\n    }\n\n    async function init(data) {\n        const code = new Uint8Array(data.code);\n        const wasmModule = await WebAssembly.compile(code);\n        memory = new WebAssembly.Memory({initial:data.init, maximum: MAXMEM});\n\n        instance = await WebAssembly.instantiate(wasmModule, {\n            env: {\n                \"memory\": memory\n            }\n        });\n    }\n\n\n\n    function alloc(length) {\n        const u32 = new Uint32Array(memory.buffer, 0, 1);\n        while (u32[0] & 3) u32[0]++;  // Return always aligned pointers\n        const res = u32[0];\n        u32[0] += length;\n        if (u32[0] + length > memory.buffer.byteLength) {\n            const currentPages = memory.buffer.byteLength / 0x10000;\n            let requiredPages = Math.floor((u32[0] + length) / 0x10000)+1;\n            if (requiredPages>MAXMEM) requiredPages=MAXMEM;\n            memory.grow(requiredPages-currentPages);\n        }\n        return res;\n    }\n\n    function allocBuffer(buffer) {\n        const p = alloc(buffer.byteLength);\n        setBuffer(p, buffer);\n        return p;\n    }\n\n    function getBuffer(pointer, length) {\n        const u8 = new Uint8Array(memory.buffer);\n        return new Uint8Array(u8.buffer, u8.byteOffset + pointer, length);\n    }\n\n    function setBuffer(pointer, buffer) {\n        const u8 = new Uint8Array(memory.buffer);\n        u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    function runTask(task) {\n        if (task[0].cmd == \"INIT\") {\n            return init(task[0]);\n        }\n        const ctx = {\n            vars: [],\n            out: []\n        };\n        const u32a = new Uint32Array(memory.buffer, 0, 1);\n        const oldAlloc = u32a[0];\n        for (let i=0; i<task.length; i++) {\n            switch (task[i].cmd) {\n            case \"ALLOCSET\":\n                ctx.vars[task[i].var] = allocBuffer(task[i].buff);\n                break;\n            case \"ALLOC\":\n                ctx.vars[task[i].var] = alloc(task[i].len);\n                break;\n            case \"SET\":\n                setBuffer(ctx.vars[task[i].var], task[i].buff);\n                break;\n            case \"CALL\": {\n                const params = [];\n                for (let j=0; j<task[i].params.length; j++) {\n                    const p = task[i].params[j];\n                    if (typeof p.var !== \"undefined\") {\n                        params.push(ctx.vars[p.var] + (p.offset || 0));\n                    } else if (typeof p.val != \"undefined\") {\n                        params.push(p.val);\n                    }\n                }\n                instance.exports[task[i].fnName](...params);\n                break;\n            }\n            case \"GET\":\n                ctx.out[task[i].out] = getBuffer(ctx.vars[task[i].var], task[i].len).slice();\n                break;\n            default:\n                throw new Error(\"Invalid cmd\");\n            }\n        }\n        const u32b = new Uint32Array(memory.buffer, 0, 1);\n        u32b[0] = oldAlloc;\n        return ctx.out;\n    }\n\n\n    return runTask;\n}\n", "/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 CoderPuppy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\nvar _endianness;\nexport function endianness() {\n  if (typeof _endianness === 'undefined') {\n    var a = new ArrayBuffer(2);\n    var b = new Uint8Array(a);\n    var c = new Uint16Array(a);\n    b[0] = 1;\n    b[1] = 2;\n    if (c[0] === 258) {\n      _endianness = 'BE';\n    } else if (c[0] === 513){\n      _endianness = 'LE';\n    } else {\n      throw new Error('unable to figure out endianess');\n    }\n  }\n  return _endianness;\n}\n\nexport function hostname() {\n  if (typeof global.location !== 'undefined') {\n    return global.location.hostname\n  } else return '';\n}\n\nexport function loadavg() {\n  return [];\n}\n\nexport function uptime() {\n  return 0;\n}\n\nexport function freemem() {\n  return Number.MAX_VALUE;\n}\n\nexport function totalmem() {\n  return Number.MAX_VALUE;\n}\n\nexport function cpus() {\n  return [];\n}\n\nexport function type() {\n  return 'Browser';\n}\n\nexport function release () {\n  if (typeof global.navigator !== 'undefined') {\n    return global.navigator.appVersion;\n  }\n  return '';\n}\n\nexport function networkInterfaces(){}\nexport function getNetworkInterfaces(){}\n\nexport function arch() {\n  return 'javascript';\n}\n\nexport function platform() {\n  return 'browser';\n}\n\nexport function tmpDir() {\n  return '/tmp';\n}\nexport var tmpdir = tmpDir;\n\nexport var EOL = '\\n';\nexport default {\n  EOL: EOL,\n  tmpdir: tmpdir,\n  tmpDir: tmpDir,\n  networkInterfaces:networkInterfaces,\n  getNetworkInterfaces: getNetworkInterfaces,\n  release: release,\n  type: type,\n  cpus: cpus,\n  totalmem: totalmem,\n  freemem: freemem,\n  uptime: uptime,\n  loadavg: loadavg,\n  hostname: hostname,\n  endianness: endianness,\n}\n", "import BigBuffer from \"./bigbuffer.js\";\n\nexport default function buildBatchApplyKey(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = curve.tm;\n\n    curve[groupName].batchApplyKey = async function(buff, first, inc, inType, outType) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        let fnName, fnAffine;\n        let sGin, sGmid, sGout;\n        if (groupName == \"G1\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g1m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g1m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g1m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g2m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g2m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g2m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_batchApplyKey\";\n            sGin = G.n8;\n            sGmid = G.n8;\n            sGout = G.n8;\n        } else {\n            throw new Error(\"Invalid group: \" + groupName);\n        }\n        const nPoints = Math.floor(buff.byteLength / sGin);\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        inc = Fr.e(inc);\n        let t = Fr.e(first);\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const task = [];\n\n            task.push({\n                cmd: \"ALLOCSET\",\n                var: 0,\n                buff: buff.slice(i*pointsPerChunk*sGin, i*pointsPerChunk*sGin + n*sGin)\n            });\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: t});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: inc});\n            task.push({cmd: \"ALLOC\", var: 3, len: n*Math.max(sGmid, sGout)});\n            task.push({\n                cmd: \"CALL\",\n                fnName: fnName,\n                params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1},\n                    {var: 2},\n                    {var:3}\n                ]\n            });\n            if (fnAffine) {\n                task.push({\n                    cmd: \"CALL\",\n                    fnName: fnAffine,\n                    params: [\n                        {var: 3},\n                        {val: n},\n                        {var: 3},\n                    ]\n                });\n            }\n            task.push({cmd: \"GET\", out: 0, var: 3, len: n*sGout});\n\n            opPromises.push(tm.queueAction(task));\n            t = Fr.mul(t, Fr.exp(inc, n));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let outBuff;\n        if (buff instanceof BigBuffer) {\n            outBuff = new BigBuffer(nPoints*sGout);\n        } else {\n            outBuff = new Uint8Array(nPoints*sGout);\n        }\n\n        let p=0;\n        for (let i=0; i<result.length; i++) {\n            outBuff.set(result[i][0], p);\n            p += result[i][0].byteLength;\n        }\n\n        return outBuff;\n    };\n}\n", "\nexport default function buildPairing(curve) {\n    const tm = curve.tm;\n    curve.pairing = function pairing(a, b) {\n\n        tm.startSyncOp();\n        const pA = tm.allocBuff(curve.G1.toJacobian(a));\n        const pB = tm.allocBuff(curve.G2.toJacobian(b));\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports[curve.name + \"_pairing\"](pA, pB, pRes);\n\n        const res = tm.getBuff(pRes, curve.Gt.n8);\n\n        tm.endSyncOp();\n        return res;\n    };\n\n    curve.pairingEq = async function pairingEq() {\n        let  buffCt;\n        let nEqs;\n        if ((arguments.length % 2) == 1) {\n            buffCt = arguments[arguments.length-1];\n            nEqs = (arguments.length -1) /2;\n        } else {\n            buffCt = curve.Gt.one;\n            nEqs = arguments.length /2;\n        }\n\n        const opPromises = [];\n        for (let i=0; i<nEqs; i++) {\n\n            const task = [];\n\n            const g1Buff = curve.G1.toJacobian(arguments[i*2]);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: g1Buff});\n            task.push({cmd: \"ALLOC\", var: 1, len: curve.prePSize});\n\n            const g2Buff = curve.G2.toJacobian(arguments[i*2 +1]);\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: g2Buff});\n            task.push({cmd: \"ALLOC\", var: 3, len: curve.preQSize});\n\n            task.push({cmd: \"ALLOC\", var: 4, len: curve.Gt.n8});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG1\", params: [\n                {var: 0},\n                {var: 1}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG2\", params: [\n                {var: 2},\n                {var: 3}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_millerLoop\", params: [\n                {var: 1},\n                {var: 3},\n                {var: 4}\n            ]});\n\n            task.push({cmd: \"GET\", out: 0, var: 4, len: curve.Gt.n8});\n\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        tm.startSyncOp();\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports.ftm_one(pRes);\n\n        for (let i=0; i<result.length; i++) {\n            const pMR = tm.allocBuff(result[i][0]);\n            tm.instance.exports.ftm_mul(pRes, pMR, pRes);\n        }\n        tm.instance.exports[curve.name + \"_finalExponentiation\"](pRes, pRes);\n\n        const pCt = tm.allocBuff(buffCt);\n\n        const r = !!tm.instance.exports.ftm_eq(pRes, pCt);\n\n        tm.endSyncOp();\n\n        return r;\n    };\n\n    curve.prepareG1 = function(p) {\n        this.tm.startSyncOp();\n        const pP = this.tm.allocBuff(p);\n        const pPrepP = this.tm.alloc(this.prePSize);\n        this.tm.instance.exports[this.name + \"_prepareG1\"](pP, pPrepP);\n        const res = this.tm.getBuff(pPrepP, this.prePSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.prepareG2 = function(q) {\n        this.tm.startSyncOp();\n        const pQ = this.tm.allocBuff(q);\n        const pPrepQ = this.tm.alloc(this.preQSize);\n        this.tm.instance.exports[this.name + \"_prepareG2\"](pQ, pPrepQ);\n        const res = this.tm.getBuff(pPrepQ, this.preQSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.millerLoop = function(preP, preQ) {\n        this.tm.startSyncOp();\n        const pPreP = this.tm.allocBuff(preP);\n        const pPreQ = this.tm.allocBuff(preQ);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_millerLoop\"](pPreP, pPreQ, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.finalExponentiation = function(a) {\n        this.tm.startSyncOp();\n        const pA = this.tm.allocBuff(a);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_finalExponentiation\"](pA, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n}\n", "import { log2 } from \"./utils.js\";\n\nconst pTSizes = [\n    1 ,  1,  1,  1,    2,  3,  4,  5,\n    6 ,  7,  7,  8,    9, 10, 11, 12,\n    13, 13, 14, 15,   16, 16, 17, 17,\n    17, 17, 17, 17,   17, 17, 17, 17\n];\n\nexport default function buildMultiexp(curve, groupName) {\n    const G = curve[groupName];\n    const tm = G.tm;\n    async function _multiExpChunk(buffBases, buffScalars, inType, logger, logText) {\n        if ( ! (buffBases instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n        }\n        if ( ! (buffScalars instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n        }\n        inType = inType || \"affine\";\n\n        let sGIn;\n        let fnName;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                fnName = \"g1m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g1m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                fnName = \"g2m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g2m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n\n        if (nPoints == 0) return G.zero;\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff: buffBases},\n                {cmd: \"ALLOCSET\", var: 1, buff: buffScalars},\n                {cmd: \"ALLOC\", var: 2, len: G.F.n8*3},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {var: 1},\n                    {val: sScalar},\n                    {val: nPoints},\n                    {val: i*bitChunkSize},\n                    {val: Math.min(sScalar*8 - i*bitChunkSize, bitChunkSize)},\n                    {var: 2}\n                ]},\n                {cmd: \"GET\", out: 0, var: 2, len: G.F.n8*3}\n            ];\n            opPromises.push(\n                G.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            if (!G.isZero(res)) {\n                for (let j=0; j<bitChunkSize; j++) res = G.double(res);\n            }\n            res = G.add(res, result[i][0]);\n        }\n\n        return res;\n    }\n\n    async function _multiExp(buffBases, buffScalars, inType, logger, logText) {\n        const MAX_CHUNK_SIZE = 1 << 22;\n        const MIN_CHUNK_SIZE = 1 << 10;\n        let sGIn;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        let chunkSize;\n        chunkSize = Math.floor(nPoints / (tm.concurrency /nChunks));\n        if (chunkSize>MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n        if (chunkSize<MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n\n        const opPromises = [];\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`Multiexp start: ${logText}: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n            const buffBasesChunk = buffBases.slice(i*sGIn, (i+n)*sGIn);\n            const buffScalarsChunk = buffScalars.slice(i*sScalar, (i+n)*sScalar);\n            opPromises.push(_multiExpChunk(buffBasesChunk, buffScalarsChunk, inType, logger, logText).then( (r) => {\n                if (logger) logger.debug(`Multiexp end: ${logText}: ${i}/${nPoints}`);\n                return r;\n            }));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            res = G.add(res, result[i]);\n        }\n\n        return res;\n    }\n\n    G.multiExp = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"jacobian\", logger, logText);\n    };\n    G.multiExpAffine = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"affine\", logger, logText);\n    };\n}\n", "import {log2, buffReverseBits, array2buffer, buffer2array} from \"./utils.js\";\nimport BigBuffer from \"./bigbuffer.js\";\n\n\nexport default function buildFFT(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = G.tm;\n    async function _fft(buff, inverse, inType, outType, logger, loggerTxt) {\n\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        const MAX_BITS_THREAD = 14;\n\n        let sIn, sMid, sOut, fnIn2Mid, fnMid2Out, fnFFTMix, fnFFTJoin, fnFFTFinal;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g1m_fftFinal\";\n            }\n            fnFFTJoin = \"g1m_fftJoin\";\n            fnFFTMix = \"g1m_fftMix\";\n\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g1m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g2m_fftFinal\";\n            }\n            fnFFTJoin = \"g2m_fftJoin\";\n            fnFFTMix = \"g2m_fftMix\";\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g2m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = G.n8;\n            sMid = G.n8;\n            sOut = G.n8;\n            if (inverse) {\n                fnFFTFinal = \"frm_fftFinal\";\n            }\n            fnFFTMix = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        }\n\n\n        let returnArray = false;\n        if (Array.isArray(buff)) {\n            buff = array2buffer(buff, sIn);\n            returnArray = true;\n        } else {\n            buff = buff.slice(0, buff.byteLength);\n        }\n\n        const nPoints = buff.byteLength / sIn;\n        const bits = log2(nPoints);\n\n        if  ((1 << bits) != nPoints) {\n            throw new Error(\"fft must be multiple of 2\" );\n        }\n\n        if (bits == Fr.s +1) {\n            let buffOut;\n\n            if (inverse) {\n                buffOut =  await _fftExtInv(buff, inType, outType, logger, loggerTxt);\n            } else {\n                buffOut =  await _fftExt(buff, inType, outType, logger, loggerTxt);\n            }\n\n            if (returnArray) {\n                return buffer2array(buffOut, sOut);\n            } else {\n                return buffOut;\n            }\n        }\n\n        let inv;\n        if (inverse) {\n            inv = Fr.inv(Fr.e(nPoints));\n        }\n\n        let buffOut;\n\n        buffReverseBits(buff, sIn);\n\n        let chunks;\n        let pointsInChunk = Math.min(1 << MAX_BITS_THREAD, nPoints);\n        let nChunks = nPoints / pointsInChunk;\n\n        while ((nChunks < tm.concurrency)&&(pointsInChunk>=16)) {\n            nChunks *= 2;\n            pointsInChunk /= 2;\n        }\n\n        const l2Chunk = log2(pointsInChunk);\n\n        const promises = [];\n        for (let i = 0; i< nChunks; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix start: ${i}/${nChunks}`);\n            const task = [];\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*pointsInChunk});\n            const buffChunk = buff.slice( (pointsInChunk * i)*sIn, (pointsInChunk * (i+1))*sIn);\n            task.push({cmd: \"SET\", var: 0, buff: buffChunk});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n            }\n            for (let j=1; j<=l2Chunk;j++) {\n                task.push({cmd: \"CALL\", fnName:fnFFTMix, params: [{var:0}, {val: pointsInChunk}, {val: j}]});\n            }\n\n            if (l2Chunk==bits) {\n                if (fnFFTFinal) {\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: inv});\n                    task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                        {var: 0},\n                        {val: pointsInChunk},\n                        {var: 1},\n                    ]});\n                }\n                if (fnMid2Out) {\n                    task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                }\n                task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n            } else {\n                task.push({cmd: \"GET\", out:0, var: 0, len: sMid*pointsInChunk});\n            }\n            promises.push(tm.queueAction(task).then( (r) => {\n                if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix end: ${i}/${nChunks}`);\n                return r;\n            }));\n        }\n\n        chunks = await Promise.all(promises);\n        for (let i = 0; i< nChunks; i++) chunks[i] = chunks[i][0];\n\n        for (let i = l2Chunk+1;   i<=bits; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft  ${bits}  join: ${i}/${bits}`);\n            const nGroups = 1 << (bits - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsInChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsInChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    if (i==bits) {\n                        if (fnFFTFinal) {\n                            task.push({cmd: \"ALLOCSET\", var: 4, buff: inv});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 0},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 1},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                        }\n                        if (fnMid2Out) {\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: pointsInChunk}, {var: 1}]});\n                        }\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sOut});\n                    } else {\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sMid});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sMid});\n                    }\n                    opPromises.push(tm.queueAction(task).then( (r) => {\n                        if (logger) logger.debug(`${loggerTxt}: fft ${bits} join  ${i}/${bits}  ${j+1}/${nGroups} ${k}/${nChunksPerGroup/2}`);\n                        return r;\n                    }));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        if (buff instanceof BigBuffer) {\n            buffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            buffOut = new Uint8Array(nPoints*sOut);\n        }\n        if (inverse) {\n            buffOut.set(chunks[0].slice((pointsInChunk-1)*sOut));\n            let p= sOut;\n            for (let i=nChunks-1; i>0; i--) {\n                buffOut.set(chunks[i], p);\n                p += pointsInChunk*sOut;\n                delete chunks[i];  // Liberate mem\n            }\n            buffOut.set(chunks[0].slice(0, (pointsInChunk-1)*sOut), p);\n            delete chunks[0];\n        } else {\n            for (let i=0; i<nChunks; i++) {\n                buffOut.set(chunks[i], pointsInChunk*sOut*i);\n                delete chunks[i];\n            }\n        }\n\n        if (returnArray) {\n            return buffer2array(buffOut, sOut);\n        } else {\n            return buffOut;\n        }\n    }\n\n    async function _fftExt(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        [b1, b2] = await _fftJoinExt(b1, b2, \"fftJoinExt\", Fr.one, Fr.shift, inType, \"jacobian\", logger, loggerTxt);\n\n        promises.push( _fft(b1, false, \"jacobian\", outType, logger, loggerTxt));\n        promises.push( _fft(b2, false, \"jacobian\", outType, logger, loggerTxt));\n\n        const res1 = await Promise.all(promises);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n    async function _fftExtInv(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        promises.push( _fft(b1, true, inType, \"jacobian\", logger, loggerTxt));\n        promises.push( _fft(b2, true, inType, \"jacobian\", logger, loggerTxt));\n\n        [b1, b2] = await Promise.all(promises);\n\n        const res1 = await _fftJoinExt(b1, b2, \"fftJoinExtInv\", Fr.one, Fr.shiftInv, \"jacobian\", outType, logger, loggerTxt);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n\n    async function _fftJoinExt(buff1, buff2, fn, first, inc, inType, outType, logger, loggerTxt) {\n        const MAX_CHUNK_SIZE = 1<<16;\n        const MIN_CHUNK_SIZE = 1<<4;\n\n        let fnName;\n        let fnIn2Mid, fnMid2Out;\n        let sOut, sIn, sMid;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            fnName = \"g1m_\"+fn;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g1m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            fnName = \"g2m_\"+fn;\n            sMid = G.F.n8*3;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g2m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n            sOut = Fr.n8;\n            sMid = Fr.n8;\n            fnName = \"frm_\" + fn;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sIn);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let chunkSize = Math.floor(nPoints /tm.concurrency);\n        if (chunkSize < MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n        if (chunkSize > MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n\n        const opPromises = [];\n\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`${loggerTxt}: fftJoinExt Start: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n\n            const firstChunk = Fr.mul(first, Fr.exp( inc, i));\n            const task = [];\n\n            const b1 = buff1.slice(i*sIn, (i+n)*sIn);\n            const b2 = buff2.slice(i*sIn, (i+n)*sIn);\n\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*n});\n            task.push({cmd: \"SET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOC\", var: 1, len: sMid*n});\n            task.push({cmd: \"SET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: n},\n                {var: 2},\n                {var: 3},\n                {val: Fr.s},\n            ]});\n            if (fnMid2Out) {\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sOut});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: n*sOut});\n            opPromises.push(\n                tm.queueAction(task).then( (r) => {\n                    if (logger) logger.debug(`${loggerTxt}: fftJoinExt End: ${i}/${nPoints}`);\n                    return r;\n                })\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (nPoints * sOut > 1<<28) {\n            fullBuffOut1 = new BigBuffer(nPoints*sOut);\n            fullBuffOut2 = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sOut);\n            fullBuffOut2 = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    }\n\n\n    G.fft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, false, inType, outType, logger, loggerTxt);\n    };\n\n    G.ifft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, true, inType, outType, logger, loggerTxt);\n    };\n\n    G.lagrangeEvaluations = async function (buff, inType, outType, logger, loggerTxt) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n\n        let sIn;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = buff.byteLength /sIn;\n        const bits = log2(nPoints);\n\n        if ((2 ** bits)*sIn != buff.byteLength) {\n            if (logger) logger.error(\"lagrangeEvaluations iinvalid input size\");\n            throw new Error(\"lagrangeEvaluations invalid Input size\");\n        }\n\n        if (bits <= Fr.s) {\n            return await G.ifft(buff, inType, outType, logger, loggerTxt);\n        }\n\n        if (bits > Fr.s+1) {\n            if (logger) logger.error(\"lagrangeEvaluations input too big\");\n            throw new Error(\"lagrangeEvaluations input too big\");\n        }\n\n        let t0 = buff.slice(0, buff.byteLength/2);\n        let t1 = buff.slice(buff.byteLength/2, buff.byteLength);\n\n\n        const shiftToSmallM = Fr.exp(Fr.shift, nPoints/2);\n        const sConst = Fr.inv( Fr.sub(Fr.one, shiftToSmallM));\n\n        [t0, t1] = await _fftJoinExt(t0, t1, \"prepareLagrangeEvaluation\", sConst, Fr.shiftInv, inType, \"jacobian\", logger, loggerTxt + \" prep\");\n\n        const promises = [];\n\n        promises.push( _fft(t0, true, \"jacobian\", outType, logger, loggerTxt + \" t0\"));\n        promises.push( _fft(t1, true, \"jacobian\", outType, logger, loggerTxt + \" t1\"));\n\n        [t0, t1] = await Promise.all(promises);\n\n        let buffOut;\n        if (t0.byteLength > (1<<28)) {\n            buffOut = new BigBuffer(t0.byteLength*2);\n        } else {\n            buffOut = new Uint8Array(t0.byteLength*2);\n        }\n\n        buffOut.set(t0);\n        buffOut.set(t1, t0.byteLength);\n\n        return buffOut;\n    };\n\n    G.fftMix = async function fftMix(buff) {\n        const sG = G.F.n8*3;\n        let fnName, fnFFTJoin;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftMix\";\n            fnFFTJoin = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftMix\";\n            fnFFTJoin = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        const power = log2(nPoints);\n\n        let nChunks = 1 << log2(tm.concurrency);\n\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n        const powerChunk = log2(pointsPerChunk);\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            for (let j=1; j<=powerChunk; j++) {\n                task.push({cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: pointsPerChunk},\n                    {val: j}\n                ]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        const chunks = [];\n        for (let i=0; i<result.length; i++) chunks[i] = result[i][0];\n\n\n        for (let i = powerChunk+1; i<=power; i++) {\n            const nGroups = 1 << (power - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsPerChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsPerChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n                    task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n                    opPromises.push(tm.queueAction(task));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sG);\n        }\n        let p =0;\n        for (let i=0; i<nChunks; i++) {\n            fullBuffOut.set(chunks[i], p);\n            p+=chunks[i].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n\n    G.fftJoin = async function fftJoin(buff1, buff2, first, inc) {\n        const sG = G.F.n8*3;\n        let fnName;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let nChunks = 1 << log2(tm.concurrency);\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n\n            const firstChunk = Fr.mul(first, Fr.exp(inc, i*pointsPerChunk));\n            const b1 = buff1.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            const b2 = buff2.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: pointsPerChunk},\n                {var: 2},\n                {var: 3}\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (buff1 instanceof BigBuffer) {\n            fullBuffOut1 = new BigBuffer(nPoints*sG);\n            fullBuffOut2 = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sG);\n            fullBuffOut2 = new Uint8Array(nPoints*sG);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    };\n\n\n\n    G.fftFinal =  async function fftFinal(buff, factor) {\n        const sG = G.F.n8*3;\n        const sGout = G.F.n8*2;\n        let fnName, fnToAffine;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftFinal\";\n            fnToAffine = \"g1m_batchToAffine\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftFinal\";\n            fnToAffine = \"g2m_batchToAffine\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        const pointsPerChunk = Math.floor(nPoints / tm.concurrency);\n\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, (i*pointsPerChunk+n)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: factor});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {val: n},\n                {var: 1},\n            ]});\n            task.push({cmd: \"CALL\", fnName: fnToAffine, params: [\n                {var: 0},\n                {val: n},\n                {var: 0},\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sGout});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sGout);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sGout);\n        }\n\n        let p =0;\n        for (let i=result.length-1; i>=0; i--) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport { ModuleBuilder } from \"./src/modulebuilder.js\";\nexport { ModuleBuilderWat } from \"./src/modulebuilder_wat.js\";\nexport { buildProtoboard } from \"./src/protoboard.js\";\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nimport { FunctionBuilder } from \"./functionbuilder.js\";\nimport * as utils from \"./utils.js\";\n\nexport class ModuleBuilder {\n\n    constructor() {\n        this.functions = [];\n        this.functionIdxByName = {};\n        this.nImportFunctions = 0;\n        this.nInternalFunctions =0;\n        this.memory = {\n            pagesSize: 1,\n            moduleName: \"env\",\n            fieldName: \"memory\"\n        };\n        this.free = 8;\n        this.datas = [];\n        this.modules = {};\n        this.exports = [];\n        this.functionsTable = [];\n    }\n\n    build() {\n        this._setSignatures();\n        return new Uint8Array([\n            ...utils.u32(0x6d736100),\n            ...utils.u32(1),\n            ...this._buildType(),\n            ...this._buildImport(),\n            ...this._buildFunctionDeclarations(),\n            ...this._buildFunctionsTable(),\n            ...this._buildExports(),\n            ...this._buildElements(),\n            ...this._buildCode(),\n            ...this._buildData()\n        ]);\n    }\n\n    addFunction(fnName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilder(this, fnName, \"internal\"));\n\n        this.nInternalFunctions++;\n        return this.functions[idx];\n    }\n\n    addIimportFunction(fnName, moduleName, _fieldName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        if (  (this.functions.length>0)\n            &&(this.functions[this.functions.length-1].type == \"internal\"))\n            throw new Error(`Import functions must be declared before internal: ${fnName}`);\n\n        let fieldName = _fieldName || fnName;\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilder(this, fnName, \"import\", moduleName, fieldName));\n\n        this.nImportFunctions ++;\n        return this.functions[idx];\n    }\n\n    setMemory(pagesSize, moduleName, fieldName) {\n        this.memory = {\n            pagesSize: pagesSize,\n            moduleName: moduleName || \"env\",\n            fieldName: fieldName || \"memory\"\n        };\n    }\n\n    exportFunction(fnName, _exportName) {\n        const exportName = _exportName || fnName;\n        if (typeof(this.functionIdxByName[fnName]) === \"undefined\")\n            throw new Error(`Function not defined: ${fnName}`);\n        const idx = this.functionIdxByName[fnName];\n        if (exportName != fnName) {\n            this.functionIdxByName[exportName] = idx;\n        }\n        this.exports.push({\n            exportName: exportName,\n            idx: idx\n        });\n    }\n\n    addFunctionToTable(fnName) {\n        const idx = this.functionIdxByName[fnName];\n        this.functionsTable.push(idx);\n    }\n\n    addData(offset, bytes) {\n        this.datas.push({\n            offset: offset,\n            bytes: bytes\n        });\n    }\n\n    alloc(a, b) {\n        let size;\n        let bytes;\n        if ((Array.isArray(a) || ArrayBuffer.isView(a)) && (typeof(b) === \"undefined\")) {\n            size = a.length;\n            bytes = a;\n        } else {\n            size = a;\n            bytes = b;\n        }\n        size = (((size-1)>>3) +1)<<3;       // Align to 64 bits.\n        const p = this.free;\n        this.free += size;\n        if (bytes) {\n            this.addData(p, bytes);\n        }\n        return p;\n    }\n\n    allocString(s) {\n        const encoder = new globalThis.TextEncoder();\n        const uint8array = encoder.encode(s);\n        return this.alloc([...uint8array, 0]);\n    }\n\n    _setSignatures() {\n        this.signatures = [];\n        const signatureIdxByName = {};\n        if (this.functionsTable.length>0) {\n            const signature = this.functions[this.functionsTable[0]].getSignature();\n            const signatureName = \"s_\"+utils.toHexString(signature);\n            signatureIdxByName[signatureName] = 0;\n            this.signatures.push(signature);\n        }\n        for (let i=0; i<this.functions.length; i++) {\n            const signature = this.functions[i].getSignature();\n            const signatureName = \"s_\"+utils.toHexString(signature);\n            if (typeof(signatureIdxByName[signatureName]) === \"undefined\") {\n                signatureIdxByName[signatureName] = this.signatures.length;\n                this.signatures.push(signature);\n            }\n\n            this.functions[i].signatureIdx = signatureIdxByName[signatureName];\n        }\n\n    }\n\n    _buildSection(sectionType, section) {\n        return [sectionType, ...utils.varuint32(section.length), ...section];\n    }\n\n    _buildType() {\n        return this._buildSection(\n            0x01,\n            [\n                ...utils.varuint32(this.signatures.length),\n                ...[].concat(...this.signatures)\n            ]\n        );\n    }\n\n    _buildImport() {\n        const entries = [];\n        entries.push([\n            ...utils.string(this.memory.moduleName),\n            ...utils.string(this.memory.fieldName),\n            0x02,\n            0x00,   //Flags no init valua\n            ...utils.varuint32(this.memory.pagesSize)\n        ]);\n        for (let i=0; i< this.nImportFunctions; i++) {\n            entries.push([\n                ...utils.string(this.functions[i].moduleName),\n                ...utils.string(this.functions[i].fieldName),\n                0x00,\n                ...utils.varuint32(this.functions[i].signatureIdx)\n            ]);\n        }\n        return this._buildSection(\n            0x02,\n            utils.varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildFunctionDeclarations() {\n        const entries = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            entries.push(...utils.varuint32(this.functions[i].signatureIdx));\n        }\n        return this._buildSection(\n            0x03,\n            [\n                ...utils.varuint32(entries.length),\n                ...[...entries]\n            ]\n        );\n    }\n\n    _buildFunctionsTable() {\n        if (this.functionsTable.length == 0) return [];\n        return this._buildSection(\n            0x04,\n            [\n                ...utils.varuint32(1),\n                0x70, 0, ...utils.varuint32(this.functionsTable.length)\n            ]\n        );\n    }\n\n    _buildElements() {\n        if (this.functionsTable.length == 0) return [];\n        const entries = [];\n        for (let i=0; i<this.functionsTable.length; i++) {\n            entries.push(...utils.varuint32(this.functionsTable[i]));\n        }\n        return this._buildSection(\n            0x09,\n            [\n                ...utils.varuint32(1),      // 1 entry\n                ...utils.varuint32(0),      // Table (0 in MVP)\n                0x41,                       // offset 0\n                ...utils.varint32(0),\n                0x0b,\n                ...utils.varuint32(this.functionsTable.length), // Number of elements\n                ...[...entries]\n            ]\n        );\n    }\n\n    _buildExports() {\n        const entries = [];\n        for (let i=0; i< this.exports.length; i++) {\n            entries.push([\n                ...utils.string(this.exports[i].exportName),\n                0x00,\n                ...utils.varuint32(this.exports[i].idx)\n            ]);\n        }\n        return this._buildSection(\n            0x07,\n            utils.varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildCode() {\n        const entries = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            entries.push(this.functions[i].getBody());\n        }\n        return this._buildSection(\n            0x0a,\n            utils.varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildData() {\n        const entries = [];\n        entries.push([\n            0x00,\n            0x41,\n            0x00,\n            0x0b,\n            0x04,\n            ...utils.u32(this.free)\n        ]);\n        for (let i=0; i< this.datas.length; i++) {\n            entries.push([\n                0x00,\n                0x41,\n                ...utils.varint32(this.datas[i].offset),\n                0x0b,\n                ...utils.varuint32(this.datas[i].bytes.length),\n                ...this.datas[i].bytes,\n            ]);\n        }\n        return this._buildSection(\n            0x0b,\n            utils.varuint32(entries.length).concat(...entries)\n        );\n    }\n\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { CodeBuilder } from \"./codebuilder.js\";\nimport * as utils from \"./utils.js\";\n\nconst typeCodes = {\n    \"i32\": 0x7f,\n    \"i64\": 0x7e,\n    \"f32\": 0x7d,\n    \"f64\": 0x7c,\n    \"anyfunc\": 0x70,\n    \"func\": 0x60,\n    \"emptyblock\": 0x40\n};\n\n\nexport class FunctionBuilder {\n\n    constructor (module, fnName, fnType, moduleName, fieldName) {\n        if (fnType == \"import\") {\n            this.fnType = \"import\";\n            this.moduleName = moduleName;\n            this.fieldName = fieldName;\n        } else if (fnType == \"internal\") {\n            this.fnType = \"internal\";\n        } else {\n            throw new Error(\"Invalid function fnType: \" + fnType);\n        }\n        this.module = module;\n        this.fnName = fnName;\n        this.params = [];\n        this.locals = [];\n        this.localIdxByName = {};\n        this.code = [];\n        this.returnType = null;\n        this.nextLocal =0;\n    }\n\n    addParam(paramName, paramType) {\n        if (this.localIdxByName[paramName])\n            throw new Error(`param already exists. Function: ${this.fnName}, Param: ${paramName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[paramName] = idx;\n        this.params.push({\n            type: paramType\n        });\n    }\n\n    addLocal(localName, localType, _length) {\n        const length = _length || 1;\n        if (this.localIdxByName[localName])\n            throw new Error(`local already exists. Function: ${this.fnName}, Param: ${localName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[localName] = idx;\n        this.locals.push({\n            type: localType,\n            length: length\n        });\n    }\n\n    setReturnType(returnType) {\n        if (this.returnType)\n            throw new Error(`returnType already defined. Function: ${this.fnName}`);\n        this.returnType = returnType;\n    }\n\n    getSignature() {\n        const params = [...utils.varuint32(this.params.length), ...this.params.map((p) => typeCodes[p.type])];\n        const returns = this.returnType ? [0x01, typeCodes[this.returnType]] : [0];\n        return [0x60, ...params, ...returns];\n    }\n\n    getBody() {\n        const locals = this.locals.map((l) => [\n            ...utils.varuint32(l.length),\n            typeCodes[l.type]\n        ]);\n\n        const body = [\n            ...utils.varuint32(this.locals.length),\n            ...[].concat(...locals),\n            ...this.code,\n            0x0b\n        ];\n        return [\n            ...utils.varuint32(body.length),\n            ...body\n        ];\n    }\n\n    addCode(...code) {\n        this.code.push(...[].concat(...[...code]));\n    }\n\n    getCodeBuilder() {\n        return new CodeBuilder(this);\n    }\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as utils from \"./utils.js\";\n\nexport class CodeBuilder {\n    constructor(func) {\n        this.func = func;\n        this.functionName = func.functionName;\n        this.module = func.module;\n    }\n\n    setLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [...valCode, 0x21, ...utils.varuint32( idx )];\n    }\n\n    teeLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [...valCode, 0x22, ...utils.varuint32( idx )];\n    }\n\n    getLocal(localName) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [0x20, ...utils.varuint32( idx )];\n    }\n\n    i64_load8_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 8 bits alignment by default\n        return [...idxCode, 0x30, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load8_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 8 bits alignment by default\n        return [...idxCode, 0x31, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load16_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 16 bits alignment by default\n        return [...idxCode, 0x32, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load16_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 16 bits alignment by default\n        return [...idxCode, 0x33, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load32_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x34, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load32_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x35, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 3 : _align;  // 64 bits alignment by default\n        return [...idxCode, 0x29, align, ...utils.varuint32(offset)];\n    }\n\n\n    i64_store(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 3;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 3;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x37, align, ...utils.varuint32(offset)];\n    }\n\n    i64_store32(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 2;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 2;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3e, align, ...utils.varuint32(offset)];\n    }\n\n\n    i64_store16(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 1;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 1;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3d, align, ...utils.varuint32(offset)];\n    }\n\n\n    i64_store8(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 0;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 0;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3c, align, ...utils.varuint32(offset)];\n    }\n\n    i32_load8_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2c, align, ...utils.varuint32(offset)];\n    }\n\n    i32_load8_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2d, align, ...utils.varuint32(offset)];\n    }\n\n    i32_load16_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2e, align, ...utils.varuint32(offset)];\n    }\n\n    i32_load16_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2f, align, ...utils.varuint32(offset)];\n    }\n\n    i32_load(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x28, align, ...utils.varuint32(offset)];\n    }\n\n    i32_store(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 2;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 2;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x36, align, ...utils.varuint32(offset)];\n    }\n\n\n    i32_store16(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 1;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 1;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3b, align, ...utils.varuint32(offset)];\n    }\n\n    i32_store8(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 0;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 0;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3a, align, ...utils.varuint32(offset)];\n    }\n\n    call(fnName, ...args) {\n        const idx = this.module.functionIdxByName[fnName];\n        if (idx === undefined)\n            throw new Error(`Function not defined: Function: ${fnName}`);\n        return [...[].concat(...args), 0x10, ...utils.varuint32(idx)];\n    }\n\n    call_indirect(fnIdx, ...args) {\n        return [...[].concat(...args), ...fnIdx, 0x11, 0, 0];\n    }\n\n    if(condCode, thenCode, elseCode) {\n        if (elseCode) {\n            return [...condCode, 0x04, 0x40, ...thenCode, 0x05, ...elseCode, 0x0b];\n        } else {\n            return [...condCode, 0x04, 0x40, ...thenCode, 0x0b];\n        }\n    }\n\n    block(bCode) { return [0x02, 0x40, ...bCode, 0x0b]; }\n    loop(...args) {\n        return [0x03, 0x40, ...[].concat(...[...args]), 0x0b];\n    }\n    br_if(relPath, condCode) { return [...condCode, 0x0d, ...utils.varuint32(relPath)]; }\n    br(relPath) { return [0x0c, ...utils.varuint32(relPath)]; }\n    ret(rCode) { return [...rCode, 0x0f]; }\n    drop(dCode) { return [...dCode,  0x1a]; }\n\n    i64_const(num) { return [0x42, ...utils.varint64(num)]; }\n    i32_const(num) { return [0x41, ...utils.varint32(num)]; }\n\n\n    i64_eqz(opcode) { return [...opcode, 0x50]; }\n    i64_eq(op1code, op2code) { return [...op1code, ...op2code, 0x51]; }\n    i64_ne(op1code, op2code) { return [...op1code, ...op2code, 0x52]; }\n    i64_lt_s(op1code, op2code) { return [...op1code, ...op2code, 0x53]; }\n    i64_lt_u(op1code, op2code) { return [...op1code, ...op2code, 0x54]; }\n    i64_gt_s(op1code, op2code) { return [...op1code, ...op2code, 0x55]; }\n    i64_gt_u(op1code, op2code) { return [...op1code, ...op2code, 0x56]; }\n    i64_le_s(op1code, op2code) { return [...op1code, ...op2code, 0x57]; }\n    i64_le_u(op1code, op2code) { return [...op1code, ...op2code, 0x58]; }\n    i64_ge_s(op1code, op2code) { return [...op1code, ...op2code, 0x59]; }\n    i64_ge_u(op1code, op2code) { return [...op1code, ...op2code, 0x5a]; }\n    i64_add(op1code, op2code) { return [...op1code, ...op2code, 0x7c]; }\n    i64_sub(op1code, op2code) { return [...op1code, ...op2code, 0x7d]; }\n    i64_mul(op1code, op2code) { return [...op1code, ...op2code, 0x7e]; }\n    i64_div_s(op1code, op2code) { return [...op1code, ...op2code, 0x7f]; }\n    i64_div_u(op1code, op2code) { return [...op1code, ...op2code, 0x80]; }\n    i64_rem_s(op1code, op2code) { return [...op1code, ...op2code, 0x81]; }\n    i64_rem_u(op1code, op2code) { return [...op1code, ...op2code, 0x82]; }\n    i64_and(op1code, op2code) { return [...op1code, ...op2code, 0x83]; }\n    i64_or(op1code, op2code) { return [...op1code, ...op2code, 0x84]; }\n    i64_xor(op1code, op2code) { return [...op1code, ...op2code, 0x85]; }\n    i64_shl(op1code, op2code) { return [...op1code, ...op2code, 0x86]; }\n    i64_shr_s(op1code, op2code) { return [...op1code, ...op2code, 0x87]; }\n    i64_shr_u(op1code, op2code) { return [...op1code, ...op2code, 0x88]; }\n    i64_extend_i32_s(op1code) { return [...op1code, 0xac]; }\n    i64_extend_i32_u(op1code) { return [...op1code, 0xad]; }\n    i64_clz(op1code) { return [...op1code, 0x79]; }\n    i64_ctz(op1code) { return [...op1code, 0x7a]; }\n\n    i32_eqz(op1code) { return [...op1code, 0x45]; }\n    i32_eq(op1code, op2code) { return [...op1code, ...op2code, 0x46]; }\n    i32_ne(op1code, op2code) { return [...op1code, ...op2code, 0x47]; }\n    i32_lt_s(op1code, op2code) { return [...op1code, ...op2code, 0x48]; }\n    i32_lt_u(op1code, op2code) { return [...op1code, ...op2code, 0x49]; }\n    i32_gt_s(op1code, op2code) { return [...op1code, ...op2code, 0x4a]; }\n    i32_gt_u(op1code, op2code) { return [...op1code, ...op2code, 0x4b]; }\n    i32_le_s(op1code, op2code) { return [...op1code, ...op2code, 0x4c]; }\n    i32_le_u(op1code, op2code) { return [...op1code, ...op2code, 0x4d]; }\n    i32_ge_s(op1code, op2code) { return [...op1code, ...op2code, 0x4e]; }\n    i32_ge_u(op1code, op2code) { return [...op1code, ...op2code, 0x4f]; }\n    i32_add(op1code, op2code) { return [...op1code, ...op2code, 0x6a]; }\n    i32_sub(op1code, op2code) { return [...op1code, ...op2code, 0x6b]; }\n    i32_mul(op1code, op2code) { return [...op1code, ...op2code, 0x6c]; }\n    i32_div_s(op1code, op2code) { return [...op1code, ...op2code, 0x6d]; }\n    i32_div_u(op1code, op2code) { return [...op1code, ...op2code, 0x6e]; }\n    i32_rem_s(op1code, op2code) { return [...op1code, ...op2code, 0x6f]; }\n    i32_rem_u(op1code, op2code) { return [...op1code, ...op2code, 0x70]; }\n    i32_and(op1code, op2code) { return [...op1code, ...op2code, 0x71]; }\n    i32_or(op1code, op2code) { return [...op1code, ...op2code, 0x72]; }\n    i32_xor(op1code, op2code) { return [...op1code, ...op2code, 0x73]; }\n    i32_shl(op1code, op2code) { return [...op1code, ...op2code, 0x74]; }\n    i32_shr_s(op1code, op2code) { return [...op1code, ...op2code, 0x75]; }\n    i32_shr_u(op1code, op2code) { return [...op1code, ...op2code, 0x76]; }\n    i32_rotl(op1code, op2code) { return [...op1code, ...op2code, 0x77]; }\n    i32_rotr(op1code, op2code) { return [...op1code, ...op2code, 0x78]; }\n    i32_wrap_i64(op1code) { return [...op1code, 0xa7]; }\n    i32_clz(op1code) { return [...op1code, 0x67]; }\n    i32_ctz(op1code) { return [...op1code, 0x68]; }\n\n    unreachable() { return [ 0x0 ]; }\n\n    current_memory() { return [ 0x3f, 0]; }\n\n    comment() { return []; }\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport function toNumber(n) {\n    return BigInt(n);\n}\n\nexport function isNegative(n) {\n    return n < 0n;\n}\n\nexport function isZero(n) {\n    return n === 0n;\n}\n\nexport function bitLength(n) {\n    if (isNegative(n)) {\n        return n.toString(2).length - 1; // discard the - sign\n    } else {\n        return n.toString(2).length;\n    }\n}\n\nexport function u32(n) {\n    const b = [];\n    const v = toNumber(n);\n    b.push(Number(v & 0xFFn));\n    b.push(Number(v >> 8n & 0xFFn));\n    b.push(Number(v >> 16n & 0xFFn));\n    b.push(Number(v >> 24n & 0xFFn));\n    return b;\n}\n\nexport function u64(n) {\n    const b = [];\n    const v = toNumber(n);\n    b.push(Number(v & 0xFFn));\n    b.push(Number(v >> 8n & 0xFFn));\n    b.push(Number(v >> 16n & 0xFFn));\n    b.push(Number(v >> 24n & 0xFFn));\n    b.push(Number(v >> 32n & 0xFFn));\n    b.push(Number(v >> 40n & 0xFFn));\n    b.push(Number(v >> 48n & 0xFFn));\n    b.push(Number(v >> 56n & 0xFFn));\n    return b;\n}\n\nexport function toUTF8Array(str) {\n    var utf8 = [];\n    for (var i=0; i < str.length; i++) {\n        var charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                0x80 | ((charcode>>6) & 0x3f),\n                0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                0x80 | ((charcode>>12) & 0x3f),\n                0x80 | ((charcode>>6) & 0x3f),\n                0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\nexport function string(str) {\n    const bytes = toUTF8Array(str);\n    return [ ...varuint32(bytes.length), ...bytes ];\n}\n\nexport function varuint(n) {\n    const code = [];\n    let v = toNumber(n);\n    if (isNegative(v)) throw new Error(\"Number cannot be negative\");\n    while (!isZero(v)) {\n        code.push(Number(v & 0x7Fn));\n        v = v >> 7n;\n    }\n    if (code.length==0) code.push(0);\n    for (let i=0; i<code.length-1; i++) {\n        code[i] = code[i] | 0x80;\n    }\n    return code;\n}\n\nexport function varint(_n) {\n    let n, sign;\n    const bits = bitLength(_n);\n    if (_n<0) {\n        sign = true;\n        n = (1n << BigInt(bits)) + _n;\n    } else {\n        sign = false;\n        n = toNumber(_n);\n    }\n    const paddingBits = 7 - (bits % 7);\n\n    const padding = ((1n << BigInt(paddingBits)) - 1n) << BigInt(bits);\n    const paddingMask = ((1 << (7 - paddingBits))-1) | 0x80;\n\n    const code = varuint(n + padding);\n\n    if (!sign) {\n        code[code.length-1] = code[code.length-1] & paddingMask;\n    }\n\n    return code;\n}\n\nexport function varint32(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFn) throw new Error(\"Number too big\");\n    if (v > 0x7FFFFFFFn) v = v - 0x100000000n;\n    // bigInt(\"-80000000\", 16) as base10\n    if (v < -2147483648n) throw new Error(\"Number too small\");\n    return varint(v);\n}\n\nexport function varint64(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFFFFFFFFFn) throw new Error(\"Number too big\");\n    if (v > 0x7FFFFFFFFFFFFFFFn) v = v - 0x10000000000000000n;\n    // bigInt(\"-8000000000000000\", 16) as base10\n    if (v < -9223372036854775808n) throw new Error(\"Number too small\");\n    return varint(v);\n}\n\nexport function varuint32(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFn) throw new Error(\"Number too big\");\n    return varuint(v);\n}\n\nexport function varuint64(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFFFFFFFFFn) throw new Error(\"Number too big\");\n    return varuint(v);\n}\n\nexport function toHexString(byteArray) {\n    return Array.from(byteArray, function(byte) {\n        return (\"0\" + (byte & 0xFF).toString(16)).slice(-2);\n    }).join(\"\");\n}\n\nexport function ident(text) {\n    if (typeof text === \"string\") {\n        let lines = text.split(\"\\n\");\n        for (let i=0; i<lines.length; i++) {\n            if (lines[i]) lines[i] = \"    \"+lines[i];\n        }\n        return lines.join(\"\\n\");\n    } else if (Array.isArray(text)) {\n        for (let i=0; i<text.length; i++ ) {\n            text[i] = ident(text[i]);\n        }\n        return text;\n    }\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nimport { FunctionBuilderWat } from \"./functionbuilder_wat.js\";\nimport * as utils from \"./utils.js\";\n\nexport class ModuleBuilderWat {\n\n    constructor() {\n        this.functions = [];\n        this.functionIdxByName = {};\n        this.nImportFunctions = 0;\n        this.nInternalFunctions =0;\n        this.memory = {\n            pagesSize: 1,\n            moduleName: \"env\",\n            fieldName: \"memory\"\n        };\n        this.free = 8;\n        this.datas = [];\n        this.modules = {};\n        this.exports = [];\n        this.functionsTable = [];\n    }\n\n    build() {\n        const src = [];\n        this._setSignatures();\n        src.push(this._buildType());\n        src.push(this._buildImport());\n        if (this.functionsTable.length>0) {\n            src.push(this._buildFunctionsTable());\n        }\n        if (this.exports.length > 0) {\n            src.push(this._buildExports());\n        }\n        if (this.functionsTable.length>0) {\n            src.push(this._buildElements());\n        }\n        if (this.nInternalFunctions>0) {\n            src.push(this._buildFunctions());\n        }\n        src.push(this._buildData());\n        return [\n            \"(module\",\n            utils.ident(src),\n            \")\"\n        ];\n    }\n\n    addFunction(fnName, comment) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilderWat(this, fnName, \"internal\", comment));\n\n        this.nInternalFunctions++;\n        return this.functions[idx];\n    }\n\n    addIimportFunction(fnName, moduleName, _fieldName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        if (  (this.functions.length>0)\n            &&(this.functions[this.functions.length-1].type == \"internal\"))\n            throw new Error(`Import functions must be declared before internal: ${fnName}`);\n\n        let fieldName = _fieldName || fnName;\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilderWat(this, fnName, \"import\", moduleName, fieldName));\n\n        this.nImportFunctions ++;\n        return this.functions[idx];\n    }\n\n    setMemory(pagesSize, moduleName, fieldName) {\n        this.memory = {\n            pagesSize: pagesSize,\n            moduleName: moduleName || \"env\",\n            fieldName: fieldName || \"memory\"\n        };\n    }\n\n    exportFunction(fnName, _exportName) {\n        const exportName = _exportName || fnName;\n        if (typeof(this.functionIdxByName[fnName]) === \"undefined\")\n            throw new Error(`Function not defined: ${fnName}`);\n        const idx = this.functionIdxByName[fnName];\n        if (exportName != fnName) {\n            this.functionIdxByName[exportName] = idx;\n        }\n        this.exports.push({\n            exportName: exportName,\n            idx: idx\n        });\n    }\n\n    addFunctionToTable(fnName) {\n        const idx = this.functionIdxByName[fnName];\n        this.functionsTable.push(idx);\n    }\n\n    addData(offset, bytes) {\n        this.datas.push({\n            offset: offset,\n            bytes: bytes\n        });\n    }\n\n    alloc(a, b) {\n        let size;\n        let bytes;\n        if ((Array.isArray(a) || ArrayBuffer.isView(a)) && (typeof(b) === \"undefined\")) {\n            size = a.length;\n            bytes = a;\n        } else {\n            size = a;\n            bytes = b;\n        }\n        size = (((size-1)>>3) +1)<<3;       // Align to 64 bits.\n        const p = this.free;\n        this.free += size;\n        if (bytes) {\n            this.addData(p, bytes);\n        }\n        return p;\n    }\n\n    allocString(s) {\n        const encoder = new TextEncoder();\n        const uint8array = encoder.encode(s);\n        return this.alloc([...uint8array, 0]);\n    }\n\n    _setSignatures() {\n        this.signatures = [];\n        const signatureIdxByName = {};\n        if (this.functionsTable.length>0) {\n            const signature = this.functions[this.functionsTable[0]].getSignature();\n            const signatureName = this.functions[this.functionsTable[0]].getSignatureName();\n            signatureIdxByName[signatureName] = 0;\n            this.signatures.push(signature);\n        }\n        for (let i=0; i<this.functions.length; i++) {\n            const signature = this.functions[i].getSignature();\n            const signatureName = this.functions[i].getSignatureName();\n            if (typeof(signatureIdxByName[signatureName]) === \"undefined\") {\n                signatureIdxByName[signatureName] = this.signatures.length;\n                this.signatures.push(signature);\n            }\n\n            this.functions[i].signatureIdx = signatureIdxByName[signatureName];\n            this.functions[i].signatureName = signatureName;\n        }\n\n    }\n\n    _buildType() {\n        return this.signatures;\n    }\n\n    _buildImport() {\n        const src = [];\n        src.push(`(import \"${this.memory.moduleName}\" \"${this.memory.fieldName}\" (memory ${this.memory.pagesSize}))`);\n        for (let i=0; i< this.nImportFunctions; i++) {\n            src.push(`(import \"${this.functions[i].moduleName}\" \"${this.functions[i].fieldName}\" (func $${this.functions[i].fnName} (type $${this.functions[i].getSignatureName()})))`);\n        }\n        return src;\n    }\n\n    _buildFunctionsTable() {\n        return `(table ${this.functionsTable.length} anyfunc)`;\n    }\n\n    _buildElements() {\n        let funcs=\"\";\n        for (let i=0; i<this.functionsTable.length; i++) {\n            funcs += \" $\"+this.functions[this.functionsTable[i]].fnName;\n        }\n        return `(elem (i32.const 0) ${funcs})`;\n    }\n\n    _buildExports() {\n        const src = [];\n        for (let i=0; i< this.exports.length; i++) {\n            src.push(`(export \"${this.exports[i].exportName}\" (func $${this.functions[this.exports[i].idx].fnName}))`);\n        }\n        return src;\n    }\n\n    _buildFunctions() {\n        const src = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            src.push(this.functions[i].getBody());\n        }\n        return src;\n    }\n\n    _buildData() {\n        const src = [];\n        const buf = Buffer.alloc(4);\n        buf.writeUInt32LE(this.free, 0);\n        src.push(`(data (i32.const 0) ${bytes2string(buf)})`);\n        for (let i=0; i< this.datas.length; i++) {\n            src.push(`(data (i32.const ${this.datas[i].offset}) ${bytes2string(this.datas[i].bytes)})`);\n        }\n        return src;\n\n        function bytes2string(b) {\n            let S = \"\\\"\";\n            for (let i=0; i<b.length; i++) {\n                if (b[i]<32 || b[i] >126 || b[i] == 34 || b[i]==92) {\n                    let h=b[i].toString(16);\n                    while (h.length<2) h = \"0\"+h;\n                    S += \"\\\\\" + h;\n                } else {\n                    S += String.fromCharCode(b[i]);\n                }\n            }\n            S +=  \"\\\"\";\n            return S;\n        }\n    }\n\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { CodeBuilderWat } from \"./codebuilder_wat.js\";\nimport * as utils from \"./utils.js\";\n\nexport class FunctionBuilderWat {\n\n    constructor (module, fnName, fnType, moduleName, fieldName) {\n        if (fnType == \"import\") {\n            this.fnType = \"import\";\n            this.moduleName = moduleName;\n            this.fieldName = fieldName;\n        } else if (fnType == \"internal\") {\n            this.fnType = \"internal\";\n            this.comment = moduleName;\n        } else {\n            throw new Error(\"Invalid function fnType: \" + fnType);\n        }\n        this.module = module;\n        this.fnName = fnName;\n        this.params = [];\n        this.locals = [];\n        this.localIdxByName = {};\n        this.code = [];\n        this.returnType = null;\n        this.nextLocal =0;\n    }\n\n    addParam(paramName, paramType) {\n        if (this.localIdxByName[paramName])\n            throw new Error(`param already exists. Function: ${this.fnName}, Param: ${paramName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[paramName] = idx;\n        this.params.push({\n            type: paramType,\n            name: paramName\n        });\n    }\n\n    addLocal(localName, localType, _length) {\n        if ((typeof _length != \"undefined\") && (_length != 1)) {\n            throw new Error(\"Locals greater than 1 not implemented\");\n        }\n        if (this.localIdxByName[localName])\n            throw new Error(`local already exists. Function: ${this.fnName}, Param: ${localName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[localName] = idx;\n        this.locals.push({\n            type: localType,\n            name: localName,\n        });\n    }\n\n    setReturnType(returnType) {\n        if (this.returnType)\n            throw new Error(`returnType already defined. Function: ${this.fnName}`);\n        this.returnType = returnType;\n    }\n\n    getSignature() {\n        let p = \"\";\n        for (let i=0; i<this.params.length; i++) {\n            if (i==0) p += \" (param\";\n            p += \" \" + this.params[i].type;\n        }\n        if (p!=\"\") p+= \")\";\n        let r = \"\";\n        if (this.returnType) {\n            r += ` (result ${this.returnType})`;\n        }\n        return `(type $${this.getSignatureName()} (func ${p}${r}))`;\n    }\n\n    getSignatureName() {\n        let s = \"_sig_\";\n        for (let i=0; i<this.params.length; i++) {\n            s += this.params[i].type;\n        }\n        if (this.returnType) {\n            s+=\"r\"+this.returnType;\n        }\n        return s;\n    }\n\n    getBody() {\n        const src = [];\n\n        for (let i=0; i<this.params.length; i++) {\n            src.push(` (param $${this.params[i].name} ${this.params[i].type})`);\n        }\n        if (this.returnType) {\n            src.push(`(result ${this.returnType})`);\n        }\n        for (let i=0; i<this.locals.length; i++) {\n            src.push(` (local $${this.locals[i].name} ${this.locals[i].type})`);\n        }\n        src.push(this.code);\n\n        let Ss;\n        if (this.comment) {\n            Ss = this.comment.split(\"\\n\");\n            for (let i=0; i<Ss.length; i++) {\n                Ss[i] = \";; \" + Ss[i];\n            }\n        } else {\n            Ss = [];\n        }\n\n        return [\n            ...Ss,\n            `(func $${this.fnName} (type $${this.getSignatureName()})`,\n            utils.ident(src),\n            \")\"\n        ];\n\n    }\n\n    addCode(...code) {\n        this.code.push(code);\n    }\n\n    getCodeBuilder() {\n        return new CodeBuilderWat(this);\n    }\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as utils from \"./utils.js\";\n\nexport class CodeBuilderWat {\n    constructor(func) {\n        this.func = func;\n        this.functionName = func.functionName;\n        this.module = func.module;\n    }\n\n    setLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [valCode, `set_local $${localName}`];\n    }\n\n    teeLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [valCode, `tee_local $${localName}`];\n    }\n\n    getLocal(localName) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return `get_local $${localName}`;\n    }\n\n    genLoad(inst, def_align, idxCode, _offset, _align) {\n        let S = inst;\n        const offset = _offset || 0;\n        if (offset>0) S += ` offset=${offset}`;\n        const align = (_align === undefined) ? def_align : _align;  // 8 bits alignment by default\n        if (align!=def_align) S += ` align=${1 << align}`;\n        return [idxCode, S];\n    }\n\n\n    genStore(inst, def_align, idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (typeof _align === \"undefined\") {\n            offset = 0;\n            align = def_align;\n            codeVal = _offset;\n        } else if (typeof _codeVal === \"undefined\") {\n            offset = _offset;\n            align = def_align;\n            codeVal = _align;\n        } else {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        let S = inst;\n        if (offset>0) S += ` offset=${offset}`;\n        if (align!=def_align) S += ` align=${1 << align}`;\n        return [idxCode, codeVal, S];\n    }\n\n    i64_load8_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load8_s\", 0, idxCode, _offset, _align);\n    }\n\n    i64_load8_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load8_u\", 0, idxCode, _offset, _align);\n    }\n\n    i64_load16_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load16_s\", 1,idxCode, _offset, _align);\n    }\n\n    i64_load16_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load16_u\", 1, idxCode, _offset, _align);\n    }\n\n    i64_load32_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load32_s\", 2, idxCode, _offset, _align);\n    }\n\n    i64_load32_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load32_u\", 2, idxCode, _offset, _align);\n    }\n\n    i64_load(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load\", 3, idxCode, _offset, _align);\n    }\n\n\n    i64_store(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store\", 3, idxCode, _offset, _align, _codeVal);\n    }\n\n    i64_store32(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store32\", 2, idxCode, _offset, _align, _codeVal);\n    }\n\n    i64_store16(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store16\", 1, idxCode, _offset, _align, _codeVal);\n    }\n\n    i64_store8(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store8\", 0, idxCode, _offset, _align, _codeVal);\n    }\n\n    i32_load8_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load8_s\", 0, idxCode, _offset, _align);\n    }\n\n    i32_load8_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load8_u\", 0, idxCode, _offset, _align);\n    }\n\n    i32_load16_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load16_s\", 1, idxCode, _offset, _align);\n    }\n\n    i32_load16_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load16_u\", 1, idxCode, _offset, _align);\n    }\n\n    i32_load(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load\", 2, idxCode, _offset, _align);\n    }\n\n    i32_store(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i32.store\", 2, idxCode, _offset, _align, _codeVal);\n    }\n\n    i32_store16(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i32.store16\", 1, idxCode, _offset, _align, _codeVal);\n    }\n\n    i32_store8(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i32.store8\", 0, idxCode, _offset, _align, _codeVal);\n    }\n\n    call(fnName, ...args) {\n        const idx = this.module.functionIdxByName[fnName];\n        if (idx === undefined)\n            throw new Error(`Function not defined: Function: ${fnName}`);\n        return [args, `call $${fnName}`];\n    }\n\n    call_indirect(fnIdx, ...args) {\n        return [args, fnIdx, \"call_indirect (type 0)\"];\n    }\n\n    if(condCode, thenCode, elseCode) {\n        if (elseCode) {\n            return [condCode, \"if\", utils.ident(thenCode), \"else\", utils.ident(elseCode), \"end\"];\n        } else {\n            return [condCode, \"if\", utils.ident(thenCode), \"end\"];\n        }\n    }\n\n    block(bCode) { return [\"block\", utils.ident(bCode), \"end\"]; }\n    loop(...args) { return [\"loop\", utils.ident(args), \"end\"]; }\n    br_if(relPath, condCode) { return [condCode, `br_if ${relPath}`]; }\n    br(relPath) { return `br ${relPath}`; }\n    ret(rCode) { return [rCode, \"return\"]; }\n    drop(dCode) { return [dCode,  \"drop\"]; }\n\n    i64_const(num) { return `i64.const ${num}`; }\n    i32_const(num) { return `i32.const ${num}`; }\n\n    i64_eqz(opcode) { return [opcode, \"i64.eqz\"]; }\n    i64_eq(op1code, op2code) { return [op1code, op2code, \"i64.eq\"]; }\n    i64_ne(op1code, op2code) { return [op1code, op2code, \"i64.ne\"]; }\n    i64_lt_s(op1code, op2code) { return [op1code, op2code, \"i64.lt_s\"]; }\n    i64_lt_u(op1code, op2code) { return [op1code, op2code, \"i64.lt_u\"]; }\n    i64_gt_s(op1code, op2code) { return [op1code, op2code, \"i64.gt_s\"]; }\n    i64_gt_u(op1code, op2code) { return [op1code, op2code, \"i64.gt_u\"]; }\n    i64_le_s(op1code, op2code) { return [op1code, op2code, \"i64.le_s\"]; }\n    i64_le_u(op1code, op2code) { return [op1code, op2code, \"i64.le_u\"]; }\n    i64_ge_s(op1code, op2code) { return [op1code, op2code, \"i64.ge_s\"]; }\n    i64_ge_u(op1code, op2code) { return [op1code, op2code, \"i64.ge_u\"]; }\n    i64_add(op1code, op2code) { return [op1code, op2code, \"i64.add\"]; }\n    i64_sub(op1code, op2code) { return [op1code, op2code, \"i64.sub\"]; }\n    i64_mul(op1code, op2code) { return [op1code, op2code, \"i64.mul\"]; }\n    i64_div_s(op1code, op2code) { return [op1code, op2code, \"i64.div_s\"]; }\n    i64_div_u(op1code, op2code) { return [op1code, op2code, \"i64.div_u\"]; }\n    i64_rem_s(op1code, op2code) { return [op1code, op2code, \"i64.rem_s\"]; }\n    i64_rem_u(op1code, op2code) { return [op1code, op2code, \"i64.rem_u\"]; }\n    i64_and(op1code, op2code) { return [op1code, op2code, \"i64.and\"]; }\n    i64_or(op1code, op2code) { return [op1code, op2code, \"i64.or\"]; }\n    i64_xor(op1code, op2code) { return [op1code, op2code, \"i64.xor\"]; }\n    i64_shl(op1code, op2code) { return [op1code, op2code, \"i64.shl\"]; }\n    i64_shr_s(op1code, op2code) { return [op1code, op2code, \"i64.shr_s\"]; }\n    i64_shr_u(op1code, op2code) { return [op1code, op2code, \"i64.shr_u\"]; }\n    i64_extend_i32_s(op1code) { return [op1code, \"i64.extend_s/i32\"]; }\n    i64_extend_i32_u(op1code) { return [op1code, \"i64.extend_u/i32\"]; }\n\n\n    i32_eqz(op1code) { return [op1code, \"i32.eqz\"]; }\n    i32_eq(op1code, op2code) { return [op1code, op2code, \"i32.eq\"]; }\n    i32_ne(op1code, op2code) { return [op1code, op2code, \"i32.ne\"]; }\n    i32_lt_s(op1code, op2code) { return [op1code, op2code, \"i32.lt_s\"]; }\n    i32_lt_u(op1code, op2code) { return [op1code, op2code, \"i32.lt_u\"]; }\n    i32_gt_s(op1code, op2code) { return [op1code, op2code, \"i32.gt_s\"]; }\n    i32_gt_u(op1code, op2code) { return [op1code, op2code, \"i32.gt_u\"]; }\n    i32_le_s(op1code, op2code) { return [op1code, op2code, \"i32.le_s\"]; }\n    i32_le_u(op1code, op2code) { return [op1code, op2code, \"i32.le_u\"]; }\n    i32_ge_s(op1code, op2code) { return [op1code, op2code, \"i32.ge_s\"]; }\n    i32_ge_u(op1code, op2code) { return [op1code, op2code, \"i32.ge_u\"]; }\n    i32_add(op1code, op2code) { return [op1code, op2code, \"i32.add\"]; }\n    i32_sub(op1code, op2code) { return [op1code, op2code, \"i32.sub\"]; }\n    i32_mul(op1code, op2code) { return [op1code, op2code, \"i32.mul\"]; }\n    i32_div_s(op1code, op2code) { return [op1code, op2code, \"i32.div_s\"]; }\n    i32_div_u(op1code, op2code) { return [op1code, op2code, \"i32.div_u\"]; }\n    i32_rem_s(op1code, op2code) { return [op1code, op2code, \"i32.rem_s\"]; }\n    i32_rem_u(op1code, op2code) { return [op1code, op2code, \"i32.rem_u\"]; }\n    i32_and(op1code, op2code) { return [op1code, op2code, \"i32.and\"]; }\n    i32_or(op1code, op2code) { return [op1code, op2code, \"i32.or\"]; }\n    i32_xor(op1code, op2code) { return [op1code, op2code, \"i32.xor\"]; }\n    i32_shl(op1code, op2code) { return [op1code, op2code, \"i32.shl\"]; }\n    i32_shr_s(op1code, op2code) { return [op1code, op2code, \"i32.shr_s\"]; }\n    i32_shr_u(op1code, op2code) { return [op1code, op2code, \"i32.shr_u\"]; }\n    i32_rotl(op1code, op2code) { return [op1code, op2code, \"i32.rotl\"]; }\n    i32_rotr(op1code, op2code) { return [op1code, op2code, \"i32.rotr\"]; }\n    i32_wrap_i64(op1code) { return [op1code, \"i32.wrap/i64\"]; }\n\n    ureachable() { return \"unreachable\"; }\n\n    current_memory() { return \"current_memory\"; }\n\n    comment(c) { return \";; \" + c; }\n\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of websnark (Web Assembly zkSnark Prover).\n\n    websnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    websnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with websnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { ModuleBuilder } from \"./modulebuilder.js\";\n\nexport async function buildProtoboard(builder, defBytes, bitsPerBytes) {\n    const protoboard = new Protoboard();\n\n    protoboard.defBytes = defBytes;\n    protoboard.bitsPerBytes = bitsPerBytes || 32;\n\n    protoboard.memory = new WebAssembly.Memory({initial:20000});\n    protoboard.i32 = new Uint32Array(protoboard.memory.buffer);\n    protoboard.i8 = new Uint8Array(protoboard.memory.buffer);\n\n    const moduleBuilder = new ModuleBuilder();\n\n    const fLog32 = moduleBuilder.addIimportFunction(\"debug_log32\", \"debug\", \"log32\");\n    fLog32.addParam(\"x\", \"i32\");\n    const fLog64 = moduleBuilder.addIimportFunction(\"debug_log64\", \"debug\", \"log64\");\n    fLog64.addParam(\"x\", \"i32\");\n    fLog64.addParam(\"y\", \"i32\");\n\n    buildLog32(moduleBuilder);\n    buildLog64(moduleBuilder);\n\n    builder(moduleBuilder, protoboard);\n\n\n    const code = moduleBuilder.build();\n\n    const wasmModule = await WebAssembly.compile(code);\n\n    protoboard.log = console.log;\n\n    protoboard.instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": protoboard.memory\n        },\n        debug: {\n            log32: function (c1) {\n                if (c1<0) c1 = 0x100000000+c1;\n                let s=c1.toString(16);\n                while (s.length<8) s = \"0\"+s;\n                protoboard.log(s + \": \" + c1.toString());\n            },\n            log64: function (c1, c2) {\n                if (c1<0) c1 = 0x100000000+c1;\n                if (c2<0) c2 = 0x100000000+c2;\n                const n = BigInt(c1) + (BigInt(c2) << 32n);\n                let s=n.toString(16);\n                while (s.length<16) s = \"0\"+s;\n                protoboard.log(s + \": \" + n.toString());\n            }\n        }\n    });\n\n    Object.assign(protoboard, protoboard.instance.exports);\n    Object.assign(protoboard, moduleBuilder.modules);\n\n    return protoboard;\n\n    function buildLog32(module) {\n\n        const f = module.addFunction(\"log32\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(\"debug_log32\", c.getLocal(\"x\")));\n    }\n\n    function buildLog64(module) {\n\n        const f = module.addFunction(\"log64\");\n        f.addParam(\"x\", \"i64\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(\n            \"debug_log64\",\n            c.i32_wrap_i64(c.getLocal(\"x\")),\n            c.i32_wrap_i64(\n                c.i64_shr_u(\n                    c.getLocal(\"x\"),\n                    c.i64_const(32)\n                )\n            )\n        ));\n    }\n\n}\n\nclass Protoboard {\n\n    constructor() {\n\n    }\n\n    alloc(length) {\n        if (typeof length === \"undefined\") {\n            length = this.defBytes;\n        }\n        length = (((length-1)>>3) +1)<<3;       // Align to 64 bits.\n\n        const res = this.i32[0];\n        this.i32[0] += length;\n        return res;\n    }\n\n    set(pos, nums, nBytes) {\n        if (!Array.isArray(nums)) {\n            nums = [nums];\n        }\n        if (typeof nBytes === \"undefined\") {\n            nBytes = this.defBytes;\n        }\n\n        const words = Math.floor((nBytes -1)/4)+1;\n        let p = pos;\n\n        const CHUNK = 1n << BigInt(this.bitsPerBytes);\n\n        for (let i=0; i<nums.length; i++) {\n            let v = BigInt(nums[i]);\n            for (let j=0; j<words; j++) {\n                const quotient = v / CHUNK;\n                const remainder = v % CHUNK;\n                this.i32[p>>2] = Number(remainder);\n                v = quotient;\n                p += 4;\n            }\n            if (v !== 0n) {\n                throw new Error(\"Expected v to be 0\");\n            }\n        }\n\n        return pos;\n    }\n\n    get(pos, nElements, nBytes) {\n        if (typeof nBytes == \"undefined\") {\n            if (typeof nElements == \"undefined\") {\n                nElements = 1;\n                nBytes = this.defBytes;\n            } else {\n                nElements = nBytes;\n                nBytes = this.defBytes;\n            }\n        }\n\n        const words = Math.floor((nBytes -1)/4)+1;\n\n        const CHUNK = 1n << BigInt(this.bitsPerBytes);\n\n\n        const nums = [];\n        for (let i=0; i<nElements; i++) {\n            let acc = 0n;\n            for (let j=words-1; j>=0; j--) {\n                acc = acc * CHUNK;\n                let v = this.i32[(pos>>2)+j];\n                if (this.bitsPerBytes <32) {\n                    if (v&0x80000000) v = v-0x100000000;\n                }\n                acc = acc + BigInt(v);\n            }\n            nums.push(acc);\n            pos += words*4;\n        }\n\n        if (nums.length == 1) return nums[0];\n        return nums;\n    }\n}\n", "import { buildBls12381 as buildBls12381wasm } from \"wasmcurves\";\nimport buildEngine from \"./engine.js\";\nimport * as Scalar from \"./scalar.js\";\nimport { ModuleBuilder } from \"wasmbuilder\";\n\nglobalThis.curve_bls12381 = null;\n\nexport default async function buildBls12381(singleThread, plugins) {\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBls12381wasm(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bls12381wasm = {};\n\n    bls12381wasm.code = moduleBuilder.build();\n    bls12381wasm.pq = moduleBuilder.modules.f1m.pq;\n    bls12381wasm.pr = moduleBuilder.modules.frm.pq;\n    bls12381wasm.pG1gen = moduleBuilder.modules.bls12381.pG1gen;\n    bls12381wasm.pG1zero = moduleBuilder.modules.bls12381.pG1zero;\n    bls12381wasm.pG1b = moduleBuilder.modules.bls12381.pG1b;\n    bls12381wasm.pG2gen = moduleBuilder.modules.bls12381.pG2gen;\n    bls12381wasm.pG2zero = moduleBuilder.modules.bls12381.pG2zero;\n    bls12381wasm.pG2b = moduleBuilder.modules.bls12381.pG2b;\n    bls12381wasm.pOneT = moduleBuilder.modules.bls12381.pOneT;\n    bls12381wasm.prePSize = moduleBuilder.modules.bls12381.prePSize;\n    bls12381wasm.preQSize = moduleBuilder.modules.bls12381.preQSize;\n    bls12381wasm.n8q = 48;\n    bls12381wasm.n8r = 32;\n    bls12381wasm.q = moduleBuilder.modules.bls12381.q;\n    bls12381wasm.r = moduleBuilder.modules.bls12381.r;\n\n\n    if ((!singleThread) && (globalThis.curve_bls12381)) return globalThis.curve_bls12381;\n    const params = {\n        name: \"bls12381\",\n        wasm: bls12381wasm,\n        q: Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16),\n        r: Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16),\n        n8q: 48,\n        n8r: 32,\n        cofactorG1: Scalar.e(\"0x396c8c005555e1568c00aaab0000aaab\", 16),\n        cofactorG2: Scalar.e(\"0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bls12381 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bls12381 = curve;\n    }\n\n    return curve;\n}\n\n", "import * as Scalar from \"./scalar.js\";\nimport {default as buildBn128} from \"./bn128.js\";\nimport {default as buildBls12381} from \"./bls12381.js\";\n\nconst bls12381r = Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16);\nconst bn128r = Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n\nconst bls12381q = Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16);\nconst bn128q = Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\");\n\nexport async function getCurveFromR(r, singleThread, plugins) {\n    let curve;\n    if (Scalar.eq(r, bn128r)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (Scalar.eq(r, bls12381r)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(r)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromQ(q, singleThread, plugins) {\n    let curve;\n    if (Scalar.eq(q, bn128q)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (Scalar.eq(q, bls12381q)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(q, 16)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromName(name, singleThread, plugins) {\n    let curve;\n    const normName = normalizeName(name);\n    if ([\"BN128\", \"BN254\", \"ALTBN128\"].indexOf(normName) >= 0) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if ([\"BLS12381\"].indexOf(normName) >= 0) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${name}`);\n    }\n    return curve;\n\n    function normalizeName(n) {\n        return n.toUpperCase().match(/[A-Za-z0-9]+/g).join(\"\");\n    }\n\n}\n", null, null, null, "import { poseidon } from '@iden3/js-crypto';\n\nimport { Hash } from '../hash/hash';\nimport { newHashFromBigInt } from './hash';\n\nexport const hashElems = (e: Array<bigint>): Hash => {\n  const hashBigInt = poseidon.hash(e);\n  return newHashFromBigInt(hashBigInt);\n};\n\nexport const hashElemsKey = (k: bigint, e: Array<bigint>): Hash => {\n  const hashBigInt = poseidon.hash([...e, k]);\n  return newHashFromBigInt(hashBigInt);\n};\n", "import { ElemBytes } from '../entry/elemBytes';\nimport { Entry } from '../../types/entry';\nimport { checkBigIntInField } from './crypto';\nimport { Bytes } from '../../types';\nimport { Data } from '../entry/data';\nimport { DATA_LEN, DATA_LEN_BYTES, ELEM_BYTES_LEN } from '../../constants';\n\nexport const elemBytesToBigInts = (es: Array<ElemBytes>): Array<bigint> => {\n  const bigInts = es.map((e) => {\n    return e.bigInt();\n  });\n\n  return bigInts;\n};\n\nexport const checkEntryInField = (e: Entry): boolean => {\n  const bigInts = elemBytesToBigInts(e.data.value);\n  let flag = true;\n\n  bigInts.forEach((b) => {\n    if (!checkBigIntInField(b)) {\n      flag = false;\n    }\n  });\n\n  return flag;\n};\n\nexport const newDataFromBytes = (bytes: Bytes): Data => {\n  if (bytes.length !== DATA_LEN_BYTES) {\n    throw `expected bytes length to be ${DATA_LEN_BYTES}, got ${bytes.length}`;\n  }\n  const d = new Data();\n  const arr = new Array<ElemBytes>(DATA_LEN_BYTES);\n\n  for (let i = 0; i < DATA_LEN; i += 1) {\n    const tmp = new ElemBytes();\n    tmp.value = bytes.slice(i * ELEM_BYTES_LEN, (i + 1) * DATA_LEN_BYTES);\n    arr[i] = tmp;\n  }\n\n  d.value = arr;\n  return d;\n};\n", "import { ELEM_BYTES_LEN } from '../../constants';\nimport { Bytes } from '../../types';\nimport { bytes2Hex, newBigIntFromBytes, swapEndianness } from '../utils';\n\nexport class ElemBytes {\n  // Little Endian\n  #bytes: Bytes;\n\n  constructor() {\n    this.#bytes = new Uint8Array(ELEM_BYTES_LEN);\n  }\n\n  get value(): Bytes {\n    return this.#bytes;\n  }\n\n  set value(b: Bytes) {\n    this.#bytes = b;\n  }\n\n  bigInt(): bigint {\n    return newBigIntFromBytes(swapEndianness(this.#bytes));\n  }\n\n  string(): string {\n    const hexStr = bytes2Hex(this.#bytes.slice(0, 4));\n    return `${hexStr}...`;\n  }\n}\n", "import { ElemBytes } from './elemBytes';\nimport { DATA_LEN, ELEM_BYTES_LEN } from '../../constants';\nimport { bytesEqual } from '../utils';\nimport { Bytes } from '../../types/index';\n\nexport class Data {\n  #value: Array<ElemBytes>;\n\n  constructor() {\n    this.#value = new Array<ElemBytes>(DATA_LEN);\n  }\n\n  get value(): Array<ElemBytes> {\n    return this.#value;\n  }\n\n  set value(_v: ElemBytes[]) {\n    if (_v.length !== DATA_LEN) {\n      throw `expected bytes length to be ${DATA_LEN}, got ${_v.length}`;\n    }\n    this.#value = _v;\n  }\n\n  bytes(): Bytes {\n    const b = new Uint8Array(DATA_LEN * ELEM_BYTES_LEN);\n\n    for (let idx = 0; idx < DATA_LEN; idx += 1) {\n      this.#value[idx].value.forEach((v, _idx) => {\n        b[idx * ELEM_BYTES_LEN + _idx] = v;\n      });\n    }\n    return b;\n  }\n\n  equal(d2: Data): boolean {\n    return (\n      bytesEqual(this.#value[0].value, d2.value[0].value) &&\n      bytesEqual(this.#value[1].value, d2.value[1].value) &&\n      bytesEqual(this.#value[2].value, d2.value[2].value) &&\n      bytesEqual(this.#value[3].value, d2.value[3].value)\n    );\n  }\n}\n", "import { Siblings } from '../../types/merkletree';\nimport { ZERO_HASH } from '../hash/hash';\n\nexport const circomSiblingsFromSiblings = (siblings: Siblings, levels: number): Siblings => {\n  for (let i = siblings.length; i < levels; i += 1) {\n    siblings.push(ZERO_HASH);\n  }\n  return siblings;\n};\n", "// const siblingBytes = bs.slice(this.notEmpties.length + PROOF_FLAG_LEN);\nimport { HASH_BYTES_LENGTH } from '../../constants';\nimport { Path, Siblings } from '../../types/merkletree';\nimport { Bytes } from '../../types';\nimport { testBit } from './bytes';\n\nexport const getPath = (numLevels: number, k: Bytes): Path => {\n  const path = new Array<boolean>(numLevels);\n\n  for (let idx = 0; idx < numLevels; idx += 1) {\n    path[idx] = testBit(k, idx);\n  }\n  return path;\n};\n\nexport const siblings2Bytes = (siblings: Siblings): Bytes => {\n  const siblingBytesBuff = new ArrayBuffer(HASH_BYTES_LENGTH * siblings.length);\n  const siblingBytes = new Uint8Array(siblingBytesBuff);\n  siblings.forEach((v, i) => {\n    siblingBytes.set(v.value, i * HASH_BYTES_LENGTH);\n  });\n\n  return siblingBytes;\n};\n", "import { NodeAux, Siblings } from '../../types/merkletree';\nimport { Proof } from '../merkletree/proof';\n\nimport { bytesEqual, testBitBigEndian } from './bytes';\n\nimport { Hash, ZERO_HASH } from '../hash/hash';\n\nimport { newHashFromBigInt } from './hash';\nimport { leafKey } from './node';\nimport { getPath } from './merkletree';\nimport { NodeMiddle } from '../node/node';\nimport { ErrNodeAuxNonExistAgainstHIndex } from '../errors/proof';\n\nexport const siblignsFroomProof = (proof: Proof): Siblings => {\n  let sibIdx = 0;\n  const siblings: Siblings = [];\n\n  for (let i = 0; i < proof.depth; i += 1) {\n    if (testBitBigEndian(proof.notEmpties, i)) {\n      siblings.push(proof.siblings[sibIdx]);\n      sibIdx += 1;\n    } else {\n      siblings.push(ZERO_HASH);\n    }\n  }\n\n  return siblings;\n};\n\nexport const verifyProof = async (\n  rootKey: Hash,\n  proof: Proof,\n  k: bigint,\n  v: bigint\n): Promise<boolean> => {\n  try {\n    const rFromProof = await rootFromProof(proof, k, v);\n    return bytesEqual(rootKey.value, rFromProof.value);\n  } catch (err) {\n    if (err === ErrNodeAuxNonExistAgainstHIndex) {\n      return false;\n    }\n    throw err;\n  }\n};\n\nexport const rootFromProof = async (proof: Proof, k: bigint, v: bigint): Promise<Hash> => {\n  const kHash = newHashFromBigInt(k);\n  const vHash = newHashFromBigInt(v);\n\n  let sibIdx = proof.siblings.length - 1;\n  let midKey: Hash;\n\n  if (proof.existence) {\n    midKey = await leafKey(kHash, vHash);\n  } else {\n    if (typeof proof.nodeAux === 'undefined') {\n      midKey = ZERO_HASH;\n    } else {\n      const nodeAux = proof.nodeAux as unknown as NodeAux;\n      if (bytesEqual(kHash.value, nodeAux.key.value)) {\n        throw ErrNodeAuxNonExistAgainstHIndex;\n      }\n      midKey = await leafKey(nodeAux.key, nodeAux.value);\n    }\n  }\n\n  const path = getPath(proof.depth, kHash.value);\n  let siblingKey: Hash;\n\n  for (let i = proof.depth - 1; i >= 0; i -= 1) {\n    if (testBitBigEndian(proof.notEmpties, i)) {\n      siblingKey = proof.siblings[sibIdx];\n      sibIdx -= 1;\n    } else {\n      siblingKey = ZERO_HASH;\n    }\n    if (path[i]) {\n      midKey = await new NodeMiddle(siblingKey, midKey).getKey();\n    } else {\n      midKey = await new NodeMiddle(midKey, siblingKey).getKey();\n    }\n  }\n\n  return midKey;\n};\n", "// LeafKey computes the key of a leaf node given the hIndex and hValue of the\n// entry of the leaf.\nimport { Hash } from '../hash/hash';\n\nimport { hashElemsKey } from './poseidon';\n\nimport { NODE_VALUE_BYTE_ARR_LENGTH } from '../../constants';\nimport { bigIntToUINT8Array } from './bigint';\nimport { Bytes, NodeType } from '../../types';\n\nexport const leafKey = async (k: Hash, v: Hash): Promise<Hash> => {\n  return hashElemsKey(BigInt(1), [k.bigInt(), v.bigInt()]);\n};\n\nexport const nodeValue = (type: NodeType, a: Hash, b: Hash): Bytes => {\n  const bytes = new Uint8Array(NODE_VALUE_BYTE_ARR_LENGTH);\n  const kBytes = bigIntToUINT8Array(a.bigInt());\n  const vBytes = bigIntToUINT8Array(b.bigInt());\n  bytes[0] = type;\n\n  for (let idx = 1; idx < 33; idx += 1) {\n    bytes[idx] = kBytes[idx - 1];\n  }\n\n  for (let idx = 33; idx <= NODE_VALUE_BYTE_ARR_LENGTH; idx += 1) {\n    bytes[idx] = vBytes[idx - 33];\n  }\n\n  return bytes;\n};\n", "import { Bytes, Node, NodeType } from '../../types';\nimport { Hash, ZERO_HASH } from '../hash/hash';\n\nimport {\n  EMPTY_NODE_STRING,\n  EMPTY_NODE_VALUE,\n  NODE_TYPE_EMPTY,\n  NODE_TYPE_LEAF,\n  NODE_TYPE_MIDDLE\n} from '../../constants';\nimport { leafKey, nodeValue } from '../utils/node';\nimport { hashElems } from '../utils';\n\nexport class NodeLeaf implements Node {\n  type: NodeType;\n  entry: [Hash, Hash];\n  // cache used to avoid recalculating key\n  #key: Hash;\n\n  constructor(k: Hash, v: Hash) {\n    this.type = NODE_TYPE_LEAF;\n    this.entry = [k, v];\n    this.#key = ZERO_HASH;\n  }\n\n  async getKey(): Promise<Hash> {\n    if (this.#key === ZERO_HASH) {\n      return await leafKey(this.entry[0], this.entry[1]);\n    }\n    return this.#key;\n  }\n\n  get value(): Bytes {\n    return nodeValue(this.type, this.entry[0], this.entry[1]);\n  }\n\n  get string(): string {\n    return `Leaf I:${this.entry[0]} D:${this.entry[1]}`;\n  }\n}\n\nexport class NodeMiddle implements Node {\n  type: NodeType;\n  childL: Hash;\n  childR: Hash;\n  #key: Hash;\n\n  constructor(cL: Hash, cR: Hash) {\n    this.type = NODE_TYPE_MIDDLE;\n    this.childL = cL;\n    this.childR = cR;\n    this.#key = ZERO_HASH;\n  }\n\n  async getKey(): Promise<Hash> {\n    if (this.#key === ZERO_HASH) {\n      return hashElems([this.childL.bigInt(), this.childR.bigInt()]);\n    }\n    return this.#key;\n  }\n\n  get value(): Bytes {\n    return nodeValue(this.type, this.childL, this.childR);\n  }\n\n  get string(): string {\n    return `Middle L:${this.childL} R:${this.childR}`;\n  }\n}\n\nexport class NodeEmpty implements Node {\n  type: NodeType;\n  #key: Hash;\n\n  constructor() {\n    this.type = NODE_TYPE_EMPTY;\n    this.#key = ZERO_HASH;\n  }\n\n  async getKey(): Promise<Hash> {\n    return ZERO_HASH;\n  }\n\n  get value(): Bytes {\n    return EMPTY_NODE_VALUE;\n  }\n\n  get string(): string {\n    return EMPTY_NODE_STRING;\n  }\n}\n", "export const ErrNodeAuxNonExistAgainstHIndex =\n  'non-existence proof being checked against hIndex equal to nodeAux';\n", "/* eslint-disable no-case-declarations */\n\nimport { Bytes, Node } from '../../types';\nimport { ITreeStorage } from '../../types/storage';\nimport { Hash, ZERO_HASH } from '../hash/hash';\nimport { NODE_TYPE_EMPTY, NODE_TYPE_LEAF, NODE_TYPE_MIDDLE } from '../../constants';\nimport { NodeEmpty, NodeLeaf, NodeMiddle } from '../node/node';\nimport { bytes2Hex } from '../utils';\n\nexport class LocalStorageDB implements ITreeStorage {\n  #currentRoot: Hash;\n\n  constructor(private readonly _prefix: Bytes) {\n    const rootStr = localStorage.getItem(bytes2Hex(_prefix));\n    if (rootStr) {\n      const bytes: number[] = JSON.parse(rootStr);\n\n      this.#currentRoot = new Hash(Uint8Array.from(bytes));\n    } else {\n      this.#currentRoot = ZERO_HASH;\n    }\n  }\n\n  async get(k: Bytes): Promise<Node | undefined> {\n    const kBytes = new Uint8Array([...this._prefix, ...k]);\n    const key = bytes2Hex(kBytes);\n    const val = localStorage.getItem(key);\n\n    if (val === null) {\n      return undefined;\n    }\n\n    const obj = JSON.parse(val);\n    switch (obj.type) {\n      case NODE_TYPE_EMPTY:\n        return new NodeEmpty();\n      case NODE_TYPE_MIDDLE:\n        const cL = new Hash(Uint8Array.from(obj.childL));\n        const cR = new Hash(Uint8Array.from(obj.childR));\n\n        return new NodeMiddle(cL, cR);\n      case NODE_TYPE_LEAF:\n        const k = new Hash(Uint8Array.from(obj.entry[0]));\n        const v = new Hash(Uint8Array.from(obj.entry[1]));\n\n        return new NodeLeaf(k, v);\n    }\n\n    throw `error: value found for key ${bytes2Hex(kBytes)} is not of type Node`;\n  }\n\n  async put(k: Bytes, n: Node): Promise<void> {\n    const kBytes = new Uint8Array([...this._prefix, ...k]);\n    const key = bytes2Hex(kBytes);\n    const toSerialize: Record<string, unknown> = {\n      type: n.type\n    };\n    if (n instanceof NodeMiddle) {\n      toSerialize.childL = Array.from(n.childL.bytes);\n      toSerialize.childR = Array.from(n.childR.bytes);\n    } else if (n instanceof NodeLeaf) {\n      toSerialize.entry = [Array.from(n.entry[0].bytes), Array.from(n.entry[1].bytes)];\n    }\n    const val = JSON.stringify(toSerialize);\n    localStorage.setItem(key, val);\n  }\n\n  async getRoot(): Promise<Hash> {\n    return this.#currentRoot;\n  }\n\n  async setRoot(r: Hash): Promise<void> {\n    this.#currentRoot = r;\n    localStorage.setItem(bytes2Hex(this._prefix), JSON.stringify(Array.from(r.bytes)));\n  }\n}\n", "import { Bytes, Node } from '../../types';\nimport { ITreeStorage } from '../../types/storage';\nimport { Hash, ZERO_HASH } from '../hash/hash';\nimport { bytes2Hex } from '../utils';\nimport { get, set, UseStore, createStore } from 'idb-keyval';\nimport { NODE_TYPE_EMPTY, NODE_TYPE_LEAF, NODE_TYPE_MIDDLE } from '../../constants';\nimport { NodeEmpty, NodeLeaf, NodeMiddle } from '../node/node';\n\nexport class IndexedDBStorage implements ITreeStorage {\n  public static readonly storageName = 'merkle-tree';\n\n  private readonly _prefixHash: string;\n  private readonly _store: UseStore;\n\n  #currentRoot: Hash;\n\n  constructor(private readonly _prefix: Bytes, databaseName?: string) {\n    this.#currentRoot = ZERO_HASH;\n    this._prefixHash = bytes2Hex(_prefix);\n    this._store = createStore(\n      `${databaseName ?? IndexedDBStorage.storageName}-db`,\n      IndexedDBStorage.storageName\n    );\n  }\n\n  async get(k: Bytes): Promise<Node | undefined> {\n    const kBytes = new Uint8Array([...this._prefix, ...k]);\n    const key = bytes2Hex(kBytes);\n    const obj = await get(key, this._store);\n    if (obj === null || obj === undefined) {\n      return undefined;\n    }\n    if (obj.type === NODE_TYPE_EMPTY) {\n      return new NodeEmpty();\n    }\n    if (obj.type === NODE_TYPE_MIDDLE) {\n      const cL = new Hash(Uint8Array.from(obj.childL.bytes));\n      const cR = new Hash(Uint8Array.from(obj.childR.bytes));\n      return new NodeMiddle(cL, cR);\n    }\n    if (obj.type === NODE_TYPE_LEAF) {\n      const k = new Hash(Uint8Array.from(obj.entry[0].bytes));\n      const v = new Hash(Uint8Array.from(obj.entry[1].bytes));\n\n      return new NodeLeaf(k, v);\n    }\n    throw new Error(`error: value found for key ${key} is not of type Node`);\n  }\n\n  async put(k: Bytes, n: Node): Promise<void> {\n    const kBytes = new Uint8Array([...this._prefix, ...k]);\n    const key = bytes2Hex(kBytes);\n    await set(key, n, this._store);\n  }\n\n  async getRoot(): Promise<Hash> {\n    if (!this.#currentRoot.equals(ZERO_HASH)) {\n      return this.#currentRoot;\n    }\n    const root = await get(this._prefixHash, this._store);\n\n    if (!root) {\n      this.#currentRoot = ZERO_HASH;\n    } else {\n      this.#currentRoot = new Hash(root.bytes);\n    }\n    return this.#currentRoot;\n  }\n\n  async setRoot(r: Hash): Promise<void> {\n    await set(this._prefixHash, r, this._store);\n    this.#currentRoot = r;\n  }\n}\n", "function promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic \u2013 if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function () {\n        if (!this.result)\n            return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll()),\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\n        }\n        const items = [];\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\n    });\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n", "export * from './data';\nexport * from './elemBytes';\nexport * from './entry';\n", "import { Data } from '../entry/data';\nimport { Hash, ZERO_HASH } from '../hash/hash';\n\nimport { elemBytesToBigInts, hashElems } from '../../lib/utils';\nimport { ElemBytes } from '../../lib';\n\nexport class Entry {\n  #data: Data;\n  #hIndex: Hash;\n  #hValue: Hash;\n\n  constructor(_data?: Data) {\n    this.#data = _data ? _data : new Data();\n    this.#hIndex = ZERO_HASH;\n    this.#hValue = ZERO_HASH;\n  }\n\n  get data(): Data {\n    return this.#data;\n  }\n\n  get index(): Array<ElemBytes> {\n    return this.#data.value.slice(0, 4);\n  }\n\n  get value(): Array<ElemBytes> {\n    return this.#data.value.slice(4, 8);\n  }\n\n  async hIndex(): Promise<Hash> {\n    if (this.#hIndex === ZERO_HASH) {\n      return hashElems(elemBytesToBigInts(this.index));\n    }\n    return this.#hIndex;\n  }\n\n  async hValue(): Promise<Hash> {\n    if (this.#hValue === ZERO_HASH) {\n      return hashElems(elemBytesToBigInts(this.value));\n    }\n    return this.#hValue;\n  }\n\n  hiHv(): Promise<{ hi: Hash; hv: Hash }> {\n    return (async () => {\n      const hi = await this.hIndex();\n      const hv = await this.hValue();\n      return { hi, hv };\n    })();\n  }\n\n  bytes(): Array<ElemBytes> {\n    return this.#data.value;\n  }\n\n  equal(e2: Entry): boolean {\n    return this.#data.equal(e2.data);\n  }\n\n  clone(): Entry {\n    return new Entry(this.#data);\n  }\n}\n", "export * from './merkletree';\nexport * from './db';\nexport * from './db';\n", "export const ErrNodeKeyAlreadyExists = 'key already exists';\n// ErrKeyNotFound is used when a key is not found in the MerkleTree.\nexport const ErrKeyNotFound = 'Key not found in the MerkleTree';\n// ErrNodeBytesBadSize is used when the data of a node has an incorrect\n// size and can't be parsed.\nexport const ErrNodeBytesBadSize = 'node data has incorrect size in the DB';\n// ErrReachedMaxLevel is used when a traversal of the MT reaches the\n// maximum level.\nexport const ErrReachedMaxLevel = 'reached maximum level of the merkle tree';\n// ErrInvalidNodeFound is used when an invalid node is found and can't\n// be parsed.\nexport const ErrInvalidNodeFound = 'found an invalid node in the DB';\n// ErrInvalidProofBytes is used when a serialized proof is invalid.\nexport const ErrInvalidProofBytes = 'the serialized proof is invalid';\n// ErrInvalidDBValue is used when a value in the key value DB is\n// invalid (for example, it doen't contain a byte header and a []byte\n// body of at least len=1.\nexport const ErrInvalidDBValue = 'the value in the DB is invalid';\n// ErrEntryIndexAlreadyExists is used when the entry index already\n// exists in the tree.\nexport const ErrEntryIndexAlreadyExists = 'the entry index already exists in the tree';\n// ErrNotWritable is used when the MerkleTree is not writable and a\n// write function is called\nexport const ErrNotWritable = 'Merkle Tree not writable';\n", "export const ErrNotFound = 'key not found';\n", "export * from './circom';\nexport * from './merkletree';\nexport * from './proof';\n", "import { ICircomProcessorProof, ICircomVerifierProof, Siblings } from '../../types/merkletree';\nimport { Hash, ZERO_HASH } from '../hash/hash';\n\nexport class CircomVerifierProof implements ICircomVerifierProof {\n  root: Hash;\n  siblings: Siblings;\n  oldKey: Hash;\n  oldValue: Hash;\n  isOld0: boolean;\n  key: Hash;\n  value: Hash;\n  // 0: inclusion, 1: non inclusion\n  fnc: number;\n\n  constructor(\n    _root: Hash = ZERO_HASH,\n    _siblings: Siblings = [],\n    _oldKey: Hash = ZERO_HASH,\n    _oldValue: Hash = ZERO_HASH,\n    _isOld0 = false,\n    _key: Hash = ZERO_HASH,\n    _value: Hash = ZERO_HASH,\n    _fnc = 0\n  ) {\n    this.root = _root;\n    this.siblings = _siblings;\n    this.oldKey = _oldKey;\n    this.oldValue = _oldValue;\n    this.isOld0 = _isOld0;\n    this.key = _key;\n    this.value = _value;\n    this.fnc = _fnc;\n  }\n}\n\nexport class CircomProcessorProof implements ICircomProcessorProof {\n  oldRoot: Hash;\n  newRoot: Hash;\n  siblings: Siblings;\n  oldKey: Hash;\n  oldValue: Hash;\n  newKey: Hash;\n  newValue: Hash;\n  isOld0: boolean;\n  // 0: NOP, 1: Update, 2: Insert, 3: Delete\n  fnc: number;\n\n  constructor(\n    _oldRoot: Hash = ZERO_HASH,\n    _newRoot: Hash = ZERO_HASH,\n    _siblings: Siblings = [],\n    _oldKey: Hash = ZERO_HASH,\n    _oldValue: Hash = ZERO_HASH,\n    _newKey: Hash = ZERO_HASH,\n    _newValue: Hash = ZERO_HASH,\n    _isOld0 = false,\n    _fnc = 0\n  ) {\n    this.oldRoot = _oldRoot;\n    this.newRoot = _newRoot;\n    this.siblings = _siblings;\n    this.oldKey = _oldKey;\n    this.oldValue = _oldValue;\n    this.newKey = _newKey;\n    this.newValue = _newValue;\n    this.isOld0 = _isOld0;\n    this.fnc = _fnc;\n  }\n}\n", "import { ITreeStorage } from '../../types/storage';\nimport { Hash, ZERO_HASH } from '../hash/hash';\n\nimport { Node } from '../../types';\nimport { NODE_TYPE_EMPTY, NODE_TYPE_LEAF, NODE_TYPE_MIDDLE } from '../../constants';\nimport { NodeEmpty, NodeLeaf, NodeMiddle } from '../node/node';\nimport {\n  bytesEqual,\n  checkEntryInField,\n  circomSiblingsFromSiblings,\n  getPath,\n  newHashFromBigInt,\n  setBitBigEndian\n} from '../utils';\nimport { Siblings } from '../../types/merkletree';\nimport { Entry } from '../../types/entry';\nimport { checkBigIntInField } from '../utils/crypto';\nimport { CircomProcessorProof, CircomVerifierProof } from './circom';\nimport {\n  ErrEntryIndexAlreadyExists,\n  ErrInvalidNodeFound,\n  ErrKeyNotFound,\n  ErrNotFound,\n  ErrNotWritable,\n  ErrReachedMaxLevel\n} from '../errors';\nimport { Proof } from './proof';\n\nexport class Merkletree {\n  #db: ITreeStorage;\n  #root!: Hash;\n  #writable: boolean;\n  #maxLevel: number;\n\n  constructor(_db: ITreeStorage, _writable: boolean, _maxLevels: number) {\n    this.#db = _db;\n    this.#writable = _writable;\n    this.#maxLevel = _maxLevels;\n  }\n\n  async root(): Promise<Hash> {\n    if (!this.#root) {\n      this.#root = await this.#db.getRoot();\n    }\n    return this.#root;\n  }\n\n  get maxLevels(): number {\n    return this.#maxLevel;\n  }\n\n  async add(k: bigint, v: bigint): Promise<void> {\n    if (!this.#writable) {\n      throw ErrNotWritable;\n    }\n\n    this.#root = await this.root();\n    const kHash = newHashFromBigInt(k);\n    const vHash = newHashFromBigInt(v);\n\n    const newNodeLeaf = new NodeLeaf(kHash, vHash);\n    const path = getPath(this.maxLevels, kHash.value);\n\n    const newRootKey = await this.addLeaf(newNodeLeaf, this.#root, 0, path);\n    this.#root = newRootKey;\n    await this.#db.setRoot(this.#root);\n  }\n\n  async updateNode(n: Node): Promise<Hash> {\n    if (!this.#writable) {\n      throw ErrNotWritable;\n    }\n\n    if (n.type === NODE_TYPE_EMPTY) {\n      return await n.getKey();\n    }\n\n    const k = await n.getKey();\n\n    await this.#db.put(k.value, n);\n    return k;\n  }\n\n  async addNode(n: Node): Promise<Hash> {\n    if (!this.#writable) {\n      throw ErrNotWritable;\n    }\n    if (n.type === NODE_TYPE_EMPTY) {\n      return await n.getKey();\n    }\n\n    const k = await n.getKey();\n    // if (typeof this.#db.get(k.value) !== 'undefined') {\n    //   throw ErrNodeKeyAlreadyExists;\n    // }\n\n    await this.#db.put(k.value, n);\n    return k;\n  }\n\n  async addEntry(e: Entry): Promise<void> {\n    if (!this.#writable) {\n      throw ErrNotWritable;\n    }\n\n    if (!checkEntryInField(e)) {\n      throw 'elements not inside the finite field over r';\n    }\n    this.#root = await this.#db.getRoot();\n    const hIndex = await e.hIndex();\n    const hValue = await e.hValue();\n\n    const newNodeLeaf = new NodeLeaf(hIndex, hValue);\n    const path = getPath(this.maxLevels, hIndex.value);\n\n    const newRootKey = await this.addLeaf(newNodeLeaf, this.#root, 0, path);\n    this.#root = newRootKey;\n    await this.#db.setRoot(this.#root);\n  }\n\n  async pushLeaf(\n    newLeaf: Node,\n    oldLeaf: Node,\n    lvl: number,\n    pathNewLeaf: Array<boolean>,\n    pathOldLeaf: Array<boolean>\n  ): Promise<Hash> {\n    if (lvl > this.#maxLevel - 2) {\n      throw new Error(ErrReachedMaxLevel);\n    }\n\n    let newNodeMiddle: NodeMiddle;\n\n    if (pathNewLeaf[lvl] === pathOldLeaf[lvl]) {\n      const nextKey = await this.pushLeaf(newLeaf, oldLeaf, lvl + 1, pathNewLeaf, pathOldLeaf);\n      if (pathNewLeaf[lvl]) {\n        newNodeMiddle = new NodeMiddle(new Hash(), nextKey);\n      } else {\n        newNodeMiddle = new NodeMiddle(nextKey, new Hash());\n      }\n\n      return await this.addNode(newNodeMiddle);\n    }\n\n    const oldLeafKey = await oldLeaf.getKey();\n    const newLeafKey = await newLeaf.getKey();\n\n    if (pathNewLeaf[lvl]) {\n      newNodeMiddle = new NodeMiddle(oldLeafKey, newLeafKey);\n    } else {\n      newNodeMiddle = new NodeMiddle(newLeafKey, oldLeafKey);\n    }\n\n    await this.addNode(newLeaf);\n    return await this.addNode(newNodeMiddle);\n  }\n\n  async addLeaf(newLeaf: NodeLeaf, key: Hash, lvl: number, path: Array<boolean>): Promise<Hash> {\n    if (lvl > this.#maxLevel - 1) {\n      throw new Error(ErrReachedMaxLevel);\n    }\n\n    const n = await this.getNode(key);\n    if (typeof n === 'undefined') {\n      throw ErrNotFound;\n    }\n\n    switch (n.type) {\n      case NODE_TYPE_EMPTY:\n        return this.addNode(newLeaf);\n      case NODE_TYPE_LEAF: {\n        const nKey = (n as NodeLeaf).entry[0];\n        const newLeafKey = newLeaf.entry[0];\n\n        if (bytesEqual(nKey.value, newLeafKey.value)) {\n          throw ErrEntryIndexAlreadyExists;\n        }\n\n        const pathOldLeaf = getPath(this.maxLevels, nKey.value);\n        return this.pushLeaf(newLeaf, n, lvl, path, pathOldLeaf);\n      }\n      case NODE_TYPE_MIDDLE: {\n        n as NodeMiddle;\n        let newNodeMiddle: NodeMiddle;\n\n        if (path[lvl]) {\n          const nextKey = await this.addLeaf(newLeaf, (n as NodeMiddle).childR, lvl + 1, path);\n          newNodeMiddle = new NodeMiddle((n as NodeMiddle).childL, nextKey);\n        } else {\n          const nextKey = await this.addLeaf(newLeaf, (n as NodeMiddle).childL, lvl + 1, path);\n          newNodeMiddle = new NodeMiddle(nextKey, (n as NodeMiddle).childR);\n        }\n\n        return this.addNode(newNodeMiddle);\n      }\n      default: {\n        throw ErrInvalidNodeFound;\n      }\n    }\n  }\n\n  async get(k: bigint): Promise<{ key: bigint; value: bigint; siblings: Siblings }> {\n    const kHash = newHashFromBigInt(k);\n    const path = getPath(this.maxLevels, kHash.value);\n\n    let nextKey = await this.root();\n    const siblings: Siblings = [];\n\n    for (let i = 0; i < this.maxLevels; i++) {\n      const n = await this.getNode(nextKey);\n      if (typeof n === 'undefined') {\n        throw ErrKeyNotFound;\n      }\n\n      switch (n.type) {\n        case NODE_TYPE_EMPTY:\n          return {\n            key: BigInt('0'),\n            value: BigInt('0'),\n            siblings\n          };\n        case NODE_TYPE_LEAF:\n          // if (bytesEqual(kHash.value, (n as NodeLeaf).entry[0].value)) {\n          //   return {\n          //     key: (n as NodeLeaf).entry[0].BigInt(),\n          //     value: (n as NodeLeaf).entry[1].BigInt(),\n          //     siblings,\n          //   };\n          // }\n          return {\n            key: (n as NodeLeaf).entry[0].bigInt(),\n            value: (n as NodeLeaf).entry[1].bigInt(),\n            siblings\n          };\n        case NODE_TYPE_MIDDLE:\n          if (path[i]) {\n            nextKey = (n as NodeMiddle).childR;\n            siblings.push((n as NodeMiddle).childL);\n          } else {\n            nextKey = (n as NodeMiddle).childL;\n            siblings.push((n as NodeMiddle).childR);\n          }\n          break;\n        default:\n          throw ErrInvalidNodeFound;\n      }\n    }\n\n    throw new Error(ErrReachedMaxLevel);\n  }\n\n  async update(k: bigint, v: bigint): Promise<CircomProcessorProof> {\n    if (!this.#writable) {\n      throw ErrNotWritable;\n    }\n\n    if (!checkBigIntInField(k)) {\n      throw 'key not inside the finite field';\n    }\n    if (!checkBigIntInField(v)) {\n      throw 'key not inside the finite field';\n    }\n\n    const kHash = newHashFromBigInt(k);\n    const vHash = newHashFromBigInt(v);\n\n    const path = getPath(this.maxLevels, kHash.value);\n\n    const cp = new CircomProcessorProof();\n\n    cp.fnc = 1;\n    cp.oldRoot = await this.root();\n    cp.oldKey = kHash;\n    cp.newKey = kHash;\n    cp.newValue = vHash;\n\n    let nextKey = await this.root();\n    const siblings: Siblings = [];\n\n    for (let i = 0; i < this.maxLevels; i += 1) {\n      const n = await this.getNode(nextKey);\n      if (typeof n === 'undefined') {\n        throw ErrNotFound;\n      }\n\n      switch (n.type) {\n        case NODE_TYPE_EMPTY:\n          throw ErrKeyNotFound;\n        case NODE_TYPE_LEAF:\n          if (bytesEqual(kHash.value, (n as NodeLeaf).entry[0].value)) {\n            cp.oldValue = (n as NodeLeaf).entry[1];\n            cp.siblings = circomSiblingsFromSiblings([...siblings], this.maxLevels);\n            const newNodeLeaf = new NodeLeaf(kHash, vHash);\n            await this.updateNode(newNodeLeaf);\n\n            const newRootKey = await this.recalculatePathUntilRoot(path, newNodeLeaf, siblings);\n\n            this.#root = newRootKey;\n            await this.#db.setRoot(newRootKey);\n            cp.newRoot = newRootKey;\n            return cp;\n          }\n          break;\n        case NODE_TYPE_MIDDLE:\n          if (path[i]) {\n            nextKey = (n as NodeMiddle).childR;\n            siblings.push((n as NodeMiddle).childL);\n          } else {\n            nextKey = (n as NodeMiddle).childL;\n            siblings.push((n as NodeMiddle).childR);\n          }\n          break;\n        default:\n          throw ErrInvalidNodeFound;\n      }\n    }\n\n    throw ErrKeyNotFound;\n  }\n\n  async getNode(k: Hash): Promise<Node | undefined> {\n    if (bytesEqual(k.value, ZERO_HASH.value)) {\n      return new NodeEmpty();\n    }\n    return await this.#db.get(k.value);\n  }\n\n  async recalculatePathUntilRoot(\n    path: Array<boolean>,\n    node: Node,\n    siblings: Siblings\n  ): Promise<Hash> {\n    for (let i = siblings.length - 1; i >= 0; i -= 1) {\n      const nodeKey = await node.getKey();\n      if (path[i]) {\n        node = new NodeMiddle(siblings[i], nodeKey);\n      } else {\n        node = new NodeMiddle(nodeKey, siblings[i]);\n      }\n      await this.addNode(node);\n    }\n\n    const nodeKey = await node.getKey();\n    return nodeKey;\n  }\n\n  // Delete removes the specified Key from the MerkleTree and updates the path\n  // from the deleted key to the Root with the new values.  This method removes\n  // the key from the MerkleTree, but does not remove the old nodes from the\n  // key-value database; this means that if the tree is accessed by an old Root\n  // where the key was not deleted yet, the key will still exist. If is desired\n  // to remove the key-values from the database that are not under the current\n  // Root, an option could be to dump all the leaves (using mt.DumpLeafs) and\n  // import them in a new MerkleTree in a new database (using\n  // mt.ImportDumpedLeafs), but this will loose all the Root history of the\n  // MerkleTree\n  async delete(k: bigint): Promise<void> {\n    if (!this.#writable) {\n      throw ErrNotWritable;\n    }\n\n    const kHash = newHashFromBigInt(k);\n    const path = getPath(this.maxLevels, kHash.value);\n\n    let nextKey = this.#root;\n    const siblings: Siblings = [];\n\n    for (let i = 0; i < this.#maxLevel; i += 1) {\n      const n = await this.getNode(nextKey);\n      if (typeof n === 'undefined') {\n        throw ErrNotFound;\n      }\n      switch (n.type) {\n        case NODE_TYPE_EMPTY:\n          throw ErrKeyNotFound;\n        case NODE_TYPE_LEAF:\n          if (bytesEqual(kHash.bytes, (n as NodeLeaf).entry[0].value)) {\n            await this.rmAndUpload(path, kHash, siblings);\n            return;\n          }\n          throw ErrKeyNotFound;\n        case NODE_TYPE_MIDDLE:\n          if (path[i]) {\n            nextKey = (n as NodeMiddle).childR;\n            siblings.push((n as NodeMiddle).childL);\n          } else {\n            nextKey = (n as NodeMiddle).childL;\n            siblings.push((n as NodeMiddle).childR);\n          }\n          break;\n        default:\n          throw ErrInvalidNodeFound;\n      }\n    }\n\n    throw ErrKeyNotFound;\n  }\n\n  async rmAndUpload(path: Array<boolean>, kHash: Hash, siblings: Siblings): Promise<void> {\n    if (siblings.length === 0) {\n      this.#root = ZERO_HASH;\n      await this.#db.setRoot(this.#root);\n      return;\n    }\n\n    const toUpload = siblings[siblings.length - 1];\n    if (siblings.length < 2) {\n      this.#root = siblings[0];\n      await this.#db.setRoot(this.#root);\n    }\n\n    for (let i = siblings.length - 2; i >= 0; i -= 1) {\n      if (!bytesEqual(siblings[i].value, ZERO_HASH.value)) {\n        let newNode: Node;\n        if (path[i]) {\n          newNode = new NodeMiddle(siblings[i], toUpload);\n        } else {\n          newNode = new NodeMiddle(toUpload, siblings[i]);\n        }\n        await this.addNode(newNode);\n\n        const newRootKey = await this.recalculatePathUntilRoot(path, newNode, siblings.slice(0, i));\n\n        this.#root = newRootKey;\n        await this.#db.setRoot(this.#root);\n        break;\n      }\n\n      if (i === 0) {\n        this.#root = toUpload;\n        await this.#db.setRoot(this.#root);\n        break;\n      }\n    }\n  }\n\n  async recWalk(key: Hash, f: (n: Node) => Promise<void>): Promise<void> {\n    const n = await this.getNode(key);\n    if (typeof n === 'undefined') {\n      throw ErrNotFound;\n    }\n\n    switch (n.type) {\n      case NODE_TYPE_EMPTY:\n        await f(n);\n        break;\n      case NODE_TYPE_LEAF:\n        await f(n);\n        break;\n      case NODE_TYPE_MIDDLE:\n        await f(n);\n        await this.walk((n as NodeMiddle).childL, f);\n        await this.walk((n as NodeMiddle).childR, f);\n        break;\n      default:\n        throw ErrInvalidNodeFound;\n    }\n  }\n\n  async walk(rootKey: Hash, f: (n: Node) => Promise<void>): Promise<void> {\n    if (bytesEqual(rootKey.value, ZERO_HASH.value)) {\n      rootKey = await this.root();\n    }\n    await this.walk(rootKey, f);\n  }\n\n  async generateCircomVerifierProof(k: bigint, rootKey: Hash): Promise<CircomVerifierProof> {\n    const cp = await this.generateSCVerifierProof(k, rootKey);\n    cp.siblings = circomSiblingsFromSiblings(cp.siblings, this.maxLevels);\n    return cp;\n  }\n\n  async generateSCVerifierProof(k: bigint, rootKey: Hash): Promise<CircomVerifierProof> {\n    if (bytesEqual(rootKey.value, ZERO_HASH.value)) {\n      rootKey = await this.root();\n    }\n\n    const { proof, value } = await this.generateProof(k, rootKey);\n    const cp = new CircomVerifierProof();\n    cp.root = rootKey;\n    cp.siblings = proof.siblings;\n    if (typeof proof.nodeAux !== 'undefined') {\n      cp.oldKey = proof.nodeAux.key;\n      cp.oldValue = proof.nodeAux.value;\n    } else {\n      cp.oldKey = ZERO_HASH;\n      cp.oldValue = ZERO_HASH;\n    }\n    cp.key = newHashFromBigInt(k);\n    cp.value = newHashFromBigInt(value);\n\n    if (proof.existence) {\n      cp.fnc = 0;\n    } else {\n      cp.fnc = 1;\n    }\n\n    return cp;\n  }\n\n  async generateProof(k: bigint, rootKey?: Hash): Promise<{ proof: Proof; value: bigint }> {\n    const p = new Proof();\n    let siblingKey: Hash;\n\n    const kHash = newHashFromBigInt(k);\n    const path = getPath(this.maxLevels, kHash.value);\n    if (!rootKey) {\n      rootKey = await this.root();\n    }\n    let nextKey = rootKey;\n\n    for (p.depth = 0; p.depth < this.maxLevels; p.depth += 1) {\n      const n = await this.getNode(nextKey);\n      if (typeof n === 'undefined') {\n        throw ErrNotFound;\n      }\n      switch (n.type) {\n        case NODE_TYPE_EMPTY:\n          return { proof: p, value: BigInt('0') };\n        case NODE_TYPE_LEAF:\n          if (bytesEqual(kHash.value, (n as NodeLeaf).entry[0].value)) {\n            p.existence = true;\n            return { proof: p, value: (n as NodeLeaf).entry[1].bigInt() };\n          }\n          p.nodeAux = {\n            key: (n as NodeLeaf).entry[0],\n            value: (n as NodeLeaf).entry[1]\n          };\n          return { proof: p, value: (n as NodeLeaf).entry[1].bigInt() };\n        case NODE_TYPE_MIDDLE:\n          if (path[p.depth]) {\n            nextKey = (n as NodeMiddle).childR;\n            siblingKey = (n as NodeMiddle).childL;\n          } else {\n            nextKey = (n as NodeMiddle).childL;\n            siblingKey = (n as NodeMiddle).childR;\n          }\n          break;\n        default:\n          throw ErrInvalidNodeFound;\n      }\n\n      if (!bytesEqual(siblingKey.value, ZERO_HASH.value)) {\n        setBitBigEndian(p.notEmpties, p.depth);\n        p.siblings.push(siblingKey);\n      }\n    }\n    throw ErrKeyNotFound;\n  }\n\n  async addAndGetCircomProof(k: bigint, v: bigint): Promise<CircomProcessorProof> {\n    const cp = new CircomProcessorProof();\n    cp.fnc = 2;\n    cp.oldRoot = await this.root();\n    let key = BigInt('0');\n    let value = BigInt('0');\n    let siblings: Siblings = [];\n    try {\n      const res = await this.get(k);\n      key = res.key;\n      value = res.value;\n      siblings = res.siblings;\n    } catch (err) {\n      if (err !== ErrKeyNotFound) {\n        throw err;\n      }\n    }\n\n    if (typeof key === 'undefined' || typeof value === 'undefined') {\n      throw 'key/value undefined';\n    }\n\n    cp.oldKey = newHashFromBigInt(key);\n    cp.oldValue = newHashFromBigInt(value);\n\n    if (bytesEqual(cp.oldKey.value, ZERO_HASH.value)) {\n      cp.isOld0 = true;\n    }\n\n    cp.siblings = circomSiblingsFromSiblings(siblings, this.maxLevels);\n    await this.add(k, v);\n\n    cp.newKey = newHashFromBigInt(k);\n    cp.newValue = newHashFromBigInt(v);\n    cp.newRoot = await this.root();\n\n    return cp;\n  }\n\n  // NOTE: for now it only prints to console, will be updated in future\n  async graphViz(rootKey: Hash): Promise<void> {\n    let cnt = 0;\n\n    await this.walk(rootKey, async (n: Node) => {\n      const k = await n.getKey();\n      let lr: [string, string];\n      let emptyNodes: string;\n\n      switch (n.type) {\n        case NODE_TYPE_EMPTY:\n          break;\n        case NODE_TYPE_LEAF:\n          // eslint-disable-next-line no-console\n          console.log(`\"${k.string()}\" [style=filled]`);\n          break;\n        case NODE_TYPE_MIDDLE:\n          lr = [(n as NodeMiddle).childL.string(), (n as NodeMiddle).childR.string()];\n          emptyNodes = '';\n\n          lr.forEach((s, i) => {\n            if (s === '0') {\n              lr[i] = `empty${cnt}`;\n              emptyNodes += `\"${lr[i]}\" [style=dashed,label=0];\\n`;\n              cnt += 1;\n            }\n          });\n          // eslint-disable-next-line no-console\n          console.log(`\"${k.string()}\" -> {\"${lr[1]}\"}`);\n          // eslint-disable-next-line no-console\n          console.log(emptyNodes);\n          break;\n        default:\n          break;\n      }\n    });\n\n    // eslint-disable-next-line no-console\n    console.log(`}\\n`);\n  }\n\n  async printGraphViz(rootKey: Hash): Promise<void> {\n    if (bytesEqual(rootKey.value, ZERO_HASH.value)) {\n      rootKey = await this.root();\n    }\n    // eslint-disable-next-line no-console\n    console.log(\n      `--------\\nGraphViz of the MerkleTree with RootKey ${rootKey.bigInt().toString(10)}\\n`\n    );\n    await this.graphViz(ZERO_HASH);\n    // eslint-disable-next-line no-console\n    console.log(\n      `End of GraphViz of the MerkleTree with RootKey ${rootKey.bigInt().toString(10)}\\n--------\\n`\n    );\n  }\n}\n", "import { Bytes } from '../../types';\nimport { NodeAux, Siblings } from '../../types/merkletree';\nimport { ELEM_BYTES_LEN, NOT_EMPTIES_LEN, PROOF_FLAG_LEN } from '../../constants';\nimport { siblignsFroomProof, siblings2Bytes } from '../utils';\n\nexport class Proof {\n  existence: boolean;\n  depth: number;\n  // notempties is a bitmap of non-empty siblings found in siblings\n  notEmpties: Bytes;\n  siblings: Siblings;\n  nodeAux: NodeAux | undefined;\n\n  constructor() {\n    this.existence = false;\n    this.depth = 0;\n    this.siblings = [];\n\n    const arrBuff = new ArrayBuffer(NOT_EMPTIES_LEN);\n    this.notEmpties = new Uint8Array(arrBuff);\n  }\n\n  bytes(): Bytes {\n    let bsLen = PROOF_FLAG_LEN + this.notEmpties.length + ELEM_BYTES_LEN * this.siblings.length;\n\n    if (typeof this.nodeAux !== 'undefined') {\n      bsLen += 2 * ELEM_BYTES_LEN;\n    }\n\n    const arrBuff = new ArrayBuffer(bsLen);\n    const bs: Bytes = new Uint8Array(arrBuff);\n\n    if (!this.existence) {\n      bs[0] |= 1;\n    }\n    bs[1] = this.depth;\n    bs.set(this.notEmpties, PROOF_FLAG_LEN);\n    const siblingBytes = siblings2Bytes(this.siblings);\n    bs.set(siblingBytes, this.notEmpties.length + PROOF_FLAG_LEN);\n\n    if (typeof this.nodeAux !== 'undefined') {\n      bs[0] |= 2;\n      bs.set(this.nodeAux.key.value, bs.length - 2 * ELEM_BYTES_LEN);\n      bs.set(this.nodeAux.value.value, bs.length - 1 * ELEM_BYTES_LEN);\n    }\n    return bs;\n  }\n\n  allSiblings(): Siblings {\n    return siblignsFroomProof(this);\n  }\n}\n", "export * from './hash';\nexport * from './node';\nexport * from './bytes';\nexport * from './storage';\nexport * from './merkletree';\n", "import { Bytes } from './bytes';\nimport { Hash } from '../lib/hash/hash';\n\nexport interface IHash {\n  value: Bytes;\n\n  string: () => string;\n  hex: () => string;\n  equals: (hash: Hash) => boolean;\n  bigInt(): bigint;\n}\n", "import { Hash } from '../lib/hash/hash';\nimport { Bytes } from './bytes';\n\nexport type NodeType = 0 | 1 | 2;\n\nexport interface Node {\n  type: NodeType;\n  getKey: () => Promise<Hash>;\n  value: Bytes;\n  string: string;\n}\n", "export type Bytes = Uint8Array;\n", "import { Node } from './node';\nimport { Bytes } from './bytes';\nimport { Hash } from '../lib/hash/hash';\n\nexport interface ITreeStorage {\n  get: (k: Bytes) => Promise<Node | undefined>;\n  put: (k: Bytes, n: Node) => Promise<void>;\n  getRoot: () => Promise<Hash>;\n  setRoot: (r: Hash) => Promise<void>;\n}\n\nexport type KV = {\n  k: Bytes;\n  v: Node;\n};\n\nexport type KVMap = Map<Bytes, KV>;\n", "import { Hash } from '../lib/hash/hash';\n\nexport type Path = Array<boolean>;\nexport type Siblings = Array<Hash>;\n\nexport type NodeAux = {\n  key: Hash;\n  value: Hash;\n};\n\n// CircomProcessorProof defines the ProcessorProof compatible with circom. Is\n// the data of the proof between the transition from one state to another.\nexport interface ICircomProcessorProof {\n  oldRoot: Hash;\n  newRoot: Hash;\n  siblings: Siblings;\n  oldKey: Hash;\n  oldValue: Hash;\n  newKey: Hash;\n  newValue: Hash;\n  isOld0: boolean;\n  // 0: NOP, 1: Update, 2: Insert, 3: Delete\n  fnc: number;\n}\n\n// CircomVerifierProof defines the VerifierProof compatible with circom. Is the\n// data of the proof that a certain leaf exists in the MerkleTree.\nexport type ICircomVerifierProof = {\n  root: Hash;\n  siblings: Siblings;\n  oldKey: Hash;\n  oldValue: Hash;\n  isOld0: boolean;\n  key: Hash;\n  value: Hash;\n  // 0: inclusion, 1: non inclusion\n  fnc: number;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAS,mBAAmB;AACxB,QAAM,IAAI,MAAM,iCAAiC;AACrD;AACA,SAAS,sBAAsB;AAC3B,QAAM,IAAI,MAAM,mCAAmC;AACvD;AAUA,SAAS,WAAW,KAAK;AACrB,MAAI,qBAAqB,YAAY;AAEjC,WAAO,WAAW,KAAK,CAAC;AAAA,EAC5B;AAEA,OACK,qBAAqB,oBAAoB,CAAC,qBAC3C,YACF;AACE,uBAAmB;AACnB,WAAO,WAAW,KAAK,CAAC;AAAA,EAC5B;AACA,MAAI;AAEA,WAAO,iBAAiB,KAAK,CAAC;AAAA,EAClC,SAASA,IAAP;AACE,QAAI;AAEA,aAAO,iBAAiB,KAAK,MAAM,KAAK,CAAC;AAAA,IAC7C,SAASA,IAAP;AAEE,aAAO,iBAAiB,KAAK,MAAM,KAAK,CAAC;AAAA,IAC7C;AAAA,EACJ;AACJ;AACA,SAAS,gBAAgB,QAAQ;AAC7B,MAAI,uBAAuB,cAAc;AAErC,WAAO,aAAa,MAAM;AAAA,EAC9B;AAEA,OACK,uBAAuB,uBAAuB,CAAC,uBAChD,cACF;AACE,yBAAqB;AACrB,WAAO,aAAa,MAAM;AAAA,EAC9B;AACA,MAAI;AAEA,WAAO,mBAAmB,MAAM;AAAA,EACpC,SAASA,IAAP;AACE,QAAI;AAEA,aAAO,mBAAmB,KAAK,MAAM,MAAM;AAAA,IAC/C,SAASA,IAAP;AAGE,aAAO,mBAAmB,KAAK,MAAM,MAAM;AAAA,IAC/C;AAAA,EACJ;AACJ;AAMA,SAAS,kBAAkB;AACvB,MAAI,CAAC,YAAY,CAAC,cAAc;AAC5B;AAAA,EACJ;AACA,aAAW;AACX,MAAI,aAAa,QAAQ;AACrB,YAAQ,aAAa,OAAO,KAAK;AAAA,EACrC,OAAO;AACH,iBAAa;AAAA,EACjB;AACA,MAAI,MAAM,QAAQ;AACd,eAAW;AAAA,EACf;AACJ;AAEA,SAAS,aAAa;AAClB,MAAI,UAAU;AACV;AAAA,EACJ;AACA,MAAI,UAAU,WAAW,eAAe;AACxC,aAAW;AAEX,MAAI,MAAM,MAAM;AAChB,SAAO,KAAK;AACR,mBAAe;AACf,YAAQ,CAAC;AACT,WAAO,EAAE,aAAa,KAAK;AACvB,UAAI,cAAc;AACd,qBAAa,YAAY,IAAI;AAAA,MACjC;AAAA,IACJ;AACA,iBAAa;AACb,UAAM,MAAM;AAAA,EAChB;AACA,iBAAe;AACf,aAAW;AACX,kBAAgB,OAAO;AAC3B;AACA,SAAS,SAAS,KAAK;AACnB,MAAI,OAAO,IAAI,MAAM,UAAU,SAAS,CAAC;AACzC,MAAI,UAAU,SAAS,GAAG;AACtB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,WAAK,IAAI,KAAK,UAAU;AAAA,IAC5B;AAAA,EACJ;AACA,QAAM,KAAK,IAAI,KAAK,KAAK,IAAI,CAAC;AAC9B,MAAI,MAAM,WAAW,KAAK,CAAC,UAAU;AACjC,eAAW,UAAU;AAAA,EACzB;AACJ;AAEA,SAAS,KAAK,KAAK,OAAO;AACtB,OAAK,MAAM;AACX,OAAK,QAAQ;AACjB;AAcA,SAAS,OAAO;AAAC;AAUjB,SAAS,QAAQ,MAAM;AACnB,QAAM,IAAI,MAAM,kCAAkC;AACtD;AAEA,SAAS,MAAM;AACX,SAAO;AACX;AACA,SAAS,MAAM,KAAK;AAChB,QAAM,IAAI,MAAM,gCAAgC;AACpD;AACA,SAAS,QAAQ;AACb,SAAO;AACX;AAgBA,SAAS,OAAO,mBAAmB;AAC/B,MAAI,YAAY,eAAe,KAAK,WAAW,IAAI;AACnD,MAAI,UAAU,KAAK,MAAM,SAAS;AAClC,MAAI,cAAc,KAAK,MAAO,YAAY,IAAK,GAAG;AAClD,MAAI,mBAAmB;AACnB,cAAU,UAAU,kBAAkB;AACtC,kBAAc,cAAc,kBAAkB;AAC9C,QAAI,cAAc,GAAG;AACjB;AACA,qBAAe;AAAA,IACnB;AAAA,EACJ;AACA,SAAO,CAAC,SAAS,WAAW;AAChC;AAGA,SAAS,SAAS;AACd,MAAI,cAAc,IAAI,KAAK;AAC3B,MAAI,MAAM,cAAc;AACxB,SAAO,MAAM;AACjB;AA1MA,IASI,kBACA,oBA6DA,OACA,UACA,cACA,YA4DA,OACA,UACA,SACA,KACA,MACA,SACA,UACA,SACA,QAIA,IACA,aACA,MACA,KACA,gBACA,oBACA,MAiBA,aACA,gBA2BA,WAOO,SA4BL;AAxON;AAAA;AASA,IAAI,mBAAmB;AACvB,IAAI,qBAAqB;AACzB,QAAI,OAAO,WAAO,eAAe,YAAY;AACzC,yBAAmB;AAAA,IACvB;AACA,QAAI,OAAO,WAAO,iBAAiB,YAAY;AAC3C,2BAAqB;AAAA,IACzB;AAuDA,IAAI,QAAQ,CAAC;AACb,IAAI,WAAW;AAEf,IAAI,aAAa;AAyDjB,SAAK,UAAU,MAAM,WAAW;AAC5B,WAAK,IAAI,MAAM,MAAM,KAAK,KAAK;AAAA,IACnC;AACA,IAAI,QAAQ;AACZ,IAAI,WAAW;AACf,IAAI,UAAU;AACd,IAAI,MAAM,CAAC;AACX,IAAI,OAAO,CAAC;AACZ,IAAI,UAAU;AACd,IAAI,WAAW,CAAC;AAChB,IAAI,UAAU,CAAC;AACf,IAAI,SAAS,CAAC;AAId,IAAI,KAAK;AACT,IAAI,cAAc;AAClB,IAAI,OAAO;AACX,IAAI,MAAM;AACV,IAAI,iBAAiB;AACrB,IAAI,qBAAqB;AACzB,IAAI,OAAO;AAiBX,IAAI,cAAc,WAAO,eAAe,CAAC;AACzC,IAAI,iBACA,YAAY,OACZ,YAAY,UACZ,YAAY,SACZ,YAAY,QACZ,YAAY,aACZ,WAAW;AACP,aAAO,IAAI,KAAK,EAAE,QAAQ;AAAA,IAC9B;AAmBJ,IAAI,YAAY,IAAI,KAAK;AAOlB,IAAI,UAAU;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAIA,IAAM,UAAU,CAEhB;AACA,WAAO,KAAK,OAAO,EAAE,QAAQ,CAAC,QAAQ;AAClC,YAAM,OAAO,IAAI,MAAM,GAAG;AAC1B,UAAI,SAAS;AACb,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,cAAM,MAAM,KAAK;AACjB,YAAI,MAAM,KAAK,SAAS,GAAG;AACvB,iBAAO,OAAO,QAAQ;AAAA,QAC1B,OAAO;AACH,mBAAS,OAAO,SAAS,OAAO,OAAO,CAAC;AAAA,QAC5C;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA;AAAA;;;ACxOD,SAAS,OAAO;AACZ,WAAS;AACT,MAAI,OACA;AACJ,WAAS,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,EAAE,GAAG;AAC7C,WAAO,KAAK,KAAK;AACjB,cAAU,KAAK,WAAW,CAAC,KAAK;AAAA,EACpC;AAEA,YAAU,IAAI,WAAW,CAAC,KAAK;AAC/B,YAAU,IAAI,WAAW,CAAC,KAAK;AACnC;AAEA,SAAS,kBAAkB,KAAK;AAC5B,MAAI,CAAC,QAAQ;AACT,SAAK;AAAA,EACT;AACA,MAAI,GAAG,GAAG,GAAG,KAAK,cAAc;AAChC,MAAI,MAAM,IAAI;AAEd,MAAI,MAAM,IAAI,GAAG;AACb,UAAM,IAAI,MAAM,gDAAgD;AAAA,EACpE;AAOA,iBAAe,IAAI,MAAM,OAAO,MAAM,IAAI,IAAI,MAAM,OAAO,MAAM,IAAI;AAGrE,QAAM,IAAI,IAAK,MAAM,IAAK,IAAI,YAAY;AAG1C,MAAI,eAAe,IAAI,MAAM,IAAI;AAEjC,MAAI,IAAI;AAER,OAAK,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG;AACtC,UACK,UAAU,IAAI,WAAW,CAAC,MAAM,KAChC,UAAU,IAAI,WAAW,IAAI,CAAC,MAAM,KACpC,UAAU,IAAI,WAAW,IAAI,CAAC,MAAM,IACrC,UAAU,IAAI,WAAW,IAAI,CAAC;AAClC,QAAI,OAAQ,OAAO,KAAM;AACzB,QAAI,OAAQ,OAAO,IAAK;AACxB,QAAI,OAAO,MAAM;AAAA,EACrB;AAEA,MAAI,iBAAiB,GAAG;AACpB,UACK,UAAU,IAAI,WAAW,CAAC,MAAM,IAChC,UAAU,IAAI,WAAW,IAAI,CAAC,MAAM;AACzC,QAAI,OAAO,MAAM;AAAA,EACrB,WAAW,iBAAiB,GAAG;AAC3B,UACK,UAAU,IAAI,WAAW,CAAC,MAAM,KAChC,UAAU,IAAI,WAAW,IAAI,CAAC,MAAM,IACpC,UAAU,IAAI,WAAW,IAAI,CAAC,MAAM;AACzC,QAAI,OAAQ,OAAO,IAAK;AACxB,QAAI,OAAO,MAAM;AAAA,EACrB;AAEA,SAAO;AACX;AAEA,SAAS,gBAAgB,KAAK;AAC1B,SACI,OAAQ,OAAO,KAAM,MACrB,OAAQ,OAAO,KAAM,MACrB,OAAQ,OAAO,IAAK,MACpB,OAAO,MAAM;AAErB;AAEA,SAAS,YAAY,OAAO,OAAO,KAAK;AACpC,MAAI;AACJ,MAAI,SAAS,CAAC;AACd,WAAS,IAAI,OAAO,IAAI,KAAK,KAAK,GAAG;AACjC,WAAO,MAAM,MAAM,OAAO,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI;AACzD,WAAO,KAAK,gBAAgB,GAAG,CAAC;AAAA,EACpC;AACA,SAAO,OAAO,KAAK,EAAE;AACzB;AAEA,SAAS,oBAAoB,OAAO;AAChC,MAAI,CAAC,QAAQ;AACT,SAAK;AAAA,EACT;AACA,MAAI;AACJ,MAAI,MAAM,MAAM;AAChB,MAAI,aAAa,MAAM;AACvB,MAAI,SAAS;AACb,MAAI,QAAQ,CAAC;AACb,MAAI,iBAAiB;AAGrB,WAAS,IAAI,GAAG,OAAO,MAAM,YAAY,IAAI,MAAM,KAAK,gBAAgB;AACpE,UAAM;AAAA,MACF;AAAA,QACI;AAAA,QACA;AAAA,QACA,IAAI,iBAAiB,OAAO,OAAO,IAAI;AAAA,MAC3C;AAAA,IACJ;AAAA,EACJ;AAGA,MAAI,eAAe,GAAG;AAClB,UAAM,MAAM,MAAM;AAClB,cAAU,OAAO,OAAO;AACxB,cAAU,OAAQ,OAAO,IAAK;AAC9B,cAAU;AAAA,EACd,WAAW,eAAe,GAAG;AACzB,WAAO,MAAM,MAAM,MAAM,KAAK,MAAM,MAAM;AAC1C,cAAU,OAAO,OAAO;AACxB,cAAU,OAAQ,OAAO,IAAK;AAC9B,cAAU,OAAQ,OAAO,IAAK;AAC9B,cAAU;AAAA,EACd;AAEA,QAAM,KAAK,MAAM;AAEjB,SAAO,MAAM,KAAK,EAAE;AACxB;AA+BA,SAAS,aAAa;AAClB,SAAOC,QAAO,sBAAsB,aAAa;AACrD;AAEA,SAAS,aAAa,MAAM,QAAQ;AAChC,MAAI,WAAW,IAAI,QAAQ;AACvB,UAAM,IAAI,WAAW,4BAA4B;AAAA,EACrD;AACA,MAAIA,QAAO,qBAAqB;AAE5B,WAAO,IAAI,WAAW,MAAM;AAC5B,SAAK,YAAYA,QAAO;AAAA,EAC5B,OAAO;AAEH,QAAI,SAAS,MAAM;AACf,aAAO,IAAIA,QAAO,MAAM;AAAA,IAC5B;AACA,SAAK,SAAS;AAAA,EAClB;AAEA,SAAO;AACX;AAYO,SAASA,QAAO,KAAK,kBAAkB,QAAQ;AAClD,MAAI,CAACA,QAAO,uBAAuB,EAAE,gBAAgBA,UAAS;AAC1D,WAAO,IAAIA,QAAO,KAAK,kBAAkB,MAAM;AAAA,EACnD;AAGA,MAAI,OAAO,QAAQ,UAAU;AACzB,QAAI,OAAO,qBAAqB,UAAU;AACtC,YAAM,IAAI;AAAA,QACN;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,YAAY,MAAM,GAAG;AAAA,EAChC;AACA,SAAO,KAAK,MAAM,KAAK,kBAAkB,MAAM;AACnD;AAUA,SAAS,KAAK,MAAM,OAAO,kBAAkB,QAAQ;AACjD,MAAI,OAAO,UAAU,UAAU;AAC3B,UAAM,IAAI,UAAU,uCAAuC;AAAA,EAC/D;AAEA,MAAI,OAAO,gBAAgB,eAAe,iBAAiB,aAAa;AACpE,WAAO,gBAAgB,MAAM,OAAO,kBAAkB,MAAM;AAAA,EAChE;AAEA,MAAI,OAAO,UAAU,UAAU;AAC3B,WAAO,WAAW,MAAM,OAAO,gBAAgB;AAAA,EACnD;AAEA,SAAO,WAAW,MAAM,KAAK;AACjC;AAgCA,SAAS,WAAW,MAAM;AACtB,MAAI,OAAO,SAAS,UAAU;AAC1B,UAAM,IAAI,UAAU,kCAAkC;AAAA,EAC1D,WAAW,OAAO,GAAG;AACjB,UAAM,IAAI,WAAW,sCAAsC;AAAA,EAC/D;AACJ;AAEA,SAAS,MAAM,MAAM,MAAMC,OAAM,UAAU;AACvC,aAAW,IAAI;AACf,MAAI,QAAQ,GAAG;AACX,WAAO,aAAa,MAAM,IAAI;AAAA,EAClC;AACA,MAAIA,UAAS,QAAW;AAIpB,WAAO,OAAO,aAAa,WACrB,aAAa,MAAM,IAAI,EAAE,KAAKA,OAAM,QAAQ,IAC5C,aAAa,MAAM,IAAI,EAAE,KAAKA,KAAI;AAAA,EAC5C;AACA,SAAO,aAAa,MAAM,IAAI;AAClC;AAUA,SAAS,YAAY,MAAM,MAAM;AAC7B,aAAW,IAAI;AACf,SAAO,aAAa,MAAM,OAAO,IAAI,IAAI,QAAQ,IAAI,IAAI,CAAC;AAC1D,MAAI,CAACD,QAAO,qBAAqB;AAC7B,aAAS,IAAI,GAAG,IAAI,MAAM,EAAE,GAAG;AAC3B,WAAK,KAAK;AAAA,IACd;AAAA,EACJ;AACA,SAAO;AACX;AAeA,SAAS,WAAW,MAAME,SAAQ,UAAU;AACxC,MAAI,OAAO,aAAa,YAAY,aAAa,IAAI;AACjD,eAAW;AAAA,EACf;AAEA,MAAI,CAACF,QAAO,WAAW,QAAQ,GAAG;AAC9B,UAAM,IAAI,UAAU,4CAA4C;AAAA,EACpE;AAEA,MAAI,SAAS,WAAWE,SAAQ,QAAQ,IAAI;AAC5C,SAAO,aAAa,MAAM,MAAM;AAEhC,MAAI,SAAS,KAAK,MAAMA,SAAQ,QAAQ;AAExC,MAAI,WAAW,QAAQ;AAInB,WAAO,KAAK,MAAM,GAAG,MAAM;AAAA,EAC/B;AAEA,SAAO;AACX;AAEA,SAAS,cAAc,MAAM,OAAO;AAChC,MAAI,SAAS,MAAM,SAAS,IAAI,IAAI,QAAQ,MAAM,MAAM,IAAI;AAC5D,SAAO,aAAa,MAAM,MAAM;AAChC,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAChC,SAAK,KAAK,MAAM,KAAK;AAAA,EACzB;AACA,SAAO;AACX;AAEA,SAAS,gBAAgB,MAAM,OAAO,YAAY,QAAQ;AACtD,QAAM;AAEN,MAAI,aAAa,KAAK,MAAM,aAAa,YAAY;AACjD,UAAM,IAAI,WAAW,2BAA2B;AAAA,EACpD;AAEA,MAAI,MAAM,aAAa,cAAc,UAAU,IAAI;AAC/C,UAAM,IAAI,WAAW,2BAA2B;AAAA,EACpD;AAEA,MAAI,eAAe,UAAa,WAAW,QAAW;AAClD,YAAQ,IAAI,WAAW,KAAK;AAAA,EAChC,WAAW,WAAW,QAAW;AAC7B,YAAQ,IAAI,WAAW,OAAO,UAAU;AAAA,EAC5C,OAAO;AACH,YAAQ,IAAI,WAAW,OAAO,YAAY,MAAM;AAAA,EACpD;AAEA,MAAIF,QAAO,qBAAqB;AAE5B,WAAO;AACP,SAAK,YAAYA,QAAO;AAAA,EAC5B,OAAO;AAEH,WAAO,cAAc,MAAM,KAAK;AAAA,EACpC;AACA,SAAO;AACX;AAEA,SAAS,WAAW,MAAM,KAAK;AAC3B,MAAI,iBAAiB,GAAG,GAAG;AACvB,QAAI,MAAM,QAAQ,IAAI,MAAM,IAAI;AAChC,WAAO,aAAa,MAAM,GAAG;AAE7B,QAAI,KAAK,WAAW,GAAG;AACnB,aAAO;AAAA,IACX;AAEA,QAAI,KAAK,MAAM,GAAG,GAAG,GAAG;AACxB,WAAO;AAAA,EACX;AAEA,MAAI,KAAK;AACL,QACK,OAAO,gBAAgB,eACpB,IAAI,kBAAkB,eAC1B,YAAY,KACd;AACE,UAAI,OAAO,IAAI,WAAW,YAAY,MAAM,IAAI,MAAM,GAAG;AACrD,eAAO,aAAa,MAAM,CAAC;AAAA,MAC/B;AACA,aAAO,cAAc,MAAM,GAAG;AAAA,IAClC;AAEA,QAAI,IAAI,SAAS,YAAY,MAAM,QAAQ,IAAI,IAAI,GAAG;AAClD,aAAO,cAAc,MAAM,IAAI,IAAI;AAAA,IACvC;AAAA,EACJ;AAEA,QAAM,IAAI;AAAA,IACN;AAAA,EACJ;AACJ;AAEA,SAAS,QAAQ,QAAQ;AAGrB,MAAI,UAAU,WAAW,GAAG;AACxB,UAAM,IAAI;AAAA,MACN,4DAEI,WAAW,EAAE,SAAS,EAAE,IACxB;AAAA,IACR;AAAA,EACJ;AACA,SAAO,SAAS;AACpB;AAUA,SAAS,iBAAiB,GAAG;AACzB,SAAO,CAAC,EAAE,KAAK,QAAQ,EAAE;AAC7B;AA0EA,SAAS,WAAWE,SAAQ,UAAU;AAClC,MAAI,iBAAiBA,OAAM,GAAG;AAC1B,WAAOA,QAAO;AAAA,EAClB;AACA,MACI,OAAO,gBAAgB,eACvB,OAAO,YAAY,WAAW,eAC7B,YAAY,OAAOA,OAAM,KAAKA,mBAAkB,cACnD;AACE,WAAOA,QAAO;AAAA,EAClB;AACA,MAAI,OAAOA,YAAW,UAAU;AAC5B,IAAAA,UAAS,KAAKA;AAAA,EAClB;AAEA,MAAI,MAAMA,QAAO;AACjB,MAAI,QAAQ;AAAG,WAAO;AAGtB,MAAI,cAAc;AAClB,aAAS;AACL,YAAQ,UAAU;AAAA,MACd,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,YAAYA,OAAM,EAAE;AAAA,MAC/B,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,MAAM;AAAA,MACjB,KAAK;AACD,eAAO,QAAQ;AAAA,MACnB,KAAK;AACD,eAAO,cAAcA,OAAM,EAAE;AAAA,MACjC;AACI,YAAI;AAAa,iBAAO,YAAYA,OAAM,EAAE;AAC5C,oBAAY,KAAK,UAAU,YAAY;AACvC,sBAAc;AAAA,IACtB;AAAA,EACJ;AACJ;AAGA,SAAS,aAAa,UAAU,OAAO,KAAK;AACxC,MAAI,cAAc;AASlB,MAAI,UAAU,UAAa,QAAQ,GAAG;AAClC,YAAQ;AAAA,EACZ;AAGA,MAAI,QAAQ,KAAK,QAAQ;AACrB,WAAO;AAAA,EACX;AAEA,MAAI,QAAQ,UAAa,MAAM,KAAK,QAAQ;AACxC,UAAM,KAAK;AAAA,EACf;AAEA,MAAI,OAAO,GAAG;AACV,WAAO;AAAA,EACX;AAGA,WAAS;AACT,aAAW;AAEX,MAAI,OAAO,OAAO;AACd,WAAO;AAAA,EACX;AAEA,MAAI,CAAC;AAAU,eAAW;AAE1B,SAAO,MAAM;AACT,YAAQ,UAAU;AAAA,MACd,KAAK;AACD,eAAO,SAAS,MAAM,OAAO,GAAG;AAAA,MAEpC,KAAK;AAAA,MACL,KAAK;AACD,eAAO,UAAU,MAAM,OAAO,GAAG;AAAA,MAErC,KAAK;AACD,eAAO,WAAW,MAAM,OAAO,GAAG;AAAA,MAEtC,KAAK;AAAA,MACL,KAAK;AACD,eAAO,YAAY,MAAM,OAAO,GAAG;AAAA,MAEvC,KAAK;AACD,eAAO,YAAY,MAAM,OAAO,GAAG;AAAA,MAEvC,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,aAAa,MAAM,OAAO,GAAG;AAAA,MAExC;AACI,YAAI;AACA,gBAAM,IAAI,UAAU,uBAAuB,QAAQ;AACvD,oBAAY,WAAW,IAAI,YAAY;AACvC,sBAAc;AAAA,IACtB;AAAA,EACJ;AACJ;AAMA,SAAS,KAAK,GAAG,GAAG,GAAG;AACnB,MAAI,IAAI,EAAE;AACV,IAAE,KAAK,EAAE;AACT,IAAE,KAAK;AACX;AAoIA,SAAS,qBAAqB,QAAQ,KAAK,YAAY,UAAU,KAAK;AAElE,MAAI,OAAO,WAAW;AAAG,WAAO;AAGhC,MAAI,OAAO,eAAe,UAAU;AAChC,eAAW;AACX,iBAAa;AAAA,EACjB,WAAW,aAAa,YAAY;AAChC,iBAAa;AAAA,EACjB,WAAW,aAAa,aAAa;AACjC,iBAAa;AAAA,EACjB;AACA,eAAa,CAAC;AACd,MAAI,MAAM,UAAU,GAAG;AAEnB,iBAAa,MAAM,IAAI,OAAO,SAAS;AAAA,EAC3C;AAGA,MAAI,aAAa;AAAG,iBAAa,OAAO,SAAS;AACjD,MAAI,cAAc,OAAO,QAAQ;AAC7B,QAAI;AAAK,aAAO;AAAA;AACX,mBAAa,OAAO,SAAS;AAAA,EACtC,WAAW,aAAa,GAAG;AACvB,QAAI;AAAK,mBAAa;AAAA;AACjB,aAAO;AAAA,EAChB;AAGA,MAAI,OAAO,QAAQ,UAAU;AACzB,UAAMF,QAAO,KAAK,KAAK,QAAQ;AAAA,EACnC;AAGA,MAAI,iBAAiB,GAAG,GAAG;AAEvB,QAAI,IAAI,WAAW,GAAG;AAClB,aAAO;AAAA,IACX;AACA,WAAO,aAAa,QAAQ,KAAK,YAAY,UAAU,GAAG;AAAA,EAC9D,WAAW,OAAO,QAAQ,UAAU;AAChC,UAAM,MAAM;AACZ,QACIA,QAAO,uBACP,OAAO,WAAW,UAAU,YAAY,YAC1C;AACE,UAAI,KAAK;AACL,eAAO,WAAW,UAAU,QAAQ;AAAA,UAChC;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,MACJ,OAAO;AACH,eAAO,WAAW,UAAU,YAAY;AAAA,UACpC;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,aAAa,QAAQ,CAAC,GAAG,GAAG,YAAY,UAAU,GAAG;AAAA,EAChE;AAEA,QAAM,IAAI,UAAU,sCAAsC;AAC9D;AAEA,SAAS,aAAa,KAAK,KAAK,YAAY,UAAU,KAAK;AACvD,MAAI,YAAY;AAChB,MAAI,YAAY,IAAI;AACpB,MAAI,YAAY,IAAI;AAEpB,MAAI,aAAa,QAAW;AACxB,eAAW,OAAO,QAAQ,EAAE,YAAY;AACxC,QACI,aAAa,UACb,aAAa,WACb,aAAa,aACb,aAAa,YACf;AACE,UAAI,IAAI,SAAS,KAAK,IAAI,SAAS,GAAG;AAClC,eAAO;AAAA,MACX;AACA,kBAAY;AACZ,mBAAa;AACb,mBAAa;AACb,oBAAc;AAAA,IAClB;AAAA,EACJ;AAEA,WAASG,MAAK,KAAKC,IAAG;AAClB,QAAI,cAAc,GAAG;AACjB,aAAO,IAAIA;AAAA,IACf,OAAO;AACH,aAAO,IAAI,aAAaA,KAAI,SAAS;AAAA,IACzC;AAAA,EACJ;AAEA,MAAI;AACJ,MAAI,KAAK;AACL,QAAI,aAAa;AACjB,SAAK,IAAI,YAAY,IAAI,WAAW,KAAK;AACrC,UACID,MAAK,KAAK,CAAC,MACXA,MAAK,KAAK,eAAe,KAAK,IAAI,IAAI,UAAU,GAClD;AACE,YAAI,eAAe;AAAI,uBAAa;AACpC,YAAI,IAAI,aAAa,MAAM;AACvB,iBAAO,aAAa;AAAA,MAC5B,OAAO;AACH,YAAI,eAAe;AAAI,eAAK,IAAI;AAChC,qBAAa;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ,OAAO;AACH,QAAI,aAAa,YAAY;AACzB,mBAAa,YAAY;AAC7B,SAAK,IAAI,YAAY,KAAK,GAAG,KAAK;AAC9B,UAAI,QAAQ;AACZ,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,YAAIA,MAAK,KAAK,IAAI,CAAC,MAAMA,MAAK,KAAK,CAAC,GAAG;AACnC,kBAAQ;AACR;AAAA,QACJ;AAAA,MACJ;AACA,UAAI;AAAO,eAAO;AAAA,IACtB;AAAA,EACJ;AAEA,SAAO;AACX;AAcA,SAAS,SAAS,KAAKD,SAAQ,QAAQ,QAAQ;AAC3C,WAAS,OAAO,MAAM,KAAK;AAC3B,MAAI,YAAY,IAAI,SAAS;AAC7B,MAAI,CAAC,QAAQ;AACT,aAAS;AAAA,EACb,OAAO;AACH,aAAS,OAAO,MAAM;AACtB,QAAI,SAAS,WAAW;AACpB,eAAS;AAAA,IACb;AAAA,EACJ;AAGA,MAAI,SAASA,QAAO;AACpB,MAAI,SAAS,MAAM;AAAG,UAAM,IAAI,UAAU,oBAAoB;AAE9D,MAAI,SAAS,SAAS,GAAG;AACrB,aAAS,SAAS;AAAA,EACtB;AACA,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC7B,QAAI,SAAS,SAASA,QAAO,OAAO,IAAI,GAAG,CAAC,GAAG,EAAE;AACjD,QAAI,MAAM,MAAM;AAAG,aAAO;AAC1B,QAAI,SAAS,KAAK;AAAA,EACtB;AACA,SAAO;AACX;AAEA,SAAS,UAAU,KAAKA,SAAQ,QAAQ,QAAQ;AAC5C,SAAO;AAAA,IACH,YAAYA,SAAQ,IAAI,SAAS,MAAM;AAAA,IACvC;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;AAEA,SAAS,WAAW,KAAKA,SAAQ,QAAQ,QAAQ;AAC7C,SAAO,WAAW,aAAaA,OAAM,GAAG,KAAK,QAAQ,MAAM;AAC/D;AAEA,SAAS,YAAY,KAAKA,SAAQ,QAAQ,QAAQ;AAC9C,SAAO,WAAW,KAAKA,SAAQ,QAAQ,MAAM;AACjD;AAEA,SAAS,YAAY,KAAKA,SAAQ,QAAQ,QAAQ;AAC9C,SAAO,WAAW,cAAcA,OAAM,GAAG,KAAK,QAAQ,MAAM;AAChE;AAEA,SAAS,UAAU,KAAKA,SAAQ,QAAQ,QAAQ;AAC5C,SAAO;AAAA,IACH,eAAeA,SAAQ,IAAI,SAAS,MAAM;AAAA,IAC1C;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;AAqFA,SAAS,YAAY,KAAK,OAAO,KAAK;AAClC,MAAI,UAAU,KAAK,QAAQ,IAAI,QAAQ;AACnC,WAAO,oBAAoB,GAAG;AAAA,EAClC,OAAO;AACH,WAAO,oBAAoB,IAAI,MAAM,OAAO,GAAG,CAAC;AAAA,EACpD;AACJ;AAEA,SAAS,UAAU,KAAK,OAAO,KAAK;AAChC,QAAM,KAAK,IAAI,IAAI,QAAQ,GAAG;AAC9B,MAAI,MAAM,CAAC;AAEX,MAAI,IAAI;AACR,SAAO,IAAI,KAAK;AACZ,QAAI,YAAY,IAAI;AACpB,QAAI,YAAY;AAChB,QAAI,mBACA,YAAY,MACN,IACA,YAAY,MACZ,IACA,YAAY,MACZ,IACA;AAEV,QAAI,IAAI,oBAAoB,KAAK;AAC7B,UAAI,YAAY,WAAW,YAAY;AAEvC,cAAQ,kBAAkB;AAAA,QACtB,KAAK;AACD,cAAI,YAAY,KAAM;AAClB,wBAAY;AAAA,UAChB;AACA;AAAA,QACJ,KAAK;AACD,uBAAa,IAAI,IAAI;AACrB,eAAK,aAAa,SAAU,KAAM;AAC9B,6BACM,YAAY,OAAS,IAAQ,aAAa;AAChD,gBAAI,gBAAgB,KAAM;AACtB,0BAAY;AAAA,YAChB;AAAA,UACJ;AACA;AAAA,QACJ,KAAK;AACD,uBAAa,IAAI,IAAI;AACrB,sBAAY,IAAI,IAAI;AACpB,eACK,aAAa,SAAU,QACvB,YAAY,SAAU,KACzB;AACE,6BACM,YAAY,OAAQ,MACpB,aAAa,OAAS,IACvB,YAAY;AACjB,gBACI,gBAAgB,SACf,gBAAgB,SAAU,gBAAgB,QAC7C;AACE,0BAAY;AAAA,YAChB;AAAA,UACJ;AACA;AAAA,QACJ,KAAK;AACD,uBAAa,IAAI,IAAI;AACrB,sBAAY,IAAI,IAAI;AACpB,uBAAa,IAAI,IAAI;AACrB,eACK,aAAa,SAAU,QACvB,YAAY,SAAU,QACtB,aAAa,SAAU,KAC1B;AACE,6BACM,YAAY,OAAQ,MACpB,aAAa,OAAS,MACtB,YAAY,OAAS,IACtB,aAAa;AAClB,gBACI,gBAAgB,SAChB,gBAAgB,SAClB;AACE,0BAAY;AAAA,YAChB;AAAA,UACJ;AAAA,MACR;AAAA,IACJ;AAEA,QAAI,cAAc,MAAM;AAGpB,kBAAY;AACZ,yBAAmB;AAAA,IACvB,WAAW,YAAY,OAAQ;AAE3B,mBAAa;AACb,UAAI,KAAO,cAAc,KAAM,OAAS,KAAM;AAC9C,kBAAY,QAAU,YAAY;AAAA,IACtC;AAEA,QAAI,KAAK,SAAS;AAClB,SAAK;AAAA,EACT;AAEA,SAAO,sBAAsB,GAAG;AACpC;AAOA,SAAS,sBAAsB,YAAY;AACvC,MAAI,MAAM,WAAW;AACrB,MAAI,OAAO,sBAAsB;AAC7B,WAAO,OAAO,aAAa,MAAM,QAAQ,UAAU;AAAA,EACvD;AAGA,MAAI,MAAM;AACV,MAAI,IAAI;AACR,SAAO,IAAI,KAAK;AACZ,WAAO,OAAO,aAAa;AAAA,MACvB;AAAA,MACA,WAAW,MAAM,GAAI,KAAK,oBAAqB;AAAA,IACnD;AAAA,EACJ;AACA,SAAO;AACX;AAEA,SAAS,WAAW,KAAK,OAAO,KAAK;AACjC,MAAI,MAAM;AACV,QAAM,KAAK,IAAI,IAAI,QAAQ,GAAG;AAE9B,WAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAC9B,WAAO,OAAO,aAAa,IAAI,KAAK,GAAI;AAAA,EAC5C;AACA,SAAO;AACX;AAEA,SAAS,YAAY,KAAK,OAAO,KAAK;AAClC,MAAI,MAAM;AACV,QAAM,KAAK,IAAI,IAAI,QAAQ,GAAG;AAE9B,WAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAC9B,WAAO,OAAO,aAAa,IAAI,EAAE;AAAA,EACrC;AACA,SAAO;AACX;AAEA,SAAS,SAAS,KAAK,OAAO,KAAK;AAC/B,MAAI,MAAM,IAAI;AAEd,MAAI,CAAC,SAAS,QAAQ;AAAG,YAAQ;AACjC,MAAI,CAAC,OAAO,MAAM,KAAK,MAAM;AAAK,UAAM;AAExC,MAAI,MAAM;AACV,WAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAC9B,WAAO,MAAM,IAAI,EAAE;AAAA,EACvB;AACA,SAAO;AACX;AAEA,SAAS,aAAa,KAAK,OAAO,KAAK;AACnC,MAAI,QAAQ,IAAI,MAAM,OAAO,GAAG;AAChC,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACtC,WAAO,OAAO,aAAa,MAAM,KAAK,MAAM,IAAI,KAAK,GAAG;AAAA,EAC5D;AACA,SAAO;AACX;AAyCA,SAAS,YAAY,QAAQ,KAAK,QAAQ;AACtC,MAAI,SAAS,MAAM,KAAK,SAAS;AAC7B,UAAM,IAAI,WAAW,oBAAoB;AAC7C,MAAI,SAAS,MAAM;AACf,UAAM,IAAI,WAAW,uCAAuC;AACpE;AA0KA,SAAS,SAAS,KAAK,OAAO,QAAQ,KAAK,KAAK,KAAK;AACjD,MAAI,CAAC,iBAAiB,GAAG;AACrB,UAAM,IAAI,UAAU,6CAA6C;AACrE,MAAI,QAAQ,OAAO,QAAQ;AACvB,UAAM,IAAI,WAAW,mCAAmC;AAC5D,MAAI,SAAS,MAAM,IAAI;AAAQ,UAAM,IAAI,WAAW,oBAAoB;AAC5E;AA2DA,SAAS,kBAAkB,KAAK,OAAO,QAAQ,cAAc;AACzD,MAAI,QAAQ;AAAG,YAAQ,QAAS,QAAQ;AACxC,WAAS,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI,SAAS,QAAQ,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG;AAC9D,QAAI,SAAS,MACR,QAAS,OAAS,KAAK,eAAe,IAAI,IAAI,SAC7C,eAAe,IAAI,IAAI,KAAK;AAAA,EACtC;AACJ;AAoCA,SAAS,kBAAkB,KAAK,OAAO,QAAQ,cAAc;AACzD,MAAI,QAAQ;AAAG,YAAQ,aAAa,QAAQ;AAC5C,WAAS,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI,SAAS,QAAQ,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG;AAC9D,QAAI,SAAS,KAAM,WAAY,eAAe,IAAI,IAAI,KAAK,IAAM;AAAA,EACrE;AACJ;AAmKA,SAAS,aAAa,KAAK,OAAO,QAAQ,KAAK,KAAK,KAAK;AACrD,MAAI,SAAS,MAAM,IAAI;AAAQ,UAAM,IAAI,WAAW,oBAAoB;AACxE,MAAI,SAAS;AAAG,UAAM,IAAI,WAAW,oBAAoB;AAC7D;AAEA,SAAS,WAAW,KAAK,OAAO,QAAQ,cAAc,UAAU;AAC5D,MAAI,CAAC,UAAU;AACX;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACA,eAAa,KAAK,OAAO,QAAQ,cAAc,IAAI,CAAC;AACpD,SAAO,SAAS;AACpB;AAUA,SAAS,YAAY,KAAK,OAAO,QAAQ,cAAc,UAAU;AAC7D,MAAI,CAAC,UAAU;AACX;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACA,eAAa,KAAK,OAAO,QAAQ,cAAc,IAAI,CAAC;AACpD,SAAO,SAAS;AACpB;AAwIA,SAAS,YAAY,KAAK;AAEtB,QAAM,WAAW,GAAG,EAAE,QAAQ,mBAAmB,EAAE;AAEnD,MAAI,IAAI,SAAS;AAAG,WAAO;AAE3B,SAAO,IAAI,SAAS,MAAM,GAAG;AACzB,UAAM,MAAM;AAAA,EAChB;AACA,SAAO;AACX;AAEA,SAAS,WAAW,KAAK;AACrB,MAAI,IAAI;AAAM,WAAO,IAAI,KAAK;AAC9B,SAAO,IAAI,QAAQ,cAAc,EAAE;AACvC;AAEA,SAAS,MAAM,GAAG;AACd,MAAI,IAAI;AAAI,WAAO,MAAM,EAAE,SAAS,EAAE;AACtC,SAAO,EAAE,SAAS,EAAE;AACxB;AAEA,SAAS,YAAYA,SAAQ,OAAO;AAChC,UAAQ,SAAS;AACjB,MAAI;AACJ,MAAI,SAASA,QAAO;AACpB,MAAI,gBAAgB;AACpB,MAAI,QAAQ,CAAC;AAEb,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC7B,gBAAYA,QAAO,WAAW,CAAC;AAG/B,QAAI,YAAY,SAAU,YAAY,OAAQ;AAE1C,UAAI,CAAC,eAAe;AAEhB,YAAI,YAAY,OAAQ;AAEpB,eAAK,SAAS,KAAK;AAAI,kBAAM,KAAK,KAAM,KAAM,GAAI;AAClD;AAAA,QACJ,WAAW,IAAI,MAAM,QAAQ;AAEzB,eAAK,SAAS,KAAK;AAAI,kBAAM,KAAK,KAAM,KAAM,GAAI;AAClD;AAAA,QACJ;AAGA,wBAAgB;AAEhB;AAAA,MACJ;AAGA,UAAI,YAAY,OAAQ;AACpB,aAAK,SAAS,KAAK;AAAI,gBAAM,KAAK,KAAM,KAAM,GAAI;AAClD,wBAAgB;AAChB;AAAA,MACJ;AAGA,mBACO,gBAAgB,SAAW,KAAO,YAAY,SACjD;AAAA,IACR,WAAW,eAAe;AAEtB,WAAK,SAAS,KAAK;AAAI,cAAM,KAAK,KAAM,KAAM,GAAI;AAAA,IACtD;AAEA,oBAAgB;AAGhB,QAAI,YAAY,KAAM;AAClB,WAAK,SAAS,KAAK;AAAG;AACtB,YAAM,KAAK,SAAS;AAAA,IACxB,WAAW,YAAY,MAAO;AAC1B,WAAK,SAAS,KAAK;AAAG;AACtB,YAAM,KAAM,aAAa,IAAO,KAAO,YAAY,KAAQ,GAAI;AAAA,IACnE,WAAW,YAAY,OAAS;AAC5B,WAAK,SAAS,KAAK;AAAG;AACtB,YAAM;AAAA,QACD,aAAa,KAAO;AAAA,QACnB,aAAa,IAAO,KAAQ;AAAA,QAC7B,YAAY,KAAQ;AAAA,MACzB;AAAA,IACJ,WAAW,YAAY,SAAU;AAC7B,WAAK,SAAS,KAAK;AAAG;AACtB,YAAM;AAAA,QACD,aAAa,KAAQ;AAAA,QACpB,aAAa,KAAO,KAAQ;AAAA,QAC5B,aAAa,IAAO,KAAQ;AAAA,QAC7B,YAAY,KAAQ;AAAA,MACzB;AAAA,IACJ,OAAO;AACH,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACxC;AAAA,EACJ;AAEA,SAAO;AACX;AAEA,SAAS,aAAa,KAAK;AACvB,MAAI,YAAY,CAAC;AACjB,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AAEjC,cAAU,KAAK,IAAI,WAAW,CAAC,IAAI,GAAI;AAAA,EAC3C;AACA,SAAO;AACX;AAEA,SAAS,eAAe,KAAK,OAAO;AAChC,MAAI,GAAG,IAAI;AACX,MAAI,YAAY,CAAC;AACjB,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACjC,SAAK,SAAS,KAAK;AAAG;AAEtB,QAAI,IAAI,WAAW,CAAC;AACpB,SAAK,KAAK;AACV,SAAK,IAAI;AACT,cAAU,KAAK,EAAE;AACjB,cAAU,KAAK,EAAE;AAAA,EACrB;AAEA,SAAO;AACX;AAEA,SAAS,cAAc,KAAK;AACxB,SAAO,kBAAkB,YAAY,GAAG,CAAC;AAC7C;AAEA,SAAS,WAAW,KAAK,KAAK,QAAQ,QAAQ;AAC1C,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC7B,QAAI,IAAI,UAAU,IAAI,UAAU,KAAK,IAAI;AAAQ;AACjD,QAAI,IAAI,UAAU,IAAI;AAAA,EAC1B;AACA,SAAO;AACX;AAEA,SAAS,MAAM,KAAK;AAChB,SAAO,QAAQ;AACnB;AAKA,SAAS,SAAS,KAAK;AACnB,SACI,OAAO,SACN,CAAC,CAAC,IAAI,aAAa,aAAa,GAAG,KAAK,aAAa,GAAG;AAEjE;AAEA,SAAS,aAAa,KAAK;AACvB,SACI,CAAC,CAAC,IAAI,eACN,OAAO,IAAI,YAAY,aAAa,cACpC,IAAI,YAAY,SAAS,GAAG;AAEpC;AAGA,SAAS,aAAa,KAAK;AACvB,SACI,OAAO,IAAI,gBAAgB,cAC3B,OAAO,IAAI,UAAU,cACrB,aAAa,IAAI,MAAM,GAAG,CAAC,CAAC;AAEpC;AAEA,SAAS,YAAY,QAAQ,QAAQ,MAAM,MAAM,QAAQ;AACrD,MAAIG,IAAG;AACP,MAAI,OAAO,SAAS,IAAI,OAAO;AAC/B,MAAI,QAAQ,KAAK,QAAQ;AACzB,MAAI,QAAQ,QAAQ;AACpB,MAAI,QAAQ;AACZ,MAAI,IAAI,OAAO,SAAS,IAAI;AAC5B,MAAI,IAAI,OAAO,KAAK;AACpB,MAAI,IAAI,OAAO,SAAS;AAExB,OAAK;AAEL,EAAAA,KAAI,KAAM,KAAK,CAAC,SAAS;AACzB,QAAM,CAAC;AACP,WAAS;AACT,SAAO,QAAQ,GAAGA,KAAIA,KAAI,MAAM,OAAO,SAAS,IAAI,KAAK,GAAG,SAAS,GAAG;AAAA,EAAC;AAEzE,MAAIA,MAAM,KAAK,CAAC,SAAS;AACzB,EAAAA,OAAM,CAAC;AACP,WAAS;AACT,SAAO,QAAQ,GAAG,IAAI,IAAI,MAAM,OAAO,SAAS,IAAI,KAAK,GAAG,SAAS,GAAG;AAAA,EAAC;AAEzE,MAAIA,OAAM,GAAG;AACT,IAAAA,KAAI,IAAI;AAAA,EACZ,WAAWA,OAAM,MAAM;AACnB,WAAO,IAAI,OAAO,IAAI,KAAK,KAAK;AAAA,EACpC,OAAO;AACH,QAAI,IAAI,KAAK,IAAI,GAAG,IAAI;AACxB,IAAAA,KAAIA,KAAI;AAAA,EACZ;AACA,UAAQ,IAAI,KAAK,KAAK,IAAI,KAAK,IAAI,GAAGA,KAAI,IAAI;AAClD;AAEA,SAAS,aAAa,QAAQ,OAAO,QAAQ,MAAM,MAAM,QAAQ;AAC7D,MAAIA,IAAG,GAAG;AACV,MAAI,OAAO,SAAS,IAAI,OAAO;AAC/B,MAAI,QAAQ,KAAK,QAAQ;AACzB,MAAI,QAAQ,QAAQ;AACpB,MAAI,KAAK,SAAS,KAAK,KAAK,IAAI,GAAG,GAAG,IAAI,KAAK,IAAI,GAAG,GAAG,IAAI;AAC7D,MAAI,IAAI,OAAO,IAAI,SAAS;AAC5B,MAAI,IAAI,OAAO,IAAI;AACnB,MAAI,IAAI,QAAQ,KAAM,UAAU,KAAK,IAAI,QAAQ,IAAK,IAAI;AAE1D,UAAQ,KAAK,IAAI,KAAK;AAEtB,MAAI,MAAM,KAAK,KAAK,UAAU,UAAU;AACpC,QAAI,MAAM,KAAK,IAAI,IAAI;AACvB,IAAAA,KAAI;AAAA,EACR,OAAO;AACH,IAAAA,KAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG;AACzC,QAAI,SAAS,IAAI,KAAK,IAAI,GAAG,CAACA,EAAC,KAAK,GAAG;AACnC,MAAAA;AACA,WAAK;AAAA,IACT;AACA,QAAIA,KAAI,SAAS,GAAG;AAChB,eAAS,KAAK;AAAA,IAClB,OAAO;AACH,eAAS,KAAK,KAAK,IAAI,GAAG,IAAI,KAAK;AAAA,IACvC;AACA,QAAI,QAAQ,KAAK,GAAG;AAChB,MAAAA;AACA,WAAK;AAAA,IACT;AAEA,QAAIA,KAAI,SAAS,MAAM;AACnB,UAAI;AACJ,MAAAA,KAAI;AAAA,IACR,WAAWA,KAAI,SAAS,GAAG;AACvB,WAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI;AACtC,MAAAA,KAAIA,KAAI;AAAA,IACZ,OAAO;AACH,UAAI,QAAQ,KAAK,IAAI,GAAG,QAAQ,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI;AACrD,MAAAA,KAAI;AAAA,IACR;AAAA,EACJ;AAEA,SAEI,QAAQ,GACR,OAAO,SAAS,KAAK,IAAI,KAAM,KAAK,GAAG,KAAK,KAAK,QAAQ,GAC3D;AAAA,EAAC;AAEH,EAAAA,KAAKA,MAAK,OAAQ;AAClB,UAAQ;AACR,SAEI,OAAO,GACP,OAAO,SAAS,KAAKA,KAAI,KAAM,KAAK,GAAGA,MAAK,KAAK,QAAQ,GAC3D;AAAA,EAAC;AAEH,SAAO,SAAS,IAAI,MAAM,IAAI;AAClC;AAvnEA,IAUI,QACA,WACA,KACA,QA6oCA,sBAutBA;AAj3DJ;AAAA;AAAA;AAAA;AAUA,IAAI,SAAS,CAAC;AACd,IAAI,YAAY,CAAC;AACjB,IAAI,MAAM,OAAO,eAAe,cAAc,aAAa;AAC3D,IAAI,SAAS;AA0Jb,IAAAL,QAAO,sBACH,WAAO,wBAAwB,SAAY,WAAO,sBAAsB;AAoD5E,IAAAA,QAAO,WAAW;AAGlB,IAAAA,QAAO,WAAW,SAAS,KAAK;AAC5B,UAAI,YAAYA,QAAO;AACvB,aAAO;AAAA,IACX;AA0BA,IAAAA,QAAO,OAAO,SAAS,OAAO,kBAAkB,QAAQ;AACpD,aAAO,KAAK,MAAM,OAAO,kBAAkB,MAAM;AAAA,IACrD;AAEA,IAAAA,QAAO,aAAa,WAAW;AAE/B,QAAIA,QAAO,qBAAqB;AAC5B,MAAAA,QAAO,UAAU,YAAY,WAAW;AACxC,MAAAA,QAAO,YAAY;AACnB,UACI,OAAO,WAAW,eAClB,OAAO,WACPA,QAAO,OAAO,aAAaA,SAC7B;AAAA,MAMF;AAAA,IACJ;AA8BA,IAAAA,QAAO,QAAQ,SAAS,MAAMC,OAAM,UAAU;AAC1C,aAAO,MAAM,MAAM,MAAMA,OAAM,QAAQ;AAAA,IAC3C;AAgBA,IAAAD,QAAO,cAAc,SAAS,MAAM;AAChC,aAAO,YAAY,MAAM,IAAI;AAAA,IACjC;AAIA,IAAAA,QAAO,kBAAkB,SAAS,MAAM;AACpC,aAAO,YAAY,MAAM,IAAI;AAAA,IACjC;AAyHA,IAAAA,QAAO,WAAW;AAKlB,IAAAA,QAAO,UAAU,SAAS,QAAQ,GAAG,GAAG;AACpC,UAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG;AAC9C,cAAM,IAAI,UAAU,2BAA2B;AAAA,MACnD;AAEA,UAAI,MAAM;AAAG,eAAO;AAEpB,UAAI,IAAI,EAAE;AACV,UAAI,IAAI,EAAE;AAEV,eAAS,IAAI,GAAG,MAAM,KAAK,IAAI,GAAG,CAAC,GAAG,IAAI,KAAK,EAAE,GAAG;AAChD,YAAI,EAAE,OAAO,EAAE,IAAI;AACf,cAAI,EAAE;AACN,cAAI,EAAE;AACN;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,IAAI;AAAG,eAAO;AAClB,UAAI,IAAI;AAAG,eAAO;AAClB,aAAO;AAAA,IACX;AAEA,IAAAA,QAAO,aAAa,SAAS,WAAW,UAAU;AAC9C,cAAQ,OAAO,QAAQ,EAAE,YAAY,GAAG;AAAA,QACpC,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,iBAAO;AAAA,QACX;AACI,iBAAO;AAAA,MACf;AAAA,IACJ;AAEA,IAAAA,QAAO,SAAS,SAAS,OAAO,MAAM,QAAQ;AAC1C,UAAI,CAAC,MAAM,QAAQ,IAAI,GAAG;AACtB,cAAM,IAAI,UAAU,6CAA6C;AAAA,MACrE;AAEA,UAAI,KAAK,WAAW,GAAG;AACnB,eAAOA,QAAO,MAAM,CAAC;AAAA,MACzB;AAEA,UAAI;AACJ,UAAI,WAAW,QAAW;AACtB,iBAAS;AACT,aAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAC9B,oBAAU,KAAK,GAAG;AAAA,QACtB;AAAA,MACJ;AAEA,UAAI,SAASA,QAAO,YAAY,MAAM;AACtC,UAAI,MAAM;AACV,WAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAC9B,YAAI,MAAM,KAAK;AACf,YAAI,CAAC,iBAAiB,GAAG,GAAG;AACxB,gBAAM,IAAI,UAAU,6CAA6C;AAAA,QACrE;AACA,YAAI,KAAK,QAAQ,GAAG;AACpB,eAAO,IAAI;AAAA,MACf;AACA,aAAO;AAAA,IACX;AAgDA,IAAAA,QAAO,aAAa;AA2EpB,IAAAA,QAAO,UAAU,YAAY;AAQ7B,IAAAA,QAAO,UAAU,SAAS,SAAS,SAAS;AACxC,UAAI,MAAM,KAAK;AACf,UAAI,MAAM,MAAM,GAAG;AACf,cAAM,IAAI,WAAW,2CAA2C;AAAA,MACpE;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC7B,aAAK,MAAM,GAAG,IAAI,CAAC;AAAA,MACvB;AACA,aAAO;AAAA,IACX;AAEA,IAAAA,QAAO,UAAU,SAAS,SAAS,SAAS;AACxC,UAAI,MAAM,KAAK;AACf,UAAI,MAAM,MAAM,GAAG;AACf,cAAM,IAAI,WAAW,2CAA2C;AAAA,MACpE;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC7B,aAAK,MAAM,GAAG,IAAI,CAAC;AACnB,aAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AAAA,MAC3B;AACA,aAAO;AAAA,IACX;AAEA,IAAAA,QAAO,UAAU,SAAS,SAAS,SAAS;AACxC,UAAI,MAAM,KAAK;AACf,UAAI,MAAM,MAAM,GAAG;AACf,cAAM,IAAI,WAAW,2CAA2C;AAAA,MACpE;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC7B,aAAK,MAAM,GAAG,IAAI,CAAC;AACnB,aAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AACvB,aAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AACvB,aAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AAAA,MAC3B;AACA,aAAO;AAAA,IACX;AAEA,IAAAA,QAAO,UAAU,WAAW,SAAS,WAAW;AAC5C,UAAI,SAAS,KAAK,SAAS;AAC3B,UAAI,WAAW;AAAG,eAAO;AACzB,UAAI,UAAU,WAAW;AAAG,eAAO,UAAU,MAAM,GAAG,MAAM;AAC5D,aAAO,aAAa,MAAM,MAAM,SAAS;AAAA,IAC7C;AAEA,IAAAA,QAAO,UAAU,SAAS,SAAS,OAAO,GAAG;AACzC,UAAI,CAAC,iBAAiB,CAAC;AAAG,cAAM,IAAI,UAAU,2BAA2B;AACzE,UAAI,SAAS;AAAG,eAAO;AACvB,aAAOA,QAAO,QAAQ,MAAM,CAAC,MAAM;AAAA,IACvC;AAGA,IAAAA,QAAO,UAAU,UAAU,SAASM,SAChC,QACA,OACA,KACA,WACA,SACF;AACE,UAAI,CAAC,iBAAiB,MAAM,GAAG;AAC3B,cAAM,IAAI,UAAU,2BAA2B;AAAA,MACnD;AAEA,UAAI,UAAU,QAAW;AACrB,gBAAQ;AAAA,MACZ;AACA,UAAI,QAAQ,QAAW;AACnB,cAAM,SAAS,OAAO,SAAS;AAAA,MACnC;AACA,UAAI,cAAc,QAAW;AACzB,oBAAY;AAAA,MAChB;AACA,UAAI,YAAY,QAAW;AACvB,kBAAU,KAAK;AAAA,MACnB;AAEA,UACI,QAAQ,KACR,MAAM,OAAO,UACb,YAAY,KACZ,UAAU,KAAK,QACjB;AACE,cAAM,IAAI,WAAW,oBAAoB;AAAA,MAC7C;AAEA,UAAI,aAAa,WAAW,SAAS,KAAK;AACtC,eAAO;AAAA,MACX;AACA,UAAI,aAAa,SAAS;AACtB,eAAO;AAAA,MACX;AACA,UAAI,SAAS,KAAK;AACd,eAAO;AAAA,MACX;AAEA,iBAAW;AACX,eAAS;AACT,qBAAe;AACf,mBAAa;AAEb,UAAI,SAAS;AAAQ,eAAO;AAE5B,UAAI,IAAI,UAAU;AAClB,UAAI,IAAI,MAAM;AACd,UAAI,MAAM,KAAK,IAAI,GAAG,CAAC;AAEvB,UAAI,WAAW,KAAK,MAAM,WAAW,OAAO;AAC5C,UAAI,aAAa,OAAO,MAAM,OAAO,GAAG;AAExC,eAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC1B,YAAI,SAAS,OAAO,WAAW,IAAI;AAC/B,cAAI,SAAS;AACb,cAAI,WAAW;AACf;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,IAAI;AAAG,eAAO;AAClB,UAAI,IAAI;AAAG,eAAO;AAClB,aAAO;AAAA,IACX;AA+IA,IAAAN,QAAO,UAAU,WAAW,SAAS,SAAS,KAAK,YAAY,UAAU;AACrE,aAAO,KAAK,QAAQ,KAAK,YAAY,QAAQ,MAAM;AAAA,IACvD;AAEA,IAAAA,QAAO,UAAU,UAAU,SAAS,QAAQ,KAAK,YAAY,UAAU;AACnE,aAAO,qBAAqB,MAAM,KAAK,YAAY,UAAU,IAAI;AAAA,IACrE;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAY,KAAK,YAAY,UAAU;AAC3E,aAAO,qBAAqB,MAAM,KAAK,YAAY,UAAU,KAAK;AAAA,IACtE;AA2DA,IAAAA,QAAO,UAAU,QAAQ,SAAS,MAAME,SAAQ,QAAQ,QAAQ,UAAU;AAEtE,UAAI,WAAW,QAAW;AACtB,mBAAW;AACX,iBAAS,KAAK;AACd,iBAAS;AAAA,MAEb,WAAW,WAAW,UAAa,OAAO,WAAW,UAAU;AAC3D,mBAAW;AACX,iBAAS,KAAK;AACd,iBAAS;AAAA,MAEb,WAAW,SAAS,MAAM,GAAG;AACzB,iBAAS,SAAS;AAClB,YAAI,SAAS,MAAM,GAAG;AAClB,mBAAS,SAAS;AAClB,cAAI,aAAa;AAAW,uBAAW;AAAA,QAC3C,OAAO;AACH,qBAAW;AACX,mBAAS;AAAA,QACb;AAAA,MAEJ,OAAO;AACH,cAAM,IAAI;AAAA,UACN;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,YAAY,KAAK,SAAS;AAC9B,UAAI,WAAW,UAAa,SAAS;AAAW,iBAAS;AAEzD,UACKA,QAAO,SAAS,MAAM,SAAS,KAAK,SAAS,MAC9C,SAAS,KAAK,QAChB;AACE,cAAM,IAAI,WAAW,wCAAwC;AAAA,MACjE;AAEA,UAAI,CAAC;AAAU,mBAAW;AAE1B,UAAI,cAAc;AAClB,iBAAS;AACL,gBAAQ,UAAU;AAAA,UACd,KAAK;AACD,mBAAO,SAAS,MAAMA,SAAQ,QAAQ,MAAM;AAAA,UAEhD,KAAK;AAAA,UACL,KAAK;AACD,mBAAO,UAAU,MAAMA,SAAQ,QAAQ,MAAM;AAAA,UAEjD,KAAK;AACD,mBAAO,WAAW,MAAMA,SAAQ,QAAQ,MAAM;AAAA,UAElD,KAAK;AAAA,UACL,KAAK;AACD,mBAAO,YAAY,MAAMA,SAAQ,QAAQ,MAAM;AAAA,UAEnD,KAAK;AAED,mBAAO,YAAY,MAAMA,SAAQ,QAAQ,MAAM;AAAA,UAEnD,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACD,mBAAO,UAAU,MAAMA,SAAQ,QAAQ,MAAM;AAAA,UAEjD;AACI,gBAAI;AACA,oBAAM,IAAI,UAAU,uBAAuB,QAAQ;AACvD,wBAAY,KAAK,UAAU,YAAY;AACvC,0BAAc;AAAA,QACtB;AAAA,MACJ;AAAA,IACJ;AAEA,IAAAF,QAAO,UAAU,SAAS,SAAS,SAAS;AACxC,aAAO;AAAA,QACH,MAAM;AAAA,QACN,MAAM,MAAM,UAAU,MAAM,KAAK,KAAK,QAAQ,MAAM,CAAC;AAAA,MACzD;AAAA,IACJ;AA+GA,IAAI,uBAAuB;AA8D3B,IAAAA,QAAO,UAAU,QAAQ,SAAS,MAAM,OAAO,KAAK;AAChD,UAAI,MAAM,KAAK;AACf,cAAQ,CAAC,CAAC;AACV,YAAM,QAAQ,SAAY,MAAM,CAAC,CAAC;AAElC,UAAI,QAAQ,GAAG;AACX,iBAAS;AACT,YAAI,QAAQ;AAAG,kBAAQ;AAAA,MAC3B,WAAW,QAAQ,KAAK;AACpB,gBAAQ;AAAA,MACZ;AAEA,UAAI,MAAM,GAAG;AACT,eAAO;AACP,YAAI,MAAM;AAAG,gBAAM;AAAA,MACvB,WAAW,MAAM,KAAK;AAClB,cAAM;AAAA,MACV;AAEA,UAAI,MAAM;AAAO,cAAM;AAEvB,UAAI;AACJ,UAAIA,QAAO,qBAAqB;AAC5B,iBAAS,KAAK,SAAS,OAAO,GAAG;AACjC,eAAO,YAAYA,QAAO;AAAA,MAC9B,OAAO;AACH,YAAI,WAAW,MAAM;AACrB,iBAAS,IAAIA,QAAO,UAAU,MAAS;AACvC,iBAAS,IAAI,GAAG,IAAI,UAAU,EAAE,GAAG;AAC/B,iBAAO,KAAK,KAAK,IAAI;AAAA,QACzB;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAYA,IAAAA,QAAO,UAAU,aAAa,SAAS,WACnC,QACAO,aACA,UACF;AACE,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC;AAAU,oBAAY,QAAQA,aAAY,KAAK,MAAM;AAE1D,UAAI,MAAM,KAAK;AACf,UAAIC,OAAM;AACV,UAAI,IAAI;AACR,aAAO,EAAE,IAAID,gBAAeC,QAAO,MAAQ;AACvC,eAAO,KAAK,SAAS,KAAKA;AAAA,MAC9B;AAEA,aAAO;AAAA,IACX;AAEA,IAAAR,QAAO,UAAU,aAAa,SAAS,WACnC,QACAO,aACA,UACF;AACE,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC,UAAU;AACX,oBAAY,QAAQA,aAAY,KAAK,MAAM;AAAA,MAC/C;AAEA,UAAI,MAAM,KAAK,SAAS,EAAEA;AAC1B,UAAIC,OAAM;AACV,aAAOD,cAAa,MAAMC,QAAO,MAAQ;AACrC,eAAO,KAAK,SAAS,EAAED,eAAcC;AAAA,MACzC;AAEA,aAAO;AAAA,IACX;AAEA,IAAAR,QAAO,UAAU,YAAY,SAAS,UAAU,QAAQ,UAAU;AAC9D,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,KAAK;AAAA,IAChB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,QAAQ,UAAU;AACpE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,KAAK,UAAW,KAAK,SAAS,MAAM;AAAA,IAC/C;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,QAAQ,UAAU;AACpE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAQ,KAAK,WAAW,IAAK,KAAK,SAAS;AAAA,IAC/C;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,QAAQ,UAAU;AACpE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,cACK,KAAK,UAAW,KAAK,SAAS,MAAM,IAAM,KAAK,SAAS,MAAM,MAC/D,KAAK,SAAS,KAAK;AAAA,IAE3B;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,QAAQ,UAAU;AACpE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,aACI,KAAK,UAAU,YACb,KAAK,SAAS,MAAM,KAAO,KAAK,SAAS,MAAM,IAAK,KAAK,SAAS;AAAA,IAE5E;AAEA,IAAAA,QAAO,UAAU,YAAY,SAAS,UAAU,QAAQO,aAAY,UAAU;AAC1E,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC;AAAU,oBAAY,QAAQA,aAAY,KAAK,MAAM;AAE1D,UAAI,MAAM,KAAK;AACf,UAAIC,OAAM;AACV,UAAI,IAAI;AACR,aAAO,EAAE,IAAID,gBAAeC,QAAO,MAAQ;AACvC,eAAO,KAAK,SAAS,KAAKA;AAAA,MAC9B;AACA,MAAAA,QAAO;AAEP,UAAI,OAAOA;AAAK,eAAO,KAAK,IAAI,GAAG,IAAID,WAAU;AAEjD,aAAO;AAAA,IACX;AAEA,IAAAP,QAAO,UAAU,YAAY,SAAS,UAAU,QAAQO,aAAY,UAAU;AAC1E,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC;AAAU,oBAAY,QAAQA,aAAY,KAAK,MAAM;AAE1D,UAAI,IAAIA;AACR,UAAIC,OAAM;AACV,UAAI,MAAM,KAAK,SAAS,EAAE;AAC1B,aAAO,IAAI,MAAMA,QAAO,MAAQ;AAC5B,eAAO,KAAK,SAAS,EAAE,KAAKA;AAAA,MAChC;AACA,MAAAA,QAAO;AAEP,UAAI,OAAOA;AAAK,eAAO,KAAK,IAAI,GAAG,IAAID,WAAU;AAEjD,aAAO;AAAA,IACX;AAEA,IAAAP,QAAO,UAAU,WAAW,SAAS,SAAS,QAAQ,UAAU;AAC5D,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,UAAI,EAAE,KAAK,UAAU;AAAO,eAAO,KAAK;AACxC,cAAQ,MAAO,KAAK,UAAU,KAAK;AAAA,IACvC;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAY,QAAQ,UAAU;AAClE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,UAAI,MAAM,KAAK,UAAW,KAAK,SAAS,MAAM;AAC9C,aAAO,MAAM,QAAS,MAAM,aAAa;AAAA,IAC7C;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAY,QAAQ,UAAU;AAClE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,UAAI,MAAM,KAAK,SAAS,KAAM,KAAK,WAAW;AAC9C,aAAO,MAAM,QAAS,MAAM,aAAa;AAAA,IAC7C;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAY,QAAQ,UAAU;AAClE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,aACI,KAAK,UACJ,KAAK,SAAS,MAAM,IACpB,KAAK,SAAS,MAAM,KACpB,KAAK,SAAS,MAAM;AAAA,IAE7B;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAY,QAAQ,UAAU;AAClE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,aACK,KAAK,WAAW,KAChB,KAAK,SAAS,MAAM,KACpB,KAAK,SAAS,MAAM,IACrB,KAAK,SAAS;AAAA,IAEtB;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAY,QAAQ,UAAU;AAClE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,YAAY,MAAM,QAAQ,MAAM,IAAI,CAAC;AAAA,IAChD;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAY,QAAQ,UAAU;AAClE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,YAAY,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,IACjD;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,QAAQ,UAAU;AACpE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,YAAY,MAAM,QAAQ,MAAM,IAAI,CAAC;AAAA,IAChD;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,QAAQ,UAAU;AACpE,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,YAAY,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,IACjD;AAUA,IAAAA,QAAO,UAAU,cAAc,SAAS,YACpC,OACA,QACAO,aACA,UACF;AACE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC,UAAU;AACX,YAAI,WAAW,KAAK,IAAI,GAAG,IAAIA,WAAU,IAAI;AAC7C,iBAAS,MAAM,OAAO,QAAQA,aAAY,UAAU,CAAC;AAAA,MACzD;AAEA,UAAIC,OAAM;AACV,UAAI,IAAI;AACR,WAAK,UAAU,QAAQ;AACvB,aAAO,EAAE,IAAID,gBAAeC,QAAO,MAAQ;AACvC,aAAK,SAAS,KAAM,QAAQA,OAAO;AAAA,MACvC;AAEA,aAAO,SAASD;AAAA,IACpB;AAEA,IAAAP,QAAO,UAAU,cAAc,SAAS,YACpC,OACA,QACAO,aACA,UACF;AACE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC,UAAU;AACX,YAAI,WAAW,KAAK,IAAI,GAAG,IAAIA,WAAU,IAAI;AAC7C,iBAAS,MAAM,OAAO,QAAQA,aAAY,UAAU,CAAC;AAAA,MACzD;AAEA,UAAI,IAAIA,cAAa;AACrB,UAAIC,OAAM;AACV,WAAK,SAAS,KAAK,QAAQ;AAC3B,aAAO,EAAE,KAAK,MAAMA,QAAO,MAAQ;AAC/B,aAAK,SAAS,KAAM,QAAQA,OAAO;AAAA,MACvC;AAEA,aAAO,SAASD;AAAA,IACpB;AAEA,IAAAP,QAAO,UAAU,aAAa,SAAS,WAAW,OAAO,QAAQ,UAAU;AACvE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,KAAM,CAAC;AACvD,UAAI,CAACA,QAAO;AAAqB,gBAAQ,KAAK,MAAM,KAAK;AACzD,WAAK,UAAU,QAAQ;AACvB,aAAO,SAAS;AAAA,IACpB;AAWA,IAAAA,QAAO,UAAU,gBAAgB,SAAS,cACtC,OACA,QACA,UACF;AACE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,CAAC;AACzD,UAAIA,QAAO,qBAAqB;AAC5B,aAAK,UAAU,QAAQ;AACvB,aAAK,SAAS,KAAK,UAAU;AAAA,MACjC,OAAO;AACH,0BAAkB,MAAM,OAAO,QAAQ,IAAI;AAAA,MAC/C;AACA,aAAO,SAAS;AAAA,IACpB;AAEA,IAAAA,QAAO,UAAU,gBAAgB,SAAS,cACtC,OACA,QACA,UACF;AACE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,CAAC;AACzD,UAAIA,QAAO,qBAAqB;AAC5B,aAAK,UAAU,UAAU;AACzB,aAAK,SAAS,KAAK,QAAQ;AAAA,MAC/B,OAAO;AACH,0BAAkB,MAAM,OAAO,QAAQ,KAAK;AAAA,MAChD;AACA,aAAO,SAAS;AAAA,IACpB;AASA,IAAAA,QAAO,UAAU,gBAAgB,SAAS,cACtC,OACA,QACA,UACF;AACE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,CAAC;AAC7D,UAAIA,QAAO,qBAAqB;AAC5B,aAAK,SAAS,KAAK,UAAU;AAC7B,aAAK,SAAS,KAAK,UAAU;AAC7B,aAAK,SAAS,KAAK,UAAU;AAC7B,aAAK,UAAU,QAAQ;AAAA,MAC3B,OAAO;AACH,0BAAkB,MAAM,OAAO,QAAQ,IAAI;AAAA,MAC/C;AACA,aAAO,SAAS;AAAA,IACpB;AAEA,IAAAA,QAAO,UAAU,gBAAgB,SAAS,cACtC,OACA,QACA,UACF;AACE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,CAAC;AAC7D,UAAIA,QAAO,qBAAqB;AAC5B,aAAK,UAAU,UAAU;AACzB,aAAK,SAAS,KAAK,UAAU;AAC7B,aAAK,SAAS,KAAK,UAAU;AAC7B,aAAK,SAAS,KAAK,QAAQ;AAAA,MAC/B,OAAO;AACH,0BAAkB,MAAM,OAAO,QAAQ,KAAK;AAAA,MAChD;AACA,aAAO,SAAS;AAAA,IACpB;AAEA,IAAAA,QAAO,UAAU,aAAa,SAAS,WACnC,OACA,QACAO,aACA,UACF;AACE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC,UAAU;AACX,YAAI,QAAQ,KAAK,IAAI,GAAG,IAAIA,cAAa,CAAC;AAE1C,iBAAS,MAAM,OAAO,QAAQA,aAAY,QAAQ,GAAG,CAAC,KAAK;AAAA,MAC/D;AAEA,UAAI,IAAI;AACR,UAAIC,OAAM;AACV,UAAIC,OAAM;AACV,WAAK,UAAU,QAAQ;AACvB,aAAO,EAAE,IAAIF,gBAAeC,QAAO,MAAQ;AACvC,YAAI,QAAQ,KAAKC,SAAQ,KAAK,KAAK,SAAS,IAAI,OAAO,GAAG;AACtD,UAAAA,OAAM;AAAA,QACV;AACA,aAAK,SAAS,MAAQ,QAAQD,QAAQ,KAAKC,OAAO;AAAA,MACtD;AAEA,aAAO,SAASF;AAAA,IACpB;AAEA,IAAAP,QAAO,UAAU,aAAa,SAAS,WACnC,OACA,QACAO,aACA,UACF;AACE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC,UAAU;AACX,YAAI,QAAQ,KAAK,IAAI,GAAG,IAAIA,cAAa,CAAC;AAE1C,iBAAS,MAAM,OAAO,QAAQA,aAAY,QAAQ,GAAG,CAAC,KAAK;AAAA,MAC/D;AAEA,UAAI,IAAIA,cAAa;AACrB,UAAIC,OAAM;AACV,UAAIC,OAAM;AACV,WAAK,SAAS,KAAK,QAAQ;AAC3B,aAAO,EAAE,KAAK,MAAMD,QAAO,MAAQ;AAC/B,YAAI,QAAQ,KAAKC,SAAQ,KAAK,KAAK,SAAS,IAAI,OAAO,GAAG;AACtD,UAAAA,OAAM;AAAA,QACV;AACA,aAAK,SAAS,MAAQ,QAAQD,QAAQ,KAAKC,OAAO;AAAA,MACtD;AAEA,aAAO,SAASF;AAAA,IACpB;AAEA,IAAAP,QAAO,UAAU,YAAY,SAAS,UAAU,OAAO,QAAQ,UAAU;AACrE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,KAAM,IAAK;AAC3D,UAAI,CAACA,QAAO;AAAqB,gBAAQ,KAAK,MAAM,KAAK;AACzD,UAAI,QAAQ;AAAG,gBAAQ,MAAO,QAAQ;AACtC,WAAK,UAAU,QAAQ;AACvB,aAAO,SAAS;AAAA,IACpB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,OAAO,QAAQ,UAAU;AAC3E,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,MAAO;AAC/D,UAAIA,QAAO,qBAAqB;AAC5B,aAAK,UAAU,QAAQ;AACvB,aAAK,SAAS,KAAK,UAAU;AAAA,MACjC,OAAO;AACH,0BAAkB,MAAM,OAAO,QAAQ,IAAI;AAAA,MAC/C;AACA,aAAO,SAAS;AAAA,IACpB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,OAAO,QAAQ,UAAU;AAC3E,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,MAAO;AAC/D,UAAIA,QAAO,qBAAqB;AAC5B,aAAK,UAAU,UAAU;AACzB,aAAK,SAAS,KAAK,QAAQ;AAAA,MAC/B,OAAO;AACH,0BAAkB,MAAM,OAAO,QAAQ,KAAK;AAAA,MAChD;AACA,aAAO,SAAS;AAAA,IACpB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,OAAO,QAAQ,UAAU;AAC3E,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,WAAW;AACvE,UAAIA,QAAO,qBAAqB;AAC5B,aAAK,UAAU,QAAQ;AACvB,aAAK,SAAS,KAAK,UAAU;AAC7B,aAAK,SAAS,KAAK,UAAU;AAC7B,aAAK,SAAS,KAAK,UAAU;AAAA,MACjC,OAAO;AACH,0BAAkB,MAAM,OAAO,QAAQ,IAAI;AAAA,MAC/C;AACA,aAAO,SAAS;AAAA,IACpB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,OAAO,QAAQ,UAAU;AAC3E,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,WAAW;AACvE,UAAI,QAAQ;AAAG,gBAAQ,aAAa,QAAQ;AAC5C,UAAIA,QAAO,qBAAqB;AAC5B,aAAK,UAAU,UAAU;AACzB,aAAK,SAAS,KAAK,UAAU;AAC7B,aAAK,SAAS,KAAK,UAAU;AAC7B,aAAK,SAAS,KAAK,QAAQ;AAAA,MAC/B,OAAO;AACH,0BAAkB,MAAM,OAAO,QAAQ,KAAK;AAAA,MAChD;AACA,aAAO,SAAS;AAAA,IACpB;AAsBA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,OAAO,QAAQ,UAAU;AAC3E,aAAO,WAAW,MAAM,OAAO,QAAQ,MAAM,QAAQ;AAAA,IACzD;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAa,OAAO,QAAQ,UAAU;AAC3E,aAAO,WAAW,MAAM,OAAO,QAAQ,OAAO,QAAQ;AAAA,IAC1D;AAiBA,IAAAA,QAAO,UAAU,gBAAgB,SAAS,cACtC,OACA,QACA,UACF;AACE,aAAO,YAAY,MAAM,OAAO,QAAQ,MAAM,QAAQ;AAAA,IAC1D;AAEA,IAAAA,QAAO,UAAU,gBAAgB,SAAS,cACtC,OACA,QACA,UACF;AACE,aAAO,YAAY,MAAM,OAAO,QAAQ,OAAO,QAAQ;AAAA,IAC3D;AAGA,IAAAA,QAAO,UAAU,OAAO,SAAS,KAAK,QAAQ,aAAa,OAAO,KAAK;AACnE,UAAI,CAAC;AAAO,gBAAQ;AACpB,UAAI,CAAC,OAAO,QAAQ;AAAG,cAAM,KAAK;AAClC,UAAI,eAAe,OAAO;AAAQ,sBAAc,OAAO;AACvD,UAAI,CAAC;AAAa,sBAAc;AAChC,UAAI,MAAM,KAAK,MAAM;AAAO,cAAM;AAGlC,UAAI,QAAQ;AAAO,eAAO;AAC1B,UAAI,OAAO,WAAW,KAAK,KAAK,WAAW;AAAG,eAAO;AAGrD,UAAI,cAAc,GAAG;AACjB,cAAM,IAAI,WAAW,2BAA2B;AAAA,MACpD;AACA,UAAI,QAAQ,KAAK,SAAS,KAAK;AAC3B,cAAM,IAAI,WAAW,2BAA2B;AACpD,UAAI,MAAM;AAAG,cAAM,IAAI,WAAW,yBAAyB;AAG3D,UAAI,MAAM,KAAK;AAAQ,cAAM,KAAK;AAClC,UAAI,OAAO,SAAS,cAAc,MAAM,OAAO;AAC3C,cAAM,OAAO,SAAS,cAAc;AAAA,MACxC;AAEA,UAAI,MAAM,MAAM;AAChB,UAAI;AAEJ,UAAI,SAAS,UAAU,QAAQ,eAAe,cAAc,KAAK;AAE7D,aAAK,IAAI,MAAM,GAAG,KAAK,GAAG,EAAE,GAAG;AAC3B,iBAAO,IAAI,eAAe,KAAK,IAAI;AAAA,QACvC;AAAA,MACJ,WAAW,MAAM,OAAQ,CAACA,QAAO,qBAAqB;AAElD,aAAK,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AACtB,iBAAO,IAAI,eAAe,KAAK,IAAI;AAAA,QACvC;AAAA,MACJ,OAAO;AACH,mBAAW,UAAU,IAAI;AAAA,UACrB;AAAA,UACA,KAAK,SAAS,OAAO,QAAQ,GAAG;AAAA,UAChC;AAAA,QACJ;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAMA,IAAAA,QAAO,UAAU,OAAO,SAAS,KAAK,KAAK,OAAO,KAAK,UAAU;AAE7D,UAAI,OAAO,QAAQ,UAAU;AACzB,YAAI,OAAO,UAAU,UAAU;AAC3B,qBAAW;AACX,kBAAQ;AACR,gBAAM,KAAK;AAAA,QACf,WAAW,OAAO,QAAQ,UAAU;AAChC,qBAAW;AACX,gBAAM,KAAK;AAAA,QACf;AACA,YAAI,IAAI,WAAW,GAAG;AAClB,cAAI,OAAO,IAAI,WAAW,CAAC;AAC3B,cAAI,OAAO,KAAK;AACZ,kBAAM;AAAA,UACV;AAAA,QACJ;AACA,YAAI,aAAa,UAAa,OAAO,aAAa,UAAU;AACxD,gBAAM,IAAI,UAAU,2BAA2B;AAAA,QACnD;AACA,YAAI,OAAO,aAAa,YAAY,CAACA,QAAO,WAAW,QAAQ,GAAG;AAC9D,gBAAM,IAAI,UAAU,uBAAuB,QAAQ;AAAA,QACvD;AAAA,MACJ,WAAW,OAAO,QAAQ,UAAU;AAChC,cAAM,MAAM;AAAA,MAChB;AAGA,UAAI,QAAQ,KAAK,KAAK,SAAS,SAAS,KAAK,SAAS,KAAK;AACvD,cAAM,IAAI,WAAW,oBAAoB;AAAA,MAC7C;AAEA,UAAI,OAAO,OAAO;AACd,eAAO;AAAA,MACX;AAEA,cAAQ,UAAU;AAClB,YAAM,QAAQ,SAAY,KAAK,SAAS,QAAQ;AAEhD,UAAI,CAAC;AAAK,cAAM;AAEhB,UAAI;AACJ,UAAI,OAAO,QAAQ,UAAU;AACzB,aAAK,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAC1B,eAAK,KAAK;AAAA,QACd;AAAA,MACJ,OAAO;AACH,YAAI,QAAQ,iBAAiB,GAAG,IAC1B,MACA,YAAY,IAAIA,QAAO,KAAK,QAAQ,EAAE,SAAS,CAAC;AACtD,YAAI,MAAM,MAAM;AAChB,aAAK,IAAI,GAAG,IAAI,MAAM,OAAO,EAAE,GAAG;AAC9B,eAAK,IAAI,SAAS,MAAM,IAAI;AAAA,QAChC;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAKA,IAAI,oBAAoB;AAAA;AAAA;;;ACj3DxB;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAOA,SAAS,gBAAgB;AAAC;AAG1B,SAAS,eAAe;AACtB,eAAa,KAAK,KAAK,IAAI;AAC7B;AA4CA,SAAS,iBAAiB,MAAM;AAC9B,MAAI,KAAK,kBAAkB;AACzB,WAAO,aAAa;AACtB,SAAO,KAAK;AACd;AAWA,SAAS,SAAS,SAAS,MAAMU,OAAM;AACrC,MAAI;AACF,YAAQ,KAAKA,KAAI;AAAA,OACd;AACH,QAAI,MAAM,QAAQ;AAClB,QAAIC,aAAY,WAAW,SAAS,GAAG;AACvC,aAAS,IAAI,GAAG,IAAI,KAAK,EAAE;AACzB,MAAAA,WAAU,GAAG,KAAKD,KAAI;AAAA,EAC1B;AACF;AACA,SAAS,QAAQ,SAAS,MAAMA,OAAM,MAAM;AAC1C,MAAI;AACF,YAAQ,KAAKA,OAAM,IAAI;AAAA,OACpB;AACH,QAAI,MAAM,QAAQ;AAClB,QAAIC,aAAY,WAAW,SAAS,GAAG;AACvC,aAAS,IAAI,GAAG,IAAI,KAAK,EAAE;AACzB,MAAAA,WAAU,GAAG,KAAKD,OAAM,IAAI;AAAA,EAChC;AACF;AACA,SAAS,QAAQ,SAAS,MAAMA,OAAM,MAAM,MAAM;AAChD,MAAI;AACF,YAAQ,KAAKA,OAAM,MAAM,IAAI;AAAA,OAC1B;AACH,QAAI,MAAM,QAAQ;AAClB,QAAIC,aAAY,WAAW,SAAS,GAAG;AACvC,aAAS,IAAI,GAAG,IAAI,KAAK,EAAE;AACzB,MAAAA,WAAU,GAAG,KAAKD,OAAM,MAAM,IAAI;AAAA,EACtC;AACF;AACA,SAAS,UAAU,SAAS,MAAMA,OAAM,MAAM,MAAM,MAAM;AACxD,MAAI;AACF,YAAQ,KAAKA,OAAM,MAAM,MAAM,IAAI;AAAA,OAChC;AACH,QAAI,MAAM,QAAQ;AAClB,QAAIC,aAAY,WAAW,SAAS,GAAG;AACvC,aAAS,IAAI,GAAG,IAAI,KAAK,EAAE;AACzB,MAAAA,WAAU,GAAG,KAAKD,OAAM,MAAM,MAAM,IAAI;AAAA,EAC5C;AACF;AAEA,SAAS,SAAS,SAAS,MAAMA,OAAM,MAAM;AAC3C,MAAI;AACF,YAAQ,MAAMA,OAAM,IAAI;AAAA,OACrB;AACH,QAAI,MAAM,QAAQ;AAClB,QAAIC,aAAY,WAAW,SAAS,GAAG;AACvC,aAAS,IAAI,GAAG,IAAI,KAAK,EAAE;AACzB,MAAAA,WAAU,GAAG,MAAMD,OAAM,IAAI;AAAA,EACjC;AACF;AAuEA,SAAS,aAAa,QAAQ,MAAM,UAAU,SAAS;AACrD,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,MAAI,OAAO,aAAa;AACtB,UAAM,IAAI,UAAU,wCAAwC;AAE9D,WAAS,OAAO;AAChB,MAAI,CAAC,QAAQ;AACX,aAAS,OAAO,UAAU,IAAI,cAAc;AAC5C,WAAO,eAAe;AAAA,EACxB,OAAO;AAGL,QAAI,OAAO,aAAa;AACtB,aAAO;AAAA,QAAK;AAAA,QAAe;AAAA,QACf,SAAS,WAAW,SAAS,WAAW;AAAA,MAAQ;AAI5D,eAAS,OAAO;AAAA,IAClB;AACA,eAAW,OAAO;AAAA,EACpB;AAEA,MAAI,CAAC,UAAU;AAEb,eAAW,OAAO,QAAQ;AAC1B,MAAE,OAAO;AAAA,EACX,OAAO;AACL,QAAI,OAAO,aAAa,YAAY;AAElC,iBAAW,OAAO,QAAQ,UAAU,CAAC,UAAU,QAAQ,IACnB,CAAC,UAAU,QAAQ;AAAA,IACzD,OAAO;AAEL,UAAI,SAAS;AACX,iBAAS,QAAQ,QAAQ;AAAA,MAC3B,OAAO;AACL,iBAAS,KAAK,QAAQ;AAAA,MACxB;AAAA,IACF;AAGA,QAAI,CAAC,SAAS,QAAQ;AACpB,UAAI,iBAAiB,MAAM;AAC3B,UAAI,KAAK,IAAI,KAAK,SAAS,SAAS,GAAG;AACrC,iBAAS,SAAS;AAClB,YAAI,IAAI,IAAI,MAAM,iDACE,SAAS,SAAS,MAAM,OAAO,mEACkB;AACrE,UAAE,OAAO;AACT,UAAE,UAAU;AACZ,UAAE,OAAO;AACT,UAAE,QAAQ,SAAS;AACnB,oBAAY,CAAC;AAAA,MACf;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AACA,SAAS,YAAYE,IAAG;AACtB,SAAO,QAAQ,SAAS,aAAa,QAAQ,KAAKA,EAAC,IAAI,QAAQ,IAAIA,EAAC;AACtE;AAYA,SAAS,UAAU,QAAQ,MAAM,UAAU;AACzC,MAAI,QAAQ;AACZ,WAAS,IAAI;AACX,WAAO,eAAe,MAAM,CAAC;AAC7B,QAAI,CAAC,OAAO;AACV,cAAQ;AACR,eAAS,MAAM,QAAQ,SAAS;AAAA,IAClC;AAAA,EACF;AACA,IAAE,WAAW;AACb,SAAO;AACT;AA0JA,SAAS,cAAc,MAAM;AAC3B,MAAI,SAAS,KAAK;AAElB,MAAI,QAAQ;AACV,QAAI,aAAa,OAAO;AAExB,QAAI,OAAO,eAAe,YAAY;AACpC,aAAO;AAAA,IACT,WAAW,YAAY;AACrB,aAAO,WAAW;AAAA,IACpB;AAAA,EACF;AAEA,SAAO;AACT;AAOA,SAAS,UAAU,MAAM,OAAO;AAC9B,WAAS,IAAI,OAAO,IAAI,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK,GAAG,KAAK;AAClE,SAAK,KAAK,KAAK;AACjB,OAAK,IAAI;AACX;AAEA,SAAS,WAAW,KAAK,GAAG;AAC1B,MAAIC,QAAO,IAAI,MAAM,CAAC;AACtB,SAAO;AACL,IAAAA,MAAK,KAAK,IAAI;AAChB,SAAOA;AACT;AAEA,SAAS,gBAAgB,KAAK;AAC5B,MAAI,MAAM,IAAI,MAAM,IAAI,MAAM;AAC9B,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,QAAI,KAAK,IAAI,GAAG,YAAY,IAAI;AAAA,EAClC;AACA,SAAO;AACT;AA1dA,IAEI,QAWG;AAbP;AAAA;AAAA;AAAA;AAAA;AAQA,kBAAc,YAAY,uBAAO,OAAO,IAAI;AAK5C,IAAO,iBAAQ;AAKf,iBAAa,eAAe;AAE5B,iBAAa,eAAe;AAE5B,iBAAa,UAAU,SAAS;AAChC,iBAAa,UAAU,UAAU;AACjC,iBAAa,UAAU,gBAAgB;AAIvC,iBAAa,sBAAsB;AAEnC,iBAAa,OAAO,WAAW;AAC7B,WAAK,SAAS;AACd,UAAI,aAAa,cAAc;AAE7B,YAAI,OAAO,UAAU,EAAE,gBAAgB,OAAO,SAAS;AACrD,eAAK,SAAS,OAAO;AAAA,QACvB;AAAA,MACF;AAEA,UAAI,CAAC,KAAK,WAAW,KAAK,YAAY,OAAO,eAAe,IAAI,EAAE,SAAS;AACzE,aAAK,UAAU,IAAI,cAAc;AACjC,aAAK,eAAe;AAAA,MACtB;AAEA,WAAK,gBAAgB,KAAK,iBAAiB;AAAA,IAC7C;AAIA,iBAAa,UAAU,kBAAkB,SAAS,gBAAgB,GAAG;AACnE,UAAI,OAAO,MAAM,YAAY,IAAI,KAAK,MAAM,CAAC;AAC3C,cAAM,IAAI,UAAU,wCAAwC;AAC9D,WAAK,gBAAgB;AACrB,aAAO;AAAA,IACT;AAQA,iBAAa,UAAU,kBAAkB,SAAS,kBAAkB;AAClE,aAAO,iBAAiB,IAAI;AAAA,IAC9B;AA2DA,iBAAa,UAAU,OAAO,SAASC,MAAK,MAAM;AAChD,UAAI,IAAI,SAAS,KAAK,MAAM,GAAG,QAAQC;AACvC,UAAI,iBAAiB;AACrB,UAAI,UAAW,SAAS;AAExB,eAAS,KAAK;AACd,UAAI;AACF,kBAAW,WAAW,OAAO,SAAS;AAAA,eAC/B,CAAC;AACR,eAAO;AAET,MAAAA,UAAS,KAAK;AAGd,UAAI,SAAS;AACX,aAAK,UAAU;AACf,YAAIA,SAAQ;AACV,cAAI,CAAC;AACH,iBAAK,IAAI,MAAM,qCAAqC;AACtD,aAAG,gBAAgB;AACnB,aAAG,SAASA;AACZ,aAAG,eAAe;AAClB,UAAAA,QAAO,KAAK,SAAS,EAAE;AAAA,QACzB,WAAW,cAAc,OAAO;AAC9B,gBAAM;AAAA,QACR,OAAO;AAEL,cAAI,MAAM,IAAI,MAAM,2CAA2C,KAAK,GAAG;AACvE,cAAI,UAAU;AACd,gBAAM;AAAA,QACR;AACA,eAAO;AAAA,MACT;AAEA,gBAAU,OAAO;AAEjB,UAAI,CAAC;AACH,eAAO;AAET,UAAI,OAAO,OAAO,YAAY;AAC9B,YAAM,UAAU;AAChB,cAAQ,KAAK;AAAA,QAEX,KAAK;AACH,mBAAS,SAAS,MAAM,IAAI;AAC5B;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,MAAM,MAAM,UAAU,EAAE;AACzC;AAAA,QACF,KAAK;AACH,kBAAQ,SAAS,MAAM,MAAM,UAAU,IAAI,UAAU,EAAE;AACvD;AAAA,QACF,KAAK;AACH,oBAAU,SAAS,MAAM,MAAM,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AACvE;AAAA,QAEF;AACE,iBAAO,IAAI,MAAM,MAAM,CAAC;AACxB,eAAK,IAAI,GAAG,IAAI,KAAK;AACnB,iBAAK,IAAI,KAAK,UAAU;AAC1B,mBAAS,SAAS,MAAM,MAAM,IAAI;AAAA,MACtC;AAEA,UAAI;AACF,QAAAA,QAAO,KAAK;AAEd,aAAO;AAAA,IACT;AAoEA,iBAAa,UAAU,cAAc,SAASC,aAAY,MAAM,UAAU;AACxE,aAAO,aAAa,MAAM,MAAM,UAAU,KAAK;AAAA,IACjD;AAEA,iBAAa,UAAU,KAAK,aAAa,UAAU;AAEnD,iBAAa,UAAU,kBACnB,SAAS,gBAAgB,MAAM,UAAU;AACvC,aAAO,aAAa,MAAM,MAAM,UAAU,IAAI;AAAA,IAChD;AAeJ,iBAAa,UAAU,OAAO,SAASC,MAAK,MAAM,UAAU;AAC1D,UAAI,OAAO,aAAa;AACtB,cAAM,IAAI,UAAU,wCAAwC;AAC9D,WAAK,GAAG,MAAM,UAAU,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAO;AAAA,IACT;AAEA,iBAAa,UAAU,sBACnB,SAAS,oBAAoB,MAAM,UAAU;AAC3C,UAAI,OAAO,aAAa;AACtB,cAAM,IAAI,UAAU,wCAAwC;AAC9D,WAAK,gBAAgB,MAAM,UAAU,MAAM,MAAM,QAAQ,CAAC;AAC1D,aAAO;AAAA,IACT;AAGJ,iBAAa,UAAU,iBACnB,SAASC,gBAAe,MAAM,UAAU;AACtC,UAAI,MAAM,QAAQ,UAAU,GAAG;AAE/B,UAAI,OAAO,aAAa;AACtB,cAAM,IAAI,UAAU,wCAAwC;AAE9D,eAAS,KAAK;AACd,UAAI,CAAC;AACH,eAAO;AAET,aAAO,OAAO;AACd,UAAI,CAAC;AACH,eAAO;AAET,UAAI,SAAS,YAAa,KAAK,YAAY,KAAK,aAAa,UAAW;AACtE,YAAI,EAAE,KAAK,iBAAiB;AAC1B,eAAK,UAAU,IAAI,cAAc;AAAA,aAC9B;AACH,iBAAO,OAAO;AACd,cAAI,OAAO;AACT,iBAAK,KAAK,kBAAkB,MAAM,KAAK,YAAY,QAAQ;AAAA,QAC/D;AAAA,MACF,WAAW,OAAO,SAAS,YAAY;AACrC,mBAAW;AAEX,aAAK,IAAI,KAAK,QAAQ,MAAM,KAAI;AAC9B,cAAI,KAAK,OAAO,YACX,KAAK,GAAG,YAAY,KAAK,GAAG,aAAa,UAAW;AACvD,+BAAmB,KAAK,GAAG;AAC3B,uBAAW;AACX;AAAA,UACF;AAAA,QACF;AAEA,YAAI,WAAW;AACb,iBAAO;AAET,YAAI,KAAK,WAAW,GAAG;AACrB,eAAK,KAAK;AACV,cAAI,EAAE,KAAK,iBAAiB,GAAG;AAC7B,iBAAK,UAAU,IAAI,cAAc;AACjC,mBAAO;AAAA,UACT,OAAO;AACL,mBAAO,OAAO;AAAA,UAChB;AAAA,QACF,OAAO;AACL,oBAAU,MAAM,QAAQ;AAAA,QAC1B;AAEA,YAAI,OAAO;AACT,eAAK,KAAK,kBAAkB,MAAM,oBAAoB,QAAQ;AAAA,MAClE;AAEA,aAAO;AAAA,IACT;AAEJ,iBAAa,UAAU,qBACnB,SAASC,oBAAmB,MAAM;AAChC,UAAIR,YAAW;AAEf,eAAS,KAAK;AACd,UAAI,CAAC;AACH,eAAO;AAGT,UAAI,CAAC,OAAO,gBAAgB;AAC1B,YAAI,UAAU,WAAW,GAAG;AAC1B,eAAK,UAAU,IAAI,cAAc;AACjC,eAAK,eAAe;AAAA,QACtB,WAAW,OAAO,OAAO;AACvB,cAAI,EAAE,KAAK,iBAAiB;AAC1B,iBAAK,UAAU,IAAI,cAAc;AAAA;AAEjC,mBAAO,OAAO;AAAA,QAClB;AACA,eAAO;AAAA,MACT;AAGA,UAAI,UAAU,WAAW,GAAG;AAC1B,YAAI,OAAO,OAAO,KAAK,MAAM;AAC7B,iBAAS,IAAI,GAAG,KAAK,IAAI,KAAK,QAAQ,EAAE,GAAG;AACzC,gBAAM,KAAK;AACX,cAAI,QAAQ;AAAkB;AAC9B,eAAK,mBAAmB,GAAG;AAAA,QAC7B;AACA,aAAK,mBAAmB,gBAAgB;AACxC,aAAK,UAAU,IAAI,cAAc;AACjC,aAAK,eAAe;AACpB,eAAO;AAAA,MACT;AAEA,MAAAA,aAAY,OAAO;AAEnB,UAAI,OAAOA,eAAc,YAAY;AACnC,aAAK,eAAe,MAAMA,UAAS;AAAA,MACrC,WAAWA,YAAW;AAEpB,WAAG;AACD,eAAK,eAAe,MAAMA,WAAUA,WAAU,SAAS,EAAE;AAAA,QAC3D,SAASA,WAAU;AAAA,MACrB;AAEA,aAAO;AAAA,IACT;AAEJ,iBAAa,UAAU,YAAY,SAAS,UAAU,MAAM;AAC1D,UAAI;AACJ,UAAI;AACJ,UAAI,SAAS,KAAK;AAElB,UAAI,CAAC;AACH,cAAM,CAAC;AAAA,WACJ;AACH,qBAAa,OAAO;AACpB,YAAI,CAAC;AACH,gBAAM,CAAC;AAAA,iBACA,OAAO,eAAe;AAC7B,gBAAM,CAAC,WAAW,YAAY,UAAU;AAAA;AAExC,gBAAM,gBAAgB,UAAU;AAAA,MACpC;AAEA,aAAO;AAAA,IACT;AAEA,iBAAa,gBAAgB,SAAS,SAAS,MAAM;AACnD,UAAI,OAAO,QAAQ,kBAAkB,YAAY;AAC/C,eAAO,QAAQ,cAAc,IAAI;AAAA,MACnC,OAAO;AACL,eAAO,cAAc,KAAK,SAAS,IAAI;AAAA,MACzC;AAAA,IACF;AAEA,iBAAa,UAAU,gBAAgB;AAiBvC,iBAAa,UAAU,aAAa,SAAS,aAAa;AACxD,aAAO,KAAK,eAAe,IAAI,QAAQ,QAAQ,KAAK,OAAO,IAAI,CAAC;AAAA,IAClE;AAAA;AAAA;;;ACpcA;AAAA;AAAA;AAAA;AACA,QAAM,WAAW;AAEjB,QAAI,YAAY,SAAS,SAAS;AAC9B,aAAO,UAAU,SAAS;AAC1B,eAAS,KAAK,UAAU;AACpB,eAAO,QAAQ,KAAK,SAAS;AAAA,MACjC;AAAA,IACJ,WAAW,UAAW;AAClB,aAAO,UAAU;AAAA,IACrB;AAAA;AAAA;;;ACVA;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU,iBAAkB;AAAA;AAAA;;;ACAnC;AAAA;AAAA,gBAAAS;AAAA,EAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA;AAAA;AAIA,SAASC,QAAQ;AACf,EAAAC,UAAS;AACT,MAAI,OAAO;AACX,WAAS,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,EAAE,GAAG;AAC/C,IAAAC,QAAO,KAAK,KAAK;AACjB,IAAAC,WAAU,KAAK,WAAW,CAAC,KAAK;AAAA,EAClC;AAEA,EAAAA,WAAU,IAAI,WAAW,CAAC,KAAK;AAC/B,EAAAA,WAAU,IAAI,WAAW,CAAC,KAAK;AACjC;AAEA,SAAS,YAAa,KAAK;AACzB,MAAI,CAACF,SAAQ;AACX,IAAAD,MAAK;AAAA,EACP;AACA,MAAI,GAAG,GAAG,GAAG,KAAK,cAAc;AAChC,MAAI,MAAM,IAAI;AAEd,MAAI,MAAM,IAAI,GAAG;AACf,UAAM,IAAI,MAAM,gDAAgD;AAAA,EAClE;AAOA,iBAAe,IAAI,MAAM,OAAO,MAAM,IAAI,IAAI,MAAM,OAAO,MAAM,IAAI;AAGrE,QAAM,IAAII,KAAI,MAAM,IAAI,IAAI,YAAY;AAGxC,MAAI,eAAe,IAAI,MAAM,IAAI;AAEjC,MAAI,IAAI;AAER,OAAK,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG;AACxC,UAAOD,WAAU,IAAI,WAAW,CAAC,MAAM,KAAOA,WAAU,IAAI,WAAW,IAAI,CAAC,MAAM,KAAOA,WAAU,IAAI,WAAW,IAAI,CAAC,MAAM,IAAKA,WAAU,IAAI,WAAW,IAAI,CAAC;AAChK,QAAI,OAAQ,OAAO,KAAM;AACzB,QAAI,OAAQ,OAAO,IAAK;AACxB,QAAI,OAAO,MAAM;AAAA,EACnB;AAEA,MAAI,iBAAiB,GAAG;AACtB,UAAOA,WAAU,IAAI,WAAW,CAAC,MAAM,IAAMA,WAAU,IAAI,WAAW,IAAI,CAAC,MAAM;AACjF,QAAI,OAAO,MAAM;AAAA,EACnB,WAAW,iBAAiB,GAAG;AAC7B,UAAOA,WAAU,IAAI,WAAW,CAAC,MAAM,KAAOA,WAAU,IAAI,WAAW,IAAI,CAAC,MAAM,IAAMA,WAAU,IAAI,WAAW,IAAI,CAAC,MAAM;AAC5H,QAAI,OAAQ,OAAO,IAAK;AACxB,QAAI,OAAO,MAAM;AAAA,EACnB;AAEA,SAAO;AACT;AAEA,SAASE,iBAAiB,KAAK;AAC7B,SAAOH,QAAO,OAAO,KAAK,MAAQA,QAAO,OAAO,KAAK,MAAQA,QAAO,OAAO,IAAI,MAAQA,QAAO,MAAM;AACtG;AAEA,SAASI,aAAa,OAAO,OAAO,KAAK;AACvC,MAAI;AACJ,MAAI,SAAS,CAAC;AACd,WAAS,IAAI,OAAO,IAAI,KAAK,KAAK,GAAG;AACnC,WAAO,MAAM,MAAM,OAAO,MAAM,IAAI,MAAM,KAAM,MAAM,IAAI;AAC1D,WAAO,KAAKD,iBAAgB,GAAG,CAAC;AAAA,EAClC;AACA,SAAO,OAAO,KAAK,EAAE;AACvB;AAEA,SAAS,cAAe,OAAO;AAC7B,MAAI,CAACJ,SAAQ;AACX,IAAAD,MAAK;AAAA,EACP;AACA,MAAI;AACJ,MAAI,MAAM,MAAM;AAChB,MAAI,aAAa,MAAM;AACvB,MAAI,SAAS;AACb,MAAI,QAAQ,CAAC;AACb,MAAI,iBAAiB;AAGrB,WAAS,IAAI,GAAG,OAAO,MAAM,YAAY,IAAI,MAAM,KAAK,gBAAgB;AACtE,UAAM,KAAKM,aAAY,OAAO,GAAI,IAAI,iBAAkB,OAAO,OAAQ,IAAI,cAAe,CAAC;AAAA,EAC7F;AAGA,MAAI,eAAe,GAAG;AACpB,UAAM,MAAM,MAAM;AAClB,cAAUJ,QAAO,OAAO;AACxB,cAAUA,QAAQ,OAAO,IAAK;AAC9B,cAAU;AAAA,EACZ,WAAW,eAAe,GAAG;AAC3B,WAAO,MAAM,MAAM,MAAM,KAAM,MAAM,MAAM;AAC3C,cAAUA,QAAO,OAAO;AACxB,cAAUA,QAAQ,OAAO,IAAK;AAC9B,cAAUA,QAAQ,OAAO,IAAK;AAC9B,cAAU;AAAA,EACZ;AAEA,QAAM,KAAK,MAAM;AAEjB,SAAO,MAAM,KAAK,EAAE;AACtB;AAEA,SAAS,KAAM,QAAQ,QAAQ,MAAM,MAAM,QAAQ;AACjD,MAAIK,IAAG;AACP,MAAI,OAAO,SAAS,IAAI,OAAO;AAC/B,MAAI,QAAQ,KAAK,QAAQ;AACzB,MAAI,QAAQ,QAAQ;AACpB,MAAI,QAAQ;AACZ,MAAI,IAAI,OAAQ,SAAS,IAAK;AAC9B,MAAI,IAAI,OAAO,KAAK;AACpB,MAAI,IAAI,OAAO,SAAS;AAExB,OAAK;AAEL,EAAAA,KAAI,KAAM,KAAM,CAAC,SAAU;AAC3B,QAAO,CAAC;AACR,WAAS;AACT,SAAO,QAAQ,GAAGA,KAAIA,KAAI,MAAM,OAAO,SAAS,IAAI,KAAK,GAAG,SAAS,GAAG;AAAA,EAAC;AAEzE,MAAIA,MAAM,KAAM,CAAC,SAAU;AAC3B,EAAAA,OAAO,CAAC;AACR,WAAS;AACT,SAAO,QAAQ,GAAG,IAAI,IAAI,MAAM,OAAO,SAAS,IAAI,KAAK,GAAG,SAAS,GAAG;AAAA,EAAC;AAEzE,MAAIA,OAAM,GAAG;AACX,IAAAA,KAAI,IAAI;AAAA,EACV,WAAWA,OAAM,MAAM;AACrB,WAAO,IAAI,OAAQ,IAAI,KAAK,KAAK;AAAA,EACnC,OAAO;AACL,QAAI,IAAI,KAAK,IAAI,GAAG,IAAI;AACxB,IAAAA,KAAIA,KAAI;AAAA,EACV;AACA,UAAQ,IAAI,KAAK,KAAK,IAAI,KAAK,IAAI,GAAGA,KAAI,IAAI;AAChD;AAEA,SAASC,OAAO,QAAQ,OAAO,QAAQ,MAAM,MAAM,QAAQ;AACzD,MAAID,IAAG,GAAG;AACV,MAAI,OAAO,SAAS,IAAI,OAAO;AAC/B,MAAI,QAAQ,KAAK,QAAQ;AACzB,MAAI,QAAQ,QAAQ;AACpB,MAAI,KAAM,SAAS,KAAK,KAAK,IAAI,GAAG,GAAG,IAAI,KAAK,IAAI,GAAG,GAAG,IAAI;AAC9D,MAAI,IAAI,OAAO,IAAK,SAAS;AAC7B,MAAI,IAAI,OAAO,IAAI;AACnB,MAAI,IAAI,QAAQ,KAAM,UAAU,KAAK,IAAI,QAAQ,IAAK,IAAI;AAE1D,UAAQ,KAAK,IAAI,KAAK;AAEtB,MAAI,MAAM,KAAK,KAAK,UAAU,UAAU;AACtC,QAAI,MAAM,KAAK,IAAI,IAAI;AACvB,IAAAA,KAAI;AAAA,EACN,OAAO;AACL,IAAAA,KAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG;AACzC,QAAI,SAAS,IAAI,KAAK,IAAI,GAAG,CAACA,EAAC,KAAK,GAAG;AACrC,MAAAA;AACA,WAAK;AAAA,IACP;AACA,QAAIA,KAAI,SAAS,GAAG;AAClB,eAAS,KAAK;AAAA,IAChB,OAAO;AACL,eAAS,KAAK,KAAK,IAAI,GAAG,IAAI,KAAK;AAAA,IACrC;AACA,QAAI,QAAQ,KAAK,GAAG;AAClB,MAAAA;AACA,WAAK;AAAA,IACP;AAEA,QAAIA,KAAI,SAAS,MAAM;AACrB,UAAI;AACJ,MAAAA,KAAI;AAAA,IACN,WAAWA,KAAI,SAAS,GAAG;AACzB,WAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI;AACtC,MAAAA,KAAIA,KAAI;AAAA,IACV,OAAO;AACL,UAAI,QAAQ,KAAK,IAAI,GAAG,QAAQ,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI;AACrD,MAAAA,KAAI;AAAA,IACN;AAAA,EACF;AAEA,SAAO,QAAQ,GAAG,OAAO,SAAS,KAAK,IAAI,KAAM,KAAK,GAAG,KAAK,KAAK,QAAQ,GAAG;AAAA,EAAC;AAE/E,EAAAA,KAAKA,MAAK,OAAQ;AAClB,UAAQ;AACR,SAAO,OAAO,GAAG,OAAO,SAAS,KAAKA,KAAI,KAAM,KAAK,GAAGA,MAAK,KAAK,QAAQ,GAAG;AAAA,EAAC;AAE9E,SAAO,SAAS,IAAI,MAAM,IAAI;AAChC;AAkDA,SAASE,cAAc;AACrB,SAAOX,QAAO,sBACV,aACA;AACN;AAEA,SAASY,cAAc,MAAM,QAAQ;AACnC,MAAID,YAAW,IAAI,QAAQ;AACzB,UAAM,IAAI,WAAW,4BAA4B;AAAA,EACnD;AACA,MAAIX,QAAO,qBAAqB;AAE9B,WAAO,IAAI,WAAW,MAAM;AAC5B,SAAK,YAAYA,QAAO;AAAA,EAC1B,OAAO;AAEL,QAAI,SAAS,MAAM;AACjB,aAAO,IAAIA,QAAO,MAAM;AAAA,IAC1B;AACA,SAAK,SAAS;AAAA,EAChB;AAEA,SAAO;AACT;AAYA,SAASA,QAAQ,KAAK,kBAAkB,QAAQ;AAC9C,MAAI,CAACA,QAAO,uBAAuB,EAAE,gBAAgBA,UAAS;AAC5D,WAAO,IAAIA,QAAO,KAAK,kBAAkB,MAAM;AAAA,EACjD;AAGA,MAAI,OAAO,QAAQ,UAAU;AAC3B,QAAI,OAAO,qBAAqB,UAAU;AACxC,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AACA,WAAOa,aAAY,MAAM,GAAG;AAAA,EAC9B;AACA,SAAOC,MAAK,MAAM,KAAK,kBAAkB,MAAM;AACjD;AAUA,SAASA,MAAM,MAAM,OAAO,kBAAkB,QAAQ;AACpD,MAAI,OAAO,UAAU,UAAU;AAC7B,UAAM,IAAI,UAAU,uCAAuC;AAAA,EAC7D;AAEA,MAAI,OAAO,gBAAgB,eAAe,iBAAiB,aAAa;AACtE,WAAOC,iBAAgB,MAAM,OAAO,kBAAkB,MAAM;AAAA,EAC9D;AAEA,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAOC,YAAW,MAAM,OAAO,gBAAgB;AAAA,EACjD;AAEA,SAAOC,YAAW,MAAM,KAAK;AAC/B;AAmBA,SAASC,YAAY,MAAM;AACzB,MAAI,OAAO,SAAS,UAAU;AAC5B,UAAM,IAAI,UAAU,kCAAkC;AAAA,EACxD,WAAW,OAAO,GAAG;AACnB,UAAM,IAAI,WAAW,sCAAsC;AAAA,EAC7D;AACF;AAEA,SAASC,OAAO,MAAM,MAAMC,OAAM,UAAU;AAC1C,EAAAF,YAAW,IAAI;AACf,MAAI,QAAQ,GAAG;AACb,WAAON,cAAa,MAAM,IAAI;AAAA,EAChC;AACA,MAAIQ,UAAS,QAAW;AAItB,WAAO,OAAO,aAAa,WACvBR,cAAa,MAAM,IAAI,EAAE,KAAKQ,OAAM,QAAQ,IAC5CR,cAAa,MAAM,IAAI,EAAE,KAAKQ,KAAI;AAAA,EACxC;AACA,SAAOR,cAAa,MAAM,IAAI;AAChC;AAUA,SAASC,aAAa,MAAM,MAAM;AAChC,EAAAK,YAAW,IAAI;AACf,SAAON,cAAa,MAAM,OAAO,IAAI,IAAIS,SAAQ,IAAI,IAAI,CAAC;AAC1D,MAAI,CAACrB,QAAO,qBAAqB;AAC/B,aAAS,IAAI,GAAG,IAAI,MAAM,EAAE,GAAG;AAC7B,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AACA,SAAO;AACT;AAeA,SAASgB,YAAY,MAAMM,SAAQ,UAAU;AAC3C,MAAI,OAAO,aAAa,YAAY,aAAa,IAAI;AACnD,eAAW;AAAA,EACb;AAEA,MAAI,CAACtB,QAAO,WAAW,QAAQ,GAAG;AAChC,UAAM,IAAI,UAAU,4CAA4C;AAAA,EAClE;AAEA,MAAI,SAASuB,YAAWD,SAAQ,QAAQ,IAAI;AAC5C,SAAOV,cAAa,MAAM,MAAM;AAEhC,MAAI,SAAS,KAAK,MAAMU,SAAQ,QAAQ;AAExC,MAAI,WAAW,QAAQ;AAIrB,WAAO,KAAK,MAAM,GAAG,MAAM;AAAA,EAC7B;AAEA,SAAO;AACT;AAEA,SAASE,eAAe,MAAM,OAAO;AACnC,MAAI,SAAS,MAAM,SAAS,IAAI,IAAIH,SAAQ,MAAM,MAAM,IAAI;AAC5D,SAAOT,cAAa,MAAM,MAAM;AAChC,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAClC,SAAK,KAAK,MAAM,KAAK;AAAA,EACvB;AACA,SAAO;AACT;AAEA,SAASG,iBAAiB,MAAM,OAAO,YAAY,QAAQ;AACzD,QAAM;AAEN,MAAI,aAAa,KAAK,MAAM,aAAa,YAAY;AACnD,UAAM,IAAI,WAAW,2BAA6B;AAAA,EACpD;AAEA,MAAI,MAAM,aAAa,cAAc,UAAU,IAAI;AACjD,UAAM,IAAI,WAAW,2BAA6B;AAAA,EACpD;AAEA,MAAI,eAAe,UAAa,WAAW,QAAW;AACpD,YAAQ,IAAI,WAAW,KAAK;AAAA,EAC9B,WAAW,WAAW,QAAW;AAC/B,YAAQ,IAAI,WAAW,OAAO,UAAU;AAAA,EAC1C,OAAO;AACL,YAAQ,IAAI,WAAW,OAAO,YAAY,MAAM;AAAA,EAClD;AAEA,MAAIf,QAAO,qBAAqB;AAE9B,WAAO;AACP,SAAK,YAAYA,QAAO;AAAA,EAC1B,OAAO;AAEL,WAAOwB,eAAc,MAAM,KAAK;AAAA,EAClC;AACA,SAAO;AACT;AAEA,SAASP,YAAY,MAAM,KAAK;AAC9B,MAAIQ,kBAAiB,GAAG,GAAG;AACzB,QAAI,MAAMJ,SAAQ,IAAI,MAAM,IAAI;AAChC,WAAOT,cAAa,MAAM,GAAG;AAE7B,QAAI,KAAK,WAAW,GAAG;AACrB,aAAO;AAAA,IACT;AAEA,QAAI,KAAK,MAAM,GAAG,GAAG,GAAG;AACxB,WAAO;AAAA,EACT;AAEA,MAAI,KAAK;AACP,QAAK,OAAO,gBAAgB,eACxB,IAAI,kBAAkB,eAAgB,YAAY,KAAK;AACzD,UAAI,OAAO,IAAI,WAAW,YAAYc,OAAM,IAAI,MAAM,GAAG;AACvD,eAAOd,cAAa,MAAM,CAAC;AAAA,MAC7B;AACA,aAAOY,eAAc,MAAM,GAAG;AAAA,IAChC;AAEA,QAAI,IAAI,SAAS,YAAY,QAAQ,IAAI,IAAI,GAAG;AAC9C,aAAOA,eAAc,MAAM,IAAI,IAAI;AAAA,IACrC;AAAA,EACF;AAEA,QAAM,IAAI,UAAU,oFAAoF;AAC1G;AAEA,SAASH,SAAS,QAAQ;AAGxB,MAAI,UAAUV,YAAW,GAAG;AAC1B,UAAM,IAAI,WAAW,4DACaA,YAAW,EAAE,SAAS,EAAE,IAAI,QAAQ;AAAA,EACxE;AACA,SAAO,SAAS;AAClB;AAEA,SAAS,WAAY,QAAQ;AAC3B,MAAI,CAAC,UAAU,QAAQ;AACrB,aAAS;AAAA,EACX;AACA,SAAOX,QAAO,MAAM,CAAC,MAAM;AAC7B;AAEA,SAASyB,kBAAkB,GAAG;AAC5B,SAAO,CAAC,EAAE,KAAK,QAAQ,EAAE;AAC3B;AA0EA,SAASF,YAAYD,SAAQ,UAAU;AACrC,MAAIG,kBAAiBH,OAAM,GAAG;AAC5B,WAAOA,QAAO;AAAA,EAChB;AACA,MAAI,OAAO,gBAAgB,eAAe,OAAO,YAAY,WAAW,eACnE,YAAY,OAAOA,OAAM,KAAKA,mBAAkB,cAAc;AACjE,WAAOA,QAAO;AAAA,EAChB;AACA,MAAI,OAAOA,YAAW,UAAU;AAC9B,IAAAA,UAAS,KAAKA;AAAA,EAChB;AAEA,MAAI,MAAMA,QAAO;AACjB,MAAI,QAAQ;AAAG,WAAO;AAGtB,MAAI,cAAc;AAClB,aAAS;AACP,YAAQ,UAAU;AAAA,MAChB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACH,eAAOK,aAAYL,OAAM,EAAE;AAAA,MAC7B,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACH,eAAO,MAAM;AAAA,MACf,KAAK;AACH,eAAO,QAAQ;AAAA,MACjB,KAAK;AACH,eAAOM,eAAcN,OAAM,EAAE;AAAA,MAC/B;AACE,YAAI;AAAa,iBAAOK,aAAYL,OAAM,EAAE;AAC5C,oBAAY,KAAK,UAAU,YAAY;AACvC,sBAAc;AAAA,IAClB;AAAA,EACF;AACF;AAGA,SAASO,cAAc,UAAU,OAAO,KAAK;AAC3C,MAAI,cAAc;AASlB,MAAI,UAAU,UAAa,QAAQ,GAAG;AACpC,YAAQ;AAAA,EACV;AAGA,MAAI,QAAQ,KAAK,QAAQ;AACvB,WAAO;AAAA,EACT;AAEA,MAAI,QAAQ,UAAa,MAAM,KAAK,QAAQ;AAC1C,UAAM,KAAK;AAAA,EACb;AAEA,MAAI,OAAO,GAAG;AACZ,WAAO;AAAA,EACT;AAGA,WAAS;AACT,aAAW;AAEX,MAAI,OAAO,OAAO;AAChB,WAAO;AAAA,EACT;AAEA,MAAI,CAAC;AAAU,eAAW;AAE1B,SAAO,MAAM;AACX,YAAQ,UAAU;AAAA,MAChB,KAAK;AACH,eAAOC,UAAS,MAAM,OAAO,GAAG;AAAA,MAElC,KAAK;AAAA,MACL,KAAK;AACH,eAAOC,WAAU,MAAM,OAAO,GAAG;AAAA,MAEnC,KAAK;AACH,eAAOC,YAAW,MAAM,OAAO,GAAG;AAAA,MAEpC,KAAK;AAAA,MACL,KAAK;AACH,eAAOC,aAAY,MAAM,OAAO,GAAG;AAAA,MAErC,KAAK;AACH,eAAOC,aAAY,MAAM,OAAO,GAAG;AAAA,MAErC,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACH,eAAOC,cAAa,MAAM,OAAO,GAAG;AAAA,MAEtC;AACE,YAAI;AAAa,gBAAM,IAAI,UAAU,uBAAuB,QAAQ;AACpE,oBAAY,WAAW,IAAI,YAAY;AACvC,sBAAc;AAAA,IAClB;AAAA,EACF;AACF;AAMA,SAASC,MAAM,GAAG,GAAG,GAAG;AACtB,MAAI,IAAI,EAAE;AACV,IAAE,KAAK,EAAE;AACT,IAAE,KAAK;AACT;AAkIA,SAASC,sBAAsB,QAAQ,KAAK,YAAY,UAAU,KAAK;AAErE,MAAI,OAAO,WAAW;AAAG,WAAO;AAGhC,MAAI,OAAO,eAAe,UAAU;AAClC,eAAW;AACX,iBAAa;AAAA,EACf,WAAW,aAAa,YAAY;AAClC,iBAAa;AAAA,EACf,WAAW,aAAa,aAAa;AACnC,iBAAa;AAAA,EACf;AACA,eAAa,CAAC;AACd,MAAI,MAAM,UAAU,GAAG;AAErB,iBAAa,MAAM,IAAK,OAAO,SAAS;AAAA,EAC1C;AAGA,MAAI,aAAa;AAAG,iBAAa,OAAO,SAAS;AACjD,MAAI,cAAc,OAAO,QAAQ;AAC/B,QAAI;AAAK,aAAO;AAAA;AACX,mBAAa,OAAO,SAAS;AAAA,EACpC,WAAW,aAAa,GAAG;AACzB,QAAI;AAAK,mBAAa;AAAA;AACjB,aAAO;AAAA,EACd;AAGA,MAAI,OAAO,QAAQ,UAAU;AAC3B,UAAMrC,QAAO,KAAK,KAAK,QAAQ;AAAA,EACjC;AAGA,MAAIyB,kBAAiB,GAAG,GAAG;AAEzB,QAAI,IAAI,WAAW,GAAG;AACpB,aAAO;AAAA,IACT;AACA,WAAOa,cAAa,QAAQ,KAAK,YAAY,UAAU,GAAG;AAAA,EAC5D,WAAW,OAAO,QAAQ,UAAU;AAClC,UAAM,MAAM;AACZ,QAAItC,QAAO,uBACP,OAAO,WAAW,UAAU,YAAY,YAAY;AACtD,UAAI,KAAK;AACP,eAAO,WAAW,UAAU,QAAQ,KAAK,QAAQ,KAAK,UAAU;AAAA,MAClE,OAAO;AACL,eAAO,WAAW,UAAU,YAAY,KAAK,QAAQ,KAAK,UAAU;AAAA,MACtE;AAAA,IACF;AACA,WAAOsC,cAAa,QAAQ,CAAE,GAAI,GAAG,YAAY,UAAU,GAAG;AAAA,EAChE;AAEA,QAAM,IAAI,UAAU,sCAAsC;AAC5D;AAEA,SAASA,cAAc,KAAK,KAAK,YAAY,UAAU,KAAK;AAC1D,MAAI,YAAY;AAChB,MAAI,YAAY,IAAI;AACpB,MAAI,YAAY,IAAI;AAEpB,MAAI,aAAa,QAAW;AAC1B,eAAW,OAAO,QAAQ,EAAE,YAAY;AACxC,QAAI,aAAa,UAAU,aAAa,WACpC,aAAa,aAAa,aAAa,YAAY;AACrD,UAAI,IAAI,SAAS,KAAK,IAAI,SAAS,GAAG;AACpC,eAAO;AAAA,MACT;AACA,kBAAY;AACZ,mBAAa;AACb,mBAAa;AACb,oBAAc;AAAA,IAChB;AAAA,EACF;AAEA,WAASC,MAAM,KAAKC,IAAG;AACrB,QAAI,cAAc,GAAG;AACnB,aAAO,IAAIA;AAAA,IACb,OAAO;AACL,aAAO,IAAI,aAAaA,KAAI,SAAS;AAAA,IACvC;AAAA,EACF;AAEA,MAAI;AACJ,MAAI,KAAK;AACP,QAAI,aAAa;AACjB,SAAK,IAAI,YAAY,IAAI,WAAW,KAAK;AACvC,UAAID,MAAK,KAAK,CAAC,MAAMA,MAAK,KAAK,eAAe,KAAK,IAAI,IAAI,UAAU,GAAG;AACtE,YAAI,eAAe;AAAI,uBAAa;AACpC,YAAI,IAAI,aAAa,MAAM;AAAW,iBAAO,aAAa;AAAA,MAC5D,OAAO;AACL,YAAI,eAAe;AAAI,eAAK,IAAI;AAChC,qBAAa;AAAA,MACf;AAAA,IACF;AAAA,EACF,OAAO;AACL,QAAI,aAAa,YAAY;AAAW,mBAAa,YAAY;AACjE,SAAK,IAAI,YAAY,KAAK,GAAG,KAAK;AAChC,UAAI,QAAQ;AACZ,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,YAAIA,MAAK,KAAK,IAAI,CAAC,MAAMA,MAAK,KAAK,CAAC,GAAG;AACrC,kBAAQ;AACR;AAAA,QACF;AAAA,MACF;AACA,UAAI;AAAO,eAAO;AAAA,IACpB;AAAA,EACF;AAEA,SAAO;AACT;AAcA,SAASE,UAAU,KAAKnB,SAAQ,QAAQ,QAAQ;AAC9C,WAAS,OAAO,MAAM,KAAK;AAC3B,MAAI,YAAY,IAAI,SAAS;AAC7B,MAAI,CAAC,QAAQ;AACX,aAAS;AAAA,EACX,OAAO;AACL,aAAS,OAAO,MAAM;AACtB,QAAI,SAAS,WAAW;AACtB,eAAS;AAAA,IACX;AAAA,EACF;AAGA,MAAI,SAASA,QAAO;AACpB,MAAI,SAAS,MAAM;AAAG,UAAM,IAAI,UAAU,oBAAoB;AAE9D,MAAI,SAAS,SAAS,GAAG;AACvB,aAAS,SAAS;AAAA,EACpB;AACA,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,QAAI,SAAS,SAASA,QAAO,OAAO,IAAI,GAAG,CAAC,GAAG,EAAE;AACjD,QAAI,MAAM,MAAM;AAAG,aAAO;AAC1B,QAAI,SAAS,KAAK;AAAA,EACpB;AACA,SAAO;AACT;AAEA,SAASoB,WAAW,KAAKpB,SAAQ,QAAQ,QAAQ;AAC/C,SAAOqB,YAAWhB,aAAYL,SAAQ,IAAI,SAAS,MAAM,GAAG,KAAK,QAAQ,MAAM;AACjF;AAEA,SAASsB,YAAY,KAAKtB,SAAQ,QAAQ,QAAQ;AAChD,SAAOqB,YAAWE,cAAavB,OAAM,GAAG,KAAK,QAAQ,MAAM;AAC7D;AAEA,SAASwB,aAAa,KAAKxB,SAAQ,QAAQ,QAAQ;AACjD,SAAOsB,YAAW,KAAKtB,SAAQ,QAAQ,MAAM;AAC/C;AAEA,SAASyB,aAAa,KAAKzB,SAAQ,QAAQ,QAAQ;AACjD,SAAOqB,YAAWf,eAAcN,OAAM,GAAG,KAAK,QAAQ,MAAM;AAC9D;AAEA,SAAS0B,WAAW,KAAK1B,SAAQ,QAAQ,QAAQ;AAC/C,SAAOqB,YAAWM,gBAAe3B,SAAQ,IAAI,SAAS,MAAM,GAAG,KAAK,QAAQ,MAAM;AACpF;AAiFA,SAASY,aAAa,KAAK,OAAO,KAAK;AACrC,MAAI,UAAU,KAAK,QAAQ,IAAI,QAAQ;AACrC,WAAO,cAAc,GAAG;AAAA,EAC1B,OAAO;AACL,WAAO,cAAc,IAAI,MAAM,OAAO,GAAG,CAAC;AAAA,EAC5C;AACF;AAEA,SAASH,WAAW,KAAK,OAAO,KAAK;AACnC,QAAM,KAAK,IAAI,IAAI,QAAQ,GAAG;AAC9B,MAAI,MAAM,CAAC;AAEX,MAAI,IAAI;AACR,SAAO,IAAI,KAAK;AACd,QAAI,YAAY,IAAI;AACpB,QAAI,YAAY;AAChB,QAAI,mBAAoB,YAAY,MAAQ,IACvC,YAAY,MAAQ,IACpB,YAAY,MAAQ,IACrB;AAEJ,QAAI,IAAI,oBAAoB,KAAK;AAC/B,UAAI,YAAY,WAAW,YAAY;AAEvC,cAAQ,kBAAkB;AAAA,QACxB,KAAK;AACH,cAAI,YAAY,KAAM;AACpB,wBAAY;AAAA,UACd;AACA;AAAA,QACF,KAAK;AACH,uBAAa,IAAI,IAAI;AACrB,eAAK,aAAa,SAAU,KAAM;AAChC,6BAAiB,YAAY,OAAS,IAAO,aAAa;AAC1D,gBAAI,gBAAgB,KAAM;AACxB,0BAAY;AAAA,YACd;AAAA,UACF;AACA;AAAA,QACF,KAAK;AACH,uBAAa,IAAI,IAAI;AACrB,sBAAY,IAAI,IAAI;AACpB,eAAK,aAAa,SAAU,QAAS,YAAY,SAAU,KAAM;AAC/D,6BAAiB,YAAY,OAAQ,MAAO,aAAa,OAAS,IAAO,YAAY;AACrF,gBAAI,gBAAgB,SAAU,gBAAgB,SAAU,gBAAgB,QAAS;AAC/E,0BAAY;AAAA,YACd;AAAA,UACF;AACA;AAAA,QACF,KAAK;AACH,uBAAa,IAAI,IAAI;AACrB,sBAAY,IAAI,IAAI;AACpB,uBAAa,IAAI,IAAI;AACrB,eAAK,aAAa,SAAU,QAAS,YAAY,SAAU,QAAS,aAAa,SAAU,KAAM;AAC/F,6BAAiB,YAAY,OAAQ,MAAQ,aAAa,OAAS,MAAO,YAAY,OAAS,IAAO,aAAa;AACnH,gBAAI,gBAAgB,SAAU,gBAAgB,SAAU;AACtD,0BAAY;AAAA,YACd;AAAA,UACF;AAAA,MACJ;AAAA,IACF;AAEA,QAAI,cAAc,MAAM;AAGtB,kBAAY;AACZ,yBAAmB;AAAA,IACrB,WAAW,YAAY,OAAQ;AAE7B,mBAAa;AACb,UAAI,KAAK,cAAc,KAAK,OAAQ,KAAM;AAC1C,kBAAY,QAAS,YAAY;AAAA,IACnC;AAEA,QAAI,KAAK,SAAS;AAClB,SAAK;AAAA,EACP;AAEA,SAAOmB,uBAAsB,GAAG;AAClC;AAOA,SAASA,uBAAuB,YAAY;AAC1C,MAAI,MAAM,WAAW;AACrB,MAAI,OAAOC,uBAAsB;AAC/B,WAAO,OAAO,aAAa,MAAM,QAAQ,UAAU;AAAA,EACrD;AAGA,MAAI,MAAM;AACV,MAAI,IAAI;AACR,SAAO,IAAI,KAAK;AACd,WAAO,OAAO,aAAa;AAAA,MACzB;AAAA,MACA,WAAW,MAAM,GAAG,KAAKA,qBAAoB;AAAA,IAC/C;AAAA,EACF;AACA,SAAO;AACT;AAEA,SAASnB,YAAY,KAAK,OAAO,KAAK;AACpC,MAAI,MAAM;AACV,QAAM,KAAK,IAAI,IAAI,QAAQ,GAAG;AAE9B,WAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAChC,WAAO,OAAO,aAAa,IAAI,KAAK,GAAI;AAAA,EAC1C;AACA,SAAO;AACT;AAEA,SAASC,aAAa,KAAK,OAAO,KAAK;AACrC,MAAI,MAAM;AACV,QAAM,KAAK,IAAI,IAAI,QAAQ,GAAG;AAE9B,WAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAChC,WAAO,OAAO,aAAa,IAAI,EAAE;AAAA,EACnC;AACA,SAAO;AACT;AAEA,SAASH,UAAU,KAAK,OAAO,KAAK;AAClC,MAAI,MAAM,IAAI;AAEd,MAAI,CAAC,SAAS,QAAQ;AAAG,YAAQ;AACjC,MAAI,CAAC,OAAO,MAAM,KAAK,MAAM;AAAK,UAAM;AAExC,MAAI,MAAM;AACV,WAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAChC,WAAOsB,OAAM,IAAI,EAAE;AAAA,EACrB;AACA,SAAO;AACT;AAEA,SAASjB,cAAc,KAAK,OAAO,KAAK;AACtC,MAAI,QAAQ,IAAI,MAAM,OAAO,GAAG;AAChC,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,WAAO,OAAO,aAAa,MAAM,KAAK,MAAM,IAAI,KAAK,GAAG;AAAA,EAC1D;AACA,SAAO;AACT;AAyCA,SAASkB,aAAa,QAAQ,KAAK,QAAQ;AACzC,MAAK,SAAS,MAAO,KAAK,SAAS;AAAG,UAAM,IAAI,WAAW,oBAAoB;AAC/E,MAAI,SAAS,MAAM;AAAQ,UAAM,IAAI,WAAW,uCAAuC;AACzF;AA8JA,SAASC,UAAU,KAAK,OAAO,QAAQ,KAAK,KAAK,KAAK;AACpD,MAAI,CAAC7B,kBAAiB,GAAG;AAAG,UAAM,IAAI,UAAU,6CAA6C;AAC7F,MAAI,QAAQ,OAAO,QAAQ;AAAK,UAAM,IAAI,WAAW,mCAAmC;AACxF,MAAI,SAAS,MAAM,IAAI;AAAQ,UAAM,IAAI,WAAW,oBAAoB;AAC1E;AAiDA,SAAS8B,mBAAmB,KAAK,OAAO,QAAQ,cAAc;AAC5D,MAAI,QAAQ;AAAG,YAAQ,QAAS,QAAQ;AACxC,WAAS,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI,SAAS,QAAQ,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG;AAChE,QAAI,SAAS,MAAM,QAAS,OAAS,KAAK,eAAe,IAAI,IAAI,SAC9D,eAAe,IAAI,IAAI,KAAK;AAAA,EACjC;AACF;AA4BA,SAASC,mBAAmB,KAAK,OAAO,QAAQ,cAAc;AAC5D,MAAI,QAAQ;AAAG,YAAQ,aAAa,QAAQ;AAC5C,WAAS,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI,SAAS,QAAQ,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG;AAChE,QAAI,SAAS,KAAM,WAAW,eAAe,IAAI,IAAI,KAAK,IAAK;AAAA,EACjE;AACF;AAiJA,SAASC,cAAc,KAAK,OAAO,QAAQ,KAAK,KAAK,KAAK;AACxD,MAAI,SAAS,MAAM,IAAI;AAAQ,UAAM,IAAI,WAAW,oBAAoB;AACxE,MAAI,SAAS;AAAG,UAAM,IAAI,WAAW,oBAAoB;AAC3D;AAEA,SAASC,YAAY,KAAK,OAAO,QAAQ,cAAc,UAAU;AAC/D,MAAI,CAAC,UAAU;AACb,IAAAD,cAAa,KAAK,OAAO,QAAQ,CAAC;AAAA,EACpC;AACA,EAAA/C,OAAM,KAAK,OAAO,QAAQ,cAAc,IAAI,CAAC;AAC7C,SAAO,SAAS;AAClB;AAUA,SAASiD,aAAa,KAAK,OAAO,QAAQ,cAAc,UAAU;AAChE,MAAI,CAAC,UAAU;AACb,IAAAF,cAAa,KAAK,OAAO,QAAQ,CAAC;AAAA,EACpC;AACA,EAAA/C,OAAM,KAAK,OAAO,QAAQ,cAAc,IAAI,CAAC;AAC7C,SAAO,SAAS;AAClB;AA+HA,SAASkD,aAAa,KAAK;AAEzB,QAAMC,YAAW,GAAG,EAAE,QAAQC,oBAAmB,EAAE;AAEnD,MAAI,IAAI,SAAS;AAAG,WAAO;AAE3B,SAAO,IAAI,SAAS,MAAM,GAAG;AAC3B,UAAM,MAAM;AAAA,EACd;AACA,SAAO;AACT;AAEA,SAASD,YAAY,KAAK;AACxB,MAAI,IAAI;AAAM,WAAO,IAAI,KAAK;AAC9B,SAAO,IAAI,QAAQ,cAAc,EAAE;AACrC;AAEA,SAAST,OAAO,GAAG;AACjB,MAAI,IAAI;AAAI,WAAO,MAAM,EAAE,SAAS,EAAE;AACtC,SAAO,EAAE,SAAS,EAAE;AACtB;AAEA,SAASzB,aAAaL,SAAQ,OAAO;AACnC,UAAQ,SAAS;AACjB,MAAI;AACJ,MAAI,SAASA,QAAO;AACpB,MAAI,gBAAgB;AACpB,MAAI,QAAQ,CAAC;AAEb,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,gBAAYA,QAAO,WAAW,CAAC;AAG/B,QAAI,YAAY,SAAU,YAAY,OAAQ;AAE5C,UAAI,CAAC,eAAe;AAElB,YAAI,YAAY,OAAQ;AAEtB,eAAK,SAAS,KAAK;AAAI,kBAAM,KAAK,KAAM,KAAM,GAAI;AAClD;AAAA,QACF,WAAW,IAAI,MAAM,QAAQ;AAE3B,eAAK,SAAS,KAAK;AAAI,kBAAM,KAAK,KAAM,KAAM,GAAI;AAClD;AAAA,QACF;AAGA,wBAAgB;AAEhB;AAAA,MACF;AAGA,UAAI,YAAY,OAAQ;AACtB,aAAK,SAAS,KAAK;AAAI,gBAAM,KAAK,KAAM,KAAM,GAAI;AAClD,wBAAgB;AAChB;AAAA,MACF;AAGA,mBAAa,gBAAgB,SAAU,KAAK,YAAY,SAAU;AAAA,IACpE,WAAW,eAAe;AAExB,WAAK,SAAS,KAAK;AAAI,cAAM,KAAK,KAAM,KAAM,GAAI;AAAA,IACpD;AAEA,oBAAgB;AAGhB,QAAI,YAAY,KAAM;AACpB,WAAK,SAAS,KAAK;AAAG;AACtB,YAAM,KAAK,SAAS;AAAA,IACtB,WAAW,YAAY,MAAO;AAC5B,WAAK,SAAS,KAAK;AAAG;AACtB,YAAM;AAAA,QACJ,aAAa,IAAM;AAAA,QACnB,YAAY,KAAO;AAAA,MACrB;AAAA,IACF,WAAW,YAAY,OAAS;AAC9B,WAAK,SAAS,KAAK;AAAG;AACtB,YAAM;AAAA,QACJ,aAAa,KAAM;AAAA,QACnB,aAAa,IAAM,KAAO;AAAA,QAC1B,YAAY,KAAO;AAAA,MACrB;AAAA,IACF,WAAW,YAAY,SAAU;AAC/B,WAAK,SAAS,KAAK;AAAG;AACtB,YAAM;AAAA,QACJ,aAAa,KAAO;AAAA,QACpB,aAAa,KAAM,KAAO;AAAA,QAC1B,aAAa,IAAM,KAAO;AAAA,QAC1B,YAAY,KAAO;AAAA,MACrB;AAAA,IACF,OAAO;AACL,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACtC;AAAA,EACF;AAEA,SAAO;AACT;AAEA,SAASuB,cAAc,KAAK;AAC1B,MAAI,YAAY,CAAC;AACjB,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AAEnC,cAAU,KAAK,IAAI,WAAW,CAAC,IAAI,GAAI;AAAA,EACzC;AACA,SAAO;AACT;AAEA,SAASI,gBAAgB,KAAK,OAAO;AACnC,MAAI,GAAG,IAAI;AACX,MAAI,YAAY,CAAC;AACjB,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,SAAK,SAAS,KAAK;AAAG;AAEtB,QAAI,IAAI,WAAW,CAAC;AACpB,SAAK,KAAK;AACV,SAAK,IAAI;AACT,cAAU,KAAK,EAAE;AACjB,cAAU,KAAK,EAAE;AAAA,EACnB;AAEA,SAAO;AACT;AAGA,SAASrB,eAAe,KAAK;AAC3B,SAAO,YAAYgC,aAAY,GAAG,CAAC;AACrC;AAEA,SAASjB,YAAY,KAAK,KAAK,QAAQ,QAAQ;AAC7C,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,QAAK,IAAI,UAAU,IAAI,UAAY,KAAK,IAAI;AAAS;AACrD,QAAI,IAAI,UAAU,IAAI;AAAA,EACxB;AACA,SAAO;AACT;AAEA,SAASjB,OAAO,KAAK;AACnB,SAAO,QAAQ;AACjB;AAMA,SAASzB,UAAS,KAAK;AACrB,SAAO,OAAO,SAAS,CAAC,CAAC,IAAI,aAAa8D,cAAa,GAAG,KAAKC,cAAa,GAAG;AACjF;AAEA,SAASD,cAAc,KAAK;AAC1B,SAAO,CAAC,CAAC,IAAI,eAAe,OAAO,IAAI,YAAY,aAAa,cAAc,IAAI,YAAY,SAAS,GAAG;AAC5G;AAGA,SAASC,cAAc,KAAK;AAC1B,SAAO,OAAO,IAAI,gBAAgB,cAAc,OAAO,IAAI,UAAU,cAAcD,cAAa,IAAI,MAAM,GAAG,CAAC,CAAC;AACjH;AA17DA,IAAI3D,SACAC,YACAC,MACAH,SAgMA8D,WAEA,SAWA,mBAiCA,aA65BAd,uBA2oBAW;AAzxDJ,IAAAI,eAAA;AAAA;AAAA;AAAA;AAAA,IAAI9D,UAAS,CAAC;AACd,IAAIC,aAAY,CAAC;AACjB,IAAIC,OAAM,OAAO,eAAe,cAAc,aAAa;AAC3D,IAAIH,UAAS;AAgMb,IAAI8D,YAAW,CAAC,EAAE;AAElB,IAAI,UAAU,MAAM,WAAW,SAAU,KAAK;AAC5C,aAAOA,UAAS,KAAK,GAAG,KAAK;AAAA,IAC/B;AASA,IAAI,oBAAoB;AA0BxB,IAAAjE,QAAO,sBAAsB,WAAO,wBAAwB,SACxD,WAAO,sBACP;AAKJ,IAAI,cAAcW,YAAW;AAsD7B,IAAAX,QAAO,WAAW;AAGlB,IAAAA,QAAO,WAAW,SAAU,KAAK;AAC/B,UAAI,YAAYA,QAAO;AACvB,aAAO;AAAA,IACT;AA0BA,IAAAA,QAAO,OAAO,SAAU,OAAO,kBAAkB,QAAQ;AACvD,aAAOc,MAAK,MAAM,OAAO,kBAAkB,MAAM;AAAA,IACnD;AAEA,QAAId,QAAO,qBAAqB;AAC9B,MAAAA,QAAO,UAAU,YAAY,WAAW;AACxC,MAAAA,QAAO,YAAY;AAAA,IACrB;AA8BA,IAAAA,QAAO,QAAQ,SAAU,MAAMoB,OAAM,UAAU;AAC7C,aAAOD,OAAM,MAAM,MAAMC,OAAM,QAAQ;AAAA,IACzC;AAgBA,IAAApB,QAAO,cAAc,SAAU,MAAM;AACnC,aAAOa,aAAY,MAAM,IAAI;AAAA,IAC/B;AAIA,IAAAb,QAAO,kBAAkB,SAAU,MAAM;AACvC,aAAOa,aAAY,MAAM,IAAI;AAAA,IAC/B;AA+GA,IAAAb,QAAO,WAAWC;AAKlB,IAAAD,QAAO,UAAU,SAASmE,SAAS,GAAG,GAAG;AACvC,UAAI,CAAC1C,kBAAiB,CAAC,KAAK,CAACA,kBAAiB,CAAC,GAAG;AAChD,cAAM,IAAI,UAAU,2BAA2B;AAAA,MACjD;AAEA,UAAI,MAAM;AAAG,eAAO;AAEpB,UAAI,IAAI,EAAE;AACV,UAAI,IAAI,EAAE;AAEV,eAAS,IAAI,GAAG,MAAM,KAAK,IAAI,GAAG,CAAC,GAAG,IAAI,KAAK,EAAE,GAAG;AAClD,YAAI,EAAE,OAAO,EAAE,IAAI;AACjB,cAAI,EAAE;AACN,cAAI,EAAE;AACN;AAAA,QACF;AAAA,MACF;AAEA,UAAI,IAAI;AAAG,eAAO;AAClB,UAAI,IAAI;AAAG,eAAO;AAClB,aAAO;AAAA,IACT;AAEA,IAAAzB,QAAO,aAAa,SAASoE,YAAY,UAAU;AACjD,cAAQ,OAAO,QAAQ,EAAE,YAAY,GAAG;AAAA,QACtC,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AAEA,IAAApE,QAAO,SAAS,SAASqE,QAAQ,MAAM,QAAQ;AAC7C,UAAI,CAAC,QAAQ,IAAI,GAAG;AAClB,cAAM,IAAI,UAAU,6CAA6C;AAAA,MACnE;AAEA,UAAI,KAAK,WAAW,GAAG;AACrB,eAAOrE,QAAO,MAAM,CAAC;AAAA,MACvB;AAEA,UAAI;AACJ,UAAI,WAAW,QAAW;AACxB,iBAAS;AACT,aAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAChC,oBAAU,KAAK,GAAG;AAAA,QACpB;AAAA,MACF;AAEA,UAAI,SAASA,QAAO,YAAY,MAAM;AACtC,UAAI,MAAM;AACV,WAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAChC,YAAI,MAAM,KAAK;AACf,YAAI,CAACyB,kBAAiB,GAAG,GAAG;AAC1B,gBAAM,IAAI,UAAU,6CAA6C;AAAA,QACnE;AACA,YAAI,KAAK,QAAQ,GAAG;AACpB,eAAO,IAAI;AAAA,MACb;AACA,aAAO;AAAA,IACT;AA6CA,IAAAzB,QAAO,aAAauB;AA0EpB,IAAAvB,QAAO,UAAU,YAAY;AAQ7B,IAAAA,QAAO,UAAU,SAAS,SAASsE,UAAU;AAC3C,UAAI,MAAM,KAAK;AACf,UAAI,MAAM,MAAM,GAAG;AACjB,cAAM,IAAI,WAAW,2CAA2C;AAAA,MAClE;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC/B,QAAAlC,MAAK,MAAM,GAAG,IAAI,CAAC;AAAA,MACrB;AACA,aAAO;AAAA,IACT;AAEA,IAAApC,QAAO,UAAU,SAAS,SAASuE,UAAU;AAC3C,UAAI,MAAM,KAAK;AACf,UAAI,MAAM,MAAM,GAAG;AACjB,cAAM,IAAI,WAAW,2CAA2C;AAAA,MAClE;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC/B,QAAAnC,MAAK,MAAM,GAAG,IAAI,CAAC;AACnB,QAAAA,MAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AAAA,MACzB;AACA,aAAO;AAAA,IACT;AAEA,IAAApC,QAAO,UAAU,SAAS,SAASwE,UAAU;AAC3C,UAAI,MAAM,KAAK;AACf,UAAI,MAAM,MAAM,GAAG;AACjB,cAAM,IAAI,WAAW,2CAA2C;AAAA,MAClE;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC/B,QAAApC,MAAK,MAAM,GAAG,IAAI,CAAC;AACnB,QAAAA,MAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AACvB,QAAAA,MAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AACvB,QAAAA,MAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AAAA,MACzB;AACA,aAAO;AAAA,IACT;AAEA,IAAApC,QAAO,UAAU,WAAW,SAASiE,YAAY;AAC/C,UAAI,SAAS,KAAK,SAAS;AAC3B,UAAI,WAAW;AAAG,eAAO;AACzB,UAAI,UAAU,WAAW;AAAG,eAAOlC,WAAU,MAAM,GAAG,MAAM;AAC5D,aAAOF,cAAa,MAAM,MAAM,SAAS;AAAA,IAC3C;AAEA,IAAA7B,QAAO,UAAU,SAAS,SAASyE,QAAQ,GAAG;AAC5C,UAAI,CAAChD,kBAAiB,CAAC;AAAG,cAAM,IAAI,UAAU,2BAA2B;AACzE,UAAI,SAAS;AAAG,eAAO;AACvB,aAAOzB,QAAO,QAAQ,MAAM,CAAC,MAAM;AAAA,IACrC;AAEA,IAAAA,QAAO,UAAU,UAAU,SAAS,UAAW;AAC7C,UAAI,MAAM;AACV,UAAI,MAAM;AACV,UAAI,KAAK,SAAS,GAAG;AACnB,cAAM,KAAK,SAAS,OAAO,GAAG,GAAG,EAAE,MAAM,OAAO,EAAE,KAAK,GAAG;AAC1D,YAAI,KAAK,SAAS;AAAK,iBAAO;AAAA,MAChC;AACA,aAAO,aAAa,MAAM;AAAA,IAC5B;AAEA,IAAAA,QAAO,UAAU,UAAU,SAASmE,SAAS,QAAQ,OAAO,KAAK,WAAW,SAAS;AACnF,UAAI,CAAC1C,kBAAiB,MAAM,GAAG;AAC7B,cAAM,IAAI,UAAU,2BAA2B;AAAA,MACjD;AAEA,UAAI,UAAU,QAAW;AACvB,gBAAQ;AAAA,MACV;AACA,UAAI,QAAQ,QAAW;AACrB,cAAM,SAAS,OAAO,SAAS;AAAA,MACjC;AACA,UAAI,cAAc,QAAW;AAC3B,oBAAY;AAAA,MACd;AACA,UAAI,YAAY,QAAW;AACzB,kBAAU,KAAK;AAAA,MACjB;AAEA,UAAI,QAAQ,KAAK,MAAM,OAAO,UAAU,YAAY,KAAK,UAAU,KAAK,QAAQ;AAC9E,cAAM,IAAI,WAAW,oBAAoB;AAAA,MAC3C;AAEA,UAAI,aAAa,WAAW,SAAS,KAAK;AACxC,eAAO;AAAA,MACT;AACA,UAAI,aAAa,SAAS;AACxB,eAAO;AAAA,MACT;AACA,UAAI,SAAS,KAAK;AAChB,eAAO;AAAA,MACT;AAEA,iBAAW;AACX,eAAS;AACT,qBAAe;AACf,mBAAa;AAEb,UAAI,SAAS;AAAQ,eAAO;AAE5B,UAAI,IAAI,UAAU;AAClB,UAAI,IAAI,MAAM;AACd,UAAI,MAAM,KAAK,IAAI,GAAG,CAAC;AAEvB,UAAI,WAAW,KAAK,MAAM,WAAW,OAAO;AAC5C,UAAI,aAAa,OAAO,MAAM,OAAO,GAAG;AAExC,eAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,YAAI,SAAS,OAAO,WAAW,IAAI;AACjC,cAAI,SAAS;AACb,cAAI,WAAW;AACf;AAAA,QACF;AAAA,MACF;AAEA,UAAI,IAAI;AAAG,eAAO;AAClB,UAAI,IAAI;AAAG,eAAO;AAClB,aAAO;AAAA,IACT;AA4HA,IAAAzB,QAAO,UAAU,WAAW,SAAS0E,UAAU,KAAK,YAAY,UAAU;AACxE,aAAO,KAAK,QAAQ,KAAK,YAAY,QAAQ,MAAM;AAAA,IACrD;AAEA,IAAA1E,QAAO,UAAU,UAAU,SAAS2E,SAAS,KAAK,YAAY,UAAU;AACtE,aAAOtC,sBAAqB,MAAM,KAAK,YAAY,UAAU,IAAI;AAAA,IACnE;AAEA,IAAArC,QAAO,UAAU,cAAc,SAAS4E,aAAa,KAAK,YAAY,UAAU;AAC9E,aAAOvC,sBAAqB,MAAM,KAAK,YAAY,UAAU,KAAK;AAAA,IACpE;AAiDA,IAAArC,QAAO,UAAU,QAAQ,SAASU,OAAOY,SAAQ,QAAQ,QAAQ,UAAU;AAEzE,UAAI,WAAW,QAAW;AACxB,mBAAW;AACX,iBAAS,KAAK;AACd,iBAAS;AAAA,MAEX,WAAW,WAAW,UAAa,OAAO,WAAW,UAAU;AAC7D,mBAAW;AACX,iBAAS,KAAK;AACd,iBAAS;AAAA,MAEX,WAAW,SAAS,MAAM,GAAG;AAC3B,iBAAS,SAAS;AAClB,YAAI,SAAS,MAAM,GAAG;AACpB,mBAAS,SAAS;AAClB,cAAI,aAAa;AAAW,uBAAW;AAAA,QACzC,OAAO;AACL,qBAAW;AACX,mBAAS;AAAA,QACX;AAAA,MAEF,OAAO;AACL,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,UAAI,YAAY,KAAK,SAAS;AAC9B,UAAI,WAAW,UAAa,SAAS;AAAW,iBAAS;AAEzD,UAAKA,QAAO,SAAS,MAAM,SAAS,KAAK,SAAS,MAAO,SAAS,KAAK,QAAQ;AAC7E,cAAM,IAAI,WAAW,wCAAwC;AAAA,MAC/D;AAEA,UAAI,CAAC;AAAU,mBAAW;AAE1B,UAAI,cAAc;AAClB,iBAAS;AACP,gBAAQ,UAAU;AAAA,UAChB,KAAK;AACH,mBAAOmB,UAAS,MAAMnB,SAAQ,QAAQ,MAAM;AAAA,UAE9C,KAAK;AAAA,UACL,KAAK;AACH,mBAAOoB,WAAU,MAAMpB,SAAQ,QAAQ,MAAM;AAAA,UAE/C,KAAK;AACH,mBAAOsB,YAAW,MAAMtB,SAAQ,QAAQ,MAAM;AAAA,UAEhD,KAAK;AAAA,UACL,KAAK;AACH,mBAAOwB,aAAY,MAAMxB,SAAQ,QAAQ,MAAM;AAAA,UAEjD,KAAK;AAEH,mBAAOyB,aAAY,MAAMzB,SAAQ,QAAQ,MAAM;AAAA,UAEjD,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO0B,WAAU,MAAM1B,SAAQ,QAAQ,MAAM;AAAA,UAE/C;AACE,gBAAI;AAAa,oBAAM,IAAI,UAAU,uBAAuB,QAAQ;AACpE,wBAAY,KAAK,UAAU,YAAY;AACvC,0BAAc;AAAA,QAClB;AAAA,MACF;AAAA,IACF;AAEA,IAAAtB,QAAO,UAAU,SAAS,SAAS6E,UAAU;AAC3C,aAAO;AAAA,QACL,MAAM;AAAA,QACN,MAAM,MAAM,UAAU,MAAM,KAAK,KAAK,QAAQ,MAAM,CAAC;AAAA,MACvD;AAAA,IACF;AAsFA,IAAI1B,wBAAuB;AA8D3B,IAAAnD,QAAO,UAAU,QAAQ,SAAS8E,OAAO,OAAO,KAAK;AACnD,UAAI,MAAM,KAAK;AACf,cAAQ,CAAC,CAAC;AACV,YAAM,QAAQ,SAAY,MAAM,CAAC,CAAC;AAElC,UAAI,QAAQ,GAAG;AACb,iBAAS;AACT,YAAI,QAAQ;AAAG,kBAAQ;AAAA,MACzB,WAAW,QAAQ,KAAK;AACtB,gBAAQ;AAAA,MACV;AAEA,UAAI,MAAM,GAAG;AACX,eAAO;AACP,YAAI,MAAM;AAAG,gBAAM;AAAA,MACrB,WAAW,MAAM,KAAK;AACpB,cAAM;AAAA,MACR;AAEA,UAAI,MAAM;AAAO,cAAM;AAEvB,UAAI;AACJ,UAAI9E,QAAO,qBAAqB;AAC9B,iBAAS,KAAK,SAAS,OAAO,GAAG;AACjC,eAAO,YAAYA,QAAO;AAAA,MAC5B,OAAO;AACL,YAAI,WAAW,MAAM;AACrB,iBAAS,IAAIA,QAAO,UAAU,MAAS;AACvC,iBAAS,IAAI,GAAG,IAAI,UAAU,EAAE,GAAG;AACjC,iBAAO,KAAK,KAAK,IAAI;AAAA,QACvB;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAUA,IAAAA,QAAO,UAAU,aAAa,SAAS+E,YAAY,QAAQxD,aAAY,UAAU;AAC/E,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC;AAAU,QAAA8B,aAAY,QAAQ9B,aAAY,KAAK,MAAM;AAE1D,UAAI,MAAM,KAAK;AACf,UAAIyD,OAAM;AACV,UAAI,IAAI;AACR,aAAO,EAAE,IAAIzD,gBAAeyD,QAAO,MAAQ;AACzC,eAAO,KAAK,SAAS,KAAKA;AAAA,MAC5B;AAEA,aAAO;AAAA,IACT;AAEA,IAAAhF,QAAO,UAAU,aAAa,SAASiF,YAAY,QAAQ1D,aAAY,UAAU;AAC/E,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC,UAAU;AACb,QAAA8B,aAAY,QAAQ9B,aAAY,KAAK,MAAM;AAAA,MAC7C;AAEA,UAAI,MAAM,KAAK,SAAS,EAAEA;AAC1B,UAAIyD,OAAM;AACV,aAAOzD,cAAa,MAAMyD,QAAO,MAAQ;AACvC,eAAO,KAAK,SAAS,EAAEzD,eAAcyD;AAAA,MACvC;AAEA,aAAO;AAAA,IACT;AAEA,IAAAhF,QAAO,UAAU,YAAY,SAASkF,WAAW,QAAQ,UAAU;AACjE,UAAI,CAAC;AAAU,QAAA7B,aAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,KAAK;AAAA,IACd;AAEA,IAAArD,QAAO,UAAU,eAAe,SAASmF,cAAc,QAAQ,UAAU;AACvE,UAAI,CAAC;AAAU,QAAA9B,aAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,KAAK,UAAW,KAAK,SAAS,MAAM;AAAA,IAC7C;AAEA,IAAArD,QAAO,UAAU,eAAe,SAASoF,cAAc,QAAQ,UAAU;AACvE,UAAI,CAAC;AAAU,QAAA/B,aAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAQ,KAAK,WAAW,IAAK,KAAK,SAAS;AAAA,IAC7C;AAEA,IAAArD,QAAO,UAAU,eAAe,SAASqF,cAAc,QAAQ,UAAU;AACvE,UAAI,CAAC;AAAU,QAAAhC,aAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,cAAS,KAAK,UACT,KAAK,SAAS,MAAM,IACpB,KAAK,SAAS,MAAM,MACpB,KAAK,SAAS,KAAK;AAAA,IAC1B;AAEA,IAAArD,QAAO,UAAU,eAAe,SAASsF,cAAc,QAAQ,UAAU;AACvE,UAAI,CAAC;AAAU,QAAAjC,aAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,aAAQ,KAAK,UAAU,YACnB,KAAK,SAAS,MAAM,KACrB,KAAK,SAAS,MAAM,IACrB,KAAK,SAAS;AAAA,IAClB;AAEA,IAAArD,QAAO,UAAU,YAAY,SAASuF,WAAW,QAAQhE,aAAY,UAAU;AAC7E,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC;AAAU,QAAA8B,aAAY,QAAQ9B,aAAY,KAAK,MAAM;AAE1D,UAAI,MAAM,KAAK;AACf,UAAIyD,OAAM;AACV,UAAI,IAAI;AACR,aAAO,EAAE,IAAIzD,gBAAeyD,QAAO,MAAQ;AACzC,eAAO,KAAK,SAAS,KAAKA;AAAA,MAC5B;AACA,MAAAA,QAAO;AAEP,UAAI,OAAOA;AAAK,eAAO,KAAK,IAAI,GAAG,IAAIzD,WAAU;AAEjD,aAAO;AAAA,IACT;AAEA,IAAAvB,QAAO,UAAU,YAAY,SAASwF,WAAW,QAAQjE,aAAY,UAAU;AAC7E,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC;AAAU,QAAA8B,aAAY,QAAQ9B,aAAY,KAAK,MAAM;AAE1D,UAAI,IAAIA;AACR,UAAIyD,OAAM;AACV,UAAI,MAAM,KAAK,SAAS,EAAE;AAC1B,aAAO,IAAI,MAAMA,QAAO,MAAQ;AAC9B,eAAO,KAAK,SAAS,EAAE,KAAKA;AAAA,MAC9B;AACA,MAAAA,QAAO;AAEP,UAAI,OAAOA;AAAK,eAAO,KAAK,IAAI,GAAG,IAAIzD,WAAU;AAEjD,aAAO;AAAA,IACT;AAEA,IAAAvB,QAAO,UAAU,WAAW,SAASyF,UAAU,QAAQ,UAAU;AAC/D,UAAI,CAAC;AAAU,QAAApC,aAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,UAAI,EAAE,KAAK,UAAU;AAAO,eAAQ,KAAK;AACzC,cAAS,MAAO,KAAK,UAAU,KAAK;AAAA,IACtC;AAEA,IAAArD,QAAO,UAAU,cAAc,SAAS0F,aAAa,QAAQ,UAAU;AACrE,UAAI,CAAC;AAAU,QAAArC,aAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,UAAI,MAAM,KAAK,UAAW,KAAK,SAAS,MAAM;AAC9C,aAAQ,MAAM,QAAU,MAAM,aAAa;AAAA,IAC7C;AAEA,IAAArD,QAAO,UAAU,cAAc,SAAS2F,aAAa,QAAQ,UAAU;AACrE,UAAI,CAAC;AAAU,QAAAtC,aAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,UAAI,MAAM,KAAK,SAAS,KAAM,KAAK,WAAW;AAC9C,aAAQ,MAAM,QAAU,MAAM,aAAa;AAAA,IAC7C;AAEA,IAAArD,QAAO,UAAU,cAAc,SAAS4F,aAAa,QAAQ,UAAU;AACrE,UAAI,CAAC;AAAU,QAAAvC,aAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,aAAQ,KAAK,UACV,KAAK,SAAS,MAAM,IACpB,KAAK,SAAS,MAAM,KACpB,KAAK,SAAS,MAAM;AAAA,IACzB;AAEA,IAAArD,QAAO,UAAU,cAAc,SAAS6F,aAAa,QAAQ,UAAU;AACrE,UAAI,CAAC;AAAU,QAAAxC,aAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,aAAQ,KAAK,WAAW,KACrB,KAAK,SAAS,MAAM,KACpB,KAAK,SAAS,MAAM,IACpB,KAAK,SAAS;AAAA,IACnB;AAEA,IAAArD,QAAO,UAAU,cAAc,SAAS8F,aAAa,QAAQ,UAAU;AACrE,UAAI,CAAC;AAAU,QAAAzC,aAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,KAAK,MAAM,QAAQ,MAAM,IAAI,CAAC;AAAA,IACvC;AAEA,IAAArD,QAAO,UAAU,cAAc,SAAS+F,aAAa,QAAQ,UAAU;AACrE,UAAI,CAAC;AAAU,QAAA1C,aAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,KAAK,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,IACxC;AAEA,IAAArD,QAAO,UAAU,eAAe,SAASgG,cAAc,QAAQ,UAAU;AACvE,UAAI,CAAC;AAAU,QAAA3C,aAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,KAAK,MAAM,QAAQ,MAAM,IAAI,CAAC;AAAA,IACvC;AAEA,IAAArD,QAAO,UAAU,eAAe,SAASiG,cAAc,QAAQ,UAAU;AACvE,UAAI,CAAC;AAAU,QAAA5C,aAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,KAAK,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,IACxC;AAQA,IAAArD,QAAO,UAAU,cAAc,SAASkG,aAAa,OAAO,QAAQ3E,aAAY,UAAU;AACxF,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC,UAAU;AACb,YAAI,WAAW,KAAK,IAAI,GAAG,IAAIA,WAAU,IAAI;AAC7C,QAAA+B,UAAS,MAAM,OAAO,QAAQ/B,aAAY,UAAU,CAAC;AAAA,MACvD;AAEA,UAAIyD,OAAM;AACV,UAAI,IAAI;AACR,WAAK,UAAU,QAAQ;AACvB,aAAO,EAAE,IAAIzD,gBAAeyD,QAAO,MAAQ;AACzC,aAAK,SAAS,KAAM,QAAQA,OAAO;AAAA,MACrC;AAEA,aAAO,SAASzD;AAAA,IAClB;AAEA,IAAAvB,QAAO,UAAU,cAAc,SAASmG,aAAa,OAAO,QAAQ5E,aAAY,UAAU;AACxF,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,MAAAA,cAAaA,cAAa;AAC1B,UAAI,CAAC,UAAU;AACb,YAAI,WAAW,KAAK,IAAI,GAAG,IAAIA,WAAU,IAAI;AAC7C,QAAA+B,UAAS,MAAM,OAAO,QAAQ/B,aAAY,UAAU,CAAC;AAAA,MACvD;AAEA,UAAI,IAAIA,cAAa;AACrB,UAAIyD,OAAM;AACV,WAAK,SAAS,KAAK,QAAQ;AAC3B,aAAO,EAAE,KAAK,MAAMA,QAAO,MAAQ;AACjC,aAAK,SAAS,KAAM,QAAQA,OAAO;AAAA,MACrC;AAEA,aAAO,SAASzD;AAAA,IAClB;AAEA,IAAAvB,QAAO,UAAU,aAAa,SAASoG,YAAY,OAAO,QAAQ,UAAU;AAC1E,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,QAAA9C,UAAS,MAAM,OAAO,QAAQ,GAAG,KAAM,CAAC;AACvD,UAAI,CAACtD,QAAO;AAAqB,gBAAQ,KAAK,MAAM,KAAK;AACzD,WAAK,UAAW,QAAQ;AACxB,aAAO,SAAS;AAAA,IAClB;AAUA,IAAAA,QAAO,UAAU,gBAAgB,SAASqG,eAAe,OAAO,QAAQ,UAAU;AAChF,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,QAAA/C,UAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,CAAC;AACzD,UAAItD,QAAO,qBAAqB;AAC9B,aAAK,UAAW,QAAQ;AACxB,aAAK,SAAS,KAAM,UAAU;AAAA,MAChC,OAAO;AACL,QAAAuD,mBAAkB,MAAM,OAAO,QAAQ,IAAI;AAAA,MAC7C;AACA,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAvD,QAAO,UAAU,gBAAgB,SAASsG,eAAe,OAAO,QAAQ,UAAU;AAChF,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,QAAAhD,UAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,CAAC;AACzD,UAAItD,QAAO,qBAAqB;AAC9B,aAAK,UAAW,UAAU;AAC1B,aAAK,SAAS,KAAM,QAAQ;AAAA,MAC9B,OAAO;AACL,QAAAuD,mBAAkB,MAAM,OAAO,QAAQ,KAAK;AAAA,MAC9C;AACA,aAAO,SAAS;AAAA,IAClB;AASA,IAAAvD,QAAO,UAAU,gBAAgB,SAASuG,eAAe,OAAO,QAAQ,UAAU;AAChF,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,QAAAjD,UAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,CAAC;AAC7D,UAAItD,QAAO,qBAAqB;AAC9B,aAAK,SAAS,KAAM,UAAU;AAC9B,aAAK,SAAS,KAAM,UAAU;AAC9B,aAAK,SAAS,KAAM,UAAU;AAC9B,aAAK,UAAW,QAAQ;AAAA,MAC1B,OAAO;AACL,QAAAwD,mBAAkB,MAAM,OAAO,QAAQ,IAAI;AAAA,MAC7C;AACA,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAxD,QAAO,UAAU,gBAAgB,SAASwG,eAAe,OAAO,QAAQ,UAAU;AAChF,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,QAAAlD,UAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,CAAC;AAC7D,UAAItD,QAAO,qBAAqB;AAC9B,aAAK,UAAW,UAAU;AAC1B,aAAK,SAAS,KAAM,UAAU;AAC9B,aAAK,SAAS,KAAM,UAAU;AAC9B,aAAK,SAAS,KAAM,QAAQ;AAAA,MAC9B,OAAO;AACL,QAAAwD,mBAAkB,MAAM,OAAO,QAAQ,KAAK;AAAA,MAC9C;AACA,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAxD,QAAO,UAAU,aAAa,SAASyG,YAAY,OAAO,QAAQlF,aAAY,UAAU;AACtF,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC,UAAU;AACb,YAAI,QAAQ,KAAK,IAAI,GAAG,IAAIA,cAAa,CAAC;AAE1C,QAAA+B,UAAS,MAAM,OAAO,QAAQ/B,aAAY,QAAQ,GAAG,CAAC,KAAK;AAAA,MAC7D;AAEA,UAAI,IAAI;AACR,UAAIyD,OAAM;AACV,UAAI0B,OAAM;AACV,WAAK,UAAU,QAAQ;AACvB,aAAO,EAAE,IAAInF,gBAAeyD,QAAO,MAAQ;AACzC,YAAI,QAAQ,KAAK0B,SAAQ,KAAK,KAAK,SAAS,IAAI,OAAO,GAAG;AACxD,UAAAA,OAAM;AAAA,QACR;AACA,aAAK,SAAS,MAAO,QAAQ1B,QAAQ,KAAK0B,OAAM;AAAA,MAClD;AAEA,aAAO,SAASnF;AAAA,IAClB;AAEA,IAAAvB,QAAO,UAAU,aAAa,SAAS2G,YAAY,OAAO,QAAQpF,aAAY,UAAU;AACtF,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC,UAAU;AACb,YAAI,QAAQ,KAAK,IAAI,GAAG,IAAIA,cAAa,CAAC;AAE1C,QAAA+B,UAAS,MAAM,OAAO,QAAQ/B,aAAY,QAAQ,GAAG,CAAC,KAAK;AAAA,MAC7D;AAEA,UAAI,IAAIA,cAAa;AACrB,UAAIyD,OAAM;AACV,UAAI0B,OAAM;AACV,WAAK,SAAS,KAAK,QAAQ;AAC3B,aAAO,EAAE,KAAK,MAAM1B,QAAO,MAAQ;AACjC,YAAI,QAAQ,KAAK0B,SAAQ,KAAK,KAAK,SAAS,IAAI,OAAO,GAAG;AACxD,UAAAA,OAAM;AAAA,QACR;AACA,aAAK,SAAS,MAAO,QAAQ1B,QAAQ,KAAK0B,OAAM;AAAA,MAClD;AAEA,aAAO,SAASnF;AAAA,IAClB;AAEA,IAAAvB,QAAO,UAAU,YAAY,SAAS4G,WAAW,OAAO,QAAQ,UAAU;AACxE,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,QAAAtD,UAAS,MAAM,OAAO,QAAQ,GAAG,KAAM,IAAK;AAC3D,UAAI,CAACtD,QAAO;AAAqB,gBAAQ,KAAK,MAAM,KAAK;AACzD,UAAI,QAAQ;AAAG,gBAAQ,MAAO,QAAQ;AACtC,WAAK,UAAW,QAAQ;AACxB,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS6G,cAAc,OAAO,QAAQ,UAAU;AAC9E,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,QAAAvD,UAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,MAAO;AAC/D,UAAItD,QAAO,qBAAqB;AAC9B,aAAK,UAAW,QAAQ;AACxB,aAAK,SAAS,KAAM,UAAU;AAAA,MAChC,OAAO;AACL,QAAAuD,mBAAkB,MAAM,OAAO,QAAQ,IAAI;AAAA,MAC7C;AACA,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAvD,QAAO,UAAU,eAAe,SAAS8G,cAAc,OAAO,QAAQ,UAAU;AAC9E,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,QAAAxD,UAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,MAAO;AAC/D,UAAItD,QAAO,qBAAqB;AAC9B,aAAK,UAAW,UAAU;AAC1B,aAAK,SAAS,KAAM,QAAQ;AAAA,MAC9B,OAAO;AACL,QAAAuD,mBAAkB,MAAM,OAAO,QAAQ,KAAK;AAAA,MAC9C;AACA,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAvD,QAAO,UAAU,eAAe,SAAS+G,cAAc,OAAO,QAAQ,UAAU;AAC9E,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,QAAAzD,UAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,WAAW;AACvE,UAAItD,QAAO,qBAAqB;AAC9B,aAAK,UAAW,QAAQ;AACxB,aAAK,SAAS,KAAM,UAAU;AAC9B,aAAK,SAAS,KAAM,UAAU;AAC9B,aAAK,SAAS,KAAM,UAAU;AAAA,MAChC,OAAO;AACL,QAAAwD,mBAAkB,MAAM,OAAO,QAAQ,IAAI;AAAA,MAC7C;AACA,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAxD,QAAO,UAAU,eAAe,SAASgH,cAAc,OAAO,QAAQ,UAAU;AAC9E,cAAQ,CAAC;AACT,eAAS,SAAS;AAClB,UAAI,CAAC;AAAU,QAAA1D,UAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,WAAW;AACvE,UAAI,QAAQ;AAAG,gBAAQ,aAAa,QAAQ;AAC5C,UAAItD,QAAO,qBAAqB;AAC9B,aAAK,UAAW,UAAU;AAC1B,aAAK,SAAS,KAAM,UAAU;AAC9B,aAAK,SAAS,KAAM,UAAU;AAC9B,aAAK,SAAS,KAAM,QAAQ;AAAA,MAC9B,OAAO;AACL,QAAAwD,mBAAkB,MAAM,OAAO,QAAQ,KAAK;AAAA,MAC9C;AACA,aAAO,SAAS;AAAA,IAClB;AAeA,IAAAxD,QAAO,UAAU,eAAe,SAASiH,cAAc,OAAO,QAAQ,UAAU;AAC9E,aAAOvD,YAAW,MAAM,OAAO,QAAQ,MAAM,QAAQ;AAAA,IACvD;AAEA,IAAA1D,QAAO,UAAU,eAAe,SAASkH,cAAc,OAAO,QAAQ,UAAU;AAC9E,aAAOxD,YAAW,MAAM,OAAO,QAAQ,OAAO,QAAQ;AAAA,IACxD;AAUA,IAAA1D,QAAO,UAAU,gBAAgB,SAASmH,eAAe,OAAO,QAAQ,UAAU;AAChF,aAAOxD,aAAY,MAAM,OAAO,QAAQ,MAAM,QAAQ;AAAA,IACxD;AAEA,IAAA3D,QAAO,UAAU,gBAAgB,SAASoH,eAAe,OAAO,QAAQ,UAAU;AAChF,aAAOzD,aAAY,MAAM,OAAO,QAAQ,OAAO,QAAQ;AAAA,IACzD;AAGA,IAAA3D,QAAO,UAAU,OAAO,SAASqH,MAAM,QAAQ,aAAa,OAAO,KAAK;AACtE,UAAI,CAAC;AAAO,gBAAQ;AACpB,UAAI,CAAC,OAAO,QAAQ;AAAG,cAAM,KAAK;AAClC,UAAI,eAAe,OAAO;AAAQ,sBAAc,OAAO;AACvD,UAAI,CAAC;AAAa,sBAAc;AAChC,UAAI,MAAM,KAAK,MAAM;AAAO,cAAM;AAGlC,UAAI,QAAQ;AAAO,eAAO;AAC1B,UAAI,OAAO,WAAW,KAAK,KAAK,WAAW;AAAG,eAAO;AAGrD,UAAI,cAAc,GAAG;AACnB,cAAM,IAAI,WAAW,2BAA2B;AAAA,MAClD;AACA,UAAI,QAAQ,KAAK,SAAS,KAAK;AAAQ,cAAM,IAAI,WAAW,2BAA2B;AACvF,UAAI,MAAM;AAAG,cAAM,IAAI,WAAW,yBAAyB;AAG3D,UAAI,MAAM,KAAK;AAAQ,cAAM,KAAK;AAClC,UAAI,OAAO,SAAS,cAAc,MAAM,OAAO;AAC7C,cAAM,OAAO,SAAS,cAAc;AAAA,MACtC;AAEA,UAAI,MAAM,MAAM;AAChB,UAAI;AAEJ,UAAI,SAAS,UAAU,QAAQ,eAAe,cAAc,KAAK;AAE/D,aAAK,IAAI,MAAM,GAAG,KAAK,GAAG,EAAE,GAAG;AAC7B,iBAAO,IAAI,eAAe,KAAK,IAAI;AAAA,QACrC;AAAA,MACF,WAAW,MAAM,OAAQ,CAACrH,QAAO,qBAAqB;AAEpD,aAAK,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AACxB,iBAAO,IAAI,eAAe,KAAK,IAAI;AAAA,QACrC;AAAA,MACF,OAAO;AACL,mBAAW,UAAU,IAAI;AAAA,UACvB;AAAA,UACA,KAAK,SAAS,OAAO,QAAQ,GAAG;AAAA,UAChC;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAMA,IAAAA,QAAO,UAAU,OAAO,SAASoB,MAAM,KAAK,OAAO,KAAK,UAAU;AAEhE,UAAI,OAAO,QAAQ,UAAU;AAC3B,YAAI,OAAO,UAAU,UAAU;AAC7B,qBAAW;AACX,kBAAQ;AACR,gBAAM,KAAK;AAAA,QACb,WAAW,OAAO,QAAQ,UAAU;AAClC,qBAAW;AACX,gBAAM,KAAK;AAAA,QACb;AACA,YAAI,IAAI,WAAW,GAAG;AACpB,cAAI,OAAO,IAAI,WAAW,CAAC;AAC3B,cAAI,OAAO,KAAK;AACd,kBAAM;AAAA,UACR;AAAA,QACF;AACA,YAAI,aAAa,UAAa,OAAO,aAAa,UAAU;AAC1D,gBAAM,IAAI,UAAU,2BAA2B;AAAA,QACjD;AACA,YAAI,OAAO,aAAa,YAAY,CAACpB,QAAO,WAAW,QAAQ,GAAG;AAChE,gBAAM,IAAI,UAAU,uBAAuB,QAAQ;AAAA,QACrD;AAAA,MACF,WAAW,OAAO,QAAQ,UAAU;AAClC,cAAM,MAAM;AAAA,MACd;AAGA,UAAI,QAAQ,KAAK,KAAK,SAAS,SAAS,KAAK,SAAS,KAAK;AACzD,cAAM,IAAI,WAAW,oBAAoB;AAAA,MAC3C;AAEA,UAAI,OAAO,OAAO;AAChB,eAAO;AAAA,MACT;AAEA,cAAQ,UAAU;AAClB,YAAM,QAAQ,SAAY,KAAK,SAAS,QAAQ;AAEhD,UAAI,CAAC;AAAK,cAAM;AAEhB,UAAI;AACJ,UAAI,OAAO,QAAQ,UAAU;AAC3B,aAAK,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAC5B,eAAK,KAAK;AAAA,QACZ;AAAA,MACF,OAAO;AACL,YAAI,QAAQyB,kBAAiB,GAAG,IAC5B,MACAE,aAAY,IAAI3B,QAAO,KAAK,QAAQ,EAAE,SAAS,CAAC;AACpD,YAAI,MAAM,MAAM;AAChB,aAAK,IAAI,GAAG,IAAI,MAAM,OAAO,EAAE,GAAG;AAChC,eAAK,IAAI,SAAS,MAAM,IAAI;AAAA,QAC9B;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAKA,IAAI8D,qBAAoB;AAAA;AAAA;;;ACzxDxB;AAAA;AAAA;AAAA;AACA,QAAM,WAAW;AAEjB,QAAI,YAAY,SAAS,SAAS;AAC9B,aAAO,UAAU,SAAS;AAC1B,eAAS,KAAK,UAAU;AACpB,eAAO,QAAQ,KAAK,SAAS;AAAA,MACjC;AAAA,IACJ,WAAW,UAAW;AAClB,aAAO,UAAU;AAAA,IACrB;AAAA;AAAA;;;ACPA,SAASwD,oBAAmB;AACxB,QAAM,IAAI,MAAM,iCAAiC;AACrD;AACA,SAASC,uBAAuB;AAC5B,QAAM,IAAI,MAAM,mCAAmC;AACvD;AAUA,SAASC,YAAW,KAAK;AACrB,MAAIC,sBAAqB,YAAY;AAEjC,WAAO,WAAW,KAAK,CAAC;AAAA,EAC5B;AAEA,OAAKA,sBAAqBH,qBAAoB,CAACG,sBAAqB,YAAY;AAC5E,IAAAA,oBAAmB;AACnB,WAAO,WAAW,KAAK,CAAC;AAAA,EAC5B;AACA,MAAI;AAEA,WAAOA,kBAAiB,KAAK,CAAC;AAAA,EAClC,SAAQC,IAAN;AACE,QAAI;AAEA,aAAOD,kBAAiB,KAAK,MAAM,KAAK,CAAC;AAAA,IAC7C,SAAQC,IAAN;AAEE,aAAOD,kBAAiB,KAAK,MAAM,KAAK,CAAC;AAAA,IAC7C;AAAA,EACJ;AAGJ;AACA,SAASE,iBAAgB,QAAQ;AAC7B,MAAIC,wBAAuB,cAAc;AAErC,WAAO,aAAa,MAAM;AAAA,EAC9B;AAEA,OAAKA,wBAAuBL,wBAAuB,CAACK,wBAAuB,cAAc;AACrF,IAAAA,sBAAqB;AACrB,WAAO,aAAa,MAAM;AAAA,EAC9B;AACA,MAAI;AAEA,WAAOA,oBAAmB,MAAM;AAAA,EACpC,SAASF,IAAP;AACE,QAAI;AAEA,aAAOE,oBAAmB,KAAK,MAAM,MAAM;AAAA,IAC/C,SAASF,IAAP;AAGE,aAAOE,oBAAmB,KAAK,MAAM,MAAM;AAAA,IAC/C;AAAA,EACJ;AAIJ;AAMA,SAASC,mBAAkB;AACvB,MAAI,CAACC,aAAY,CAACC,eAAc;AAC5B;AAAA,EACJ;AACA,EAAAD,YAAW;AACX,MAAIC,cAAa,QAAQ;AACrB,IAAAC,SAAQD,cAAa,OAAOC,MAAK;AAAA,EACrC,OAAO;AACH,IAAAC,cAAa;AAAA,EACjB;AACA,MAAID,OAAM,QAAQ;AACd,IAAAE,YAAW;AAAA,EACf;AACJ;AAEA,SAASA,cAAa;AAClB,MAAIJ,WAAU;AACV;AAAA,EACJ;AACA,MAAI,UAAUN,YAAWK,gBAAe;AACxC,EAAAC,YAAW;AAEX,MAAI,MAAME,OAAM;AAChB,SAAM,KAAK;AACP,IAAAD,gBAAeC;AACf,IAAAA,SAAQ,CAAC;AACT,WAAO,EAAEC,cAAa,KAAK;AACvB,UAAIF,eAAc;AACd,QAAAA,cAAaE,aAAY,IAAI;AAAA,MACjC;AAAA,IACJ;AACA,IAAAA,cAAa;AACb,UAAMD,OAAM;AAAA,EAChB;AACA,EAAAD,gBAAe;AACf,EAAAD,YAAW;AACX,EAAAH,iBAAgB,OAAO;AAC3B;AACA,SAASQ,UAAS,KAAK;AACnB,MAAI,OAAO,IAAI,MAAM,UAAU,SAAS,CAAC;AACzC,MAAI,UAAU,SAAS,GAAG;AACtB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,WAAK,IAAI,KAAK,UAAU;AAAA,IAC5B;AAAA,EACJ;AACA,EAAAH,OAAM,KAAK,IAAII,MAAK,KAAK,IAAI,CAAC;AAC9B,MAAIJ,OAAM,WAAW,KAAK,CAACF,WAAU;AACjC,IAAAN,YAAWU,WAAU;AAAA,EACzB;AACJ;AAEA,SAASE,MAAK,KAAK,OAAO;AACtB,OAAK,MAAM;AACX,OAAK,QAAQ;AACjB;AAcA,SAASC,QAAO;AAAC;AAUjB,SAASC,SAAQ,MAAM;AACnB,QAAM,IAAI,MAAM,kCAAkC;AACtD;AAEA,SAASC,OAAO;AAAE,SAAO;AAAI;AAC7B,SAASC,OAAO,KAAK;AACjB,QAAM,IAAI,MAAM,gCAAgC;AACpD;AAAC,SAASC,SAAQ;AAAE,SAAO;AAAG;AAc9B,SAASC,QAAO,mBAAkB;AAChC,MAAI,YAAYC,gBAAe,KAAKC,YAAW,IAAE;AACjD,MAAI,UAAU,KAAK,MAAM,SAAS;AAClC,MAAI,cAAc,KAAK,MAAO,YAAU,IAAG,GAAG;AAC9C,MAAI,mBAAmB;AACrB,cAAU,UAAU,kBAAkB;AACtC,kBAAc,cAAc,kBAAkB;AAC9C,QAAI,cAAY,GAAG;AACjB;AACA,qBAAe;AAAA,IACjB;AAAA,EACF;AACA,SAAO,CAAC,SAAQ,WAAW;AAC7B;AAGA,SAASC,UAAS;AAChB,MAAI,cAAc,IAAI,KAAK;AAC3B,MAAI,MAAM,cAAcC;AACxB,SAAO,MAAM;AACf;AAlMA,IASIrB,mBACAG,qBA4DAI,QACAF,WACAC,eACAE,aA4DAc,QACAC,WACAC,UACAC,MACAC,OACAC,UACAC,WACAC,UACAC,SAIAC,KACAC,cACAC,OACAC,MACAC,iBACAC,qBACAC,OAYAlB,cACAD,iBAyBAG,YAOA,WA0BG;AA9NP;AAAA;AAAA;AAAA;AASA,IAAIrB,oBAAmBH;AACvB,IAAIM,sBAAqBL;AACzB,QAAI,OAAO,WAAO,eAAe,YAAY;AACzC,MAAAE,oBAAmB;AAAA,IACvB;AACA,QAAI,OAAO,WAAO,iBAAiB,YAAY;AAC3C,MAAAG,sBAAqB;AAAA,IACzB;AAsDA,IAAII,SAAQ,CAAC;AACb,IAAIF,YAAW;AAEf,IAAIG,cAAa;AAyDjB,IAAAG,MAAK,UAAU,MAAM,WAAY;AAC7B,WAAK,IAAI,MAAM,MAAM,KAAK,KAAK;AAAA,IACnC;AACA,IAAIW,SAAQ;AACZ,IAAIC,YAAW;AACf,IAAIC,WAAU;AACd,IAAIC,OAAM,CAAC;AACX,IAAIC,QAAO,CAAC;AACZ,IAAIC,WAAU;AACd,IAAIC,YAAW,CAAC;AAChB,IAAIC,WAAU,CAAC;AACf,IAAIC,UAAS,CAAC;AAId,IAAIC,MAAKnB;AACT,IAAIoB,eAAcpB;AAClB,IAAIqB,QAAOrB;AACX,IAAIsB,OAAMtB;AACV,IAAIuB,kBAAiBvB;AACrB,IAAIwB,sBAAqBxB;AACzB,IAAIyB,QAAOzB;AAYX,IAAIO,eAAc,WAAO,eAAe,CAAC;AACzC,IAAID,kBACFC,aAAY,OACZA,aAAY,UACZA,aAAY,SACZA,aAAY,QACZA,aAAY,aACZ,WAAU;AAAE,aAAQ,IAAI,KAAK,EAAG,QAAQ;AAAA,IAAE;AAmB5C,IAAIE,aAAY,IAAI,KAAK;AAOzB,IAAI,YAAY;AAAA,MACd,UAAUX;AAAA,MACV,OAAOY;AAAA,MACP,SAASE;AAAA,MACT,KAAKC;AAAA,MACL,MAAMC;AAAA,MACN,SAASC;AAAA,MACT,UAAUC;AAAA,MACV,IAAIG;AAAA,MACJ,aAAaC;AAAA,MACb,MAAMC;AAAA,MACN,KAAKC;AAAA,MACL,gBAAgBC;AAAA,MAChB,oBAAoBC;AAAA,MACpB,MAAMC;AAAA,MACN,SAASxB;AAAA,MACT,KAAKC;AAAA,MACL,OAAOC;AAAA,MACP,OAAOC;AAAA,MACP,QAAQC;AAAA,MACR,UAAUM;AAAA,MACV,SAASM;AAAA,MACT,QAAQC;AAAA,MACR,QAAQV;AAAA,IACV;AAEA,IAAO,kBAAQ;AAAA;AAAA;;;AC9Nf,IACI,UAuBG;AAxBP;AAAA;AAAA;AAAA;AAEA,QAAI,OAAO,OAAO,WAAW,YAAW;AACtC,iBAAW,SAASkB,UAAS,MAAM,WAAW;AAE5C,aAAK,SAAS;AACd,aAAK,YAAY,OAAO,OAAO,UAAU,WAAW;AAAA,UAClD,aAAa;AAAA,YACX,OAAO;AAAA,YACP,YAAY;AAAA,YACZ,UAAU;AAAA,YACV,cAAc;AAAA,UAChB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,OAAO;AACL,iBAAW,SAASA,UAAS,MAAM,WAAW;AAC5C,aAAK,SAAS;AACd,YAAI,WAAW,WAAY;AAAA,QAAC;AAC5B,iBAAS,YAAY,UAAU;AAC/B,aAAK,YAAY,IAAI,SAAS;AAC9B,aAAK,UAAU,cAAc;AAAA,MAC/B;AAAA,IACF;AACA,IAAO,mBAAQ;AAAA;AAAA;;;ACxBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA;AAAA,kBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBO,SAAS,OAAO,GAAG;AACxB,MAAI,CAAC,SAAS,CAAC,GAAG;AAChB,QAAI,UAAU,CAAC;AACf,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,cAAQ,KAAKF,SAAQ,UAAU,EAAE,CAAC;AAAA,IACpC;AACA,WAAO,QAAQ,KAAK,GAAG;AAAA,EACzB;AAEA,MAAI,IAAI;AACR,MAAI,OAAO;AACX,MAAI,MAAM,KAAK;AACf,MAAI,MAAM,OAAO,CAAC,EAAE,QAAQ,cAAc,SAASG,IAAG;AACpD,QAAIA,OAAM;AAAM,aAAO;AACvB,QAAI,KAAK;AAAK,aAAOA;AACrB,YAAQA,IAAG;AAAA,MACT,KAAK;AAAM,eAAO,OAAO,KAAK,IAAI;AAAA,MAClC,KAAK;AAAM,eAAO,OAAO,KAAK,IAAI;AAAA,MAClC,KAAK;AACH,YAAI;AACF,iBAAO,KAAK,UAAU,KAAK,IAAI;AAAA,QACjC,SAAS,GAAP;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AACE,eAAOA;AAAA,IACX;AAAA,EACF,CAAC;AACD,WAAS,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,KAAK,EAAE,IAAI;AAC5C,QAAI,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG;AAC7B,aAAO,MAAM;AAAA,IACf,OAAO;AACL,aAAO,MAAMH,SAAQ,CAAC;AAAA,IACxB;AAAA,EACF;AACA,SAAO;AACT;AAMO,SAAS,UAAU,IAAI,KAAK;AAEjC,MAAI,YAAY,WAAO,OAAO,GAAG;AAC/B,WAAO,WAAW;AAChB,aAAO,UAAU,IAAI,GAAG,EAAE,MAAM,MAAM,SAAS;AAAA,IACjD;AAAA,EACF;AAEA,MAAI,gBAAQ,kBAAkB,MAAM;AAClC,WAAO;AAAA,EACT;AAEA,MAAI,SAAS;AACb,WAAS,aAAa;AACpB,QAAI,CAAC,QAAQ;AACX,UAAI,gBAAQ,kBAAkB;AAC5B,cAAM,IAAI,MAAM,GAAG;AAAA,MACrB,WAAW,gBAAQ,kBAAkB;AACnC,gBAAQ,MAAM,GAAG;AAAA,MACnB,OAAO;AACL,gBAAQ,MAAM,GAAG;AAAA,MACnB;AACA,eAAS;AAAA,IACX;AACA,WAAO,GAAG,MAAM,MAAM,SAAS;AAAA,EACjC;AAEA,SAAO;AACT;AAKO,SAAS,SAASI,MAAK;AAC5B,MAAI,YAAY,YAAY;AAC1B,mBAAe,gBAAQ,IAAI,cAAc;AAC3C,EAAAA,OAAMA,KAAI,YAAY;AACtB,MAAI,CAAC,OAAOA,OAAM;AAChB,QAAI,IAAI,OAAO,QAAQA,OAAM,OAAO,GAAG,EAAE,KAAK,YAAY,GAAG;AAC3D,UAAI,MAAM;AACV,aAAOA,QAAO,WAAW;AACvB,YAAI,MAAM,OAAO,MAAM,MAAM,SAAS;AACtC,gBAAQ,MAAM,aAAaA,MAAK,KAAK,GAAG;AAAA,MAC1C;AAAA,IACF,OAAO;AACL,aAAOA,QAAO,WAAW;AAAA,MAAC;AAAA,IAC5B;AAAA,EACF;AACA,SAAO,OAAOA;AAChB;AAWO,SAASJ,SAAQ,KAAK,MAAM;AAEjC,MAAI,MAAM;AAAA,IACR,MAAM,CAAC;AAAA,IACP,SAAS;AAAA,EACX;AAEA,MAAI,UAAU,UAAU;AAAG,QAAI,QAAQ,UAAU;AACjD,MAAI,UAAU,UAAU;AAAG,QAAI,SAAS,UAAU;AAClD,MAAI,UAAU,IAAI,GAAG;AAEnB,QAAI,aAAa;AAAA,EACnB,WAAW,MAAM;AAEf,YAAQ,KAAK,IAAI;AAAA,EACnB;AAEA,MAAI,YAAY,IAAI,UAAU;AAAG,QAAI,aAAa;AAClD,MAAI,YAAY,IAAI,KAAK;AAAG,QAAI,QAAQ;AACxC,MAAI,YAAY,IAAI,MAAM;AAAG,QAAI,SAAS;AAC1C,MAAI,YAAY,IAAI,aAAa;AAAG,QAAI,gBAAgB;AACxD,MAAI,IAAI;AAAQ,QAAI,UAAU;AAC9B,SAAO,YAAY,KAAK,KAAK,IAAI,KAAK;AACxC;AAiCA,SAAS,iBAAiB,KAAK,WAAW;AACxC,MAAI,QAAQA,SAAQ,OAAO;AAE3B,MAAI,OAAO;AACT,WAAO,UAAYA,SAAQ,OAAO,OAAO,KAAK,MAAM,MAC7C,UAAYA,SAAQ,OAAO,OAAO,KAAK;AAAA,EAChD,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAGA,SAAS,eAAe,KAAK,WAAW;AACtC,SAAO;AACT;AAGA,SAAS,YAAY,OAAO;AAC1B,MAAI,OAAO,CAAC;AAEZ,QAAM,QAAQ,SAAS,KAAK,KAAK;AAC/B,SAAK,OAAO;AAAA,EACd,CAAC;AAED,SAAO;AACT;AAGA,SAAS,YAAY,KAAK,OAAO,cAAc;AAG7C,MAAI,IAAI,iBACJ,SACA,WAAW,MAAM,OAAO,KAExB,MAAM,YAAYA,YAElB,EAAE,MAAM,eAAe,MAAM,YAAY,cAAc,QAAQ;AACjE,QAAI,MAAM,MAAM,QAAQ,cAAc,GAAG;AACzC,QAAI,CAAC,SAAS,GAAG,GAAG;AAClB,YAAM,YAAY,KAAK,KAAK,YAAY;AAAA,IAC1C;AACA,WAAO;AAAA,EACT;AAGA,MAAI,YAAY,gBAAgB,KAAK,KAAK;AAC1C,MAAI,WAAW;AACb,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,OAAO,KAAK,KAAK;AAC5B,MAAI,cAAc,YAAY,IAAI;AAElC,MAAI,IAAI,YAAY;AAClB,WAAO,OAAO,oBAAoB,KAAK;AAAA,EACzC;AAIA,MAAI,QAAQ,KAAK,MACT,KAAK,QAAQ,SAAS,KAAK,KAAK,KAAK,QAAQ,aAAa,KAAK,IAAI;AACzE,WAAO,YAAY,KAAK;AAAA,EAC1B;AAGA,MAAI,KAAK,WAAW,GAAG;AACrB,QAAI,WAAW,KAAK,GAAG;AACrB,UAAI,OAAO,MAAM,OAAO,OAAO,MAAM,OAAO;AAC5C,aAAO,IAAI,QAAQ,cAAc,OAAO,KAAK,SAAS;AAAA,IACxD;AACA,QAAI,SAAS,KAAK,GAAG;AACnB,aAAO,IAAI,QAAQ,OAAO,UAAU,SAAS,KAAK,KAAK,GAAG,QAAQ;AAAA,IACpE;AACA,QAAI,OAAO,KAAK,GAAG;AACjB,aAAO,IAAI,QAAQ,KAAK,UAAU,SAAS,KAAK,KAAK,GAAG,MAAM;AAAA,IAChE;AACA,QAAI,QAAQ,KAAK,GAAG;AAClB,aAAO,YAAY,KAAK;AAAA,IAC1B;AAAA,EACF;AAEA,MAAI,OAAO,IAAI,QAAQ,OAAO,SAAS,CAAC,KAAK,GAAG;AAGhD,MAAIC,SAAQ,KAAK,GAAG;AAClB,YAAQ;AACR,aAAS,CAAC,KAAK,GAAG;AAAA,EACpB;AAGA,MAAI,WAAW,KAAK,GAAG;AACrB,QAAI,IAAI,MAAM,OAAO,OAAO,MAAM,OAAO;AACzC,WAAO,eAAe,IAAI;AAAA,EAC5B;AAGA,MAAI,SAAS,KAAK,GAAG;AACnB,WAAO,MAAM,OAAO,UAAU,SAAS,KAAK,KAAK;AAAA,EACnD;AAGA,MAAI,OAAO,KAAK,GAAG;AACjB,WAAO,MAAM,KAAK,UAAU,YAAY,KAAK,KAAK;AAAA,EACpD;AAGA,MAAI,QAAQ,KAAK,GAAG;AAClB,WAAO,MAAM,YAAY,KAAK;AAAA,EAChC;AAEA,MAAI,KAAK,WAAW,MAAM,CAAC,SAAS,MAAM,UAAU,IAAI;AACtD,WAAO,OAAO,KAAK,OAAO,OAAO;AAAA,EACnC;AAEA,MAAI,eAAe,GAAG;AACpB,QAAI,SAAS,KAAK,GAAG;AACnB,aAAO,IAAI,QAAQ,OAAO,UAAU,SAAS,KAAK,KAAK,GAAG,QAAQ;AAAA,IACpE,OAAO;AACL,aAAO,IAAI,QAAQ,YAAY,SAAS;AAAA,IAC1C;AAAA,EACF;AAEA,MAAI,KAAK,KAAK,KAAK;AAEnB,MAAI;AACJ,MAAI,OAAO;AACT,aAAS,YAAY,KAAK,OAAO,cAAc,aAAa,IAAI;AAAA,EAClE,OAAO;AACL,aAAS,KAAK,IAAI,SAAS,KAAK;AAC9B,aAAO,eAAe,KAAK,OAAO,cAAc,aAAa,KAAK,KAAK;AAAA,IACzE,CAAC;AAAA,EACH;AAEA,MAAI,KAAK,IAAI;AAEb,SAAO,qBAAqB,QAAQ,MAAM,MAAM;AAClD;AAGA,SAAS,gBAAgB,KAAK,OAAO;AACnC,MAAI,YAAY,KAAK;AACnB,WAAO,IAAI,QAAQ,aAAa,WAAW;AAC7C,MAAI,SAAS,KAAK,GAAG;AACnB,QAAI,SAAS,MAAO,KAAK,UAAU,KAAK,EAAE,QAAQ,UAAU,EAAE,EACpB,QAAQ,MAAM,KAAK,EACnB,QAAQ,QAAQ,GAAG,IAAI;AACjE,WAAO,IAAI,QAAQ,QAAQ,QAAQ;AAAA,EACrC;AACA,MAAI,SAAS,KAAK;AAChB,WAAO,IAAI,QAAQ,KAAK,OAAO,QAAQ;AACzC,MAAI,UAAU,KAAK;AACjB,WAAO,IAAI,QAAQ,KAAK,OAAO,SAAS;AAE1C,MAAI,OAAO,KAAK;AACd,WAAO,IAAI,QAAQ,QAAQ,MAAM;AACrC;AAGA,SAAS,YAAY,OAAO;AAC1B,SAAO,MAAM,MAAM,UAAU,SAAS,KAAK,KAAK,IAAI;AACtD;AAGA,SAAS,YAAY,KAAK,OAAO,cAAc,aAAa,MAAM;AAChE,MAAI,SAAS,CAAC;AACd,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,EAAE,GAAG;AAC5C,QAAI,eAAe,OAAO,OAAO,CAAC,CAAC,GAAG;AACpC,aAAO,KAAK;AAAA,QAAe;AAAA,QAAK;AAAA,QAAO;AAAA,QAAc;AAAA,QACjD,OAAO,CAAC;AAAA,QAAG;AAAA,MAAI,CAAC;AAAA,IACtB,OAAO;AACL,aAAO,KAAK,EAAE;AAAA,IAChB;AAAA,EACF;AACA,OAAK,QAAQ,SAAS,KAAK;AACzB,QAAI,CAAC,IAAI,MAAM,OAAO,GAAG;AACvB,aAAO,KAAK;AAAA,QAAe;AAAA,QAAK;AAAA,QAAO;AAAA,QAAc;AAAA,QACjD;AAAA,QAAK;AAAA,MAAI,CAAC;AAAA,IAChB;AAAA,EACF,CAAC;AACD,SAAO;AACT;AAGA,SAAS,eAAe,KAAK,OAAO,cAAc,aAAa,KAAK,OAAO;AACzE,MAAI,MAAM,KAAK;AACf,SAAO,OAAO,yBAAyB,OAAO,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK;AAC1E,MAAI,KAAK,KAAK;AACZ,QAAI,KAAK,KAAK;AACZ,YAAM,IAAI,QAAQ,mBAAmB,SAAS;AAAA,IAChD,OAAO;AACL,YAAM,IAAI,QAAQ,YAAY,SAAS;AAAA,IACzC;AAAA,EACF,OAAO;AACL,QAAI,KAAK,KAAK;AACZ,YAAM,IAAI,QAAQ,YAAY,SAAS;AAAA,IACzC;AAAA,EACF;AACA,MAAI,CAAC,eAAe,aAAa,GAAG,GAAG;AACrC,WAAO,MAAM,MAAM;AAAA,EACrB;AACA,MAAI,CAAC,KAAK;AACR,QAAI,IAAI,KAAK,QAAQ,KAAK,KAAK,IAAI,GAAG;AACpC,UAAI,OAAO,YAAY,GAAG;AACxB,cAAM,YAAY,KAAK,KAAK,OAAO,IAAI;AAAA,MACzC,OAAO;AACL,cAAM,YAAY,KAAK,KAAK,OAAO,eAAe,CAAC;AAAA,MACrD;AACA,UAAI,IAAI,QAAQ,IAAI,IAAI,IAAI;AAC1B,YAAI,OAAO;AACT,gBAAM,IAAI,MAAM,IAAI,EAAE,IAAI,SAAS,MAAM;AACvC,mBAAO,OAAO;AAAA,UAChB,CAAC,EAAE,KAAK,IAAI,EAAE,OAAO,CAAC;AAAA,QACxB,OAAO;AACL,gBAAM,OAAO,IAAI,MAAM,IAAI,EAAE,IAAI,SAAS,MAAM;AAC9C,mBAAO,QAAQ;AAAA,UACjB,CAAC,EAAE,KAAK,IAAI;AAAA,QACd;AAAA,MACF;AAAA,IACF,OAAO;AACL,YAAM,IAAI,QAAQ,cAAc,SAAS;AAAA,IAC3C;AAAA,EACF;AACA,MAAI,YAAY,IAAI,GAAG;AACrB,QAAI,SAAS,IAAI,MAAM,OAAO,GAAG;AAC/B,aAAO;AAAA,IACT;AACA,WAAO,KAAK,UAAU,KAAK,GAAG;AAC9B,QAAI,KAAK,MAAM,8BAA8B,GAAG;AAC9C,aAAO,KAAK,OAAO,GAAG,KAAK,SAAS,CAAC;AACrC,aAAO,IAAI,QAAQ,MAAM,MAAM;AAAA,IACjC,OAAO;AACL,aAAO,KAAK,QAAQ,MAAM,KAAK,EACnB,QAAQ,QAAQ,GAAG,EACnB,QAAQ,YAAY,GAAG;AACnC,aAAO,IAAI,QAAQ,MAAM,QAAQ;AAAA,IACnC;AAAA,EACF;AAEA,SAAO,OAAO,OAAO;AACvB;AAGA,SAAS,qBAAqB,QAAQ,MAAM,QAAQ;AAClD,MAAI,cAAc;AAClB,MAAI,SAAS,OAAO,OAAO,SAAS,MAAM,KAAK;AAC7C;AACA,QAAI,IAAI,QAAQ,IAAI,KAAK;AAAG;AAC5B,WAAO,OAAO,IAAI,QAAQ,mBAAmB,EAAE,EAAE,SAAS;AAAA,EAC5D,GAAG,CAAC;AAEJ,MAAI,SAAS,IAAI;AACf,WAAO,OAAO,MACN,SAAS,KAAK,KAAK,OAAO,SAC3B,MACA,OAAO,KAAK,OAAO,IACnB,MACA,OAAO;AAAA,EAChB;AAEA,SAAO,OAAO,KAAK,OAAO,MAAM,OAAO,KAAK,IAAI,IAAI,MAAM,OAAO;AACnE;AAKO,SAASA,SAAQ,IAAI;AAC1B,SAAO,MAAM,QAAQ,EAAE;AACzB;AAEO,SAAS,UAAU,KAAK;AAC7B,SAAO,OAAO,QAAQ;AACxB;AAEO,SAAS,OAAO,KAAK;AAC1B,SAAO,QAAQ;AACjB;AAEO,SAAS,kBAAkB,KAAK;AACrC,SAAO,OAAO;AAChB;AAEO,SAAS,SAAS,KAAK;AAC5B,SAAO,OAAO,QAAQ;AACxB;AAEO,SAAS,SAAS,KAAK;AAC5B,SAAO,OAAO,QAAQ;AACxB;AAEO,SAAS,SAAS,KAAK;AAC5B,SAAO,OAAO,QAAQ;AACxB;AAEO,SAAS,YAAY,KAAK;AAC/B,SAAO,QAAQ;AACjB;AAEO,SAAS,SAAS,IAAI;AAC3B,SAAO,SAAS,EAAE,KAAK,eAAe,EAAE,MAAM;AAChD;AAEO,SAAS,SAAS,KAAK;AAC5B,SAAO,OAAO,QAAQ,YAAY,QAAQ;AAC5C;AAEO,SAAS,OAAO,GAAG;AACxB,SAAO,SAAS,CAAC,KAAK,eAAe,CAAC,MAAM;AAC9C;AAEO,SAAS,QAAQI,IAAG;AACzB,SAAO,SAASA,EAAC,MACZ,eAAeA,EAAC,MAAM,oBAAoBA,cAAa;AAC9D;AAEO,SAAS,WAAW,KAAK;AAC9B,SAAO,OAAO,QAAQ;AACxB;AAEO,SAAS,YAAY,KAAK;AAC/B,SAAO,QAAQ,QACR,OAAO,QAAQ,aACf,OAAO,QAAQ,YACf,OAAO,QAAQ,YACf,OAAO,QAAQ,YACf,OAAO,QAAQ;AACxB;AAEO,SAASH,UAAS,UAAU;AACjC,SAAOI,QAAO,SAAS,QAAQ;AACjC;AAEA,SAAS,eAAe,GAAG;AACzB,SAAO,OAAO,UAAU,SAAS,KAAK,CAAC;AACzC;AAGA,SAAS,IAAI,GAAG;AACd,SAAO,IAAI,KAAK,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE;AACtD;AAOA,SAAS,YAAY;AACnB,MAAI,IAAI,IAAI,KAAK;AACjB,MAAI,OAAO;AAAA,IAAC,IAAI,EAAE,SAAS,CAAC;AAAA,IAChB,IAAI,EAAE,WAAW,CAAC;AAAA,IAClB,IAAI,EAAE,WAAW,CAAC;AAAA,EAAC,EAAE,KAAK,GAAG;AACzC,SAAO,CAAC,EAAE,QAAQ,GAAG,OAAO,EAAE,SAAS,IAAI,IAAI,EAAE,KAAK,GAAG;AAC3D;AAIO,SAAS,MAAM;AACpB,UAAQ,IAAI,WAAW,UAAU,GAAG,OAAO,MAAM,MAAM,SAAS,CAAC;AACnE;AAmBO,SAAS,QAAQ,QAAQC,MAAK;AAEnC,MAAI,CAACA,QAAO,CAAC,SAASA,IAAG;AAAG,WAAO;AAEnC,MAAI,OAAO,OAAO,KAAKA,IAAG;AAC1B,MAAI,IAAI,KAAK;AACb,SAAO,KAAK;AACV,WAAO,KAAK,MAAMA,KAAI,KAAK;AAAA,EAC7B;AACA,SAAO;AACT;AAEA,SAAS,eAAe,KAAK,MAAM;AACjC,SAAO,OAAO,UAAU,eAAe,KAAK,KAAK,IAAI;AACvD;AA5jBA,IAqBI,cA0EA,QACA,cA2aA,QAmDG;AA9jBP;AAAA;AAAA;AAAA;AAoBA;AAuhBA;AAthBA,IAAI,eAAe;AA0EnB,IAAI,SAAS,CAAC;AAuDd,IAAAP,SAAQ,SAAS;AAAA,MACf,QAAS,CAAC,GAAG,EAAE;AAAA,MACf,UAAW,CAAC,GAAG,EAAE;AAAA,MACjB,aAAc,CAAC,GAAG,EAAE;AAAA,MACpB,WAAY,CAAC,GAAG,EAAE;AAAA,MAClB,SAAU,CAAC,IAAI,EAAE;AAAA,MACjB,QAAS,CAAC,IAAI,EAAE;AAAA,MAChB,SAAU,CAAC,IAAI,EAAE;AAAA,MACjB,QAAS,CAAC,IAAI,EAAE;AAAA,MAChB,QAAS,CAAC,IAAI,EAAE;AAAA,MAChB,SAAU,CAAC,IAAI,EAAE;AAAA,MACjB,WAAY,CAAC,IAAI,EAAE;AAAA,MACnB,OAAQ,CAAC,IAAI,EAAE;AAAA,MACf,UAAW,CAAC,IAAI,EAAE;AAAA,IACpB;AAGA,IAAAA,SAAQ,SAAS;AAAA,MACf,WAAW;AAAA,MACX,UAAU;AAAA,MACV,WAAW;AAAA,MACX,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,QAAQ;AAAA,MAER,UAAU;AAAA,IACZ;AA0VA,IAAI,SAAS;AAAA,MAAC;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MACxD;AAAA,MAAO;AAAA,MAAO;AAAA,IAAK;AAkDjC,IAAO,eAAQ;AAAA,MACb,UAAU;AAAA,MACV;AAAA,MACA;AAAA,MACA,UAAUE;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAASD;AAAA,MACT,SAASD;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACrlBA;AAAA;AAAA;AAAA;AACA,QAAM,WAAW;AAEjB,QAAI,YAAY,SAAS,SAAS;AAC9B,aAAO,UAAU,SAAS;AAC1B,eAAS,KAAK,UAAU;AACpB,eAAO,QAAQ,KAAK,SAAS;AAAA,MACjC;AAAA,IACJ,WAAW,UAAW;AAClB,aAAO,UAAU;AAAA,IACrB;AAAA;AAAA;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAEA,aAAS,QAAQ,QAAQ,gBAAgB;AAAE,UAAI,OAAO,OAAO,KAAK,MAAM;AAAG,UAAI,OAAO,uBAAuB;AAAE,YAAI,UAAU,OAAO,sBAAsB,MAAM;AAAG,2BAAmB,UAAU,QAAQ,OAAO,SAAU,KAAK;AAAE,iBAAO,OAAO,yBAAyB,QAAQ,GAAG,EAAE;AAAA,QAAY,CAAC,IAAI,KAAK,KAAK,MAAM,MAAM,OAAO;AAAA,MAAG;AAAE,aAAO;AAAA,IAAM;AACpV,aAAS,cAAc,QAAQ;AAAE,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAAE,YAAI,SAAS,QAAQ,UAAU,KAAK,UAAU,KAAK,CAAC;AAAG,YAAI,IAAI,QAAQ,OAAO,MAAM,GAAG,IAAE,EAAE,QAAQ,SAAU,KAAK;AAAE,0BAAgB,QAAQ,KAAK,OAAO,IAAI;AAAA,QAAG,CAAC,IAAI,OAAO,4BAA4B,OAAO,iBAAiB,QAAQ,OAAO,0BAA0B,MAAM,CAAC,IAAI,QAAQ,OAAO,MAAM,CAAC,EAAE,QAAQ,SAAU,KAAK;AAAE,iBAAO,eAAe,QAAQ,KAAK,OAAO,yBAAyB,QAAQ,GAAG,CAAC;AAAA,QAAG,CAAC;AAAA,MAAG;AAAE,aAAO;AAAA,IAAQ;AACzf,aAAS,gBAAgB,KAAK,KAAK,OAAO;AAAE,YAAM,eAAe,GAAG;AAAG,UAAI,OAAO,KAAK;AAAE,eAAO,eAAe,KAAK,KAAK,EAAE,OAAc,YAAY,MAAM,cAAc,MAAM,UAAU,KAAK,CAAC;AAAA,MAAG,OAAO;AAAE,YAAI,OAAO;AAAA,MAAO;AAAE,aAAO;AAAA,IAAK;AAC3O,aAAS,gBAAgB,UAAU,aAAa;AAAE,UAAI,EAAE,oBAAoB,cAAc;AAAE,cAAM,IAAI,UAAU,mCAAmC;AAAA,MAAG;AAAA,IAAE;AACxJ,aAAS,kBAAkB,QAAQ,OAAO;AAAE,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAAE,YAAI,aAAa,MAAM;AAAI,mBAAW,aAAa,WAAW,cAAc;AAAO,mBAAW,eAAe;AAAM,YAAI,WAAW;AAAY,qBAAW,WAAW;AAAM,eAAO,eAAe,QAAQ,eAAe,WAAW,GAAG,GAAG,UAAU;AAAA,MAAG;AAAA,IAAE;AAC5U,aAAS,aAAa,aAAa,YAAY,aAAa;AAAE,UAAI;AAAY,0BAAkB,YAAY,WAAW,UAAU;AAAG,UAAI;AAAa,0BAAkB,aAAa,WAAW;AAAG,aAAO,eAAe,aAAa,aAAa,EAAE,UAAU,MAAM,CAAC;AAAG,aAAO;AAAA,IAAa;AAC5R,aAAS,eAAe,KAAK;AAAE,UAAI,MAAM,aAAa,KAAK,QAAQ;AAAG,aAAO,OAAO,QAAQ,WAAW,MAAM,OAAO,GAAG;AAAA,IAAG;AAC1H,aAAS,aAAa,OAAO,MAAM;AAAE,UAAI,OAAO,UAAU,YAAY,UAAU;AAAM,eAAO;AAAO,UAAI,OAAO,MAAM,OAAO;AAAc,UAAI,SAAS,QAAW;AAAE,YAAI,MAAM,KAAK,KAAK,OAAO,QAAQ,SAAS;AAAG,YAAI,OAAO,QAAQ;AAAU,iBAAO;AAAK,cAAM,IAAI,UAAU,8CAA8C;AAAA,MAAG;AAAE,cAAQ,SAAS,WAAW,SAAS,QAAQ,KAAK;AAAA,IAAG;AACxX,QAAI,WAAW;AAAf,QACEQ,UAAS,SAAS;AACpB,QAAI,YAAY;AAAhB,QACEC,WAAU,UAAU;AACtB,QAAI,SAASA,YAAWA,SAAQ,UAAU;AAC1C,aAAS,WAAW,KAAK,QAAQ,QAAQ;AACvC,MAAAD,QAAO,UAAU,KAAK,KAAK,KAAK,QAAQ,MAAM;AAAA,IAChD;AACA,WAAO,UAAuB,2BAAY;AACxC,eAAS,aAAa;AACpB,wBAAgB,MAAM,UAAU;AAChC,aAAK,OAAO;AACZ,aAAK,OAAO;AACZ,aAAK,SAAS;AAAA,MAChB;AACA,mBAAa,YAAY,CAAC;AAAA,QACxB,KAAK;AAAA,QACL,OAAO,SAAS,KAAK,GAAG;AACtB,cAAI,QAAQ;AAAA,YACV,MAAM;AAAA,YACN,MAAM;AAAA,UACR;AACA,cAAI,KAAK,SAAS;AAAG,iBAAK,KAAK,OAAO;AAAA;AAAW,iBAAK,OAAO;AAC7D,eAAK,OAAO;AACZ,YAAE,KAAK;AAAA,QACT;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,QAAQ,GAAG;AACzB,cAAI,QAAQ;AAAA,YACV,MAAM;AAAA,YACN,MAAM,KAAK;AAAA,UACb;AACA,cAAI,KAAK,WAAW;AAAG,iBAAK,OAAO;AACnC,eAAK,OAAO;AACZ,YAAE,KAAK;AAAA,QACT;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,QAAQ;AACtB,cAAI,KAAK,WAAW;AAAG;AACvB,cAAI,MAAM,KAAK,KAAK;AACpB,cAAI,KAAK,WAAW;AAAG,iBAAK,OAAO,KAAK,OAAO;AAAA;AAAU,iBAAK,OAAO,KAAK,KAAK;AAC/E,YAAE,KAAK;AACP,iBAAO;AAAA,QACT;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,QAAQ;AACtB,eAAK,OAAO,KAAK,OAAO;AACxB,eAAK,SAAS;AAAA,QAChB;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,KAAK,GAAG;AACtB,cAAI,KAAK,WAAW;AAAG,mBAAO;AAC9B,cAAI,IAAI,KAAK;AACb,cAAI,MAAM,KAAK,EAAE;AACjB,iBAAO,IAAI,EAAE;AAAM,mBAAO,IAAI,EAAE;AAChC,iBAAO;AAAA,QACT;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAASE,QAAO,GAAG;AACxB,cAAI,KAAK,WAAW;AAAG,mBAAOF,QAAO,MAAM,CAAC;AAC5C,cAAI,MAAMA,QAAO,YAAY,MAAM,CAAC;AACpC,cAAI,IAAI,KAAK;AACb,cAAI,IAAI;AACR,iBAAO,GAAG;AACR,uBAAW,EAAE,MAAM,KAAK,CAAC;AACzB,iBAAK,EAAE,KAAK;AACZ,gBAAI,EAAE;AAAA,UACR;AACA,iBAAO;AAAA,QACT;AAAA,MAGF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,QAAQ,GAAG,YAAY;AACrC,cAAI;AACJ,cAAI,IAAI,KAAK,KAAK,KAAK,QAAQ;AAE7B,kBAAM,KAAK,KAAK,KAAK,MAAM,GAAG,CAAC;AAC/B,iBAAK,KAAK,OAAO,KAAK,KAAK,KAAK,MAAM,CAAC;AAAA,UACzC,WAAW,MAAM,KAAK,KAAK,KAAK,QAAQ;AAEtC,kBAAM,KAAK,MAAM;AAAA,UACnB,OAAO;AAEL,kBAAM,aAAa,KAAK,WAAW,CAAC,IAAI,KAAK,WAAW,CAAC;AAAA,UAC3D;AACA,iBAAO;AAAA,QACT;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,QAAQ;AACtB,iBAAO,KAAK,KAAK;AAAA,QACnB;AAAA,MAGF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,WAAW,GAAG;AAC5B,cAAI,IAAI,KAAK;AACb,cAAI,IAAI;AACR,cAAI,MAAM,EAAE;AACZ,eAAK,IAAI;AACT,iBAAO,IAAI,EAAE,MAAM;AACjB,gBAAI,MAAM,EAAE;AACZ,gBAAI,KAAK,IAAI,IAAI,SAAS,IAAI,SAAS;AACvC,gBAAI,OAAO,IAAI;AAAQ,qBAAO;AAAA;AAAS,qBAAO,IAAI,MAAM,GAAG,CAAC;AAC5D,iBAAK;AACL,gBAAI,MAAM,GAAG;AACX,kBAAI,OAAO,IAAI,QAAQ;AACrB,kBAAE;AACF,oBAAI,EAAE;AAAM,uBAAK,OAAO,EAAE;AAAA;AAAU,uBAAK,OAAO,KAAK,OAAO;AAAA,cAC9D,OAAO;AACL,qBAAK,OAAO;AACZ,kBAAE,OAAO,IAAI,MAAM,EAAE;AAAA,cACvB;AACA;AAAA,YACF;AACA,cAAE;AAAA,UACJ;AACA,eAAK,UAAU;AACf,iBAAO;AAAA,QACT;AAAA,MAGF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,WAAW,GAAG;AAC5B,cAAI,MAAMA,QAAO,YAAY,CAAC;AAC9B,cAAI,IAAI,KAAK;AACb,cAAI,IAAI;AACR,YAAE,KAAK,KAAK,GAAG;AACf,eAAK,EAAE,KAAK;AACZ,iBAAO,IAAI,EAAE,MAAM;AACjB,gBAAI,MAAM,EAAE;AACZ,gBAAI,KAAK,IAAI,IAAI,SAAS,IAAI,SAAS;AACvC,gBAAI,KAAK,KAAK,IAAI,SAAS,GAAG,GAAG,EAAE;AACnC,iBAAK;AACL,gBAAI,MAAM,GAAG;AACX,kBAAI,OAAO,IAAI,QAAQ;AACrB,kBAAE;AACF,oBAAI,EAAE;AAAM,uBAAK,OAAO,EAAE;AAAA;AAAU,uBAAK,OAAO,KAAK,OAAO;AAAA,cAC9D,OAAO;AACL,qBAAK,OAAO;AACZ,kBAAE,OAAO,IAAI,MAAM,EAAE;AAAA,cACvB;AACA;AAAA,YACF;AACA,cAAE;AAAA,UACJ;AACA,eAAK,UAAU;AACf,iBAAO;AAAA,QACT;AAAA,MAGF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,OAAO,SAAS,MAAM,GAAG,SAAS;AAChC,iBAAOC,SAAQ,MAAM,cAAc,cAAc,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG;AAAA,YAEjE,OAAO;AAAA,YAEP,eAAe;AAAA,UACjB,CAAC,CAAC;AAAA,QACJ;AAAA,MACF,CAAC,CAAC;AACF,aAAO;AAAA,IACT,EAAE;AAAA;AAAA;;;ACtLF;AAAA;AAAA;AAAA;AAAA;AAGA,aAAS,QAAQ,KAAK,IAAI;AACxB,UAAI,QAAQ;AACZ,UAAI,oBAAoB,KAAK,kBAAkB,KAAK,eAAe;AACnE,UAAI,oBAAoB,KAAK,kBAAkB,KAAK,eAAe;AACnE,UAAI,qBAAqB,mBAAmB;AAC1C,YAAI,IAAI;AACN,aAAG,GAAG;AAAA,QACR,WAAW,KAAK;AACd,cAAI,CAAC,KAAK,gBAAgB;AACxB,oBAAQ,SAAS,aAAa,MAAM,GAAG;AAAA,UACzC,WAAW,CAAC,KAAK,eAAe,cAAc;AAC5C,iBAAK,eAAe,eAAe;AACnC,oBAAQ,SAAS,aAAa,MAAM,GAAG;AAAA,UACzC;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAKA,UAAI,KAAK,gBAAgB;AACvB,aAAK,eAAe,YAAY;AAAA,MAClC;AAGA,UAAI,KAAK,gBAAgB;AACvB,aAAK,eAAe,YAAY;AAAA,MAClC;AACA,WAAK,SAAS,OAAO,MAAM,SAAUE,MAAK;AACxC,YAAI,CAAC,MAAMA,MAAK;AACd,cAAI,CAAC,MAAM,gBAAgB;AACzB,oBAAQ,SAAS,qBAAqB,OAAOA,IAAG;AAAA,UAClD,WAAW,CAAC,MAAM,eAAe,cAAc;AAC7C,kBAAM,eAAe,eAAe;AACpC,oBAAQ,SAAS,qBAAqB,OAAOA,IAAG;AAAA,UAClD,OAAO;AACL,oBAAQ,SAAS,aAAa,KAAK;AAAA,UACrC;AAAA,QACF,WAAW,IAAI;AACb,kBAAQ,SAAS,aAAa,KAAK;AACnC,aAAGA,IAAG;AAAA,QACR,OAAO;AACL,kBAAQ,SAAS,aAAa,KAAK;AAAA,QACrC;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AACA,aAAS,oBAAoBC,OAAM,KAAK;AACtC,kBAAYA,OAAM,GAAG;AACrB,kBAAYA,KAAI;AAAA,IAClB;AACA,aAAS,YAAYA,OAAM;AACzB,UAAIA,MAAK,kBAAkB,CAACA,MAAK,eAAe;AAAW;AAC3D,UAAIA,MAAK,kBAAkB,CAACA,MAAK,eAAe;AAAW;AAC3D,MAAAA,MAAK,KAAK,OAAO;AAAA,IACnB;AACA,aAAS,YAAY;AACnB,UAAI,KAAK,gBAAgB;AACvB,aAAK,eAAe,YAAY;AAChC,aAAK,eAAe,UAAU;AAC9B,aAAK,eAAe,QAAQ;AAC5B,aAAK,eAAe,aAAa;AAAA,MACnC;AACA,UAAI,KAAK,gBAAgB;AACvB,aAAK,eAAe,YAAY;AAChC,aAAK,eAAe,QAAQ;AAC5B,aAAK,eAAe,SAAS;AAC7B,aAAK,eAAe,cAAc;AAClC,aAAK,eAAe,cAAc;AAClC,aAAK,eAAe,WAAW;AAC/B,aAAK,eAAe,eAAe;AAAA,MACrC;AAAA,IACF;AACA,aAAS,YAAYA,OAAM,KAAK;AAC9B,MAAAA,MAAK,KAAK,SAAS,GAAG;AAAA,IACxB;AACA,aAAS,eAAe,QAAQ,KAAK;AAOnC,UAAI,SAAS,OAAO;AACpB,UAAI,SAAS,OAAO;AACpB,UAAI,UAAU,OAAO,eAAe,UAAU,OAAO;AAAa,eAAO,QAAQ,GAAG;AAAA;AAAO,eAAO,KAAK,SAAS,GAAG;AAAA,IACrH;AACA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC/FA;AAAA;AAAA;AAAA;AAAA;AAEA,aAAS,eAAe,UAAU,YAAY;AAAE,eAAS,YAAY,OAAO,OAAO,WAAW,SAAS;AAAG,eAAS,UAAU,cAAc;AAAU,eAAS,YAAY;AAAA,IAAY;AAEtL,QAAI,QAAQ,CAAC;AAEb,aAAS,gBAAgB,MAAM,SAAS,MAAM;AAC5C,UAAI,CAAC,MAAM;AACT,eAAO;AAAA,MACT;AAEA,eAAS,WAAW,MAAM,MAAM,MAAM;AACpC,YAAI,OAAO,YAAY,UAAU;AAC/B,iBAAO;AAAA,QACT,OAAO;AACL,iBAAO,QAAQ,MAAM,MAAM,IAAI;AAAA,QACjC;AAAA,MACF;AAEA,UAAI,YAEJ,yBAAU,OAAO;AACf,uBAAeC,YAAW,KAAK;AAE/B,iBAASA,WAAU,MAAM,MAAM,MAAM;AACnC,iBAAO,MAAM,KAAK,MAAM,WAAW,MAAM,MAAM,IAAI,CAAC,KAAK;AAAA,QAC3D;AAEA,eAAOA;AAAA,MACT,EAAE,IAAI;AAEN,gBAAU,UAAU,OAAO,KAAK;AAChC,gBAAU,UAAU,OAAO;AAC3B,YAAM,QAAQ;AAAA,IAChB;AAGA,aAAS,MAAM,UAAU,OAAO;AAC9B,UAAI,MAAM,QAAQ,QAAQ,GAAG;AAC3B,YAAI,MAAM,SAAS;AACnB,mBAAW,SAAS,IAAI,SAAU,GAAG;AACnC,iBAAO,OAAO,CAAC;AAAA,QACjB,CAAC;AAED,YAAI,MAAM,GAAG;AACX,iBAAO,UAAU,OAAO,OAAO,GAAG,EAAE,OAAO,SAAS,MAAM,GAAG,MAAM,CAAC,EAAE,KAAK,IAAI,GAAG,OAAO,IAAI,SAAS,MAAM;AAAA,QAC9G,WAAW,QAAQ,GAAG;AACpB,iBAAO,UAAU,OAAO,OAAO,GAAG,EAAE,OAAO,SAAS,IAAI,MAAM,EAAE,OAAO,SAAS,EAAE;AAAA,QACpF,OAAO;AACL,iBAAO,MAAM,OAAO,OAAO,GAAG,EAAE,OAAO,SAAS,EAAE;AAAA,QACpD;AAAA,MACF,OAAO;AACL,eAAO,MAAM,OAAO,OAAO,GAAG,EAAE,OAAO,OAAO,QAAQ,CAAC;AAAA,MACzD;AAAA,IACF;AAGA,aAAS,WAAW,KAAK,QAAQ,KAAK;AACpC,aAAO,IAAI,OAAO,CAAC,OAAO,MAAM,IAAI,IAAI,CAAC,KAAK,OAAO,MAAM,MAAM;AAAA,IACnE;AAGA,aAAS,SAAS,KAAK,QAAQ,UAAU;AACvC,UAAI,aAAa,UAAa,WAAW,IAAI,QAAQ;AACnD,mBAAW,IAAI;AAAA,MACjB;AAEA,aAAO,IAAI,UAAU,WAAW,OAAO,QAAQ,QAAQ,MAAM;AAAA,IAC/D;AAGA,aAASC,UAAS,KAAK,QAAQ,OAAO;AACpC,UAAI,OAAO,UAAU,UAAU;AAC7B,gBAAQ;AAAA,MACV;AAEA,UAAI,QAAQ,OAAO,SAAS,IAAI,QAAQ;AACtC,eAAO;AAAA,MACT,OAAO;AACL,eAAO,IAAI,QAAQ,QAAQ,KAAK,MAAM;AAAA,MACxC;AAAA,IACF;AAEA,oBAAgB,yBAAyB,SAAU,MAAM,OAAO;AAC9D,aAAO,gBAAgB,QAAQ,8BAA8B,OAAO;AAAA,IACtE,GAAG,SAAS;AACZ,oBAAgB,wBAAwB,SAAU,MAAM,UAAU,QAAQ;AAExE,UAAI;AAEJ,UAAI,OAAO,aAAa,YAAY,WAAW,UAAU,MAAM,GAAG;AAChE,qBAAa;AACb,mBAAW,SAAS,QAAQ,SAAS,EAAE;AAAA,MACzC,OAAO;AACL,qBAAa;AAAA,MACf;AAEA,UAAI;AAEJ,UAAI,SAAS,MAAM,WAAW,GAAG;AAE/B,cAAM,OAAO,OAAO,MAAM,GAAG,EAAE,OAAO,YAAY,GAAG,EAAE,OAAO,MAAM,UAAU,MAAM,CAAC;AAAA,MACvF,OAAO;AACL,YAAI,OAAOA,UAAS,MAAM,GAAG,IAAI,aAAa;AAC9C,cAAM,QAAS,OAAO,MAAM,IAAK,EAAE,OAAO,MAAM,GAAG,EAAE,OAAO,YAAY,GAAG,EAAE,OAAO,MAAM,UAAU,MAAM,CAAC;AAAA,MAC7G;AAEA,aAAO,mBAAmB,OAAO,OAAO,MAAM;AAC9C,aAAO;AAAA,IACT,GAAG,SAAS;AACZ,oBAAgB,6BAA6B,yBAAyB;AACtE,oBAAgB,8BAA8B,SAAU,MAAM;AAC5D,aAAO,SAAS,OAAO;AAAA,IACzB,CAAC;AACD,oBAAgB,8BAA8B,iBAAiB;AAC/D,oBAAgB,wBAAwB,SAAU,MAAM;AACtD,aAAO,iBAAiB,OAAO;AAAA,IACjC,CAAC;AACD,oBAAgB,yBAAyB,gCAAgC;AACzE,oBAAgB,0BAA0B,2BAA2B;AACrE,oBAAgB,8BAA8B,iBAAiB;AAC/D,oBAAgB,0BAA0B,uCAAuC,SAAS;AAC1F,oBAAgB,wBAAwB,SAAU,KAAK;AACrD,aAAO,uBAAuB;AAAA,IAChC,GAAG,SAAS;AACZ,oBAAgB,sCAAsC,kCAAkC;AACxF,WAAO,QAAQ,QAAQ;AAAA;AAAA;;;AC9HvB;AAAA;AAAA;AAAA;AAAA;AAEA,QAAI,wBAAwB,yBAA2B,MAAM;AAC7D,aAAS,kBAAkB,SAAS,UAAU,WAAW;AACvD,aAAO,QAAQ,iBAAiB,OAAO,QAAQ,gBAAgB,WAAW,QAAQ,aAAa;AAAA,IACjG;AACA,aAAS,iBAAiB,OAAO,SAAS,WAAW,UAAU;AAC7D,UAAI,MAAM,kBAAkB,SAAS,UAAU,SAAS;AACxD,UAAI,OAAO,MAAM;AACf,YAAI,EAAE,SAAS,GAAG,KAAK,KAAK,MAAM,GAAG,MAAM,QAAQ,MAAM,GAAG;AAC1D,cAAI,OAAO,WAAW,YAAY;AAClC,gBAAM,IAAI,sBAAsB,MAAM,GAAG;AAAA,QAC3C;AACA,eAAO,KAAK,MAAM,GAAG;AAAA,MACvB;AAGA,aAAO,MAAM,aAAa,KAAK,KAAK;AAAA,IACtC;AACA,WAAO,UAAU;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACrBA;AAAA;AAAA;AAAA;AAAA,QAAI,OAAO,OAAO,WAAW,YAAY;AAEvC,aAAO,UAAU,SAASC,UAAS,MAAM,WAAW;AAClD,YAAI,WAAW;AACb,eAAK,SAAS;AACd,eAAK,YAAY,OAAO,OAAO,UAAU,WAAW;AAAA,YAClD,aAAa;AAAA,cACX,OAAO;AAAA,cACP,YAAY;AAAA,cACZ,UAAU;AAAA,cACV,cAAc;AAAA,YAChB;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF,OAAO;AAEL,aAAO,UAAU,SAASA,UAAS,MAAM,WAAW;AAClD,YAAI,WAAW;AACb,eAAK,SAAS;AACd,cAAI,WAAW,WAAY;AAAA,UAAC;AAC5B,mBAAS,YAAY,UAAU;AAC/B,eAAK,YAAY,IAAI,SAAS;AAC9B,eAAK,UAAU,cAAc;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;AC1BA;AAAA;AAAA;AAAA;AAKA,WAAO,UAAUC;AAoBjB,aAASA,WAAW,IAAI,KAAK;AAC3B,UAAIC,QAAO,eAAe,GAAG;AAC3B,eAAO;AAAA,MACT;AAEA,UAAI,SAAS;AACb,eAAS,aAAa;AACpB,YAAI,CAAC,QAAQ;AACX,cAAIA,QAAO,kBAAkB,GAAG;AAC9B,kBAAM,IAAI,MAAM,GAAG;AAAA,UACrB,WAAWA,QAAO,kBAAkB,GAAG;AACrC,oBAAQ,MAAM,GAAG;AAAA,UACnB,OAAO;AACL,oBAAQ,KAAK,GAAG;AAAA,UAClB;AACA,mBAAS;AAAA,QACX;AACA,eAAO,GAAG,MAAM,MAAM,SAAS;AAAA,MACjC;AAEA,aAAO;AAAA,IACT;AAUA,aAASA,QAAQ,MAAM;AAErB,UAAI;AACF,YAAI,CAAC,WAAO;AAAc,iBAAO;AAAA,MACnC,SAAS,GAAP;AACA,eAAO;AAAA,MACT;AACA,UAAI,MAAM,WAAO,aAAa;AAC9B,UAAI,QAAQ;AAAK,eAAO;AACxB,aAAO,OAAO,GAAG,EAAE,YAAY,MAAM;AAAA,IACvC;AAAA;AAAA;;;AClEA;AAAA;AAAA;AAAA;AAAA;AA2BA,WAAO,UAAU;AAYjB,aAAS,cAAc,OAAO;AAC5B,UAAI,QAAQ;AACZ,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,WAAK,SAAS,WAAY;AACxB,uBAAe,OAAO,KAAK;AAAA,MAC7B;AAAA,IACF;AAIA,QAAI;AAGJ,aAAS,gBAAgB;AAGzB,QAAI,eAAe;AAAA,MACjB,WAAW;AAAA,IACb;AAIA,QAAI,SAAS;AAGb,QAAIC,UAAS,iBAAkB;AAC/B,QAAI,iBAAiB,OAAO,eAAW,cAAc,aAAS,OAAO,WAAW,cAAc,SAAS,OAAO,SAAS,cAAc,OAAO,CAAC,GAAG,cAAc,WAAY;AAAA,IAAC;AAC3K,aAAS,oBAAoB,OAAO;AAClC,aAAOA,QAAO,KAAK,KAAK;AAAA,IAC1B;AACA,aAAS,cAAc,KAAK;AAC1B,aAAOA,QAAO,SAAS,GAAG,KAAK,eAAe;AAAA,IAChD;AACA,QAAI,cAAc;AAClB,QAAI,WAAW;AAAf,QACE,mBAAmB,SAAS;AAC9B,QAAI,iBAAiB,yBAAqB;AAA1C,QACE,uBAAuB,eAAe;AADxC,QAEE,6BAA6B,eAAe;AAF9C,QAGE,wBAAwB,eAAe;AAHzC,QAIE,yBAAyB,eAAe;AAJ1C,QAKE,uBAAuB,eAAe;AALxC,QAME,yBAAyB,eAAe;AAN1C,QAOE,6BAA6B,eAAe;AAP9C,QAQE,uBAAuB,eAAe;AACxC,QAAI,iBAAiB,YAAY;AACjC,+BAAoB,UAAU,MAAM;AACpC,aAAS,MAAM;AAAA,IAAC;AAChB,aAAS,cAAc,SAAS,QAAQ,UAAU;AAChD,eAAS,UAAU;AACnB,gBAAU,WAAW,CAAC;AAOtB,UAAI,OAAO,aAAa;AAAW,mBAAW,kBAAkB;AAIhE,WAAK,aAAa,CAAC,CAAC,QAAQ;AAC5B,UAAI;AAAU,aAAK,aAAa,KAAK,cAAc,CAAC,CAAC,QAAQ;AAK7D,WAAK,gBAAgB,iBAAiB,MAAM,SAAS,yBAAyB,QAAQ;AAGtF,WAAK,cAAc;AAGnB,WAAK,YAAY;AAEjB,WAAK,SAAS;AAEd,WAAK,QAAQ;AAEb,WAAK,WAAW;AAGhB,WAAK,YAAY;AAKjB,UAAI,WAAW,QAAQ,kBAAkB;AACzC,WAAK,gBAAgB,CAAC;AAKtB,WAAK,kBAAkB,QAAQ,mBAAmB;AAKlD,WAAK,SAAS;AAGd,WAAK,UAAU;AAGf,WAAK,SAAS;AAMd,WAAK,OAAO;AAKZ,WAAK,mBAAmB;AAGxB,WAAK,UAAU,SAAU,IAAI;AAC3B,gBAAQ,QAAQ,EAAE;AAAA,MACpB;AAGA,WAAK,UAAU;AAGf,WAAK,WAAW;AAChB,WAAK,kBAAkB;AACvB,WAAK,sBAAsB;AAI3B,WAAK,YAAY;AAIjB,WAAK,cAAc;AAGnB,WAAK,eAAe;AAGpB,WAAK,YAAY,QAAQ,cAAc;AAGvC,WAAK,cAAc,CAAC,CAAC,QAAQ;AAG7B,WAAK,uBAAuB;AAI5B,WAAK,qBAAqB,IAAI,cAAc,IAAI;AAAA,IAClD;AACA,kBAAc,UAAU,YAAY,SAAS,YAAY;AACvD,UAAI,UAAU,KAAK;AACnB,UAAI,MAAM,CAAC;AACX,aAAO,SAAS;AACd,YAAI,KAAK,OAAO;AAChB,kBAAU,QAAQ;AAAA,MACpB;AACA,aAAO;AAAA,IACT;AACA,KAAC,WAAY;AACX,UAAI;AACF,eAAO,eAAe,cAAc,WAAW,UAAU;AAAA,UACvD,KAAK,aAAa,UAAU,SAAS,4BAA4B;AAC/D,mBAAO,KAAK,UAAU;AAAA,UACxB,GAAG,8EAAmF,SAAS;AAAA,QACjG,CAAC;AAAA,MACH,SAAS,GAAP;AAAA,MAAW;AAAA,IACf,GAAG;AAIH,QAAI;AACJ,QAAI,OAAO,WAAW,cAAc,OAAO,eAAe,OAAO,SAAS,UAAU,OAAO,iBAAiB,YAAY;AACtH,wBAAkB,SAAS,UAAU,OAAO;AAC5C,aAAO,eAAe,UAAU,OAAO,aAAa;AAAA,QAClD,OAAO,SAAS,MAAM,QAAQ;AAC5B,cAAI,gBAAgB,KAAK,MAAM,MAAM;AAAG,mBAAO;AAC/C,cAAI,SAAS;AAAU,mBAAO;AAC9B,iBAAO,UAAU,OAAO,0BAA0B;AAAA,QACpD;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,wBAAkB,SAASC,iBAAgB,QAAQ;AACjD,eAAO,kBAAkB;AAAA,MAC3B;AAAA,IACF;AACA,aAAS,SAAS,SAAS;AACzB,eAAS,UAAU;AAYnB,UAAI,WAAW,gBAAgB;AAC/B,UAAI,CAAC,YAAY,CAAC,gBAAgB,KAAK,UAAU,IAAI;AAAG,eAAO,IAAI,SAAS,OAAO;AACnF,WAAK,iBAAiB,IAAI,cAAc,SAAS,MAAM,QAAQ;AAG/D,WAAK,WAAW;AAChB,UAAI,SAAS;AACX,YAAI,OAAO,QAAQ,UAAU;AAAY,eAAK,SAAS,QAAQ;AAC/D,YAAI,OAAO,QAAQ,WAAW;AAAY,eAAK,UAAU,QAAQ;AACjE,YAAI,OAAO,QAAQ,YAAY;AAAY,eAAK,WAAW,QAAQ;AACnE,YAAI,OAAO,QAAQ,UAAU;AAAY,eAAK,SAAS,QAAQ;AAAA,MACjE;AACA,aAAO,KAAK,IAAI;AAAA,IAClB;AAGA,aAAS,UAAU,OAAO,WAAY;AACpC,qBAAe,MAAM,IAAI,uBAAuB,CAAC;AAAA,IACnD;AACA,aAAS,cAAc,QAAQ,IAAI;AACjC,UAAI,KAAK,IAAI,2BAA2B;AAExC,qBAAe,QAAQ,EAAE;AACzB,cAAQ,SAAS,IAAI,EAAE;AAAA,IACzB;AAKA,aAAS,WAAW,QAAQ,OAAO,OAAO,IAAI;AAC5C,UAAI;AACJ,UAAI,UAAU,MAAM;AAClB,aAAK,IAAI,uBAAuB;AAAA,MAClC,WAAW,OAAO,UAAU,YAAY,CAAC,MAAM,YAAY;AACzD,aAAK,IAAI,qBAAqB,SAAS,CAAC,UAAU,QAAQ,GAAG,KAAK;AAAA,MACpE;AACA,UAAI,IAAI;AACN,uBAAe,QAAQ,EAAE;AACzB,gBAAQ,SAAS,IAAI,EAAE;AACvB,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AACA,aAAS,UAAU,QAAQ,SAAU,OAAO,UAAU,IAAI;AACxD,UAAI,QAAQ,KAAK;AACjB,UAAI,MAAM;AACV,UAAI,QAAQ,CAAC,MAAM,cAAc,cAAc,KAAK;AACpD,UAAI,SAAS,CAACD,QAAO,SAAS,KAAK,GAAG;AACpC,gBAAQ,oBAAoB,KAAK;AAAA,MACnC;AACA,UAAI,OAAO,aAAa,YAAY;AAClC,aAAK;AACL,mBAAW;AAAA,MACb;AACA,UAAI;AAAO,mBAAW;AAAA,eAAkB,CAAC;AAAU,mBAAW,MAAM;AACpE,UAAI,OAAO,OAAO;AAAY,aAAK;AACnC,UAAI,MAAM;AAAQ,sBAAc,MAAM,EAAE;AAAA,eAAW,SAAS,WAAW,MAAM,OAAO,OAAO,EAAE,GAAG;AAC9F,cAAM;AACN,cAAM,cAAc,MAAM,OAAO,OAAO,OAAO,UAAU,EAAE;AAAA,MAC7D;AACA,aAAO;AAAA,IACT;AACA,aAAS,UAAU,OAAO,WAAY;AACpC,WAAK,eAAe;AAAA,IACtB;AACA,aAAS,UAAU,SAAS,WAAY;AACtC,UAAI,QAAQ,KAAK;AACjB,UAAI,MAAM,QAAQ;AAChB,cAAM;AACN,YAAI,CAAC,MAAM,WAAW,CAAC,MAAM,UAAU,CAAC,MAAM,oBAAoB,MAAM;AAAiB,sBAAY,MAAM,KAAK;AAAA,MAClH;AAAA,IACF;AACA,aAAS,UAAU,qBAAqB,SAAS,mBAAmB,UAAU;AAE5E,UAAI,OAAO,aAAa;AAAU,mBAAW,SAAS,YAAY;AAClE,UAAI,EAAE,CAAC,OAAO,QAAQ,SAAS,SAAS,UAAU,UAAU,QAAQ,SAAS,WAAW,YAAY,KAAK,EAAE,SAAS,WAAW,IAAI,YAAY,CAAC,IAAI;AAAK,cAAM,IAAI,qBAAqB,QAAQ;AAChM,WAAK,eAAe,kBAAkB;AACtC,aAAO;AAAA,IACT;AACA,WAAO,eAAe,SAAS,WAAW,kBAAkB;AAAA,MAI1D,YAAY;AAAA,MACZ,KAAK,SAASE,OAAM;AAClB,eAAO,KAAK,kBAAkB,KAAK,eAAe,UAAU;AAAA,MAC9D;AAAA,IACF,CAAC;AACD,aAAS,YAAY,OAAO,OAAO,UAAU;AAC3C,UAAI,CAAC,MAAM,cAAc,MAAM,kBAAkB,SAAS,OAAO,UAAU,UAAU;AACnF,gBAAQF,QAAO,KAAK,OAAO,QAAQ;AAAA,MACrC;AACA,aAAO;AAAA,IACT;AACA,WAAO,eAAe,SAAS,WAAW,yBAAyB;AAAA,MAIjE,YAAY;AAAA,MACZ,KAAK,SAASE,OAAM;AAClB,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,IACF,CAAC;AAKD,aAAS,cAAc,QAAQ,OAAO,OAAO,OAAO,UAAU,IAAI;AAChE,UAAI,CAAC,OAAO;AACV,YAAI,WAAW,YAAY,OAAO,OAAO,QAAQ;AACjD,YAAI,UAAU,UAAU;AACtB,kBAAQ;AACR,qBAAW;AACX,kBAAQ;AAAA,QACV;AAAA,MACF;AACA,UAAI,MAAM,MAAM,aAAa,IAAI,MAAM;AACvC,YAAM,UAAU;AAChB,UAAI,MAAM,MAAM,SAAS,MAAM;AAE/B,UAAI,CAAC;AAAK,cAAM,YAAY;AAC5B,UAAI,MAAM,WAAW,MAAM,QAAQ;AACjC,YAAI,OAAO,MAAM;AACjB,cAAM,sBAAsB;AAAA,UAC1B;AAAA,UACA;AAAA,UACA;AAAA,UACA,UAAU;AAAA,UACV,MAAM;AAAA,QACR;AACA,YAAI,MAAM;AACR,eAAK,OAAO,MAAM;AAAA,QACpB,OAAO;AACL,gBAAM,kBAAkB,MAAM;AAAA,QAChC;AACA,cAAM,wBAAwB;AAAA,MAChC,OAAO;AACL,gBAAQ,QAAQ,OAAO,OAAO,KAAK,OAAO,UAAU,EAAE;AAAA,MACxD;AACA,aAAO;AAAA,IACT;AACA,aAAS,QAAQ,QAAQ,OAAO,QAAQ,KAAK,OAAO,UAAU,IAAI;AAChE,YAAM,WAAW;AACjB,YAAM,UAAU;AAChB,YAAM,UAAU;AAChB,YAAM,OAAO;AACb,UAAI,MAAM;AAAW,cAAM,QAAQ,IAAI,qBAAqB,OAAO,CAAC;AAAA,eAAW;AAAQ,eAAO,QAAQ,OAAO,MAAM,OAAO;AAAA;AAAO,eAAO,OAAO,OAAO,UAAU,MAAM,OAAO;AAC7K,YAAM,OAAO;AAAA,IACf;AACA,aAAS,aAAa,QAAQ,OAAO,MAAM,IAAI,IAAI;AACjD,QAAE,MAAM;AACR,UAAI,MAAM;AAGR,gBAAQ,SAAS,IAAI,EAAE;AAGvB,gBAAQ,SAAS,aAAa,QAAQ,KAAK;AAC3C,eAAO,eAAe,eAAe;AACrC,uBAAe,QAAQ,EAAE;AAAA,MAC3B,OAAO;AAGL,WAAG,EAAE;AACL,eAAO,eAAe,eAAe;AACrC,uBAAe,QAAQ,EAAE;AAGzB,oBAAY,QAAQ,KAAK;AAAA,MAC3B;AAAA,IACF;AACA,aAAS,mBAAmB,OAAO;AACjC,YAAM,UAAU;AAChB,YAAM,UAAU;AAChB,YAAM,UAAU,MAAM;AACtB,YAAM,WAAW;AAAA,IACnB;AACA,aAAS,QAAQ,QAAQ,IAAI;AAC3B,UAAI,QAAQ,OAAO;AACnB,UAAI,OAAO,MAAM;AACjB,UAAI,KAAK,MAAM;AACf,UAAI,OAAO,OAAO;AAAY,cAAM,IAAI,sBAAsB;AAC9D,yBAAmB,KAAK;AACxB,UAAI;AAAI,qBAAa,QAAQ,OAAO,MAAM,IAAI,EAAE;AAAA,WAAO;AAErD,YAAI,WAAW,WAAW,KAAK,KAAK,OAAO;AAC3C,YAAI,CAAC,YAAY,CAAC,MAAM,UAAU,CAAC,MAAM,oBAAoB,MAAM,iBAAiB;AAClF,sBAAY,QAAQ,KAAK;AAAA,QAC3B;AACA,YAAI,MAAM;AACR,kBAAQ,SAAS,YAAY,QAAQ,OAAO,UAAU,EAAE;AAAA,QAC1D,OAAO;AACL,qBAAW,QAAQ,OAAO,UAAU,EAAE;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AACA,aAAS,WAAW,QAAQ,OAAO,UAAU,IAAI;AAC/C,UAAI,CAAC;AAAU,qBAAa,QAAQ,KAAK;AACzC,YAAM;AACN,SAAG;AACH,kBAAY,QAAQ,KAAK;AAAA,IAC3B;AAKA,aAAS,aAAa,QAAQ,OAAO;AACnC,UAAI,MAAM,WAAW,KAAK,MAAM,WAAW;AACzC,cAAM,YAAY;AAClB,eAAO,KAAK,OAAO;AAAA,MACrB;AAAA,IACF;AAGA,aAAS,YAAY,QAAQ,OAAO;AAClC,YAAM,mBAAmB;AACzB,UAAI,QAAQ,MAAM;AAClB,UAAI,OAAO,WAAW,SAAS,MAAM,MAAM;AAEzC,YAAI,IAAI,MAAM;AACd,YAAI,SAAS,IAAI,MAAM,CAAC;AACxB,YAAI,SAAS,MAAM;AACnB,eAAO,QAAQ;AACf,YAAI,QAAQ;AACZ,YAAI,aAAa;AACjB,eAAO,OAAO;AACZ,iBAAO,SAAS;AAChB,cAAI,CAAC,MAAM;AAAO,yBAAa;AAC/B,kBAAQ,MAAM;AACd,mBAAS;AAAA,QACX;AACA,eAAO,aAAa;AACpB,gBAAQ,QAAQ,OAAO,MAAM,MAAM,QAAQ,QAAQ,IAAI,OAAO,MAAM;AAIpE,cAAM;AACN,cAAM,sBAAsB;AAC5B,YAAI,OAAO,MAAM;AACf,gBAAM,qBAAqB,OAAO;AAClC,iBAAO,OAAO;AAAA,QAChB,OAAO;AACL,gBAAM,qBAAqB,IAAI,cAAc,KAAK;AAAA,QACpD;AACA,cAAM,uBAAuB;AAAA,MAC/B,OAAO;AAEL,eAAO,OAAO;AACZ,cAAI,QAAQ,MAAM;AAClB,cAAI,WAAW,MAAM;AACrB,cAAI,KAAK,MAAM;AACf,cAAI,MAAM,MAAM,aAAa,IAAI,MAAM;AACvC,kBAAQ,QAAQ,OAAO,OAAO,KAAK,OAAO,UAAU,EAAE;AACtD,kBAAQ,MAAM;AACd,gBAAM;AAKN,cAAI,MAAM,SAAS;AACjB;AAAA,UACF;AAAA,QACF;AACA,YAAI,UAAU;AAAM,gBAAM,sBAAsB;AAAA,MAClD;AACA,YAAM,kBAAkB;AACxB,YAAM,mBAAmB;AAAA,IAC3B;AACA,aAAS,UAAU,SAAS,SAAU,OAAO,UAAU,IAAI;AACzD,SAAG,IAAI,2BAA2B,UAAU,CAAC;AAAA,IAC/C;AACA,aAAS,UAAU,UAAU;AAC7B,aAAS,UAAU,MAAM,SAAU,OAAO,UAAU,IAAI;AACtD,UAAI,QAAQ,KAAK;AACjB,UAAI,OAAO,UAAU,YAAY;AAC/B,aAAK;AACL,gBAAQ;AACR,mBAAW;AAAA,MACb,WAAW,OAAO,aAAa,YAAY;AACzC,aAAK;AACL,mBAAW;AAAA,MACb;AACA,UAAI,UAAU,QAAQ,UAAU;AAAW,aAAK,MAAM,OAAO,QAAQ;AAGrE,UAAI,MAAM,QAAQ;AAChB,cAAM,SAAS;AACf,aAAK,OAAO;AAAA,MACd;AAGA,UAAI,CAAC,MAAM;AAAQ,oBAAY,MAAM,OAAO,EAAE;AAC9C,aAAO;AAAA,IACT;AACA,WAAO,eAAe,SAAS,WAAW,kBAAkB;AAAA,MAI1D,YAAY;AAAA,MACZ,KAAK,SAASA,OAAM;AAClB,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,IACF,CAAC;AACD,aAAS,WAAW,OAAO;AACzB,aAAO,MAAM,UAAU,MAAM,WAAW,KAAK,MAAM,oBAAoB,QAAQ,CAAC,MAAM,YAAY,CAAC,MAAM;AAAA,IAC3G;AACA,aAAS,UAAU,QAAQ,OAAO;AAChC,aAAO,OAAO,SAAU,KAAK;AAC3B,cAAM;AACN,YAAI,KAAK;AACP,yBAAe,QAAQ,GAAG;AAAA,QAC5B;AACA,cAAM,cAAc;AACpB,eAAO,KAAK,WAAW;AACvB,oBAAY,QAAQ,KAAK;AAAA,MAC3B,CAAC;AAAA,IACH;AACA,aAAS,UAAU,QAAQ,OAAO;AAChC,UAAI,CAAC,MAAM,eAAe,CAAC,MAAM,aAAa;AAC5C,YAAI,OAAO,OAAO,WAAW,cAAc,CAAC,MAAM,WAAW;AAC3D,gBAAM;AACN,gBAAM,cAAc;AACpB,kBAAQ,SAAS,WAAW,QAAQ,KAAK;AAAA,QAC3C,OAAO;AACL,gBAAM,cAAc;AACpB,iBAAO,KAAK,WAAW;AAAA,QACzB;AAAA,MACF;AAAA,IACF;AACA,aAAS,YAAY,QAAQ,OAAO;AAClC,UAAI,OAAO,WAAW,KAAK;AAC3B,UAAI,MAAM;AACR,kBAAU,QAAQ,KAAK;AACvB,YAAI,MAAM,cAAc,GAAG;AACzB,gBAAM,WAAW;AACjB,iBAAO,KAAK,QAAQ;AACpB,cAAI,MAAM,aAAa;AAGrB,gBAAI,SAAS,OAAO;AACpB,gBAAI,CAAC,UAAU,OAAO,eAAe,OAAO,YAAY;AACtD,qBAAO,QAAQ;AAAA,YACjB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,aAAS,YAAY,QAAQ,OAAO,IAAI;AACtC,YAAM,SAAS;AACf,kBAAY,QAAQ,KAAK;AACzB,UAAI,IAAI;AACN,YAAI,MAAM;AAAU,kBAAQ,SAAS,EAAE;AAAA;AAAO,iBAAO,KAAK,UAAU,EAAE;AAAA,MACxE;AACA,YAAM,QAAQ;AACd,aAAO,WAAW;AAAA,IACpB;AACA,aAAS,eAAe,SAAS,OAAO,KAAK;AAC3C,UAAI,QAAQ,QAAQ;AACpB,cAAQ,QAAQ;AAChB,aAAO,OAAO;AACZ,YAAI,KAAK,MAAM;AACf,cAAM;AACN,WAAG,GAAG;AACN,gBAAQ,MAAM;AAAA,MAChB;AAGA,YAAM,mBAAmB,OAAO;AAAA,IAClC;AACA,WAAO,eAAe,SAAS,WAAW,aAAa;AAAA,MAIrD,YAAY;AAAA,MACZ,KAAK,SAASA,OAAM;AAClB,YAAI,KAAK,mBAAmB,QAAW;AACrC,iBAAO;AAAA,QACT;AACA,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,MACA,KAAK,SAASC,KAAI,OAAO;AAGvB,YAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,QACF;AAIA,aAAK,eAAe,YAAY;AAAA,MAClC;AAAA,IACF,CAAC;AACD,aAAS,UAAU,UAAU,YAAY;AACzC,aAAS,UAAU,aAAa,YAAY;AAC5C,aAAS,UAAU,WAAW,SAAU,KAAK,IAAI;AAC/C,SAAG,GAAG;AAAA,IACR;AAAA;AAAA;;;AChoBA;AAAA;AAAA;AAAA;AAAA;AA6BA,QAAI,aAAa,OAAO,QAAQ,SAAU,KAAK;AAC7C,UAAIC,QAAO,CAAC;AACZ,eAAS,OAAO;AAAK,QAAAA,MAAK,KAAK,GAAG;AAClC,aAAOA;AAAA,IACT;AAGA,WAAO,UAAU;AACjB,QAAI,WAAW;AACf,QAAI,WAAW;AACf,+BAAoB,QAAQ,QAAQ;AACpC;AAEM,aAAO,WAAW,SAAS,SAAS;AACxC,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAChC,iBAAS,KAAK;AAClB,YAAI,CAAC,OAAO,UAAU;AAAS,iBAAO,UAAU,UAAU,SAAS,UAAU;AAAA,MAC/E;AAAA,IACF;AALM;AAEE;AADG;AAKX,aAAS,OAAO,SAAS;AACvB,UAAI,EAAE,gBAAgB;AAAS,eAAO,IAAI,OAAO,OAAO;AACxD,eAAS,KAAK,MAAM,OAAO;AAC3B,eAAS,KAAK,MAAM,OAAO;AAC3B,WAAK,gBAAgB;AACrB,UAAI,SAAS;AACX,YAAI,QAAQ,aAAa;AAAO,eAAK,WAAW;AAChD,YAAI,QAAQ,aAAa;AAAO,eAAK,WAAW;AAChD,YAAI,QAAQ,kBAAkB,OAAO;AACnC,eAAK,gBAAgB;AACrB,eAAK,KAAK,OAAO,KAAK;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AACA,WAAO,eAAe,OAAO,WAAW,yBAAyB;AAAA,MAI/D,YAAY;AAAA,MACZ,KAAK,SAASC,OAAM;AAClB,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,IACF,CAAC;AACD,WAAO,eAAe,OAAO,WAAW,kBAAkB;AAAA,MAIxD,YAAY;AAAA,MACZ,KAAK,SAASA,OAAM;AAClB,eAAO,KAAK,kBAAkB,KAAK,eAAe,UAAU;AAAA,MAC9D;AAAA,IACF,CAAC;AACD,WAAO,eAAe,OAAO,WAAW,kBAAkB;AAAA,MAIxD,YAAY;AAAA,MACZ,KAAK,SAASA,OAAM;AAClB,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,IACF,CAAC;AAGD,aAAS,QAAQ;AAEf,UAAI,KAAK,eAAe;AAAO;AAI/B,cAAQ,SAAS,SAAS,IAAI;AAAA,IAChC;AACA,aAAS,QAAQC,OAAM;AACrB,MAAAA,MAAK,IAAI;AAAA,IACX;AACA,WAAO,eAAe,OAAO,WAAW,aAAa;AAAA,MAInD,YAAY;AAAA,MACZ,KAAK,SAASD,OAAM;AAClB,YAAI,KAAK,mBAAmB,UAAa,KAAK,mBAAmB,QAAW;AAC1E,iBAAO;AAAA,QACT;AACA,eAAO,KAAK,eAAe,aAAa,KAAK,eAAe;AAAA,MAC9D;AAAA,MACA,KAAK,SAASE,KAAI,OAAO;AAGvB,YAAI,KAAK,mBAAmB,UAAa,KAAK,mBAAmB,QAAW;AAC1E;AAAA,QACF;AAIA,aAAK,eAAe,YAAY;AAChC,aAAK,eAAe,YAAY;AAAA,MAClC;AAAA,IACF,CAAC;AAAA;AAAA;;;AC7HD;AAAA;AAAA;AAAA;AAEA,QAAI,SAAS;AACb,QAAIC,UAAS,OAAO;AAGpB,aAAS,UAAW,KAAK,KAAK;AAC5B,eAAS,OAAO,KAAK;AACnB,YAAI,OAAO,IAAI;AAAA,MACjB;AAAA,IACF;AACA,QAAIA,QAAO,QAAQA,QAAO,SAASA,QAAO,eAAeA,QAAO,iBAAiB;AAC/E,aAAO,UAAU;AAAA,IACnB,OAAO;AAEL,gBAAU,QAAQ,OAAO;AACzB,cAAQ,SAAS;AAAA,IACnB;AAEA,aAAS,WAAY,KAAK,kBAAkB,QAAQ;AAClD,aAAOA,QAAO,KAAK,kBAAkB,MAAM;AAAA,IAC7C;AAEA,eAAW,YAAY,OAAO,OAAOA,QAAO,SAAS;AAGrD,cAAUA,SAAQ,UAAU;AAE5B,eAAW,OAAO,SAAU,KAAK,kBAAkB,QAAQ;AACzD,UAAI,OAAO,QAAQ,UAAU;AAC3B,cAAM,IAAI,UAAU,+BAA+B;AAAA,MACrD;AACA,aAAOA,QAAO,KAAK,kBAAkB,MAAM;AAAA,IAC7C;AAEA,eAAW,QAAQ,SAAU,MAAMC,OAAM,UAAU;AACjD,UAAI,OAAO,SAAS,UAAU;AAC5B,cAAM,IAAI,UAAU,2BAA2B;AAAA,MACjD;AACA,UAAI,MAAMD,QAAO,IAAI;AACrB,UAAIC,UAAS,QAAW;AACtB,YAAI,OAAO,aAAa,UAAU;AAChC,cAAI,KAAKA,OAAM,QAAQ;AAAA,QACzB,OAAO;AACL,cAAI,KAAKA,KAAI;AAAA,QACf;AAAA,MACF,OAAO;AACL,YAAI,KAAK,CAAC;AAAA,MACZ;AACA,aAAO;AAAA,IACT;AAEA,eAAW,cAAc,SAAU,MAAM;AACvC,UAAI,OAAO,SAAS,UAAU;AAC5B,cAAM,IAAI,UAAU,2BAA2B;AAAA,MACjD;AACA,aAAOD,QAAO,IAAI;AAAA,IACpB;AAEA,eAAW,kBAAkB,SAAU,MAAM;AAC3C,UAAI,OAAO,SAAS,UAAU;AAC5B,cAAM,IAAI,UAAU,2BAA2B;AAAA,MACjD;AACA,aAAO,OAAO,WAAW,IAAI;AAAA,IAC/B;AAAA;AAAA;;;AChEA;AAAA;AAAA;AAAA;AAAA;AAyBA,QAAIE,UAAS,sBAAuB;AAGpC,QAAIC,cAAaD,QAAO,cAAc,SAAU,UAAU;AACxD,iBAAW,KAAK;AAChB,cAAQ,YAAY,SAAS,YAAY,GAAG;AAAA,QAC1C,KAAK;AAAA,QAAM,KAAK;AAAA,QAAO,KAAK;AAAA,QAAQ,KAAK;AAAA,QAAQ,KAAK;AAAA,QAAS,KAAK;AAAA,QAAS,KAAK;AAAA,QAAO,KAAK;AAAA,QAAQ,KAAK;AAAA,QAAU,KAAK;AAAA,QAAW,KAAK;AACxI,iBAAO;AAAA,QACT;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,mBAAmB,KAAK;AAC/B,UAAI,CAAC;AAAK,eAAO;AACjB,UAAI;AACJ,aAAO,MAAM;AACX,gBAAQ,KAAK;AAAA,UACX,KAAK;AAAA,UACL,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AAAA,UACL,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO;AAAA,UACT;AACE,gBAAI;AAAS;AACb,mBAAO,KAAK,KAAK,YAAY;AAC7B,sBAAU;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAIA,aAAS,kBAAkB,KAAK;AAC9B,UAAI,OAAO,mBAAmB,GAAG;AACjC,UAAI,OAAO,SAAS,aAAaA,QAAO,eAAeC,eAAc,CAACA,YAAW,GAAG;AAAI,cAAM,IAAI,MAAM,uBAAuB,GAAG;AAClI,aAAO,QAAQ;AAAA,IACjB;AAKA,YAAQ,gBAAgB;AACxB,aAAS,cAAc,UAAU;AAC/B,WAAK,WAAW,kBAAkB,QAAQ;AAC1C,UAAI;AACJ,cAAQ,KAAK,UAAU;AAAA,QACrB,KAAK;AACH,eAAK,OAAO;AACZ,eAAK,MAAM;AACX,eAAK;AACL;AAAA,QACF,KAAK;AACH,eAAK,WAAW;AAChB,eAAK;AACL;AAAA,QACF,KAAK;AACH,eAAK,OAAO;AACZ,eAAK,MAAM;AACX,eAAK;AACL;AAAA,QACF;AACE,eAAK,QAAQ;AACb,eAAK,MAAM;AACX;AAAA,MACJ;AACA,WAAK,WAAW;AAChB,WAAK,YAAY;AACjB,WAAK,WAAWD,QAAO,YAAY,EAAE;AAAA,IACvC;AAEA,kBAAc,UAAU,QAAQ,SAAU,KAAK;AAC7C,UAAI,IAAI,WAAW;AAAG,eAAO;AAC7B,UAAI;AACJ,UAAI;AACJ,UAAI,KAAK,UAAU;AACjB,YAAI,KAAK,SAAS,GAAG;AACrB,YAAI,MAAM;AAAW,iBAAO;AAC5B,YAAI,KAAK;AACT,aAAK,WAAW;AAAA,MAClB,OAAO;AACL,YAAI;AAAA,MACN;AACA,UAAI,IAAI,IAAI;AAAQ,eAAO,IAAI,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC;AACvE,aAAO,KAAK;AAAA,IACd;AAEA,kBAAc,UAAU,MAAM;AAG9B,kBAAc,UAAU,OAAO;AAG/B,kBAAc,UAAU,WAAW,SAAU,KAAK;AAChD,UAAI,KAAK,YAAY,IAAI,QAAQ;AAC/B,YAAI,KAAK,KAAK,UAAU,KAAK,YAAY,KAAK,UAAU,GAAG,KAAK,QAAQ;AACxE,eAAO,KAAK,SAAS,SAAS,KAAK,UAAU,GAAG,KAAK,SAAS;AAAA,MAChE;AACA,UAAI,KAAK,KAAK,UAAU,KAAK,YAAY,KAAK,UAAU,GAAG,IAAI,MAAM;AACrE,WAAK,YAAY,IAAI;AAAA,IACvB;AAIA,aAAS,cAAc,MAAM;AAC3B,UAAI,QAAQ;AAAM,eAAO;AAAA,eAAW,QAAQ,MAAM;AAAM,eAAO;AAAA,eAAW,QAAQ,MAAM;AAAM,eAAO;AAAA,eAAW,QAAQ,MAAM;AAAM,eAAO;AAC3I,aAAO,QAAQ,MAAM,IAAO,KAAK;AAAA,IACnC;AAKA,aAAS,oBAAoBE,OAAM,KAAK,GAAG;AACzC,UAAI,IAAI,IAAI,SAAS;AACrB,UAAI,IAAI;AAAG,eAAO;AAClB,UAAI,KAAK,cAAc,IAAI,EAAE;AAC7B,UAAI,MAAM,GAAG;AACX,YAAI,KAAK;AAAG,UAAAA,MAAK,WAAW,KAAK;AACjC,eAAO;AAAA,MACT;AACA,UAAI,EAAE,IAAI,KAAK,OAAO;AAAI,eAAO;AACjC,WAAK,cAAc,IAAI,EAAE;AACzB,UAAI,MAAM,GAAG;AACX,YAAI,KAAK;AAAG,UAAAA,MAAK,WAAW,KAAK;AACjC,eAAO;AAAA,MACT;AACA,UAAI,EAAE,IAAI,KAAK,OAAO;AAAI,eAAO;AACjC,WAAK,cAAc,IAAI,EAAE;AACzB,UAAI,MAAM,GAAG;AACX,YAAI,KAAK,GAAG;AACV,cAAI,OAAO;AAAG,iBAAK;AAAA;AAAO,YAAAA,MAAK,WAAW,KAAK;AAAA,QACjD;AACA,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AAUA,aAAS,oBAAoBA,OAAM,KAAK,GAAG;AACzC,WAAK,IAAI,KAAK,SAAU,KAAM;AAC5B,QAAAA,MAAK,WAAW;AAChB,eAAO;AAAA,MACT;AACA,UAAIA,MAAK,WAAW,KAAK,IAAI,SAAS,GAAG;AACvC,aAAK,IAAI,KAAK,SAAU,KAAM;AAC5B,UAAAA,MAAK,WAAW;AAChB,iBAAO;AAAA,QACT;AACA,YAAIA,MAAK,WAAW,KAAK,IAAI,SAAS,GAAG;AACvC,eAAK,IAAI,KAAK,SAAU,KAAM;AAC5B,YAAAA,MAAK,WAAW;AAChB,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,aAAS,aAAa,KAAK;AACzB,UAAI,IAAI,KAAK,YAAY,KAAK;AAC9B,UAAI,IAAI,oBAAoB,MAAM,KAAK,CAAC;AACxC,UAAI,MAAM;AAAW,eAAO;AAC5B,UAAI,KAAK,YAAY,IAAI,QAAQ;AAC/B,YAAI,KAAK,KAAK,UAAU,GAAG,GAAG,KAAK,QAAQ;AAC3C,eAAO,KAAK,SAAS,SAAS,KAAK,UAAU,GAAG,KAAK,SAAS;AAAA,MAChE;AACA,UAAI,KAAK,KAAK,UAAU,GAAG,GAAG,IAAI,MAAM;AACxC,WAAK,YAAY,IAAI;AAAA,IACvB;AAKA,aAAS,SAAS,KAAK,GAAG;AACxB,UAAI,QAAQ,oBAAoB,MAAM,KAAK,CAAC;AAC5C,UAAI,CAAC,KAAK;AAAU,eAAO,IAAI,SAAS,QAAQ,CAAC;AACjD,WAAK,YAAY;AACjB,UAAI,MAAM,IAAI,UAAU,QAAQ,KAAK;AACrC,UAAI,KAAK,KAAK,UAAU,GAAG,GAAG;AAC9B,aAAO,IAAI,SAAS,QAAQ,GAAG,GAAG;AAAA,IACpC;AAIA,aAAS,QAAQ,KAAK;AACpB,UAAI,IAAI,OAAO,IAAI,SAAS,KAAK,MAAM,GAAG,IAAI;AAC9C,UAAI,KAAK;AAAU,eAAO,IAAI;AAC9B,aAAO;AAAA,IACT;AAMA,aAAS,UAAU,KAAK,GAAG;AACzB,WAAK,IAAI,SAAS,KAAK,MAAM,GAAG;AAC9B,YAAI,IAAI,IAAI,SAAS,WAAW,CAAC;AACjC,YAAI,GAAG;AACL,cAAI,IAAI,EAAE,WAAW,EAAE,SAAS,CAAC;AACjC,cAAI,KAAK,SAAU,KAAK,OAAQ;AAC9B,iBAAK,WAAW;AAChB,iBAAK,YAAY;AACjB,iBAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AACpC,iBAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AACpC,mBAAO,EAAE,MAAM,GAAG,EAAE;AAAA,UACtB;AAAA,QACF;AACA,eAAO;AAAA,MACT;AACA,WAAK,WAAW;AAChB,WAAK,YAAY;AACjB,WAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AACpC,aAAO,IAAI,SAAS,WAAW,GAAG,IAAI,SAAS,CAAC;AAAA,IAClD;AAIA,aAAS,SAAS,KAAK;AACrB,UAAI,IAAI,OAAO,IAAI,SAAS,KAAK,MAAM,GAAG,IAAI;AAC9C,UAAI,KAAK,UAAU;AACjB,YAAI,MAAM,KAAK,YAAY,KAAK;AAChC,eAAO,IAAI,KAAK,SAAS,SAAS,WAAW,GAAG,GAAG;AAAA,MACrD;AACA,aAAO;AAAA,IACT;AAEA,aAAS,WAAW,KAAK,GAAG;AAC1B,UAAI,KAAK,IAAI,SAAS,KAAK;AAC3B,UAAI,MAAM;AAAG,eAAO,IAAI,SAAS,UAAU,CAAC;AAC5C,WAAK,WAAW,IAAI;AACpB,WAAK,YAAY;AACjB,UAAI,MAAM,GAAG;AACX,aAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AAAA,MACtC,OAAO;AACL,aAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AACpC,aAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AAAA,MACtC;AACA,aAAO,IAAI,SAAS,UAAU,GAAG,IAAI,SAAS,CAAC;AAAA,IACjD;AAEA,aAAS,UAAU,KAAK;AACtB,UAAI,IAAI,OAAO,IAAI,SAAS,KAAK,MAAM,GAAG,IAAI;AAC9C,UAAI,KAAK;AAAU,eAAO,IAAI,KAAK,SAAS,SAAS,UAAU,GAAG,IAAI,KAAK,QAAQ;AACnF,aAAO;AAAA,IACT;AAGA,aAAS,YAAY,KAAK;AACxB,aAAO,IAAI,SAAS,KAAK,QAAQ;AAAA,IACnC;AAEA,aAAS,UAAU,KAAK;AACtB,aAAO,OAAO,IAAI,SAAS,KAAK,MAAM,GAAG,IAAI;AAAA,IAC/C;AAAA;AAAA;;;ACvSA;AAAA;AAAA;AAAA;AAAA;AAKA,QAAI,6BAA6B,yBAA2B,MAAM;AAClE,aAASC,MAAK,UAAU;AACtB,UAAI,SAAS;AACb,aAAO,WAAY;AACjB,YAAI;AAAQ;AACZ,iBAAS;AACT,iBAAS,OAAO,UAAU,QAAQ,OAAO,IAAI,MAAM,IAAI,GAAGC,QAAO,GAAGA,QAAO,MAAMA,SAAQ;AACvF,eAAKA,SAAQ,UAAUA;AAAA,QACzB;AACA,iBAAS,MAAM,MAAM,IAAI;AAAA,MAC3B;AAAA,IACF;AACA,aAASC,QAAO;AAAA,IAAC;AACjB,aAAS,UAAU,QAAQ;AACzB,aAAO,OAAO,aAAa,OAAO,OAAO,UAAU;AAAA,IACrD;AACA,aAAS,IAAI,QAAQ,MAAM,UAAU;AACnC,UAAI,OAAO,SAAS;AAAY,eAAO,IAAI,QAAQ,MAAM,IAAI;AAC7D,UAAI,CAAC;AAAM,eAAO,CAAC;AACnB,iBAAWF,MAAK,YAAYE,KAAI;AAChC,UAAI,WAAW,KAAK,YAAY,KAAK,aAAa,SAAS,OAAO;AAClE,UAAI,WAAW,KAAK,YAAY,KAAK,aAAa,SAAS,OAAO;AAClE,UAAI,iBAAiB,SAASC,kBAAiB;AAC7C,YAAI,CAAC,OAAO;AAAU,mBAAS;AAAA,MACjC;AACA,UAAI,gBAAgB,OAAO,kBAAkB,OAAO,eAAe;AACnE,UAAI,WAAW,SAASC,YAAW;AACjC,mBAAW;AACX,wBAAgB;AAChB,YAAI,CAAC;AAAU,mBAAS,KAAK,MAAM;AAAA,MACrC;AACA,UAAI,gBAAgB,OAAO,kBAAkB,OAAO,eAAe;AACnE,UAAI,QAAQ,SAASC,SAAQ;AAC3B,mBAAW;AACX,wBAAgB;AAChB,YAAI,CAAC;AAAU,mBAAS,KAAK,MAAM;AAAA,MACrC;AACA,UAAI,UAAU,SAASC,SAAQ,KAAK;AAClC,iBAAS,KAAK,QAAQ,GAAG;AAAA,MAC3B;AACA,UAAI,UAAU,SAASC,WAAU;AAC/B,YAAI;AACJ,YAAI,YAAY,CAAC,eAAe;AAC9B,cAAI,CAAC,OAAO,kBAAkB,CAAC,OAAO,eAAe;AAAO,kBAAM,IAAI,2BAA2B;AACjG,iBAAO,SAAS,KAAK,QAAQ,GAAG;AAAA,QAClC;AACA,YAAI,YAAY,CAAC,eAAe;AAC9B,cAAI,CAAC,OAAO,kBAAkB,CAAC,OAAO,eAAe;AAAO,kBAAM,IAAI,2BAA2B;AACjG,iBAAO,SAAS,KAAK,QAAQ,GAAG;AAAA,QAClC;AAAA,MACF;AACA,UAAI,YAAY,SAASC,aAAY;AACnC,eAAO,IAAI,GAAG,UAAU,QAAQ;AAAA,MAClC;AACA,UAAI,UAAU,MAAM,GAAG;AACrB,eAAO,GAAG,YAAY,QAAQ;AAC9B,eAAO,GAAG,SAAS,OAAO;AAC1B,YAAI,OAAO;AAAK,oBAAU;AAAA;AAAO,iBAAO,GAAG,WAAW,SAAS;AAAA,MACjE,WAAW,YAAY,CAAC,OAAO,gBAAgB;AAE7C,eAAO,GAAG,OAAO,cAAc;AAC/B,eAAO,GAAG,SAAS,cAAc;AAAA,MACnC;AACA,aAAO,GAAG,OAAO,KAAK;AACtB,aAAO,GAAG,UAAU,QAAQ;AAC5B,UAAI,KAAK,UAAU;AAAO,eAAO,GAAG,SAAS,OAAO;AACpD,aAAO,GAAG,SAAS,OAAO;AAC1B,aAAO,WAAY;AACjB,eAAO,eAAe,YAAY,QAAQ;AAC1C,eAAO,eAAe,SAAS,OAAO;AACtC,eAAO,eAAe,WAAW,SAAS;AAC1C,YAAI,OAAO;AAAK,iBAAO,IAAI,eAAe,UAAU,QAAQ;AAC5D,eAAO,eAAe,OAAO,cAAc;AAC3C,eAAO,eAAe,SAAS,cAAc;AAC7C,eAAO,eAAe,UAAU,QAAQ;AACxC,eAAO,eAAe,OAAO,KAAK;AAClC,eAAO,eAAe,SAAS,OAAO;AACtC,eAAO,eAAe,SAAS,OAAO;AAAA,MACxC;AAAA,IACF;AACA,WAAO,UAAU;AAAA;AAAA;;;ACrFjB;AAAA;AAAA;AAAA;AAAA;AAEA,QAAI;AACJ,aAAS,gBAAgB,KAAK,KAAK,OAAO;AAAE,YAAM,eAAe,GAAG;AAAG,UAAI,OAAO,KAAK;AAAE,eAAO,eAAe,KAAK,KAAK,EAAE,OAAc,YAAY,MAAM,cAAc,MAAM,UAAU,KAAK,CAAC;AAAA,MAAG,OAAO;AAAE,YAAI,OAAO;AAAA,MAAO;AAAE,aAAO;AAAA,IAAK;AAC3O,aAAS,eAAe,KAAK;AAAE,UAAI,MAAM,aAAa,KAAK,QAAQ;AAAG,aAAO,OAAO,QAAQ,WAAW,MAAM,OAAO,GAAG;AAAA,IAAG;AAC1H,aAAS,aAAa,OAAO,MAAM;AAAE,UAAI,OAAO,UAAU,YAAY,UAAU;AAAM,eAAO;AAAO,UAAI,OAAO,MAAM,OAAO;AAAc,UAAI,SAAS,QAAW;AAAE,YAAI,MAAM,KAAK,KAAK,OAAO,QAAQ,SAAS;AAAG,YAAI,OAAO,QAAQ;AAAU,iBAAO;AAAK,cAAM,IAAI,UAAU,8CAA8C;AAAA,MAAG;AAAE,cAAQ,SAAS,WAAW,SAAS,QAAQ,KAAK;AAAA,IAAG;AACxX,QAAI,WAAW;AACf,QAAI,eAAe,OAAO,aAAa;AACvC,QAAI,cAAc,OAAO,YAAY;AACrC,QAAI,SAAS,OAAO,OAAO;AAC3B,QAAI,SAAS,OAAO,OAAO;AAC3B,QAAI,eAAe,OAAO,aAAa;AACvC,QAAI,iBAAiB,OAAO,eAAe;AAC3C,QAAI,UAAU,OAAO,QAAQ;AAC7B,aAAS,iBAAiB,OAAO,MAAM;AACrC,aAAO;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACF;AACA,aAAS,eAAe,MAAM;AAC5B,UAAI,UAAU,KAAK;AACnB,UAAI,YAAY,MAAM;AACpB,YAAI,OAAO,KAAK,SAAS,KAAK;AAI9B,YAAI,SAAS,MAAM;AACjB,eAAK,gBAAgB;AACrB,eAAK,gBAAgB;AACrB,eAAK,eAAe;AACpB,kBAAQ,iBAAiB,MAAM,KAAK,CAAC;AAAA,QACvC;AAAA,MACF;AAAA,IACF;AACA,aAAS,WAAW,MAAM;AAGxB,cAAQ,SAAS,gBAAgB,IAAI;AAAA,IACvC;AACA,aAAS,YAAY,aAAa,MAAM;AACtC,aAAO,SAAU,SAAS,QAAQ;AAChC,oBAAY,KAAK,WAAY;AAC3B,cAAI,KAAK,SAAS;AAChB,oBAAQ,iBAAiB,QAAW,IAAI,CAAC;AACzC;AAAA,UACF;AACA,eAAK,gBAAgB,SAAS,MAAM;AAAA,QACtC,GAAG,MAAM;AAAA,MACX;AAAA,IACF;AACA,QAAI,yBAAyB,OAAO,eAAe,WAAY;AAAA,IAAC,CAAC;AACjE,QAAI,uCAAuC,OAAO,gBAAgB,wBAAwB;AAAA,MACxF,IAAI,SAAS;AACX,eAAO,KAAK;AAAA,MACd;AAAA,MACA,MAAM,SAAS,OAAO;AACpB,YAAI,QAAQ;AAGZ,YAAI,QAAQ,KAAK;AACjB,YAAI,UAAU,MAAM;AAClB,iBAAO,QAAQ,OAAO,KAAK;AAAA,QAC7B;AACA,YAAI,KAAK,SAAS;AAChB,iBAAO,QAAQ,QAAQ,iBAAiB,QAAW,IAAI,CAAC;AAAA,QAC1D;AACA,YAAI,KAAK,SAAS,WAAW;AAK3B,iBAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC5C,oBAAQ,SAAS,WAAY;AAC3B,kBAAI,MAAM,SAAS;AACjB,uBAAO,MAAM,OAAO;AAAA,cACtB,OAAO;AACL,wBAAQ,iBAAiB,QAAW,IAAI,CAAC;AAAA,cAC3C;AAAA,YACF,CAAC;AAAA,UACH,CAAC;AAAA,QACH;AAMA,YAAI,cAAc,KAAK;AACvB,YAAI;AACJ,YAAI,aAAa;AACf,oBAAU,IAAI,QAAQ,YAAY,aAAa,IAAI,CAAC;AAAA,QACtD,OAAO;AAGL,cAAI,OAAO,KAAK,SAAS,KAAK;AAC9B,cAAI,SAAS,MAAM;AACjB,mBAAO,QAAQ,QAAQ,iBAAiB,MAAM,KAAK,CAAC;AAAA,UACtD;AACA,oBAAU,IAAI,QAAQ,KAAK,eAAe;AAAA,QAC5C;AACA,aAAK,gBAAgB;AACrB,eAAO;AAAA,MACT;AAAA,IACF,GAAG,gBAAgB,uBAAuB,OAAO,eAAe,WAAY;AAC1E,aAAO;AAAA,IACT,CAAC,GAAG,gBAAgB,uBAAuB,UAAU,SAAS,UAAU;AACtE,UAAI,SAAS;AAIb,aAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC5C,eAAO,SAAS,QAAQ,MAAM,SAAU,KAAK;AAC3C,cAAI,KAAK;AACP,mBAAO,GAAG;AACV;AAAA,UACF;AACA,kBAAQ,iBAAiB,QAAW,IAAI,CAAC;AAAA,QAC3C,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC,GAAG,wBAAwB,sBAAsB;AAClD,QAAI,oCAAoC,SAASC,mCAAkC,QAAQ;AACzF,UAAI;AACJ,UAAI,WAAW,OAAO,OAAO,uCAAuC,iBAAiB,CAAC,GAAG,gBAAgB,gBAAgB,SAAS;AAAA,QAChI,OAAO;AAAA,QACP,UAAU;AAAA,MACZ,CAAC,GAAG,gBAAgB,gBAAgB,cAAc;AAAA,QAChD,OAAO;AAAA,QACP,UAAU;AAAA,MACZ,CAAC,GAAG,gBAAgB,gBAAgB,aAAa;AAAA,QAC/C,OAAO;AAAA,QACP,UAAU;AAAA,MACZ,CAAC,GAAG,gBAAgB,gBAAgB,QAAQ;AAAA,QAC1C,OAAO;AAAA,QACP,UAAU;AAAA,MACZ,CAAC,GAAG,gBAAgB,gBAAgB,QAAQ;AAAA,QAC1C,OAAO,OAAO,eAAe;AAAA,QAC7B,UAAU;AAAA,MACZ,CAAC,GAAG,gBAAgB,gBAAgB,gBAAgB;AAAA,QAClD,OAAO,SAAS,MAAM,SAAS,QAAQ;AACrC,cAAI,OAAO,SAAS,SAAS,KAAK;AAClC,cAAI,MAAM;AACR,qBAAS,gBAAgB;AACzB,qBAAS,gBAAgB;AACzB,qBAAS,eAAe;AACxB,oBAAQ,iBAAiB,MAAM,KAAK,CAAC;AAAA,UACvC,OAAO;AACL,qBAAS,gBAAgB;AACzB,qBAAS,eAAe;AAAA,UAC1B;AAAA,QACF;AAAA,QACA,UAAU;AAAA,MACZ,CAAC,GAAG,eAAe;AACnB,eAAS,gBAAgB;AACzB,eAAS,QAAQ,SAAU,KAAK;AAC9B,YAAI,OAAO,IAAI,SAAS,8BAA8B;AACpD,cAAI,SAAS,SAAS;AAGtB,cAAI,WAAW,MAAM;AACnB,qBAAS,gBAAgB;AACzB,qBAAS,gBAAgB;AACzB,qBAAS,eAAe;AACxB,mBAAO,GAAG;AAAA,UACZ;AACA,mBAAS,UAAU;AACnB;AAAA,QACF;AACA,YAAI,UAAU,SAAS;AACvB,YAAI,YAAY,MAAM;AACpB,mBAAS,gBAAgB;AACzB,mBAAS,gBAAgB;AACzB,mBAAS,eAAe;AACxB,kBAAQ,iBAAiB,QAAW,IAAI,CAAC;AAAA,QAC3C;AACA,iBAAS,UAAU;AAAA,MACrB,CAAC;AACD,aAAO,GAAG,YAAY,WAAW,KAAK,MAAM,QAAQ,CAAC;AACrD,aAAO;AAAA,IACT;AACA,WAAO,UAAU;AAAA;AAAA;;;ACnLjB;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU,WAAY;AAC3B,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAAA;AAAA;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAuBA,WAAO,UAAU;AAGjB,QAAI;AAGJ,aAAS,gBAAgB;AAGzB,QAAI,KAAK,iBAAkB;AAC3B,QAAI,kBAAkB,SAASC,iBAAgB,SAAS,MAAM;AAC5D,aAAO,QAAQ,UAAU,IAAI,EAAE;AAAA,IACjC;AAIA,QAAI,SAAS;AAGb,QAAIC,UAAS,iBAAkB;AAC/B,QAAI,iBAAiB,OAAO,eAAW,cAAc,aAAS,OAAO,WAAW,cAAc,SAAS,OAAO,SAAS,cAAc,OAAO,CAAC,GAAG,cAAc,WAAY;AAAA,IAAC;AAC3K,aAAS,oBAAoB,OAAO;AAClC,aAAOA,QAAO,KAAK,KAAK;AAAA,IAC1B;AACA,aAAS,cAAc,KAAK;AAC1B,aAAOA,QAAO,SAAS,GAAG,KAAK,eAAe;AAAA,IAChD;AAGA,QAAI,YAAY;AAChB,QAAI;AACJ,QAAI,aAAa,UAAU,UAAU;AACnC,cAAQ,UAAU,SAAS,QAAQ;AAAA,IACrC,OAAO;AACL,cAAQ,SAASC,SAAQ;AAAA,MAAC;AAAA,IAC5B;AAGA,QAAI,aAAa;AACjB,QAAI,cAAc;AAClB,QAAI,WAAW;AAAf,QACE,mBAAmB,SAAS;AAC9B,QAAI,iBAAiB,yBAAqB;AAA1C,QACE,uBAAuB,eAAe;AADxC,QAEE,4BAA4B,eAAe;AAF7C,QAGE,6BAA6B,eAAe;AAH9C,QAIE,qCAAqC,eAAe;AAGtD,QAAI;AACJ,QAAI;AACJ,QAAIC;AACJ,+BAAoB,UAAU,MAAM;AACpC,QAAI,iBAAiB,YAAY;AACjC,QAAI,eAAe,CAAC,SAAS,SAAS,WAAW,SAAS,QAAQ;AAClE,aAASC,iBAAgB,SAAS,OAAO,IAAI;AAG3C,UAAI,OAAO,QAAQ,oBAAoB;AAAY,eAAO,QAAQ,gBAAgB,OAAO,EAAE;AAM3F,UAAI,CAAC,QAAQ,WAAW,CAAC,QAAQ,QAAQ;AAAQ,gBAAQ,GAAG,OAAO,EAAE;AAAA,eAAW,MAAM,QAAQ,QAAQ,QAAQ,MAAM;AAAG,gBAAQ,QAAQ,OAAO,QAAQ,EAAE;AAAA;AAAO,gBAAQ,QAAQ,SAAS,CAAC,IAAI,QAAQ,QAAQ,MAAM;AAAA,IACrN;AACA,aAAS,cAAc,SAAS,QAAQ,UAAU;AAChD,eAAS,UAAU;AACnB,gBAAU,WAAW,CAAC;AAOtB,UAAI,OAAO,aAAa;AAAW,mBAAW,kBAAkB;AAIhE,WAAK,aAAa,CAAC,CAAC,QAAQ;AAC5B,UAAI;AAAU,aAAK,aAAa,KAAK,cAAc,CAAC,CAAC,QAAQ;AAI7D,WAAK,gBAAgB,iBAAiB,MAAM,SAAS,yBAAyB,QAAQ;AAKtF,WAAK,SAAS,IAAI,WAAW;AAC7B,WAAK,SAAS;AACd,WAAK,QAAQ;AACb,WAAK,aAAa;AAClB,WAAK,UAAU;AACf,WAAK,QAAQ;AACb,WAAK,aAAa;AAClB,WAAK,UAAU;AAMf,WAAK,OAAO;AAIZ,WAAK,eAAe;AACpB,WAAK,kBAAkB;AACvB,WAAK,oBAAoB;AACzB,WAAK,kBAAkB;AACvB,WAAK,SAAS;AAGd,WAAK,YAAY,QAAQ,cAAc;AAGvC,WAAK,cAAc,CAAC,CAAC,QAAQ;AAG7B,WAAK,YAAY;AAKjB,WAAK,kBAAkB,QAAQ,mBAAmB;AAGlD,WAAK,aAAa;AAGlB,WAAK,cAAc;AACnB,WAAK,UAAU;AACf,WAAK,WAAW;AAChB,UAAI,QAAQ,UAAU;AACpB,YAAI,CAAC;AAAe,0BAAgB,yBAA2B;AAC/D,aAAK,UAAU,IAAI,cAAc,QAAQ,QAAQ;AACjD,aAAK,WAAW,QAAQ;AAAA,MAC1B;AAAA,IACF;AACA,aAAS,SAAS,SAAS;AACzB,eAAS,UAAU;AACnB,UAAI,EAAE,gBAAgB;AAAW,eAAO,IAAI,SAAS,OAAO;AAI5D,UAAI,WAAW,gBAAgB;AAC/B,WAAK,iBAAiB,IAAI,cAAc,SAAS,MAAM,QAAQ;AAG/D,WAAK,WAAW;AAChB,UAAI,SAAS;AACX,YAAI,OAAO,QAAQ,SAAS;AAAY,eAAK,QAAQ,QAAQ;AAC7D,YAAI,OAAO,QAAQ,YAAY;AAAY,eAAK,WAAW,QAAQ;AAAA,MACrE;AACA,aAAO,KAAK,IAAI;AAAA,IAClB;AACA,WAAO,eAAe,SAAS,WAAW,aAAa;AAAA,MAIrD,YAAY;AAAA,MACZ,KAAK,SAASC,OAAM;AAClB,YAAI,KAAK,mBAAmB,QAAW;AACrC,iBAAO;AAAA,QACT;AACA,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,MACA,KAAK,SAASC,KAAI,OAAO;AAGvB,YAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,QACF;AAIA,aAAK,eAAe,YAAY;AAAA,MAClC;AAAA,IACF,CAAC;AACD,aAAS,UAAU,UAAU,YAAY;AACzC,aAAS,UAAU,aAAa,YAAY;AAC5C,aAAS,UAAU,WAAW,SAAU,KAAK,IAAI;AAC/C,SAAG,GAAG;AAAA,IACR;AAMA,aAAS,UAAU,OAAO,SAAU,OAAO,UAAU;AACnD,UAAI,QAAQ,KAAK;AACjB,UAAI;AACJ,UAAI,CAAC,MAAM,YAAY;AACrB,YAAI,OAAO,UAAU,UAAU;AAC7B,qBAAW,YAAY,MAAM;AAC7B,cAAI,aAAa,MAAM,UAAU;AAC/B,oBAAQL,QAAO,KAAK,OAAO,QAAQ;AACnC,uBAAW;AAAA,UACb;AACA,2BAAiB;AAAA,QACnB;AAAA,MACF,OAAO;AACL,yBAAiB;AAAA,MACnB;AACA,aAAO,iBAAiB,MAAM,OAAO,UAAU,OAAO,cAAc;AAAA,IACtE;AAGA,aAAS,UAAU,UAAU,SAAU,OAAO;AAC5C,aAAO,iBAAiB,MAAM,OAAO,MAAM,MAAM,KAAK;AAAA,IACxD;AACA,aAAS,iBAAiB,QAAQ,OAAO,UAAU,YAAY,gBAAgB;AAC7E,YAAM,oBAAoB,KAAK;AAC/B,UAAI,QAAQ,OAAO;AACnB,UAAI,UAAU,MAAM;AAClB,cAAM,UAAU;AAChB,mBAAW,QAAQ,KAAK;AAAA,MAC1B,OAAO;AACL,YAAI;AACJ,YAAI,CAAC;AAAgB,eAAK,aAAa,OAAO,KAAK;AACnD,YAAI,IAAI;AACN,yBAAe,QAAQ,EAAE;AAAA,QAC3B,WAAW,MAAM,cAAc,SAAS,MAAM,SAAS,GAAG;AACxD,cAAI,OAAO,UAAU,YAAY,CAAC,MAAM,cAAc,OAAO,eAAe,KAAK,MAAMA,QAAO,WAAW;AACvG,oBAAQ,oBAAoB,KAAK;AAAA,UACnC;AACA,cAAI,YAAY;AACd,gBAAI,MAAM;AAAY,6BAAe,QAAQ,IAAI,mCAAmC,CAAC;AAAA;AAAO,uBAAS,QAAQ,OAAO,OAAO,IAAI;AAAA,UACjI,WAAW,MAAM,OAAO;AACtB,2BAAe,QAAQ,IAAI,0BAA0B,CAAC;AAAA,UACxD,WAAW,MAAM,WAAW;AAC1B,mBAAO;AAAA,UACT,OAAO;AACL,kBAAM,UAAU;AAChB,gBAAI,MAAM,WAAW,CAAC,UAAU;AAC9B,sBAAQ,MAAM,QAAQ,MAAM,KAAK;AACjC,kBAAI,MAAM,cAAc,MAAM,WAAW;AAAG,yBAAS,QAAQ,OAAO,OAAO,KAAK;AAAA;AAAO,8BAAc,QAAQ,KAAK;AAAA,YACpH,OAAO;AACL,uBAAS,QAAQ,OAAO,OAAO,KAAK;AAAA,YACtC;AAAA,UACF;AAAA,QACF,WAAW,CAAC,YAAY;AACtB,gBAAM,UAAU;AAChB,wBAAc,QAAQ,KAAK;AAAA,QAC7B;AAAA,MACF;AAKA,aAAO,CAAC,MAAM,UAAU,MAAM,SAAS,MAAM,iBAAiB,MAAM,WAAW;AAAA,IACjF;AACA,aAAS,SAAS,QAAQ,OAAO,OAAO,YAAY;AAClD,UAAI,MAAM,WAAW,MAAM,WAAW,KAAK,CAAC,MAAM,MAAM;AACtD,cAAM,aAAa;AACnB,eAAO,KAAK,QAAQ,KAAK;AAAA,MAC3B,OAAO;AAEL,cAAM,UAAU,MAAM,aAAa,IAAI,MAAM;AAC7C,YAAI;AAAY,gBAAM,OAAO,QAAQ,KAAK;AAAA;AAAO,gBAAM,OAAO,KAAK,KAAK;AACxE,YAAI,MAAM;AAAc,uBAAa,MAAM;AAAA,MAC7C;AACA,oBAAc,QAAQ,KAAK;AAAA,IAC7B;AACA,aAAS,aAAa,OAAO,OAAO;AAClC,UAAI;AACJ,UAAI,CAAC,cAAc,KAAK,KAAK,OAAO,UAAU,YAAY,UAAU,UAAa,CAAC,MAAM,YAAY;AAClG,aAAK,IAAI,qBAAqB,SAAS,CAAC,UAAU,UAAU,YAAY,GAAG,KAAK;AAAA,MAClF;AACA,aAAO;AAAA,IACT;AACA,aAAS,UAAU,WAAW,WAAY;AACxC,aAAO,KAAK,eAAe,YAAY;AAAA,IACzC;AAGA,aAAS,UAAU,cAAc,SAAU,KAAK;AAC9C,UAAI,CAAC;AAAe,wBAAgB,yBAA2B;AAC/D,UAAI,UAAU,IAAI,cAAc,GAAG;AACnC,WAAK,eAAe,UAAU;AAE9B,WAAK,eAAe,WAAW,KAAK,eAAe,QAAQ;AAG3D,UAAI,IAAI,KAAK,eAAe,OAAO;AACnC,UAAI,UAAU;AACd,aAAO,MAAM,MAAM;AACjB,mBAAW,QAAQ,MAAM,EAAE,IAAI;AAC/B,YAAI,EAAE;AAAA,MACR;AACA,WAAK,eAAe,OAAO,MAAM;AACjC,UAAI,YAAY;AAAI,aAAK,eAAe,OAAO,KAAK,OAAO;AAC3D,WAAK,eAAe,SAAS,QAAQ;AACrC,aAAO;AAAA,IACT;AAGA,QAAI,UAAU;AACd,aAAS,wBAAwB,GAAG;AAClC,UAAI,KAAK,SAAS;AAEhB,YAAI;AAAA,MACN,OAAO;AAGL;AACA,aAAK,MAAM;AACX,aAAK,MAAM;AACX,aAAK,MAAM;AACX,aAAK,MAAM;AACX,aAAK,MAAM;AACX;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAIA,aAAS,cAAc,GAAG,OAAO;AAC/B,UAAI,KAAK,KAAK,MAAM,WAAW,KAAK,MAAM;AAAO,eAAO;AACxD,UAAI,MAAM;AAAY,eAAO;AAC7B,UAAI,MAAM,GAAG;AAEX,YAAI,MAAM,WAAW,MAAM;AAAQ,iBAAO,MAAM,OAAO,KAAK,KAAK;AAAA;AAAY,iBAAO,MAAM;AAAA,MAC5F;AAEA,UAAI,IAAI,MAAM;AAAe,cAAM,gBAAgB,wBAAwB,CAAC;AAC5E,UAAI,KAAK,MAAM;AAAQ,eAAO;AAE9B,UAAI,CAAC,MAAM,OAAO;AAChB,cAAM,eAAe;AACrB,eAAO;AAAA,MACT;AACA,aAAO,MAAM;AAAA,IACf;AAGA,aAAS,UAAU,OAAO,SAAU,GAAG;AACrC,YAAM,QAAQ,CAAC;AACf,UAAI,SAAS,GAAG,EAAE;AAClB,UAAI,QAAQ,KAAK;AACjB,UAAI,QAAQ;AACZ,UAAI,MAAM;AAAG,cAAM,kBAAkB;AAKrC,UAAI,MAAM,KAAK,MAAM,kBAAkB,MAAM,kBAAkB,IAAI,MAAM,UAAU,MAAM,gBAAgB,MAAM,SAAS,MAAM,MAAM,QAAQ;AAC1I,cAAM,sBAAsB,MAAM,QAAQ,MAAM,KAAK;AACrD,YAAI,MAAM,WAAW,KAAK,MAAM;AAAO,sBAAY,IAAI;AAAA;AAAO,uBAAa,IAAI;AAC/E,eAAO;AAAA,MACT;AACA,UAAI,cAAc,GAAG,KAAK;AAG1B,UAAI,MAAM,KAAK,MAAM,OAAO;AAC1B,YAAI,MAAM,WAAW;AAAG,sBAAY,IAAI;AACxC,eAAO;AAAA,MACT;AAyBA,UAAI,SAAS,MAAM;AACnB,YAAM,iBAAiB,MAAM;AAG7B,UAAI,MAAM,WAAW,KAAK,MAAM,SAAS,IAAI,MAAM,eAAe;AAChE,iBAAS;AACT,cAAM,8BAA8B,MAAM;AAAA,MAC5C;AAIA,UAAI,MAAM,SAAS,MAAM,SAAS;AAChC,iBAAS;AACT,cAAM,oBAAoB,MAAM;AAAA,MAClC,WAAW,QAAQ;AACjB,cAAM,SAAS;AACf,cAAM,UAAU;AAChB,cAAM,OAAO;AAEb,YAAI,MAAM,WAAW;AAAG,gBAAM,eAAe;AAE7C,aAAK,MAAM,MAAM,aAAa;AAC9B,cAAM,OAAO;AAGb,YAAI,CAAC,MAAM;AAAS,cAAI,cAAc,OAAO,KAAK;AAAA,MACpD;AACA,UAAI;AACJ,UAAI,IAAI;AAAG,cAAM,SAAS,GAAG,KAAK;AAAA;AAAO,cAAM;AAC/C,UAAI,QAAQ,MAAM;AAChB,cAAM,eAAe,MAAM,UAAU,MAAM;AAC3C,YAAI;AAAA,MACN,OAAO;AACL,cAAM,UAAU;AAChB,cAAM,aAAa;AAAA,MACrB;AACA,UAAI,MAAM,WAAW,GAAG;AAGtB,YAAI,CAAC,MAAM;AAAO,gBAAM,eAAe;AAGvC,YAAI,UAAU,KAAK,MAAM;AAAO,sBAAY,IAAI;AAAA,MAClD;AACA,UAAI,QAAQ;AAAM,aAAK,KAAK,QAAQ,GAAG;AACvC,aAAO;AAAA,IACT;AACA,aAAS,WAAW,QAAQ,OAAO;AACjC,YAAM,YAAY;AAClB,UAAI,MAAM;AAAO;AACjB,UAAI,MAAM,SAAS;AACjB,YAAI,QAAQ,MAAM,QAAQ,IAAI;AAC9B,YAAI,SAAS,MAAM,QAAQ;AACzB,gBAAM,OAAO,KAAK,KAAK;AACvB,gBAAM,UAAU,MAAM,aAAa,IAAI,MAAM;AAAA,QAC/C;AAAA,MACF;AACA,YAAM,QAAQ;AACd,UAAI,MAAM,MAAM;AAId,qBAAa,MAAM;AAAA,MACrB,OAAO;AAEL,cAAM,eAAe;AACrB,YAAI,CAAC,MAAM,iBAAiB;AAC1B,gBAAM,kBAAkB;AACxB,wBAAc,MAAM;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAKA,aAAS,aAAa,QAAQ;AAC5B,UAAI,QAAQ,OAAO;AACnB,YAAM,gBAAgB,MAAM,cAAc,MAAM,eAAe;AAC/D,YAAM,eAAe;AACrB,UAAI,CAAC,MAAM,iBAAiB;AAC1B,cAAM,gBAAgB,MAAM,OAAO;AACnC,cAAM,kBAAkB;AACxB,gBAAQ,SAAS,eAAe,MAAM;AAAA,MACxC;AAAA,IACF;AACA,aAAS,cAAc,QAAQ;AAC7B,UAAI,QAAQ,OAAO;AACnB,YAAM,iBAAiB,MAAM,WAAW,MAAM,QAAQ,MAAM,KAAK;AACjE,UAAI,CAAC,MAAM,cAAc,MAAM,UAAU,MAAM,QAAQ;AACrD,eAAO,KAAK,UAAU;AACtB,cAAM,kBAAkB;AAAA,MAC1B;AAQA,YAAM,eAAe,CAAC,MAAM,WAAW,CAAC,MAAM,SAAS,MAAM,UAAU,MAAM;AAC7E,WAAK,MAAM;AAAA,IACb;AAQA,aAAS,cAAc,QAAQ,OAAO;AACpC,UAAI,CAAC,MAAM,aAAa;AACtB,cAAM,cAAc;AACpB,gBAAQ,SAAS,gBAAgB,QAAQ,KAAK;AAAA,MAChD;AAAA,IACF;AACA,aAAS,eAAe,QAAQ,OAAO;AAwBrC,aAAO,CAAC,MAAM,WAAW,CAAC,MAAM,UAAU,MAAM,SAAS,MAAM,iBAAiB,MAAM,WAAW,MAAM,WAAW,IAAI;AACpH,YAAI,MAAM,MAAM;AAChB,cAAM,sBAAsB;AAC5B,eAAO,KAAK,CAAC;AACb,YAAI,QAAQ,MAAM;AAEhB;AAAA,MACJ;AACA,YAAM,cAAc;AAAA,IACtB;AAMA,aAAS,UAAU,QAAQ,SAAU,GAAG;AACtC,qBAAe,MAAM,IAAI,2BAA2B,SAAS,CAAC;AAAA,IAChE;AACA,aAAS,UAAU,OAAO,SAAU,MAAM,UAAU;AAClD,UAAI,MAAM;AACV,UAAI,QAAQ,KAAK;AACjB,cAAQ,MAAM,YAAY;AAAA,QACxB,KAAK;AACH,gBAAM,QAAQ;AACd;AAAA,QACF,KAAK;AACH,gBAAM,QAAQ,CAAC,MAAM,OAAO,IAAI;AAChC;AAAA,QACF;AACE,gBAAM,MAAM,KAAK,IAAI;AACrB;AAAA,MACJ;AACA,YAAM,cAAc;AACpB,YAAM,yBAAyB,MAAM,YAAY,QAAQ;AACzD,UAAI,SAAS,CAAC,YAAY,SAAS,QAAQ,UAAU,SAAS,QAAQ,UAAU,SAAS,QAAQ;AACjG,UAAI,QAAQ,QAAQ,QAAQ;AAC5B,UAAI,MAAM;AAAY,gBAAQ,SAAS,KAAK;AAAA;AAAO,YAAI,KAAK,OAAO,KAAK;AACxE,WAAK,GAAG,UAAU,QAAQ;AAC1B,eAAS,SAAS,UAAU,YAAY;AACtC,cAAM,UAAU;AAChB,YAAI,aAAa,KAAK;AACpB,cAAI,cAAc,WAAW,eAAe,OAAO;AACjD,uBAAW,aAAa;AACxB,oBAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AACA,eAAS,QAAQ;AACf,cAAM,OAAO;AACb,aAAK,IAAI;AAAA,MACX;AAMA,UAAI,UAAU,YAAY,GAAG;AAC7B,WAAK,GAAG,SAAS,OAAO;AACxB,UAAI,YAAY;AAChB,eAAS,UAAU;AACjB,cAAM,SAAS;AAEf,aAAK,eAAe,SAAS,OAAO;AACpC,aAAK,eAAe,UAAU,QAAQ;AACtC,aAAK,eAAe,SAAS,OAAO;AACpC,aAAK,eAAe,SAAS,OAAO;AACpC,aAAK,eAAe,UAAU,QAAQ;AACtC,YAAI,eAAe,OAAO,KAAK;AAC/B,YAAI,eAAe,OAAO,MAAM;AAChC,YAAI,eAAe,QAAQ,MAAM;AACjC,oBAAY;AAOZ,YAAI,MAAM,eAAe,CAAC,KAAK,kBAAkB,KAAK,eAAe;AAAY,kBAAQ;AAAA,MAC3F;AACA,UAAI,GAAG,QAAQ,MAAM;AACrB,eAAS,OAAO,OAAO;AACrB,cAAM,QAAQ;AACd,YAAI,MAAM,KAAK,MAAM,KAAK;AAC1B,cAAM,cAAc,GAAG;AACvB,YAAI,QAAQ,OAAO;AAKjB,eAAK,MAAM,eAAe,KAAK,MAAM,UAAU,QAAQ,MAAM,aAAa,KAAKM,SAAQ,MAAM,OAAO,IAAI,MAAM,OAAO,CAAC,WAAW;AAC/H,kBAAM,+BAA+B,MAAM,UAAU;AACrD,kBAAM;AAAA,UACR;AACA,cAAI,MAAM;AAAA,QACZ;AAAA,MACF;AAIA,eAAS,QAAQ,IAAI;AACnB,cAAM,WAAW,EAAE;AACnB,eAAO;AACP,aAAK,eAAe,SAAS,OAAO;AACpC,YAAI,gBAAgB,MAAM,OAAO,MAAM;AAAG,yBAAe,MAAM,EAAE;AAAA,MACnE;AAGA,MAAAH,iBAAgB,MAAM,SAAS,OAAO;AAGtC,eAAS,UAAU;AACjB,aAAK,eAAe,UAAU,QAAQ;AACtC,eAAO;AAAA,MACT;AACA,WAAK,KAAK,SAAS,OAAO;AAC1B,eAAS,WAAW;AAClB,cAAM,UAAU;AAChB,aAAK,eAAe,SAAS,OAAO;AACpC,eAAO;AAAA,MACT;AACA,WAAK,KAAK,UAAU,QAAQ;AAC5B,eAAS,SAAS;AAChB,cAAM,QAAQ;AACd,YAAI,OAAO,IAAI;AAAA,MACjB;AAGA,WAAK,KAAK,QAAQ,GAAG;AAGrB,UAAI,CAAC,MAAM,SAAS;AAClB,cAAM,aAAa;AACnB,YAAI,OAAO;AAAA,MACb;AACA,aAAO;AAAA,IACT;AACA,aAAS,YAAY,KAAK;AACxB,aAAO,SAAS,4BAA4B;AAC1C,YAAI,QAAQ,IAAI;AAChB,cAAM,eAAe,MAAM,UAAU;AACrC,YAAI,MAAM;AAAY,gBAAM;AAC5B,YAAI,MAAM,eAAe,KAAK,gBAAgB,KAAK,MAAM,GAAG;AAC1D,gBAAM,UAAU;AAChB,eAAK,GAAG;AAAA,QACV;AAAA,MACF;AAAA,IACF;AACA,aAAS,UAAU,SAAS,SAAU,MAAM;AAC1C,UAAI,QAAQ,KAAK;AACjB,UAAI,aAAa;AAAA,QACf,YAAY;AAAA,MACd;AAGA,UAAI,MAAM,eAAe;AAAG,eAAO;AAGnC,UAAI,MAAM,eAAe,GAAG;AAE1B,YAAI,QAAQ,SAAS,MAAM;AAAO,iBAAO;AACzC,YAAI,CAAC;AAAM,iBAAO,MAAM;AAGxB,cAAM,QAAQ;AACd,cAAM,aAAa;AACnB,cAAM,UAAU;AAChB,YAAI;AAAM,eAAK,KAAK,UAAU,MAAM,UAAU;AAC9C,eAAO;AAAA,MACT;AAIA,UAAI,CAAC,MAAM;AAET,YAAI,QAAQ,MAAM;AAClB,YAAI,MAAM,MAAM;AAChB,cAAM,QAAQ;AACd,cAAM,aAAa;AACnB,cAAM,UAAU;AAChB,iBAAS,IAAI,GAAG,IAAI,KAAK;AAAK,gBAAM,GAAG,KAAK,UAAU,MAAM;AAAA,YAC1D,YAAY;AAAA,UACd,CAAC;AACD,eAAO;AAAA,MACT;AAGA,UAAI,QAAQG,SAAQ,MAAM,OAAO,IAAI;AACrC,UAAI,UAAU;AAAI,eAAO;AACzB,YAAM,MAAM,OAAO,OAAO,CAAC;AAC3B,YAAM,cAAc;AACpB,UAAI,MAAM,eAAe;AAAG,cAAM,QAAQ,MAAM,MAAM;AACtD,WAAK,KAAK,UAAU,MAAM,UAAU;AACpC,aAAO;AAAA,IACT;AAIA,aAAS,UAAU,KAAK,SAAU,IAAI,IAAI;AACxC,UAAI,MAAM,OAAO,UAAU,GAAG,KAAK,MAAM,IAAI,EAAE;AAC/C,UAAI,QAAQ,KAAK;AACjB,UAAI,OAAO,QAAQ;AAGjB,cAAM,oBAAoB,KAAK,cAAc,UAAU,IAAI;AAG3D,YAAI,MAAM,YAAY;AAAO,eAAK,OAAO;AAAA,MAC3C,WAAW,OAAO,YAAY;AAC5B,YAAI,CAAC,MAAM,cAAc,CAAC,MAAM,mBAAmB;AACjD,gBAAM,oBAAoB,MAAM,eAAe;AAC/C,gBAAM,UAAU;AAChB,gBAAM,kBAAkB;AACxB,gBAAM,eAAe,MAAM,QAAQ,MAAM,OAAO;AAChD,cAAI,MAAM,QAAQ;AAChB,yBAAa,IAAI;AAAA,UACnB,WAAW,CAAC,MAAM,SAAS;AACzB,oBAAQ,SAAS,kBAAkB,IAAI;AAAA,UACzC;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,aAAS,UAAU,cAAc,SAAS,UAAU;AACpD,aAAS,UAAU,iBAAiB,SAAU,IAAI,IAAI;AACpD,UAAI,MAAM,OAAO,UAAU,eAAe,KAAK,MAAM,IAAI,EAAE;AAC3D,UAAI,OAAO,YAAY;AAOrB,gBAAQ,SAAS,yBAAyB,IAAI;AAAA,MAChD;AACA,aAAO;AAAA,IACT;AACA,aAAS,UAAU,qBAAqB,SAAU,IAAI;AACpD,UAAI,MAAM,OAAO,UAAU,mBAAmB,MAAM,MAAM,SAAS;AACnE,UAAI,OAAO,cAAc,OAAO,QAAW;AAOzC,gBAAQ,SAAS,yBAAyB,IAAI;AAAA,MAChD;AACA,aAAO;AAAA,IACT;AACA,aAAS,wBAAwBC,OAAM;AACrC,UAAI,QAAQA,MAAK;AACjB,YAAM,oBAAoBA,MAAK,cAAc,UAAU,IAAI;AAC3D,UAAI,MAAM,mBAAmB,CAAC,MAAM,QAAQ;AAG1C,cAAM,UAAU;AAAA,MAGlB,WAAWA,MAAK,cAAc,MAAM,IAAI,GAAG;AACzC,QAAAA,MAAK,OAAO;AAAA,MACd;AAAA,IACF;AACA,aAAS,iBAAiBA,OAAM;AAC9B,YAAM,0BAA0B;AAChC,MAAAA,MAAK,KAAK,CAAC;AAAA,IACb;AAIA,aAAS,UAAU,SAAS,WAAY;AACtC,UAAI,QAAQ,KAAK;AACjB,UAAI,CAAC,MAAM,SAAS;AAClB,cAAM,QAAQ;AAId,cAAM,UAAU,CAAC,MAAM;AACvB,eAAO,MAAM,KAAK;AAAA,MACpB;AACA,YAAM,SAAS;AACf,aAAO;AAAA,IACT;AACA,aAAS,OAAO,QAAQ,OAAO;AAC7B,UAAI,CAAC,MAAM,iBAAiB;AAC1B,cAAM,kBAAkB;AACxB,gBAAQ,SAAS,SAAS,QAAQ,KAAK;AAAA,MACzC;AAAA,IACF;AACA,aAAS,QAAQ,QAAQ,OAAO;AAC9B,YAAM,UAAU,MAAM,OAAO;AAC7B,UAAI,CAAC,MAAM,SAAS;AAClB,eAAO,KAAK,CAAC;AAAA,MACf;AACA,YAAM,kBAAkB;AACxB,aAAO,KAAK,QAAQ;AACpB,WAAK,MAAM;AACX,UAAI,MAAM,WAAW,CAAC,MAAM;AAAS,eAAO,KAAK,CAAC;AAAA,IACpD;AACA,aAAS,UAAU,QAAQ,WAAY;AACrC,YAAM,yBAAyB,KAAK,eAAe,OAAO;AAC1D,UAAI,KAAK,eAAe,YAAY,OAAO;AACzC,cAAM,OAAO;AACb,aAAK,eAAe,UAAU;AAC9B,aAAK,KAAK,OAAO;AAAA,MACnB;AACA,WAAK,eAAe,SAAS;AAC7B,aAAO;AAAA,IACT;AACA,aAAS,KAAK,QAAQ;AACpB,UAAI,QAAQ,OAAO;AACnB,YAAM,QAAQ,MAAM,OAAO;AAC3B,aAAO,MAAM,WAAW,OAAO,KAAK,MAAM;AAAK;AAAA,IACjD;AAKA,aAAS,UAAU,OAAO,SAAU,QAAQ;AAC1C,UAAI,QAAQ;AACZ,UAAI,QAAQ,KAAK;AACjB,UAAI,SAAS;AACb,aAAO,GAAG,OAAO,WAAY;AAC3B,cAAM,aAAa;AACnB,YAAI,MAAM,WAAW,CAAC,MAAM,OAAO;AACjC,cAAI,QAAQ,MAAM,QAAQ,IAAI;AAC9B,cAAI,SAAS,MAAM;AAAQ,kBAAM,KAAK,KAAK;AAAA,QAC7C;AACA,cAAM,KAAK,IAAI;AAAA,MACjB,CAAC;AACD,aAAO,GAAG,QAAQ,SAAU,OAAO;AACjC,cAAM,cAAc;AACpB,YAAI,MAAM;AAAS,kBAAQ,MAAM,QAAQ,MAAM,KAAK;AAGpD,YAAI,MAAM,eAAe,UAAU,QAAQ,UAAU;AAAY;AAAA,iBAAgB,CAAC,MAAM,eAAe,CAAC,SAAS,CAAC,MAAM;AAAS;AACjI,YAAI,MAAM,MAAM,KAAK,KAAK;AAC1B,YAAI,CAAC,KAAK;AACR,mBAAS;AACT,iBAAO,MAAM;AAAA,QACf;AAAA,MACF,CAAC;AAID,eAAS,KAAK,QAAQ;AACpB,YAAI,KAAK,OAAO,UAAa,OAAO,OAAO,OAAO,YAAY;AAC5D,eAAK,KAAK,SAAS,WAAW,QAAQ;AACpC,mBAAO,SAAS,2BAA2B;AACzC,qBAAO,OAAO,QAAQ,MAAM,QAAQ,SAAS;AAAA,YAC/C;AAAA,UACF,EAAE,CAAC;AAAA,QACL;AAAA,MACF;AAGA,eAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,eAAO,GAAG,aAAa,IAAI,KAAK,KAAK,KAAK,MAAM,aAAa,EAAE,CAAC;AAAA,MAClE;AAIA,WAAK,QAAQ,SAAUC,IAAG;AACxB,cAAM,iBAAiBA,EAAC;AACxB,YAAI,QAAQ;AACV,mBAAS;AACT,iBAAO,OAAO;AAAA,QAChB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,QAAI,OAAO,WAAW,YAAY;AAChC,eAAS,UAAU,OAAO,iBAAiB,WAAY;AACrD,YAAI,sCAAsC,QAAW;AACnD,8CAAoC;AAAA,QACtC;AACA,eAAO,kCAAkC,IAAI;AAAA,MAC/C;AAAA,IACF;AACA,WAAO,eAAe,SAAS,WAAW,yBAAyB;AAAA,MAIjE,YAAY;AAAA,MACZ,KAAK,SAASJ,OAAM;AAClB,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,IACF,CAAC;AACD,WAAO,eAAe,SAAS,WAAW,kBAAkB;AAAA,MAI1D,YAAY;AAAA,MACZ,KAAK,SAASA,OAAM;AAClB,eAAO,KAAK,kBAAkB,KAAK,eAAe;AAAA,MACpD;AAAA,IACF,CAAC;AACD,WAAO,eAAe,SAAS,WAAW,mBAAmB;AAAA,MAI3D,YAAY;AAAA,MACZ,KAAK,SAASA,OAAM;AAClB,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,MACA,KAAK,SAASC,KAAI,OAAO;AACvB,YAAI,KAAK,gBAAgB;AACvB,eAAK,eAAe,UAAU;AAAA,QAChC;AAAA,MACF;AAAA,IACF,CAAC;AAGD,aAAS,YAAY;AACrB,WAAO,eAAe,SAAS,WAAW,kBAAkB;AAAA,MAI1D,YAAY;AAAA,MACZ,KAAK,SAASD,OAAM;AAClB,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,IACF,CAAC;AAMD,aAAS,SAAS,GAAG,OAAO;AAE1B,UAAI,MAAM,WAAW;AAAG,eAAO;AAC/B,UAAI;AACJ,UAAI,MAAM;AAAY,cAAM,MAAM,OAAO,MAAM;AAAA,eAAW,CAAC,KAAK,KAAK,MAAM,QAAQ;AAEjF,YAAI,MAAM;AAAS,gBAAM,MAAM,OAAO,KAAK,EAAE;AAAA,iBAAW,MAAM,OAAO,WAAW;AAAG,gBAAM,MAAM,OAAO,MAAM;AAAA;AAAO,gBAAM,MAAM,OAAO,OAAO,MAAM,MAAM;AACzJ,cAAM,OAAO,MAAM;AAAA,MACrB,OAAO;AAEL,cAAM,MAAM,OAAO,QAAQ,GAAG,MAAM,OAAO;AAAA,MAC7C;AACA,aAAO;AAAA,IACT;AACA,aAAS,YAAY,QAAQ;AAC3B,UAAI,QAAQ,OAAO;AACnB,YAAM,eAAe,MAAM,UAAU;AACrC,UAAI,CAAC,MAAM,YAAY;AACrB,cAAM,QAAQ;AACd,gBAAQ,SAAS,eAAe,OAAO,MAAM;AAAA,MAC/C;AAAA,IACF;AACA,aAAS,cAAc,OAAO,QAAQ;AACpC,YAAM,iBAAiB,MAAM,YAAY,MAAM,MAAM;AAGrD,UAAI,CAAC,MAAM,cAAc,MAAM,WAAW,GAAG;AAC3C,cAAM,aAAa;AACnB,eAAO,WAAW;AAClB,eAAO,KAAK,KAAK;AACjB,YAAI,MAAM,aAAa;AAGrB,cAAI,SAAS,OAAO;AACpB,cAAI,CAAC,UAAU,OAAO,eAAe,OAAO,UAAU;AACpD,mBAAO,QAAQ;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,QAAI,OAAO,WAAW,YAAY;AAChC,eAAS,OAAO,SAAU,UAAU,MAAM;AACxC,YAAIF,UAAS,QAAW;AACtB,UAAAA,QAAO;AAAA,QACT;AACA,eAAOA,MAAK,UAAU,UAAU,IAAI;AAAA,MACtC;AAAA,IACF;AACA,aAASI,SAAQ,IAAI,GAAG;AACtB,eAAS,IAAI,GAAG,IAAI,GAAG,QAAQ,IAAI,GAAG,KAAK;AACzC,YAAI,GAAG,OAAO;AAAG,iBAAO;AAAA,MAC1B;AACA,aAAO;AAAA,IACT;AAAA;AAAA;;;AClgCA;AAAA;AAAA;AAAA;AAAA;AAiEA,WAAO,UAAU;AACjB,QAAI,iBAAiB,yBAAqB;AAA1C,QACE,6BAA6B,eAAe;AAD9C,QAEE,wBAAwB,eAAe;AAFzC,QAGE,qCAAqC,eAAe;AAHtD,QAIE,8BAA8B,eAAe;AAC/C,QAAI,SAAS;AACb,+BAAoB,WAAW,MAAM;AACrC,aAAS,eAAe,IAAI,MAAM;AAChC,UAAI,KAAK,KAAK;AACd,SAAG,eAAe;AAClB,UAAI,KAAK,GAAG;AACZ,UAAI,OAAO,MAAM;AACf,eAAO,KAAK,KAAK,SAAS,IAAI,sBAAsB,CAAC;AAAA,MACvD;AACA,SAAG,aAAa;AAChB,SAAG,UAAU;AACb,UAAI,QAAQ;AAEV,aAAK,KAAK,IAAI;AAChB,SAAG,EAAE;AACL,UAAI,KAAK,KAAK;AACd,SAAG,UAAU;AACb,UAAI,GAAG,gBAAgB,GAAG,SAAS,GAAG,eAAe;AACnD,aAAK,MAAM,GAAG,aAAa;AAAA,MAC7B;AAAA,IACF;AACA,aAAS,UAAU,SAAS;AAC1B,UAAI,EAAE,gBAAgB;AAAY,eAAO,IAAI,UAAU,OAAO;AAC9D,aAAO,KAAK,MAAM,OAAO;AACzB,WAAK,kBAAkB;AAAA,QACrB,gBAAgB,eAAe,KAAK,IAAI;AAAA,QACxC,eAAe;AAAA,QACf,cAAc;AAAA,QACd,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,eAAe;AAAA,MACjB;AAGA,WAAK,eAAe,eAAe;AAKnC,WAAK,eAAe,OAAO;AAC3B,UAAI,SAAS;AACX,YAAI,OAAO,QAAQ,cAAc;AAAY,eAAK,aAAa,QAAQ;AACvE,YAAI,OAAO,QAAQ,UAAU;AAAY,eAAK,SAAS,QAAQ;AAAA,MACjE;AAGA,WAAK,GAAG,aAAa,SAAS;AAAA,IAChC;AACA,aAAS,YAAY;AACnB,UAAI,QAAQ;AACZ,UAAI,OAAO,KAAK,WAAW,cAAc,CAAC,KAAK,eAAe,WAAW;AACvE,aAAK,OAAO,SAAU,IAAI,MAAM;AAC9B,eAAK,OAAO,IAAI,IAAI;AAAA,QACtB,CAAC;AAAA,MACH,OAAO;AACL,aAAK,MAAM,MAAM,IAAI;AAAA,MACvB;AAAA,IACF;AACA,cAAU,UAAU,OAAO,SAAU,OAAO,UAAU;AACpD,WAAK,gBAAgB,gBAAgB;AACrC,aAAO,OAAO,UAAU,KAAK,KAAK,MAAM,OAAO,QAAQ;AAAA,IACzD;AAYA,cAAU,UAAU,aAAa,SAAU,OAAO,UAAU,IAAI;AAC9D,SAAG,IAAI,2BAA2B,cAAc,CAAC;AAAA,IACnD;AACA,cAAU,UAAU,SAAS,SAAU,OAAO,UAAU,IAAI;AAC1D,UAAI,KAAK,KAAK;AACd,SAAG,UAAU;AACb,SAAG,aAAa;AAChB,SAAG,gBAAgB;AACnB,UAAI,CAAC,GAAG,cAAc;AACpB,YAAI,KAAK,KAAK;AACd,YAAI,GAAG,iBAAiB,GAAG,gBAAgB,GAAG,SAAS,GAAG;AAAe,eAAK,MAAM,GAAG,aAAa;AAAA,MACtG;AAAA,IACF;AAKA,cAAU,UAAU,QAAQ,SAAU,GAAG;AACvC,UAAI,KAAK,KAAK;AACd,UAAI,GAAG,eAAe,QAAQ,CAAC,GAAG,cAAc;AAC9C,WAAG,eAAe;AAClB,aAAK,WAAW,GAAG,YAAY,GAAG,eAAe,GAAG,cAAc;AAAA,MACpE,OAAO;AAGL,WAAG,gBAAgB;AAAA,MACrB;AAAA,IACF;AACA,cAAU,UAAU,WAAW,SAAU,KAAK,IAAI;AAChD,aAAO,UAAU,SAAS,KAAK,MAAM,KAAK,SAAU,MAAM;AACxD,WAAG,IAAI;AAAA,MACT,CAAC;AAAA,IACH;AACA,aAAS,KAAK,QAAQ,IAAI,MAAM;AAC9B,UAAI;AAAI,eAAO,OAAO,KAAK,SAAS,EAAE;AACtC,UAAI,QAAQ;AAEV,eAAO,KAAK,IAAI;AAKlB,UAAI,OAAO,eAAe;AAAQ,cAAM,IAAI,4BAA4B;AACxE,UAAI,OAAO,gBAAgB;AAAc,cAAM,IAAI,mCAAmC;AACtF,aAAO,OAAO,KAAK,IAAI;AAAA,IACzB;AAAA;AAAA;;;AC7LA;AAAA;AAAA;AAAA;AAAA;AA2BA,WAAO,UAAU;AACjB,QAAI,YAAY;AAChB,+BAAoB,aAAa,SAAS;AAC1C,aAAS,YAAY,SAAS;AAC5B,UAAI,EAAE,gBAAgB;AAAc,eAAO,IAAI,YAAY,OAAO;AAClE,gBAAU,KAAK,MAAM,OAAO;AAAA,IAC9B;AACA,gBAAY,UAAU,aAAa,SAAU,OAAO,UAAU,IAAI;AAChE,SAAG,MAAM,KAAK;AAAA,IAChB;AAAA;AAAA;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAKA,QAAI;AACJ,aAASG,MAAK,UAAU;AACtB,UAAI,SAAS;AACb,aAAO,WAAY;AACjB,YAAI;AAAQ;AACZ,iBAAS;AACT,iBAAS,MAAM,QAAQ,SAAS;AAAA,MAClC;AAAA,IACF;AACA,QAAI,iBAAiB,yBAA2B;AAAhD,QACE,mBAAmB,eAAe;AADpC,QAEE,uBAAuB,eAAe;AACxC,aAASC,MAAK,KAAK;AAEjB,UAAI;AAAK,cAAM;AAAA,IACjB;AACA,aAAS,UAAU,QAAQ;AACzB,aAAO,OAAO,aAAa,OAAO,OAAO,UAAU;AAAA,IACrD;AACA,aAAS,UAAU,QAAQ,SAAS,SAAS,UAAU;AACrD,iBAAWD,MAAK,QAAQ;AACxB,UAAI,SAAS;AACb,aAAO,GAAG,SAAS,WAAY;AAC7B,iBAAS;AAAA,MACX,CAAC;AACD,UAAI,QAAQ;AAAW,cAAM;AAC7B,UAAI,QAAQ;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,MACZ,GAAG,SAAU,KAAK;AAChB,YAAI;AAAK,iBAAO,SAAS,GAAG;AAC5B,iBAAS;AACT,iBAAS;AAAA,MACX,CAAC;AACD,UAAI,YAAY;AAChB,aAAO,SAAU,KAAK;AACpB,YAAI;AAAQ;AACZ,YAAI;AAAW;AACf,oBAAY;AAGZ,YAAI,UAAU,MAAM;AAAG,iBAAO,OAAO,MAAM;AAC3C,YAAI,OAAO,OAAO,YAAY;AAAY,iBAAO,OAAO,QAAQ;AAChE,iBAAS,OAAO,IAAI,qBAAqB,MAAM,CAAC;AAAA,MAClD;AAAA,IACF;AACA,aAAS,KAAK,IAAI;AAChB,SAAG;AAAA,IACL;AACA,aAAS,KAAKE,OAAM,IAAI;AACtB,aAAOA,MAAK,KAAK,EAAE;AAAA,IACrB;AACA,aAAS,YAAY,SAAS;AAC5B,UAAI,CAAC,QAAQ;AAAQ,eAAOD;AAC5B,UAAI,OAAO,QAAQ,QAAQ,SAAS,OAAO;AAAY,eAAOA;AAC9D,aAAO,QAAQ,IAAI;AAAA,IACrB;AACA,aAAS,WAAW;AAClB,eAAS,OAAO,UAAU,QAAQ,UAAU,IAAI,MAAM,IAAI,GAAGE,QAAO,GAAGA,QAAO,MAAMA,SAAQ;AAC1F,gBAAQA,SAAQ,UAAUA;AAAA,MAC5B;AACA,UAAI,WAAW,YAAY,OAAO;AAClC,UAAI,MAAM,QAAQ,QAAQ,EAAE;AAAG,kBAAU,QAAQ;AACjD,UAAI,QAAQ,SAAS,GAAG;AACtB,cAAM,IAAI,iBAAiB,SAAS;AAAA,MACtC;AACA,UAAI;AACJ,UAAI,WAAW,QAAQ,IAAI,SAAU,QAAQ,GAAG;AAC9C,YAAI,UAAU,IAAI,QAAQ,SAAS;AACnC,YAAI,UAAU,IAAI;AAClB,eAAO,UAAU,QAAQ,SAAS,SAAS,SAAU,KAAK;AACxD,cAAI,CAAC;AAAO,oBAAQ;AACpB,cAAI;AAAK,qBAAS,QAAQ,IAAI;AAC9B,cAAI;AAAS;AACb,mBAAS,QAAQ,IAAI;AACrB,mBAAS,KAAK;AAAA,QAChB,CAAC;AAAA,MACH,CAAC;AACD,aAAO,QAAQ,OAAO,IAAI;AAAA,IAC5B;AACA,WAAO,UAAU;AAAA;AAAA;;;ACrFjB;AAAA;AAAA;AAAA;AAAA,cAAU,OAAO,UAAU;AAC3B,YAAQ,SAAS;AACjB,YAAQ,WAAW;AACnB,YAAQ,WAAW;AACnB,YAAQ,SAAS;AACjB,YAAQ,YAAY;AACpB,YAAQ,cAAc;AACtB,YAAQ,WAAW;AACnB,YAAQ,WAAW;AAAA;AAAA;;;ACRnB;AAAA;AAAA;AAAA;AAAA,QAAM,YAAY,2BAA2B;AAE7C,WAAO,UAAU,MAAM,cAAc,UAAU;AAAA,MAC7C,YAAa,QAAQ,SAAS;AAC5B,cAAM,OAAO;AAEb,aAAK,UAAU;AACf,aAAK,aAAa;AAAA,MACpB;AAAA,MAEA,WAAY,OAAO,UAAU,UAAU;AACrC,YAAI,QAAQ;AACZ,YAAI;AACF,eAAK,OAAO,OAAO,QAAQ;AAAA,QAC7B,SAAS,KAAP;AACA,kBAAQ;AAAA,QACV;AAEA,iBAAS,KAAK;AAAA,MAChB;AAAA,MAEA,OAAQ,UAAU;AAChB,YAAI,QAAQ;AACZ,YAAI;AACF,eAAK,KAAK,KAAK,OAAO,CAAC;AAAA,QACzB,SAAS,KAAP;AACA,kBAAQ;AAAA,QACV;AAEA,iBAAS,KAAK;AAAA,MAChB;AAAA,MAEA,OAAQ,MAAM,UAAU;AACtB,YAAI,CAACC,QAAO,SAAS,IAAI,KAAK,OAAO,SAAS;AAAU,gBAAM,IAAI,UAAU,mCAAmC;AAC/G,YAAI,KAAK;AAAY,gBAAM,IAAI,MAAM,uBAAuB;AAC5D,YAAI,CAACA,QAAO,SAAS,IAAI;AAAG,iBAAOA,QAAO,KAAK,MAAM,QAAQ;AAE7D,aAAK,QAAQ,OAAO,IAAI;AAExB,eAAO;AAAA,MACT;AAAA,MAEA,OAAQ,UAAU;AAChB,YAAI,KAAK;AAAY,gBAAM,IAAI,MAAM,uBAAuB;AAC5D,aAAK,aAAa;AAElB,YAAI,SAAS,KAAK,QAAQ,OAAO;AACjC,YAAI,aAAa;AAAW,mBAAS,OAAO,SAAS,QAAQ;AAE7D,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;ACnDA;AAAA;AAAA;AAAA;AAAA,QAAM,QAAQ;AAEd,WAAO,UAAU,CAAC,YAAY;AAC5B,YAAM,YAAY,CAAC,cAAc;AAC/B,cAAM,OAAO,OAAO,cAAc,WAAW,UAAU,YAAY,IAAI;AACvE,gBAAQ,MAAM;AAAA,UACZ,KAAK;AAAY,mBAAO,QAAQ;AAAA,UAChC,KAAK;AAAY,mBAAO,QAAQ;AAAA,UAChC,KAAK;AAAY,mBAAO,QAAQ;AAAA,UAChC,KAAK;AAAY,mBAAO,QAAQ;AAAA,UAEhC;AAAS,kBAAM,IAAI,MAAM,uBAAuB,SAAS;AAAA,QAC3D;AAAA,MACF;AAEA,aAAO,CAAC,WAAW,YAAY;AAC7B,cAAM,SAAS,UAAU,SAAS;AAClC,eAAO,IAAI,MAAM,IAAI,OAAO,GAAG,OAAO;AAAA,MACxC;AAAA,IACF;AAAA;AAAA;;;ACnBA,IAAAC,iBAAA;AAAA;AAAA;AAAA;AAAA,QAAM,QAAN,MAAY;AAAA,MACV,aAAc,KAAK;AACjB,iBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,cAAI,IAAI,KAAK;AAAc;AAC3B,cAAI,MAAM;AACV,cAAI,IAAI,MAAM;AAAA,QAChB;AAAA,MACF;AAAA,MAEA,OAAQ,MAAM;AACZ,cAAM,QAAQ,KAAK;AACnB,YAAI,SAAS;AAEb,eAAO,KAAK,eAAe,KAAK,SAAS,UAAU,MAAM,QAAQ;AAC/D,mBAAS,IAAI,KAAK,cAAc,IAAI,MAAM;AAAS,kBAAM,OAAO,KAAK;AAErE,eAAK,QAAQ,MAAM,MAAM,SAAS;AAClC,eAAK,aAAa,KAAK,OAAO;AAE9B,eAAK,UAAU;AACf,eAAK,eAAe;AAAA,QACtB;AAEA,eAAO,SAAS,KAAK;AAAQ,gBAAM,KAAK,kBAAkB,KAAK;AAAA,MACjE;AAAA,IACF;AAEA,UAAM,QAAQ;AAAA,MACZ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACrD,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAAA,MACrD,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,MACrD,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,CAAC;AAAA,MACrD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,EAAE;AAAA,MACrD,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,CAAC;AAAA,MACrD,CAAC,IAAI,GAAG,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAAA,MACrD,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,EAAE;AAAA,MACrD,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;AAAA,MACrD,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,CAAC;AAAA,MACrD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACrD,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAAA,MACrD,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,MACrD,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,CAAC;AAAA,MACrD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,EAAE;AAAA,MACrD,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,CAAC;AAAA,IACvD;AAEA,UAAM,OAAO;AAAA,MACX;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpC;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpC;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpC;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,IACtC;AAEA,UAAM,OAAO;AAAA,MACX;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpC;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpC;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpC;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpC;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpC;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpC;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpC;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,IACtC;AAEA,UAAM,UAAUC,QAAO,KAAK;AAAA,MAC1B;AAAA,MAAM;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAChD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAChD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAChD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAChD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAChD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAChD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAChD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IAChC,CAAC;AAED,WAAO,UAAU;AAAA;AAAA;;;AC3EjB;AAAA;AAAA;AAAA;AAAA,QAAM,QAAQ;AAEd,QAAM,KAAKC,QAAO,KAAK,CAAC,CAAI,CAAC;AAC7B,QAAM,KAAKA,QAAO,KAAK,CAAC,GAAI,CAAC;AAE7B,QAAM,MAAM,CAAC,GAAG,OAAQ,KAAM,KAAK,IAAO,MAAM,OAAQ;AAExD,aAAS,EAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAGC,IAAG;AAClC,YAAM,QAAQ,MAAM;AACpB,YAAM,OAAO,MAAM;AAEnB,QAAE,KAAM,EAAE,OAAO,EAAE,MAAM,GAAGA,OAAM,KAAK,MAAM,GAAGA,KAAI,SAAS,KAAK,EAAE,OAAQ;AAC5E,QAAE,KAAK,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE;AAC1B,QAAE,KAAM,EAAE,KAAK,EAAE,OAAQ;AACzB,QAAE,KAAK,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE;AAC1B,QAAE,KAAM,EAAE,OAAO,EAAE,MAAM,GAAGA,KAAI,MAAM,KAAK,MAAM,GAAGA,UAAS,KAAK,EAAE,OAAQ;AAC5E,QAAE,KAAK,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;AACzB,QAAE,KAAM,EAAE,KAAK,EAAE,OAAQ;AACzB,QAAE,KAAK,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;AAAA,IAC3B;AAEA,WAAO,UAAU,MAAM,iBAAiB,MAAM;AAAA,MAC5C,cAAe;AACb,cAAM;AAEN,aAAK,KAAK;AAAA,UACR;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,UACpC;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,QACtC;AAEA,aAAK,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;AAErB,aAAK,SAASD,QAAO,MAAM,EAAE;AAC7B,aAAK,eAAe;AACpB,aAAK,UAAU,CAAC,GAAG,CAAC;AAEpB,aAAK,SAAS;AAEd,aAAK,MAAM;AACX,aAAK,MAAM;AAAA,MACb;AAAA,MAEA,YAAa;AACX,cAAM,OAAO,MAAM;AACnB,cAAM,IAAI,IAAI,MAAM,EAAE;AACtB,cAAM,IAAI,IAAI,MAAM,EAAE;AACtB,YAAI;AAEJ,aAAK,IAAI,GAAG,IAAI,IAAI,EAAE;AAAG,YAAE,KAAK,KAAK,OAAO,aAAa,IAAI,CAAC;AAC9D,aAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AAAG,YAAE,KAAK,KAAK,GAAG,OAAO;AAC9C,aAAK,IAAI,GAAG,IAAI,IAAI,EAAE;AAAG,YAAE,MAAM,KAAK,GAAG,IAAI,KAAK,KAAK,IAAI,QAAQ;AACnE,aAAK,IAAI,IAAI,IAAI,IAAI,EAAE;AAAG,YAAE,KAAK,KAAK,IAAI;AAE1C,YAAI,CAAC,KAAK,QAAQ;AAChB,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AACtC,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AACtC,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AACtC,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AAAA,QACxC;AAEA,aAAK,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAEvB,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;AACzB,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;AACzB,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC;AAC1B,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC;AAE1B,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC;AAC1B,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,EAAE;AAC3B,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,EAAE;AAC1B,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,EAAE;AAAA,QAC5B;AAEA,aAAK,IAAI,GAAG,IAAI,IAAI,EAAE;AAAG,eAAK,GAAG,IAAI,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,QAAQ;AACtE,aAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AAAG,eAAK,GAAG,MAAM,KAAK,GAAG,KAAK,KAAK,GAAG,IAAI,QAAQ;AAAA,MACzE;AAAA,MAEA,WAAY;AACV,YAAI,KAAK,KAAK,QAAQ,KAAK,KAAK,eAAe;AAC/C,YAAI,KAAK,KAAK,QAAQ;AACtB,YAAI,MAAM,YAAc;AACtB,gBAAM;AACN,gBAAM;AAAA,QACR;AAEA,cAAM,SAASA,QAAO,MAAM,CAAC;AAC7B,eAAO,cAAc,IAAI,CAAC;AAC1B,eAAO,cAAc,IAAI,CAAC;AAE1B,YAAI,KAAK,iBAAiB,IAAI;AAC5B,eAAK,QAAQ,MAAM;AACnB,eAAK,OAAO,KAAK,GAAG;AAAA,QACtB,OAAO;AACL,cAAI,KAAK,eAAe,IAAI;AAC1B,gBAAI,KAAK,iBAAiB;AAAG,mBAAK,SAAS;AAC3C,iBAAK,QAAQ,OAAO,KAAK,KAAK,gBAAgB;AAC9C,iBAAK,OAAO,MAAM,QAAQ,MAAM,GAAG,KAAK,KAAK,YAAY,CAAC;AAAA,UAC5D,OAAO;AACL,iBAAK,QAAQ,OAAO,KAAK,KAAK,gBAAgB;AAC9C,iBAAK,OAAO,MAAM,QAAQ,MAAM,GAAG,KAAK,KAAK,YAAY,CAAC;AAC1D,iBAAK,QAAQ,MAAM,KAAK;AACxB,iBAAK,OAAO,MAAM,QAAQ,MAAM,GAAG,IAAI,EAAE,CAAC;AAC1C,iBAAK,SAAS;AAAA,UAChB;AAEA,eAAK,OAAO,KAAK,GAAG;AACpB,eAAK,QAAQ,MAAM;AAAA,QACrB;AAEA,aAAK,QAAQ,MAAM;AACnB,aAAK,OAAO,MAAM;AAAA,MACpB;AAAA,MAEA,SAAU;AACR,aAAK,SAAS;AAEd,cAAM,SAASA,QAAO,MAAM,EAAE;AAC9B,iBAAS,IAAI,GAAG,IAAI,GAAG,EAAE;AAAG,iBAAO,cAAc,KAAK,GAAG,IAAI,IAAI,CAAC;AAClE,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;ACxHA;AAAA;AAAA;AAAA;AAAA,QAAM,WAAW;AAEjB,QAAM,KAAKE,QAAO,KAAK,CAAC,CAAI,CAAC;AAC7B,QAAM,KAAKA,QAAO,KAAK,CAAC,GAAI,CAAC;AAE7B,WAAO,UAAU,MAAM,iBAAiB,SAAS;AAAA,MAC/C,cAAe;AACb,cAAM;AAEN,aAAK,KAAK;AAAA,UACR;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,UACpC;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,QACtC;AAEA,aAAK,MAAM;AACX,aAAK,MAAM;AAAA,MACb;AAAA,MAEA,SAAU;AACR,aAAK,SAAS;AAEd,cAAM,SAASA,QAAO,MAAM,EAAE;AAC9B,iBAAS,IAAI,GAAG,IAAI,GAAG,EAAE;AAAG,iBAAO,cAAc,KAAK,GAAG,IAAI,IAAI,CAAC;AAClE,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;ACzBA;AAAA;AAAA;AAAA;AAAA,QAAM,QAAQ;AAEd,QAAM,KAAKC,QAAO,KAAK,CAAC,CAAI,CAAC;AAC7B,QAAM,KAAKA,QAAO,KAAK,CAAC,GAAI,CAAC;AAE7B,aAAS,IAAK,GAAG,GAAG,GAAG,GAAG;AACxB,UAAI,KAAK,EAAE,IAAI,KAAK,EAAE,IAAI;AAC1B,UAAI,KAAK,EAAE,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI;AAElC,UAAI,KAAK,IAAI;AACX,aAAK,KAAK;AACV,aAAK,KAAK;AACV,aAAK,KAAK;AACV,aAAK;AAAA,MACP;AAEA,UAAI,MAAM,GAAG;AACX,UAAE,IAAI,KAAK,OAAO;AAClB,UAAE,IAAI,IAAI,KAAK,OAAO;AAAA,MACxB,OAAO;AACL,UAAE,IAAI,MAAO,OAAO,IAAM,MAAO,KAAK,OAAS;AAC/C,UAAE,IAAI,IAAI,MAAO,OAAO,IAAM,MAAO,KAAK,OAAS;AAAA,MACrD;AAAA,IACF;AAEA,aAAS,EAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAGC,IAAG;AAClC,YAAM,QAAQ,MAAM;AACpB,YAAM,OAAO,MAAM;AACnB,UAAI;AAGJ,WAAK,EAAE,IAAI,IAAI,OAAO,EAAE,MAAM,GAAGA,MAAK,IAAI,KAAK,KAAK,MAAM,GAAGA,KAAI,KAAK,IAAI,QAAQ,KAAK,EAAE,IAAI,IAAI;AACjG,QAAE,IAAI,KAAM,EAAE,IAAI,OAAO,EAAE,MAAM,GAAGA,MAAK,KAAK,KAAK,MAAM,GAAGA,KAAI,KAAK,QAAQ,KAAK,EAAE,IAAI,KAAK,CAAC,EAAE,KAAK,gBAAmB;AACxH,QAAE,IAAI,IAAI,KAAK,OAAO;AAGtB,UAAI,GAAG,GAAG,GAAG,EAAE;AAGf,WAAK,EAAE,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI;AAC9B,QAAE,IAAI,KAAM,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,CAAC,EAAE,KAAK,gBAAmB;AAC7D,QAAE,IAAI,IAAI,KAAK,OAAO;AAGtB,UAAI,GAAG,GAAG,GAAG,EAAE;AAGf,WAAK,EAAE,IAAI,IAAI,OAAO,EAAE,MAAM,GAAGA,KAAI,KAAK,IAAI,KAAK,KAAK,MAAM,GAAGA,MAAK,IAAI,QAAQ,KAAK,EAAE,IAAI,IAAI;AACjG,QAAE,IAAI,KAAM,EAAE,IAAI,OAAO,EAAE,MAAM,GAAGA,KAAI,KAAK,KAAK,KAAK,MAAM,GAAGA,MAAK,QAAQ,KAAK,EAAE,IAAI,KAAK,CAAC,EAAE,KAAK,gBAAmB;AACxH,QAAE,IAAI,IAAI,KAAK,OAAO;AAGtB,UAAI,GAAG,GAAG,GAAG,EAAE;AAGf,WAAK,EAAE,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI;AAC9B,QAAE,IAAI,KAAM,EAAE,IAAI,KAAK,EAAE,IAAI,KAAK,CAAC,EAAE,KAAK,gBAAmB;AAC7D,QAAE,IAAI,IAAI,KAAK,OAAO;AAGtB,UAAI,GAAG,GAAG,GAAG,EAAE;AAAA,IACjB;AAEA,WAAO,UAAU,MAAM,iBAAiB,MAAM;AAAA,MAC5C,cAAe;AACb,cAAM;AAEN,aAAK,KAAK;AAAA,UACR;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,UACpC;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,UACpC;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,UACpC;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,QACtC;AAEA,aAAK,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAEjC,aAAK,SAASD,QAAO,MAAM,GAAG;AAC9B,aAAK,eAAe;AACpB,aAAK,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC;AAE1B,aAAK,SAAS;AAEd,aAAK,MAAM;AACX,aAAK,MAAM;AAAA,MACb;AAAA,MAEA,YAAa;AACX,cAAM,OAAO,MAAM;AACnB,cAAM,IAAI,IAAI,MAAM,EAAE;AACtB,cAAM,IAAI,IAAI,MAAM,EAAE;AACtB,YAAI;AAEJ,aAAK,IAAI,GAAG,IAAI,IAAI,EAAE;AAAG,YAAE,KAAK,KAAK,OAAO,aAAa,IAAI,CAAC;AAC9D,aAAK,IAAI,GAAG,IAAI,IAAI,EAAE;AAAG,YAAE,KAAK,KAAK,GAAG,OAAO;AAC/C,aAAK,IAAI,IAAI,IAAI,IAAI,EAAE;AAAG,YAAE,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,IAAI,SAAS;AACtE,aAAK,IAAI,IAAI,IAAI,IAAI,EAAE;AAAG,YAAE,KAAK,KAAK,IAAI;AAE1C,YAAI,CAAC,KAAK,QAAQ;AAChB,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AACtC,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AACtC,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AACtC,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AACtC,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AACtC,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AACtC,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AACtC,YAAE,OAAO,EAAE,MAAM,KAAK,QAAQ,QAAQ;AAAA,QACxC;AAEA,aAAK,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAEvB,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;AACzB,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;AACzB,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC;AAC1B,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC;AAE1B,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC;AAC1B,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,EAAE;AAC3B,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,EAAE;AAC1B,YAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,EAAE;AAAA,QAC5B;AAEA,aAAK,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AACvB,eAAK,GAAI,IAAI,IAAK,MAAM,KAAK,GAAI,IAAI,IAAK,KAAK,EAAE,IAAI,QAAQ;AAC7D,eAAK,GAAI,IAAI,IAAK,IAAI,MAAM,KAAK,GAAI,IAAI,IAAK,IAAI,KAAK,EAAE,IAAI,IAAI,QAAQ;AAAA,QAC3E;AAEA,aAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACtB,eAAK,GAAG,IAAI,MAAM,KAAK,GAAG,IAAI,KAAK,KAAK,GAAI,IAAI,IAAK,QAAQ;AAC7D,eAAK,GAAG,IAAI,IAAI,MAAM,KAAK,GAAG,IAAI,IAAI,KAAK,KAAK,GAAI,IAAI,IAAK,IAAI,QAAQ;AAAA,QAC3E;AAAA,MACF;AAAA,MAEA,WAAY;AACV,cAAM,MAAM,KAAK,QAAQ,MAAM;AAC/B,YAAI,MAAM,KAAK,eAAe;AAC9B,aAAK,aAAa,GAAG;AAErB,cAAM,SAASA,QAAO,MAAM,EAAE;AAC9B,iBAAS,IAAI,GAAG,IAAI,GAAG,EAAE;AAAG,iBAAO,cAAc,IAAI,IAAI,IAAI,IAAI,CAAC;AAElE,YAAI,KAAK,iBAAiB,KAAK;AAC7B,eAAK,QAAQ,MAAM;AACnB,eAAK,OAAO,KAAK,GAAG;AAAA,QACtB,OAAO;AACL,cAAI,KAAK,eAAe,KAAK;AAC3B,gBAAI,KAAK,iBAAiB;AAAG,mBAAK,SAAS;AAC3C,iBAAK,QAAQ,OAAO,MAAM,KAAK,gBAAgB;AAC/C,iBAAK,OAAO,MAAM,QAAQ,MAAM,GAAG,MAAM,KAAK,YAAY,CAAC;AAAA,UAC7D,OAAO;AACL,iBAAK,QAAQ,OAAO,MAAM,KAAK,gBAAgB;AAC/C,iBAAK,OAAO,MAAM,QAAQ,MAAM,GAAG,MAAM,KAAK,YAAY,CAAC;AAC3D,iBAAK,QAAQ,MAAM,MAAM;AACzB,iBAAK,OAAO,MAAM,QAAQ,MAAM,GAAG,IAAI,GAAG,CAAC;AAC3C,iBAAK,SAAS;AAAA,UAChB;AAEA,eAAK,OAAO,KAAK,GAAG;AACpB,eAAK,QAAQ,MAAM;AAAA,QACrB;AAEA,aAAK,QAAQ,MAAM;AACnB,aAAK,OAAO,MAAM;AAAA,MACpB;AAAA,MAEA,SAAU;AACR,aAAK,SAAS;AAEd,cAAM,SAASA,QAAO,MAAM,EAAE;AAC9B,iBAAS,IAAI,GAAG,IAAI,IAAI,EAAE;AAAG,iBAAO,cAAc,KAAK,GAAG,IAAI,IAAI,CAAC;AACnE,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;AC3KA;AAAA;AAAA;AAAA;AAAA,QAAM,WAAW;AAEjB,QAAM,KAAKE,QAAO,KAAK,CAAC,CAAI,CAAC;AAC7B,QAAM,KAAKA,QAAO,KAAK,CAAC,GAAI,CAAC;AAE7B,WAAO,UAAU,MAAM,iBAAiB,SAAS;AAAA,MAC/C,cAAe;AACb,cAAM;AAEN,aAAK,KAAK;AAAA,UACR;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,UACpC;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,UACpC;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,UACpC;AAAA,UAAY;AAAA,UAAY;AAAA,UAAY;AAAA,QACtC;AAEA,aAAK,MAAM;AACX,aAAK,MAAM;AAAA,MACb;AAAA,MAEA,SAAU;AACR,aAAK,SAAS;AAEd,cAAM,SAASA,QAAO,MAAM,EAAE;AAC9B,iBAAS,IAAI,GAAG,IAAI,IAAI,EAAE;AAAG,iBAAO,cAAc,KAAK,GAAG,IAAI,IAAI,CAAC;AACnE,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;;;AC3BA;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU;AAAA,MACf,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,IACZ;AAAA;AAAA;;;ACLA;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU,cAAqB,aAAgB;AAAA;AAAA;;;ACAtD;AAAA;AAAA;AAAA;AAmBA,YAAQ,iBAAiB,SAAS,eAAe,IAAI,KAAK;AACtD,YAAM,IAAI,MAAM,GAAG;AACnB,UAAI,IAAI,OAAO,EAAE;AACjB,eAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,UAAE,KAAK,OAAO,IAAI,KAAK;AACvB,YAAI,KAAK;AAAA,MACb;AACA,aAAO;AAAA,IACX;AAEA,YAAQ,eAAe,SAAS,eAAe,IAAI,KAAK;AACpD,YAAM,IAAI,MAAM,GAAG;AACnB,UAAI,IAAI,OAAO,EAAE;AACjB,eAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,UAAE,KAAK,OAAO,IAAI,WAAW;AAC7B,YAAI,KAAK;AAAA,MACb;AACA,aAAO;AAAA,IACX;AAEA,YAAQ,YAAY,SAAS,GAAG;AAC5B,UAAI,CAAC,MAAM,QAAQ,CAAC;AAAG,eAAO;AAC9B,UAAI,EAAE,UAAU;AAAG,eAAO;AAC1B,UAAI,OAAO,EAAE,OAAO;AAAU,eAAO;AACrC,UAAI,OAAO,EAAE,OAAO;AAAU,eAAO;AACrC,UAAI,CAAC,MAAM,QAAQ,EAAE,EAAE;AAAG,eAAO;AACjC,aAAO;AAAA,IACX;AAAA;AAAA;;;AC9CA;AAAA;AAAA;AAAA;AAmBA,WAAO,UAAU,SAAS,SAASC,SAAQ,KAAK,SAAS;AAErD,YAAM,SAAS,WAAW;AAC1B,UAAIA,QAAO,QAAQ;AAAS,eAAO;AACnC,MAAAA,QAAO,QAAQ,UAAU,CAAC;AAE1B,YAAM,MAAM,MAAI;AAChB,YAAM,KAAK,MAAI;AAEf,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,iBAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,YAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,IAAE;AAAA,cACF,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,IAAE;AAAA,cACN;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,iBAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,YAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,IAAE;AAAA,cACF,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,SAAS,IAAI;AAAA,YACf;AAAA,YACA,EAAE,UAAU,CAAC;AAAA,UACjB;AAAA,QACJ;AACA,iBAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,YAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,IAAE;AAAA,cACF,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAO,SAAS;AAC7C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,iBAAS,YAAY,GAAG;AACpB,cAAI,KAAG,GAAG;AACN,mBAAQ,EAAE,IAAI,EAAE;AAAA,cACZ,EAAE,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,YAC/B,CAAC;AAAA,UACL;AACA,iBAAO,EAAE;AAAA,YACL,EAAE;AAAA,cACE,EAAE,SAAS,EAAE,SAAS,IAAI,GAAG,IAAE,CAAE;AAAA,YACrC;AAAA,YACA,YAAY,IAAE,CAAC;AAAA,YACf,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,UACxB;AAAA,QACJ;AAEA,UAAE,QAAQ,YAAY,MAAI,CAAC,CAAC;AAC5B,UAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,MACnC;AAEA,eAAS,UAAU;AACf,cAAM,IAAIA,QAAO,YAAY,SAAO,KAAK;AACzC,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,iBAAS,YAAY,GAAG;AACpB,cAAI,KAAG,GAAG;AACN,mBAAQ,EAAE,IAAI,EAAE;AAAA,cACZ,EAAE,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,cAC3B,EAAE,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,YAC/B,CAAC;AAAA,UACL;AACA,iBAAO,EAAE;AAAA,YACL,EAAE;AAAA,cACE,EAAE,SAAS,EAAE,SAAS,IAAI,GAAG,IAAE,CAAE;AAAA,cACjC,EAAE,SAAS,EAAE,SAAS,IAAI,GAAG,IAAE,CAAE;AAAA,YACrC;AAAA,YACA,YAAY,IAAE,CAAC;AAAA,YACf,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,UACxB;AAAA,QACJ;AAEA,UAAE,QAAQ,YAAY,MAAI,CAAC,CAAC;AAC5B,UAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,MACnC;AAIA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,iBAAS,YAAY,GAAG;AACpB,cAAI,KAAG,GAAG;AACN,mBAAQ,EAAE,IAAI,EAAE;AAAA,cACZ,EAAE,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,cAC3B,EAAE,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,YAC/B,CAAC;AAAA,UACL;AACA,iBAAO,EAAE;AAAA,YACL,EAAE;AAAA,cACE,EAAE,SAAS,EAAE,SAAS,IAAI,GAAG,IAAE,CAAE;AAAA,cACjC,EAAE,SAAS,EAAE,SAAS,IAAI,GAAG,IAAE,CAAE;AAAA,YACrC;AAAA,YACA,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,YACpB,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,EAAE,SAAS,IAAI,GAAG,IAAE,CAAE;AAAA,gBACjC,EAAE,SAAS,EAAE,SAAS,IAAI,GAAG,IAAE,CAAE;AAAA,cACrC;AAAA,cACA,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,cACpB,YAAY,IAAE,CAAC;AAAA,YACnB;AAAA,UACJ;AAAA,QACJ;AAEA,UAAE,QAAQ,YAAY,MAAI,CAAC,CAAC;AAC5B,UAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,MACnC;AAIA,eAAS,WAAW;AAEhB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE;AAAA,UACR;AAAA,UACA,EAAE;AAAA,YACE,EAAE,aAAa,EAAE,SAAS,GAAG,CAAC;AAAA,YAC9B,EAAE,aAAa,EAAE,SAAS,GAAG,CAAC;AAAA,UAClC;AAAA,QACJ,CAAC;AAED,UAAE,QAAQ,EAAE;AAAA,UACR,EAAE,SAAS,GAAG;AAAA,UACd,EAAE,SAAS,GAAG;AAAA,QAClB,CAAC;AAED,iBAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,YAAE,QAAQ,EAAE;AAAA,YAAU;AAAA,YAClB,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,aAAa,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC;AAAA,gBACnC,EAAE,aAAa,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC;AAAA,cACvC;AAAA,cACA,EAAE,UAAW,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,YACjD;AAAA,UACJ,CAAC;AAED,YAAE,QAAQ,EAAE;AAAA,YACR,EAAE,SAAS,GAAG;AAAA,YACd,IAAE;AAAA,YACF,EAAE,SAAS,GAAG;AAAA,UAClB,CAAC;AAAA,QACL;AAEA,UAAE,QAAQ,EAAE,aAAa,EAAE,UAAW,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;AAAA,MAC5E;AAGA,eAAS,WAAW;AAEhB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE;AAAA,UACR;AAAA,UACA,EAAE;AAAA,YACE,EAAE,aAAa,EAAE,SAAS,GAAG,CAAC;AAAA,YAC9B,EAAE,aAAa,EAAE,SAAS,GAAG,CAAC;AAAA,UAClC;AAAA,QACJ,CAAC;AAED,UAAE,QAAQ,EAAE;AAAA,UACR,EAAE,SAAS,GAAG;AAAA,UACd,EAAE;AAAA,YACE,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,UAAU,YAAY;AAAA,UAC5B;AAAA,QACJ,CAAC;AAED,iBAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,YAAE,QAAQ,EAAE;AAAA,YAAU;AAAA,YAClB,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,aAAa,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC;AAAA,gBACnC,EAAE,aAAa,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC;AAAA,cACvC;AAAA,cACA,EAAE,UAAW,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,YACjD;AAAA,UACJ,CAAC;AAED,YAAE,QAAQ,EAAE;AAAA,YACR,EAAE,SAAS,GAAG;AAAA,YACd,IAAE;AAAA,YACF,EAAE,QAAS,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,YAAY,CAAC;AAAA,UACzD,CAAC;AAAA,QACL;AAEA,UAAE,QAAQ,EAAE,aAAe,EAAE,UAAW,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;AAAA,MAC9E;AAGA,eAAS,WAAW;AAEhB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAGtB,iBAAS,IAAE,GAAE,IAAE,KAAK,KAAK;AACrB,YAAE,SAAS,MAAI,GAAG,KAAK;AACvB,YAAE,SAAS,MAAI,GAAG,KAAK;AAAA,QAC3B;AAEA,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,QAAQ,CAAC;AACf,cAAM,QAAQ,CAAC;AACf,iBAAS,MAAM,GAAG,GAAG;AACjB,cAAI,GAAE;AACN,cAAI,CAAC,MAAM,IAAI;AACX,gBAAI,EAAE,SAAS,MAAI,GAAG,EAAE,aAAc,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC,CAAC;AAC3D,kBAAM,KAAK;AAAA,UACf,OAAO;AACH,gBAAI,EAAE,SAAS,MAAI,CAAC;AAAA,UACxB;AACA,cAAI,CAAC,MAAM,IAAI;AACX,gBAAI,EAAE,SAAS,MAAI,GAAG,EAAE,aAAc,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC,CAAC;AAC3D,kBAAM,KAAK;AAAA,UACf,OAAO;AACH,gBAAI,EAAE,SAAS,MAAI,CAAC;AAAA,UACxB;AAEA,iBAAO,EAAE,QAAS,GAAG,CAAE;AAAA,QAC3B;AAEA,YAAI,KAAK;AACT,YAAI,KAAK;AAET,iBAAS,IAAE,GAAG,IAAE,MAAI,IAAE,GAAG,KAAK;AAC1B,mBAAS,IAAE,KAAK,IAAI,GAAG,IAAE,MAAI,CAAC,GAAI,KAAG,KAAK,IAAE,KAAM,KAAK;AACnD,kBAAM,IAAG,IAAE;AAEX,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,MAAM,GAAE,CAAC;AAAA,gBACb;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UAEJ;AAEA,YAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,cACd,IAAE;AAAA,cACF,EAAE,SAAS,EAAE;AAAA,YACjB;AAAA,UACJ;AACA,WAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;AAClB,YAAE;AAAA,YACE,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE,SAAS,EAAE;AAAA,gBACb,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,SAAS,GAAG;AAAA,YACd,MAAI,IAAE,IAAE;AAAA,YACR,EAAE,SAAS,EAAE;AAAA,UACjB;AAAA,QACJ;AAAA,MAEJ;AAIA,eAAS,cAAc;AAEnB,cAAM,IAAIA,QAAO,YAAY,SAAO,SAAS;AAC7C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAG1B,iBAAS,IAAE,GAAE,IAAE,KAAK,KAAK;AACrB,YAAE,SAAS,MAAI,GAAG,KAAK;AAAA,QAC3B;AAEA,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,QAAQ,CAAC;AACf,iBAAS,MAAM,GAAG,GAAG;AACjB,cAAI,GAAE;AACN,cAAI,CAAC,MAAM,IAAI;AACX,gBAAI,EAAE,SAAS,MAAI,GAAG,EAAE,aAAc,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC,CAAC;AAC3D,kBAAM,KAAK;AAAA,UACf,OAAO;AACH,gBAAI,EAAE,SAAS,MAAI,CAAC;AAAA,UACxB;AACA,cAAI,CAAC,MAAM,IAAI;AACX,gBAAI,EAAE,SAAS,MAAI,GAAG,EAAE,aAAc,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC,CAAC;AAC3D,kBAAM,KAAK;AAAA,UACf,OAAO;AACH,gBAAI,EAAE,SAAS,MAAI,CAAC;AAAA,UACxB;AAEA,iBAAO,EAAE,QAAS,GAAG,CAAE;AAAA,QAC3B;AAEA,YAAI,KAAK;AACT,YAAI,KAAK;AACT,YAAI,SAAS;AACb,YAAI,SAAS;AAEb,iBAAS,IAAE,GAAG,IAAE,MAAI,IAAE,GAAG,KAAK;AAC1B,YAAE;AAAA,YACE,EAAE,SAAS,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,YAC7B,EAAE,SAAS,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,UACjC;AAEA,mBAAS,IAAE,KAAK,IAAI,GAAG,IAAE,MAAI,CAAC,GAAI,IAAI,IAAE,KAAI,KAAO,IAAE,KAAM,KAAK;AAC5D,kBAAM,IAAG,IAAE;AAEX,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,MAAM,GAAE,CAAC;AAAA,gBACb;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAGA,YAAE;AAAA,YACE,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE,UAAU,UAAU;AAAA,gBAC1B;AAAA,gBACA,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AAEA,YAAE;AAAA,YACE,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE,UAAU,EAAE;AAAA,gBAClB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAEA,cAAI,IAAE,KAAK,GAAG;AACV,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,MAAM,KAAG,GAAG,KAAG,CAAC;AAAA,gBACpB;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAIA,cAAI,IAAE,GAAG;AACL,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,EAAE;AAAA,oBACE,EAAE,SAAS,MAAM;AAAA,oBACjB,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE;AAAA,sBACE,EAAE,SAAS,EAAE;AAAA,sBACb,EAAE,UAAU,EAAE;AAAA,oBAClB;AAAA,kBACJ;AAAA,kBACA,EAAE,SAAS,MAAM;AAAA,gBACrB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAEA,YAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,cACd,IAAE;AAAA,cACF,EAAE,SAAS,EAAE;AAAA,YACjB;AAAA,UACJ;AAEA,YAAE;AAAA,YACE,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,EAAE;AAAA,YACjB;AAAA,YACA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,QAEJ;AACA,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,SAAS,GAAG;AAAA,YACd,MAAI,IAAE,IAAE;AAAA,YACR,EAAE,SAAS,MAAM;AAAA,UACrB;AAAA,QACJ;AAAA,MAEJ;AAGA,eAAS,iBAAiB;AACtB,cAAM,IAAIA,QAAO,YAAY,SAAO,YAAY;AAChD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,MACxF;AAEA,eAAS,aAAa;AAClB,cAAM,IAAIA,QAAO,YAAY,SAAO,QAAQ;AAC5C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE;AAAA,UACR;AAAA,UACA,EAAE;AAAA,YACE,EAAE,aAAa,EAAE,SAAS,IAAI,GAAG,GAAG,CAAC;AAAA,YACrC,EAAE,SAAS,GAAG;AAAA,UAClB;AAAA,QACJ,CAAC;AAED,UAAE,QAAQ,EAAE;AAAA,UACR,EAAE,SAAS,IAAI;AAAA,UACf;AAAA,UACA;AAAA,UACA,EAAE,SAAS,GAAG;AAAA,QAClB,CAAC;AAED,iBAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,YAAE,QAAQ,EAAE;AAAA,YAAU;AAAA,YAClB,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,aAAa,EAAE,SAAS,IAAI,GAAG,IAAE,GAAG,CAAC;AAAA,gBACvC,EAAE,SAAS,GAAG;AAAA,cAClB;AAAA,cACA,EAAE,UAAW,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,YACjD;AAAA,UACJ,CAAC;AAED,YAAE,QAAQ,EAAE;AAAA,YACR,EAAE,SAAS,IAAI;AAAA,YACf,IAAE;AAAA,YACF;AAAA,YACA,EAAE,SAAS,GAAG;AAAA,UAClB,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,aAAa;AAClB,cAAM,IAAIA,QAAO,YAAY,SAAO,QAAQ;AAC5C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,SAAS,GAAG,CAAC,CAAC;AAE3C,UAAE,QAAQ,EAAE;AAAA,UACR;AAAA,UACA,EAAE;AAAA,YACE,EAAE,aAAa,EAAE,SAAS,IAAI,GAAG,GAAG,CAAC;AAAA,YACrC,EAAE,SAAS,GAAG;AAAA,UAClB;AAAA,QACJ,CAAC;AAED,UAAE,QAAQ,EAAE;AAAA,UACR,EAAE,SAAS,IAAI;AAAA,UACf;AAAA,UACA;AAAA,UACA,EAAE,SAAS,GAAG;AAAA,QAClB,CAAC;AAED,UAAE,QAAQ,EAAE;AAAA,UACR;AAAA,UACA,EAAE;AAAA,YACE,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,UAAU,EAAE;AAAA,UAClB;AAAA,QACJ,CAAC;AAED,UAAE,QAAQ,EAAE,MAAM,EAAE;AAAA,UAChB,EAAE;AAAA,YACE;AAAA,YACA,EAAE,QAAQ,EAAE,SAAS,GAAG,CAAC;AAAA,UAC7B;AAAA,UACA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,UAEA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,aAAa,EAAE,SAAS,IAAI,GAAG,GAAG,CAAC;AAAA,cACrC,EAAE,SAAS,GAAG;AAAA,YAClB;AAAA,UACJ;AAAA,UAEA,EAAE;AAAA,YACE,EAAE,SAAS,IAAI;AAAA,YACf;AAAA,YACA;AAAA,YACA,EAAE,SAAS,GAAG;AAAA,UAClB;AAAA,UAEA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,cACd,EAAE,UAAU,EAAE;AAAA,YAClB;AAAA,UACJ;AAAA,UAEA,EAAE,GAAG,CAAC;AAAA,QACV,CAAC,CAAC;AAAA,MACN;AAGA,eAAS,WAAW;AAChB,mBAAW;AACX,mBAAW;AAEX,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,IAAI,EAAE,SAAS,IAAI;AACzB,cAAM,IAAI,EAAE,SAAS,IAAI;AACzB,cAAM,MAAMA,QAAO,MAAM,KAAG,CAAC;AAC7B,cAAM,KAAK,EAAE,UAAU,GAAG;AAC1B,cAAM,KAAK,EAAE,UAAU,MAAI,EAAE;AAG7B,UAAE,QAAQ,EAAE;AAAA,UACR,EAAE,SAAS,GAAG;AAAA,UACd,EAAE,SAAS,MAAM,EAAE,SAAS,GAAG,CAAC;AAAA,UAChC,EAAE,SAAS,MAAM,IAAI;AAAA,QACzB,CAAC;AAGD,UAAE,QAAQ,EAAE;AAAA,UACR,EAAE,SAAS,GAAG;AAAA,UACd,EAAE,SAAS,MAAM,EAAE,SAAS,GAAG,CAAC;AAAA,UAChC,EAAE,SAAS,MAAM,IAAI;AAAA,QACzB,CAAC;AAGD,UAAE,QAAQ,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,GAAG,GAAG,CAAC,CAAC;AACtD,UAAE,QAAQ,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,GAAG,GAAG,CAAC,CAAC;AACtD,UAAE,QAAQ,EAAE,KAAK,SAAS,SAAS,CAAC,CAAC;AACrC,UAAE,QAAQ,EAAE,KAAK,SAAS,SAAS,EAAE,CAAC;AAGtC,UAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC;AAC7C,UAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC;AAG7C,UAAE,QAAQ,EAAE,MAAM,EAAE;AAAA,UAChB,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,QAAQ,GAAI,EAAE,SAAS,IAAI,CAAC;AAAA,gBAC9B;AAAA,gBACA;AAAA,cACJ;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UAC5D,EAAE,GAAG,CAAC;AAAA,QACV,CAAC,CAAC;AAEF,UAAE;AAAA,UACE,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,QAAS,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,kBAC9B,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA;AAAA,gBACA;AAAA,cACJ;AAAA,cACA,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AAGA,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,YACA,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UACtD;AAAA,QACJ;AAEA,UAAE,QAAQ,EAAE,MAAM,EAAE;AAAA,UAGhB,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,QAAQ,GAAI,EAAE,SAAS,IAAI,CAAC;AAAA,kBAC9B;AAAA,kBACA;AAAA,gBACJ;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,IAAI;AAAA,kBACf,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,cACJ;AAAA,YACJ;AAAA,YACA,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC5D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAED,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,QAAS,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,gBAC9B,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,cACA;AAAA,cACA;AAAA,YACJ;AAAA,UACJ;AAAA,UAEA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,EAAE,SAAS,IAAI;AAAA,YACnB;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE,SAAS,IAAI;AAAA,cACnB;AAAA,cACA,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,UAGA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,IAAI;AAAA,oBACf,EAAE,UAAU,oBAAoB;AAAA,kBACpC;AAAA,gBACJ;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,IAAI;AAAA,kBACf,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,YACJ;AAAA,YACA,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAED,EAAE;AAAA,YACE,EAAE,QAAQ,EAAE,SAAS,IAAI,CAAC;AAAA,YAC1B;AAAA,cACI,GAAG,EAAE;AAAA,gBACD;AAAA,gBACA,EAAE,QAAQ,EAAE,KAAK,SAAS,QAAQ,GAAG,CAAC,CAAC;AAAA,cAC3C;AAAA,cACA,GAAG,EAAE,SAAS,MAAM,EAAE,UAAU,CAAC,CAAC;AAAA,cAClC,GAAG,EAAE,SAAS,MAAM,EAAE,UAAU,CAAC,CAAC;AAAA,YACtC;AAAA,UACJ;AAAA,UAEA,EAAE,KAAK,SAAS,UAAU,GAAG,EAAE,SAAS,IAAI,GAAG,EAAE;AAAA,UACjD,EAAE,KAAK,EAAE;AAAA,YACL,SAAS;AAAA,YACT;AAAA,YACA,EAAE,QAAQ,IAAI,EAAE,SAAS,IAAI,CAAC;AAAA,YAC9B;AAAA,UACJ,CAAC;AAAA,UACD,EAAE;AAAA,YACE,SAAS;AAAA,YACT,EAAE,QAAQ,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,YAC7B,EAAE,SAAS,IAAI;AAAA,UACnB;AAAA,UACA,EAAE,GAAG,CAAC;AAAA,QACV,CAAC,CAAC;AAAA,MACN;AAEA,eAAS,kBAAkB;AAEvB,cAAM,IAAIA,QAAO,YAAY,SAAO,aAAa;AACjD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,SAAS,KAAK;AAEzB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,UAAU,EAAE,UAAUA,QAAO,MAAM,KAAG,CAAC,CAAC;AAC9C,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAEzC,UAAE;AAAA,UACE,EAAE,SAAS,KAAK,IAAI;AAAA,UACpB,EAAE,KAAK,SAAS,SAAS,IAAI;AAAA,UAC7B,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,QACtC;AAEA,UAAE;AAAA,UACE,EAAE,SAAS,KAAK,IAAI;AAAA,UACpB,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,IAAI,GAAG,IAAI;AAAA,QACnD;AAEA,UAAE;AAAA,UACE,EAAE,SAAS,QAAQ,IAAI;AAAA,UACvB,EAAE,KAAK,SAAS,QAAQ,IAAI;AAAA,UAC5B,EAAE,SAAS,YAAY,EAAE,UAAU,CAAC,CAAC;AAAA,QACzC;AAEA,UAAE;AAAA,UACE,EAAE,SAAS,QAAQ,IAAI;AAAA,UACvB,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,IAAI,GAAG,IAAI;AAAA,QACnD;AAKA,UAAE,QAAQ,EAAE,SAAS,MAAM,IAAI,CAAC;AAChC,UAAE,QAAQ,EAAE,SAAS,MAAM,IAAI,CAAC;AAChC,UAAE,QAAQ,EAAE,SAAS,KAAK,IAAI,CAAC;AAE/B,UAAE,QAAQ,EAAE,MAAM,EAAE;AAAA,UAChB,EAAE;AAAA,YACE;AAAA,YACA,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,MAAM,CAAE;AAAA,UAClD;AAAA,UACA,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,MAAM,GAAG,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,UAE/F,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,MAAM,GAAG,OAAO;AAAA,UAErE,EAAE;AAAA,YACE,EAAE,SAAS,OAAO;AAAA,YAClB,EAAE;AAAA,cACE,EAAE,SAAS,UAAU;AAAA,cACrB,EAAE;AAAA,gBACE,EAAE,KAAK,SAAS,QAAQ,SAAS,EAAE,SAAS,GAAG,CAAC;AAAA,gBAChD;AAAA,kBACI,GAAG,EAAE,KAAK,EAAE,KAAK,SAAS,QAAQ,SAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,kBAC5E,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,gBACzC;AAAA,gBACA;AAAA,kBACI,GAAG,EAAE,KAAK,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,SAAS,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,kBAC5E,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,gBACzC;AAAA,cACJ;AAAA,cACA;AAAA,gBACI,GAAG,EAAE,KAAK,EAAE,KAAK,SAAS,QAAQ,SAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,gBAC5E,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,cACzC;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,UAAU;AAAA,cACrB;AAAA,gBACI,GAAG,EAAE,KAAK,EAAE,KAAK,SAAS,QAAQ,SAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,gBAC5E,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,cACzC;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,OAAO;AAAA,gBAChD;AAAA,kBACI,GAAG,EAAE,KAAK,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,SAAS,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,kBAC5E,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,gBACzC;AAAA,gBACA;AAAA,kBACI,GAAG,EAAE,KAAK,EAAE,KAAK,SAAS,QAAQ,SAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,kBAC5E,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,gBACzC;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,UAEA,EAAE,SAAS,OAAO,EAAE,SAAS,GAAG,CAAC;AAAA,UACjC,EAAE,SAAS,KAAK,EAAE,SAAS,MAAM,CAAC;AAAA,UAClC,EAAE,SAAS,QAAQ,EAAE,SAAS,GAAG,CAAC;AAAA,UAClC,EAAE,SAAS,KAAK,EAAE,SAAS,KAAK,CAAC;AAAA,UAEjC,EAAE,SAAS,SAAS,EAAE,SAAS,UAAU,CAAC;AAAA,UAC1C,EAAE,SAAS,YAAY,EAAE,SAAS,OAAO,CAAC;AAAA,UAE1C,EAAE,SAAS,OAAO,EAAE,SAAS,GAAG,CAAC;AAAA,UACjC,EAAE,SAAS,KAAK,EAAE,SAAS,MAAM,CAAC;AAAA,UAClC,EAAE,SAAS,QAAQ,EAAE,SAAS,IAAI,CAAC;AAAA,UACnC,EAAE,SAAS,MAAM,EAAE,SAAS,KAAK,CAAC;AAAA,UAElC,EAAE,GAAG,CAAC;AAAA,QACV,CAAC,CAAC;AAEF,UAAE,QAAQ,EAAE;AAAA,UACR,EAAE,SAAS,OAAO;AAAA,UAClB,EAAE,KAAK,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,IAAI,CAAC,CAAC;AAAA,UACnF,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,QAC9D,CAAC;AAAA,MACL;AAGA,gBAAU;AACV,gBAAU;AACV,kBAAY;AACZ,eAAS;AACT,cAAQ;AACR,eAAS;AACT,eAAS;AACT,eAAS;AACT,eAAS;AACT,kBAAY;AACZ,qBAAe;AACf,eAAS;AACT,sBAAgB;AAChB,MAAAA,QAAO,eAAe,SAAO,OAAO;AACpC,MAAAA,QAAO,eAAe,SAAO,OAAO;AACpC,MAAAA,QAAO,eAAe,SAAO,MAAM;AACnC,MAAAA,QAAO,eAAe,SAAO,SAAS;AACtC,MAAAA,QAAO,eAAe,SAAO,KAAK;AAClC,MAAAA,QAAO,eAAe,SAAO,MAAM;AACnC,MAAAA,QAAO,eAAe,SAAO,MAAM;AACnC,MAAAA,QAAO,eAAe,SAAO,MAAM;AACnC,MAAAA,QAAO,eAAe,SAAO,MAAM;AACnC,MAAAA,QAAO,eAAe,SAAO,SAAS;AACtC,MAAAA,QAAO,eAAe,SAAO,YAAY;AACzC,MAAAA,QAAO,eAAe,SAAO,MAAM;AACnC,MAAAA,QAAO,eAAe,SAAO,aAAa;AAE1C,aAAO;AAAA,IACX;AAAA;AAAA;;;ACxjCA;AAAA;AAAA;AAAA;AAmBA,WAAO,UAAU,SAAS,iBAAiBC,SAAQ,QAAQ,YAAY,MAAM,MAAM,QAAQ,QAAQ;AAE/F,YAAM,IAAIA,QAAO,YAAY,MAAM;AACnC,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,UAAU,KAAK;AAC1B,QAAE,SAAS,gBAAgB,KAAK;AAChC,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,KAAK,KAAK;AAErB,YAAM,IAAI,EAAE,eAAe;AAE3B,YAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,UAAU,CAAC;AAEhD,QAAE;AAAA,QACE,EAAE;AAAA,UACE,EAAE,QAAQ,EAAE,SAAS,cAAc,CAAC;AAAA,UACpC;AAAA,YACI,GAAG,EAAE,KAAK,QAAQ,EAAE,SAAS,GAAG,CAAC;AAAA,YACjC,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AACA,QAAE,QAAQ,EAAE,KAAK,QAAQ,EAAE,SAAS,MAAM,GAAG,GAAG,CAAC;AACjD,QAAE,QAAQ,EAAE,KAAK,QAAQ,EAAE,SAAS,GAAG,CAAC,CAAC;AACzC,QAAE,QAAQ,EAAE,SAAS,KAAK,EAAE,SAAS,cAAc,CAAC,CAAC;AACrD,QAAE,QAAQ,EAAE,MAAM,EAAE;AAAA,QAChB,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,QAE1D,EAAE;AAAA,UACE;AAAA,UACA,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,QAAQ;AAAA,cACnB,EAAE,SAAS,GAAG;AAAA,YAClB;AAAA,UACJ;AAAA,QACJ;AAAA,QACA,GAAG,UAAU;AAAA,QACb,EAAE,MAAM,GAAG,EAAE,QAAU,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,QACxC,EAAE,GAAG,CAAC;AAAA,MACV,CAAC,CAAC;AAGF,eAAS,YAAY;AACjB,cAAM,OAAO,CAAC;AACd,iBAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,eAAK;AAAA,YACD,GAAG,EAAE,KAAK,MAAM,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC;AAAA,YAChD,GAAG,EAAE;AAAA,cACD,EAAE,SAAU,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,OAAQ,CAAC,CAAC;AAAA,cACnD;AAAA,gBACI,GAAG,EAAE;AAAA,kBACD;AAAA,kBACA,EAAE;AAAA,oBACE,EAAE,SAAS,GAAG;AAAA,oBACd,EAAE,UAAU,OAAQ,CAAC;AAAA,kBACzB;AAAA,gBACJ;AAAA,gBACA,GAAG,EAAE,KAAK,MAAM,EAAE,SAAS,GAAG,GAAE,KAAK,EAAE,SAAS,GAAG,CAAC;AAAA,cACxD;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAAA,IAEJ;AAAA;AAAA;;;ACtFA;AAAA;AAAA;AAAA;AACA,WAAO,UAAU;AAEjB,aAAS,kBAAkBC,SAAQ,QAAQ;AAGvC,YAAM,KAAKA,QAAO,QAAQ,QAAQ,MAAI;AAEtC,YAAM,IAAIA,QAAO,YAAY,SAAO,eAAe;AACnD,QAAE,SAAS,OAAO,KAAK;AACvB,QAAE,SAAS,UAAU,KAAK;AAC1B,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,WAAW,KAAK;AAC3B,QAAE,SAAS,SAAS,KAAK;AACzB,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,SAAQ,KAAK;AACxB,QAAE,SAAS,KAAI,KAAK;AAEpB,YAAM,IAAI,EAAE,eAAe;AAE3B,YAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAIxC,QAAE;AAAA,QACE,EAAE,SAAS,SAAS,EAAE,SAAU,EAAE,UAAU,CAAC,CAAE,CAAC;AAAA,QAChD,EAAE;AAAA,UACE,EAAE,UAAU,CAAC;AAAA,UACb,EAAE;AAAA,YACE,EAAE,SAAS,OAAO;AAAA,YAClB,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,cACA,EAAE,UAAU,EAAE;AAAA,YAClB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,QAAE;AAAA,QAGE,EAAE,KAAK,SAAO,QAAQ,EAAE,SAAS,OAAO,CAAC;AAAA,QAEzC,EAAE,SAAS,QAAQ,EAAE,SAAS,KAAK,CAAC;AAAA,QACpC,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,QACnE,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,QAE9B,EAAE,MAAM,EAAE;AAAA,UACN,EAAE,MAAM,GAAG,EAAE,OAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,UACxD,EAAE;AAAA,YACE,EAAE,KAAK,SAAO,WAAW,EAAE,SAAS,MAAM,CAAC;AAAA,YAC3C,EAAE;AAAA,cACE,SAAS;AAAA,cACT,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,cAC9C,EAAE,SAAS,OAAO;AAAA,YACtB;AAAA,YACA,EAAE;AAAA,cACE,SAAO;AAAA,cACP,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,cAC9C,EAAE,SAAS,OAAO;AAAA,YACtB;AAAA,UACJ;AAAA,UACA,EAAE,SAAS,QAAQ,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,SAAS,QAAQ,CAAC,CAAC;AAAA,UACtE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,UACnE,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UAC1D,EAAE,GAAG,CAAC;AAAA,QACV,CAAC;AAAA,QAGD,EAAE,SAAS,QAAQ,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,SAAS,QAAQ,CAAC,CAAC;AAAA,QACtE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,QAEnE,EAAE;AAAA,UACE;AAAA,UACA,EAAE;AAAA,YACE,EAAE,SAAS,MAAM;AAAA,YACjB,EAAE;AAAA,cACE,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC;AAAA,cACzC,EAAE,SAAS,SAAS;AAAA,YACxB;AAAA,UACJ;AAAA,QACJ;AAAA,QAGA,EAAE,KAAK,SAAO,YAAY,EAAE,SAAS,OAAO,GAAG,EAAE,SAAS,OAAO,CAAE;AAAA,QAEnE,EAAE,MAAM,EAAE;AAAA,UACN,EAAE,MAAM,GAAG,EAAE,QAAS,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,UACtC,EAAE;AAAA,YACE,EAAE,KAAK,SAAO,WAAW,EAAE,SAAS,MAAM,CAAC;AAAA,YAC3C;AAAA,cACI,GAAG,EAAE;AAAA,gBACD,SAAS;AAAA,gBACT,EAAE,SAAS,OAAO;AAAA,gBAClB,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,cAClD;AAAA,cACA,GAAG,EAAE;AAAA,gBACD,SAAS;AAAA,gBACT,EAAE,SAAS,OAAO;AAAA,cACtB;AAAA,YACJ;AAAA,YAAE;AAAA,cACE,GAAG,EAAE,KAAK,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC,GAAG,GAAG;AAAA,cAChF,GAAG,EAAE;AAAA,gBACD,SAAO;AAAA,gBACP,EAAE,SAAS,OAAO;AAAA,gBAClB,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,cAClD;AAAA,cACA,GAAG,EAAE;AAAA,gBACD,SAAO;AAAA,gBACP,EAAE,SAAS,OAAO;AAAA,gBAClB;AAAA,gBACA,EAAE,SAAS,OAAO;AAAA,cACtB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,SAAS,QAAQ,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,SAAS,QAAQ,CAAC,CAAC;AAAA,UACtE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,SAAS,SAAS,CAAC,CAAC;AAAA,UACzE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,UACnE,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UAC1D,EAAE,GAAG,CAAC;AAAA,QACV,CAAC;AAAA,MAEL;AAIA,QAAE;AAAA,QACE,EAAE;AAAA,UACE,EAAE,UAAU,CAAC;AAAA,UACb,EAAE,SAAS,OAAO;AAAA,QACtB;AAAA,MACJ;AAAA,IAEJ;AAAA;AAAA;;;AC3IA;AAAA;AAAA;AAAA;AAEA,WAAO,UAAU;AAEjB,aAAS,qBAAqBC,SAAQ,QAAQ,gBAAgB,QAAQ,SAAS,SAAS;AACpF,UAAI,OAAO,YAAY,aAAa;AAEhC,YAAI,SAAS,SAAS;AAClB,oBAAU;AAAA,QACd,OAAO;AACH,oBAAU;AAAA,QACd;AAAA,MACJ;AAEA,YAAM,IAAIA,QAAO,YAAY,MAAM;AACnC,QAAE,SAAS,OAAO,KAAK;AACvB,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,SAAS,KAAK;AAEzB,YAAM,IAAI,EAAE,eAAe;AAE3B,UAAI,SAAS;AACT,UAAE;AAAA,UACE,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE,UAAU,MAAM;AAAA,cACtB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE,UAAU,OAAO;AAAA,cACvB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,MAAM,GAAG,EAAE,OAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,YAExD,EAAE,KAAK,gBAAgB,EAAE,SAAS,MAAM,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,YAE9D,EAAE,SAAS,QAAQ,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,UAAU,MAAM,CAAC,CAAC;AAAA,YACrE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,OAAO,CAAC,CAAC;AAAA,YACxE,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ,OAAO;AACH,UAAE;AAAA,UACE,EAAE,SAAS,QAAQ,EAAE,SAAS,KAAK,CAAC;AAAA,UACpC,EAAE,SAAS,SAAS,EAAE,SAAS,MAAM,CAAC;AAAA,UACtC,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,MAAM,GAAG,EAAE,OAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,YAExD,EAAE,KAAK,gBAAgB,EAAE,SAAS,MAAM,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,YAE9D,EAAE,SAAS,QAAQ,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,UAAU,MAAM,CAAC,CAAC;AAAA,YACrE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,OAAO,CAAC,CAAC;AAAA,YACxE,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;;;AC/EA;AAAA;AAAA;AAAA;AAEA,WAAO,UAAU;AAEjB,aAAS,qBAAqBC,SAAQ,QAAQ,gBAAgB,QAAQ,SAAS,SAAS;AACpF,UAAI,OAAO,YAAY,aAAa;AAEhC,YAAI,SAAS,SAAS;AAClB,oBAAU;AAAA,QACd,OAAO;AACH,oBAAU;AAAA,QACd;AAAA,MACJ;AAEA,YAAM,IAAIA,QAAO,YAAY,MAAM;AACnC,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,SAAS,KAAK;AACzB,QAAE,SAAS,SAAS,KAAK;AACzB,QAAE,SAAS,SAAS,KAAK;AAEzB,YAAM,IAAI,EAAE,eAAe;AAE3B,UAAI,SAAS;AACT,UAAE;AAAA,UACE,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE,UAAU,MAAM;AAAA,cACtB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE,UAAU,MAAM;AAAA,cACtB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE,UAAU,OAAO;AAAA,cACvB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,MAAM,GAAG,EAAE,OAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,YAExD,EAAE,KAAK,gBAAgB,EAAE,SAAS,OAAO,GAAG,EAAE,SAAS,OAAO,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,YAEpF,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,MAAM,CAAC,CAAC;AAAA,YACvE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,MAAM,CAAC,CAAC;AAAA,YACvE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,OAAO,CAAC,CAAC;AAAA,YACxE,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ,OAAO;AACH,UAAE;AAAA,UACE,EAAE,SAAS,SAAS,EAAE,SAAS,MAAM,CAAC;AAAA,UACtC,EAAE,SAAS,SAAS,EAAE,SAAS,MAAM,CAAC;AAAA,UACtC,EAAE,SAAS,SAAS,EAAE,SAAS,MAAM,CAAC;AAAA,UACtC,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,MAAM,GAAG,EAAE,OAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,YAExD,EAAE,KAAK,gBAAgB,EAAE,SAAS,OAAO,GAAG,EAAE,SAAS,OAAO,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,YAEpF,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,MAAM,CAAC,CAAC;AAAA,YACvE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,MAAM,CAAC,CAAC;AAAA,YACvE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,OAAO,CAAC,CAAC;AAAA,YACxE,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;;;AChGA;AAAA;AAAA;AAAA;AAKA,aAASC,SAAQ,GAAG,GAAG;AACnB,aAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA,IACrC;AAEA,aAASC,QAAO,GAAG;AACf,aAAO,IAAI;AAAA,IACf;AAEA,aAASC,OAAM,GAAG;AACd,aAAO,IAAI,OAAO;AAAA,IACtB;AAEA,aAAS,OAAO,GAAG;AACf,aAAO,IAAI,OAAO;AAAA,IACtB;AAEA,aAASC,YAAW,GAAG;AACnB,aAAO,IAAI;AAAA,IACf;AAEA,aAAS,WAAW,GAAG;AACnB,aAAO,IAAI;AAAA,IACf;AAEA,aAASC,WAAU,GAAG;AAClB,UAAID,YAAW,CAAC,GAAG;AACf,eAAO,EAAE,SAAS,CAAC,EAAE,SAAS;AAAA,MAClC,OAAO;AACH,eAAO,EAAE,SAAS,CAAC,EAAE;AAAA,MACzB;AAAA,IACJ;AAEA,aAASE,KAAI,GAAG;AACZ,aAAO,IAAI,KAAK,CAAC,IAAI;AAAA,IACzB;AAEA,aAAS,OAAO,GAAG;AACf,aAAOA,KAAI,CAAC,MAAM;AAAA,IACtB;AAEA,aAAS,OAAO,GAAG,GAAG;AAClB,UAAI,IAAI,IAAI,OAAO,IAAI,IAAI,GAAG,OAAOA,KAAI,CAAC,GAAG,GAAG,OAAO;AACvD,aAAO,SAAS,IAAI;AAChB,YAAI,IAAI;AACR,gBAAQ;AACR,gBAAQ;AACR,YAAI;AACJ,YAAI;AACJ,eAAO,QAAS,IAAI;AACpB,eAAO,QAAS,IAAI;AAAA,MACxB;AACA,UAAI,CAAC,OAAO,CAAC;AAAG,cAAM,IAAI,MAAM,EAAE,SAAS,IAAI,UAAU,EAAE,SAAS,IAAI,mBAAmB;AAC3F,UAAIL,SAAQ,GAAG,EAAE,MAAM,IAAI;AACvB,YAAI,IAAI;AAAA,MACZ;AACA,UAAIG,YAAW,CAAC,GAAG;AACf,eAAO,CAAC;AAAA,MACZ;AACA,aAAO;AAAA,IACX;AAEA,aAAS,OAAO,GAAGG,MAAKC,MAAK;AACzB,UAAIA,SAAQ;AAAI,cAAM,IAAI,MAAM,mCAAmC;AACnE,UAAI,IAAI,IACJ,OAAO,IAAIA;AACf,UAAIJ,YAAWG,IAAG,GAAG;AACjB,QAAAA,OAAMA,OAAM,CAAC;AACb,eAAO,OAAO,MAAMC,IAAG;AAAA,MAC3B;AACA,aAAO,WAAWD,IAAG,GAAG;AACpB,YAAI,SAAS;AAAI,iBAAO;AACxB,YAAIJ,OAAMI,IAAG;AAAG,cAAI,IAAI,OAAOC;AAC/B,QAAAD,OAAMA,OAAM;AACZ,eAAOL,QAAO,IAAI,IAAIM;AAAA,MAC1B;AACA,aAAO;AAAA,IACX;AAEA,aAAS,WAAW,GAAG,GAAG;AACtB,UAAI,KAAK,KAAK,IAAI,CAAC;AACnB,UAAI,KAAK,KAAK,IAAI,CAAC;AACnB,aAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA,IACrC;AAEA,aAAS,cAAc,GAAG,GAAG;AACzB,UAAI,MAAM;AAAI,eAAO;AACrB,UAAI,OAAO,CAAC;AAAG,eAAO;AACtB,UAAI,WAAW,GAAG,EAAE,MAAM;AAAG,eAAO,OAAO,CAAC;AAC5C,aAAO,IAAI,MAAM;AAAA,IACrB;AAEA,aAAS,aAAa,GAAG;AACrB,UAAI,IAAIF,KAAI,CAAC;AACb,UAAI,OAAO,CAAC;AAAG,eAAO;AACtB,UAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AAAI,eAAO;AAC7C,UAAI,OAAO,CAAC,KAAK,cAAc,GAAG,EAAE,KAAK,cAAc,GAAG,EAAE;AAAG,eAAO;AACtE,UAAI,IAAI;AAAK,eAAO;AAAA,IAExB;AAEA,aAAS,KAAK,GAAG;AACb,aAAO,IAAI;AAAA,IACf;AAEA,aAAS,gBAAgB,GAAG,GAAG;AAC3B,UAAI,QAAQ,KAAK,CAAC,GACd,IAAI,OACJ,IAAI,GACJ,GAAG,GAAG;AACV,aAAO,OAAO,CAAC;AAAG,YAAI,IAAI,IAAI;AAC9B;AAAM,aAAK,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,cAAI,IAAI,EAAE;AAAI;AACd,cAAI,OAAO,OAAO,EAAE,EAAE,GAAG,GAAG,CAAC;AAC7B,cAAI,OAAO,CAAC,KAAK,MAAM;AAAO;AAC9B,eAAK,IAAI,IAAI,GAAG,KAAK,GAAG,KAAK;AACzB,gBAAIJ,QAAO,CAAC,IAAI;AAChB,gBAAI,OAAO,CAAC;AAAG,qBAAO;AACtB,gBAAI,MAAM;AAAO,uBAAS;AAAA,UAC9B;AACA,iBAAO;AAAA,QACX;AACA,aAAO;AAAA,IACX;AAEA,aAAS,QAAQ,GAAG;AAChB,UAAIO,WAAU,aAAa,CAAC;AAC5B,UAAIA,aAAY;AAAW,eAAOA;AAClC,UAAI,IAAIH,KAAI,CAAC;AACb,UAAII,QAAOL,WAAU,CAAC;AACtB,UAAIK,SAAQ;AACR,eAAO,gBAAgB,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AAC1E,UAAI,OAAO,KAAK,IAAI,CAAC,IAAI,OAAOA,KAAI;AACpC,UAAI,IAAI,KAAK,KAAK,IAAI;AACtB,eAAS,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK;AAChC,UAAE,KAAK,OAAO,IAAI,CAAC,CAAC;AAAA,MACxB;AACA,aAAO,gBAAgB,GAAG,CAAC;AAAA,IAC/B;AAEA,WAAO,QAAQ,YAAYL;AAC3B,WAAO,QAAQ,QAAQF;AACvB,WAAO,QAAQ,aAAaC;AAC5B,WAAO,QAAQ,MAAME;AACrB,WAAO,QAAQ,SAAS;AACxB,WAAO,QAAQ,UAAUL;AACzB,WAAO,QAAQ,SAAS;AACxB,WAAO,QAAQ,SAAS;AACxB,WAAO,QAAQ,UAAU;AACzB,WAAO,QAAQ,SAASC;AAAA;AAAA;;;ACzJxB;AAAA;AAAA;AAAA;AAmBA,QAAM,WAAW;AACjB,QAAMS,SAAQ;AACd,QAAM,WAAW;AACjB,QAAM,oBAAoB;AAC1B,QAAM,uBAAuB;AAC7B,QAAM,eAAe;AACrB,QAAM,EAAE,WAAAC,YAAW,QAAQ,QAAQ,SAAS,OAAAC,QAAO,QAAAC,QAAO,IAAI;AAE9D,WAAO,UAAU,SAAS,SAASC,SAAQ,IAAI,SAAS,YAAY;AAChE,YAAM,IAAI,OAAO,EAAE;AACnB,YAAM,MAAM,KAAK,OAAOH,WAAU,IAAI,EAAE,IAAI,KAAG,EAAE,IAAG;AACpD,YAAM,MAAM,MAAI;AAChB,YAAM,KAAK,MAAI;AAEf,YAAM,SAAS,WAAW;AAC1B,UAAIG,QAAO,QAAQ;AAAS,eAAO;AAEnC,YAAM,YAAY,SAASA,SAAQ,KAAK,UAAU;AAClD,YAAM,KAAKA,QAAO,MAAM,IAAIJ,OAAM,eAAe,GAAG,EAAE,CAAC;AAEvD,YAAM,MAAMI,QAAO,MAAMJ,OAAM,eAAeG,QAAO,MAAM,OAAO,MAAI,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC;AACnF,YAAM,OAAOC,QAAO,MAAMJ,OAAM,gBAAgB,MAAM,OAAO,MAAI,EAAE,KAAK,GAAG,EAAE,CAAC;AAC9E,YAAM,QAAQI,QAAO,MAAMJ,OAAM,eAAe,IAAI,EAAE,CAAC;AACvD,YAAM,YAAY,IAAI;AACtB,YAAM,KAAK,aAAa;AACxB,YAAM,KAAKI,QAAO,MAAM,IAAIJ,OAAM,eAAe,IAAI,EAAE,CAAC;AAExD,YAAM,YAAY,KAAK;AACvB,YAAM,YAAYI,QAAO,MAAM,IAAIJ,OAAM,eAAe,WAAW,EAAE,CAAC;AAEtE,MAAAI,QAAO,QAAQ,UAAU;AAAA,QACrB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE,KAAK,YAAY,SAAS,EAAE,UAAU,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC,CAAC;AAAA,MAC9E;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAI,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC;AAAA,YAC3E,EAAE,KAAK,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YAClF,EAAE;AAAA,cACE,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAG;AAAA,cAC3D,EAAE,KAAK,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YACtF;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAI,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC;AAAA,YAC3E,EAAE,KAAK,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAI,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,UACvF;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,QAAQ,EAAE,UAAU,KAAK,GAAG,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC;AAAA,QAChF;AAAA,MACJ;AAGA,eAAS,kBAAkB;AACvB,cAAM,IAAIA,QAAO,YAAY,SAAO,aAAa;AACjD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,mBAAmB,EAAE,SAAS,GAAG,GAAG,GAAG;AAAA,UACvD,EAAE,KAAK,YAAY,QAAQ,KAAK,EAAE,UAAU,SAAS,CAAE;AAAA,QAC3D;AAAA,MACJ;AAEA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,YAAY,WAAW,EAAE,SAAS,GAAG,CAAC;AAAA,YAC7C,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,UACxB;AAAA,UACA,EAAE,KAAK,SAAS,mBAAmB,EAAE,SAAS,GAAG,GAAG,GAAG;AAAA,UACvD,EAAE;AAAA,YACE,EAAE,KAAK,YAAY,QAAQ,KAAK,EAAE,UAAU,SAAS,CAAC;AAAA,YACtD,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;AAAA,UACzB;AAAA,UACA,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,QACxB;AAAA,MACJ;AAGA,eAAS,eAAe;AACpB,cAAM,UAAUA,QAAO,MAAM,MAAI,MAAI,CAAC;AAEtC,cAAM,IAAIA,QAAO,YAAY,SAAO,UAAU;AAC9C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,OAAO,eAAe,OAAO,GAAG,YAAY,CAAC;AAE1D,UAAE,QAAQ,EAAE,SAAS,QAAQ,EAAE,UAAU,IAAI,CAAC,CAAC;AAE/C,iBAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,YAAE,QAAQ,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;AAEzC,YAAE;AAAA,YACE,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,aAAa,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC;AAAA,kBACnC,EAAE,SAAS,MAAM;AAAA,gBACrB;AAAA,gBACA,EAAE,UAAU,YAAY;AAAA,cAC5B;AAAA,YACJ;AAAA,UACJ;AAEA,mBAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AAEtB,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,aAAa,EAAE,SAAS,GAAG,IAAI,IAAE,KAAG,CAAC;AAAA,oBACvC,EAAE,UAAU,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,kBAChD;AAAA,kBACA,EAAE;AAAA,oBACE,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,IAAE,CAAC;AAAA,oBACnC,EAAE,SAAS,GAAG;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,iBACb,IAAE,KAAG;AAAA,gBACN,EAAE,SAAS,GAAG;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAEA,YAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,UAAU,OAAO;AAAA,cACnB,IAAE;AAAA,cACF,EAAE,UAAU,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,YAChD;AAAA,UACJ;AAAA,QACJ;AAEA,UAAE;AAAA,UACE,EAAE;AAAA,YACE,SAAO;AAAA,YACP,EAAE,UAAU,OAAO;AAAA,YACnB,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,cACd,EAAE,UAAU,MAAI,CAAC;AAAA,YACrB;AAAA,YACA,EAAE,SAAS,GAAG;AAAA,UAClB;AAAA,QACJ;AAAA,MACJ;AAIA,eAAS,WAAW;AAEhB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,QAAQ,KAAK;AAGxB,iBAAS,IAAE,GAAE,IAAE,KAAK,KAAK;AACrB,YAAE,SAAS,MAAI,GAAG,KAAK;AACvB,YAAE,SAAS,MAAI,GAAG,KAAK;AACvB,YAAE,SAAS,MAAI,GAAG,KAAK;AACvB,YAAE,SAAS,MAAI,GAAG,KAAK;AAAA,QAC3B;AAEA,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,OAAO,eAAe,OAAO,GAAG,YAAY,CAAC;AAE1D,UAAE,QAAQ,EAAE,SAAS,QAAQ,EAAE,UAAU,IAAI,CAAC,CAAC;AAG/C,cAAM,QAAQ,CAAC;AACf,cAAM,QAAQ,CAAC;AACf,cAAM,QAAQ,CAAC;AACf,iBAAS,MAAM,GAAG,GAAG;AACjB,cAAI,GAAE;AACN,cAAI,CAAC,MAAM,IAAI;AACX,gBAAI,EAAE,SAAS,MAAI,GAAG,EAAE,aAAc,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC,CAAC;AAC3D,kBAAM,KAAK;AAAA,UACf,OAAO;AACH,gBAAI,EAAE,SAAS,MAAI,CAAC;AAAA,UACxB;AACA,cAAI,CAAC,MAAM,IAAI;AACX,gBAAI,EAAE,SAAS,MAAI,GAAG,EAAE,aAAc,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC,CAAC;AAC3D,kBAAM,KAAK;AAAA,UACf,OAAO;AACH,gBAAI,EAAE,SAAS,MAAI,CAAC;AAAA,UACxB;AAEA,iBAAO,EAAE,QAAS,GAAG,CAAE;AAAA,QAC3B;AAEA,iBAAS,MAAM,GAAG,GAAG;AACjB,cAAI,GAAE;AACN,cAAI,CAAC,MAAM,IAAI;AACX,gBAAI,EAAE,SAAS,MAAI,GAAG,EAAE,aAAa,EAAE,UAAU,CAAC,GAAG,KAAG,IAAE,CAAE,CAAC;AAC7D,kBAAM,KAAK;AAAA,UACf,OAAO;AACH,gBAAI,EAAE,SAAS,MAAI,CAAC;AAAA,UACxB;AACA,cAAI,EAAE,SAAS,MAAI,CAAC;AAEpB,iBAAO,EAAE,QAAS,GAAG,CAAE;AAAA,QAC3B;AAGA,YAAI,KAAK;AACT,YAAI,KAAK;AAET,iBAAS,IAAE,GAAG,IAAE,MAAI,IAAE,GAAG,KAAK;AAC1B,mBAAS,IAAE,KAAK,IAAI,GAAG,IAAE,MAAI,CAAC,GAAI,KAAG,KAAK,IAAE,KAAM,KAAK;AACnD,kBAAM,IAAG,IAAE;AAEX,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,MAAM,GAAE,CAAC;AAAA,gBACb;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAGA,mBAAS,IAAE,KAAK,IAAI,GAAG,IAAE,MAAI,CAAC,GAAI,KAAG,KAAK,IAAE,KAAM,KAAK;AACnD,kBAAM,IAAG,IAAE;AAEX,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,MAAM,GAAE,CAAC;AAAA,gBACb;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,IAAE,KAAK;AACP,cAAE;AAAA,cACE,EAAE;AAAA,gBACE,MAAI;AAAA,gBACJ,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE;AAAA,sBACE,EAAE,SAAS,EAAE;AAAA,sBACb,EAAE,UAAU,UAAU;AAAA,oBAC1B;AAAA,oBACA,EAAE,SAAS,MAAM;AAAA,kBACrB;AAAA,kBACA,EAAE,UAAU,YAAY;AAAA,gBAC5B;AAAA,cACJ;AAAA,YACJ;AAGA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,MAAM,GAAE,CAAC;AAAA,gBACb;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAGA,cAAI,KAAG,KAAK;AACR,cAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,iBACb,IAAE,OAAK;AAAA,gBACR,EAAE,SAAS,EAAE;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AACA,WAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;AAClB,YAAE;AAAA,YACE,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE,SAAS,EAAE;AAAA,gBACb,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,SAAS,GAAG;AAAA,YACd,MAAI,IAAE;AAAA,YACN,EAAE,SAAS,EAAE;AAAA,UACjB;AAAA,QACJ;AAEA,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,aAAa,EAAE,SAAS,EAAE,CAAC;AAAA,YAC7B,EAAE,KAAK,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YAClF,EAAE;AAAA,cACE,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAG;AAAA,cAC3D,EAAE,KAAK,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YACtF;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAGA,eAAS,cAAc;AAEnB,cAAM,IAAIA,QAAO,YAAY,SAAO,SAAS;AAC7C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,QAAQ,KAAK;AAGxB,iBAAS,IAAE,GAAE,IAAE,KAAK,KAAK;AACrB,YAAE,SAAS,MAAI,GAAG,KAAK;AACvB,YAAE,SAAS,MAAI,GAAG,KAAK;AACvB,YAAE,SAAS,MAAI,GAAG,KAAK;AAAA,QAC3B;AAEA,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,OAAO,eAAe,OAAO,GAAG,YAAY,CAAC;AAE1D,UAAE,QAAQ,EAAE,SAAS,QAAQ,EAAE,UAAU,IAAI,CAAC,CAAC;AAG/C,cAAM,QAAQ,CAAC;AACf,cAAM,QAAQ,CAAC;AACf,iBAAS,MAAM,GAAG,GAAG;AACjB,cAAI,GAAE;AACN,cAAI,CAAC,MAAM,IAAI;AACX,gBAAI,EAAE,SAAS,MAAI,GAAG,EAAE,aAAc,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC,CAAC;AAC3D,kBAAM,KAAK;AAAA,UACf,OAAO;AACH,gBAAI,EAAE,SAAS,MAAI,CAAC;AAAA,UACxB;AACA,cAAI,CAAC,MAAM,IAAI;AACX,gBAAI,EAAE,SAAS,MAAI,GAAG,EAAE,aAAc,EAAE,SAAS,GAAG,GAAG,IAAE,CAAC,CAAC;AAC3D,kBAAM,KAAK;AAAA,UACf,OAAO;AACH,gBAAI,EAAE,SAAS,MAAI,CAAC;AAAA,UACxB;AAEA,iBAAO,EAAE,QAAS,GAAG,CAAE;AAAA,QAC3B;AAEA,iBAAS,MAAM,GAAG,GAAG;AACjB,cAAI,GAAE;AACN,cAAI,CAAC,MAAM,IAAI;AACX,gBAAI,EAAE,SAAS,MAAI,GAAG,EAAE,aAAa,EAAE,UAAU,CAAC,GAAG,KAAG,IAAE,CAAE,CAAC;AAC7D,kBAAM,KAAK;AAAA,UACf,OAAO;AACH,gBAAI,EAAE,SAAS,MAAI,CAAC;AAAA,UACxB;AACA,cAAI,EAAE,SAAS,MAAI,CAAC;AAEpB,iBAAO,EAAE,QAAS,GAAG,CAAE;AAAA,QAC3B;AAGA,YAAI,KAAK;AACT,YAAI,KAAK;AACT,YAAI,SAAS;AACb,YAAI,SAAS;AAEb,iBAAS,IAAE,GAAG,IAAE,MAAI,IAAE,GAAG,KAAK;AAC1B,YAAE;AAAA,YACE,EAAE,SAAS,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,YAC7B,EAAE,SAAS,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,UACjC;AACA,mBAAS,IAAE,KAAK,IAAI,GAAG,IAAE,MAAI,CAAC,GAAI,IAAI,IAAE,KAAI,KAAO,IAAE,KAAM,KAAK;AAC5D,kBAAM,IAAG,IAAE;AAEX,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,MAAM,GAAE,CAAC;AAAA,gBACb;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAGA,YAAE;AAAA,YACE,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE,UAAU,UAAU;AAAA,gBAC1B;AAAA,gBACA,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AAEA,YAAE;AAAA,YACE,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE,UAAU,EAAE;AAAA,gBAClB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAEA,cAAI,IAAE,KAAK,GAAG;AACV,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,MAAM,KAAG,GAAG,KAAG,CAAC;AAAA,gBACpB;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAIA,cAAI,IAAE,GAAG;AACL,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,EAAE;AAAA,oBACE,EAAE,SAAS,MAAM;AAAA,oBACjB,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE;AAAA,sBACE,EAAE,SAAS,EAAE;AAAA,sBACb,EAAE,UAAU,EAAE;AAAA,oBAClB;AAAA,kBACJ;AAAA,kBACA,EAAE,SAAS,MAAM;AAAA,gBACrB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAGA,mBAAS,IAAE,KAAK,IAAI,GAAG,IAAE,MAAI,CAAC,GAAI,KAAG,KAAK,IAAE,KAAM,KAAK;AACnD,kBAAM,IAAG,IAAE;AAEX,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,MAAM,GAAE,CAAC;AAAA,gBACb;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,IAAE,KAAK;AACP,cAAE;AAAA,cACE,EAAE;AAAA,gBACE,MAAI;AAAA,gBACJ,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE;AAAA,sBACE,EAAE,SAAS,EAAE;AAAA,sBACb,EAAE,UAAU,UAAU;AAAA,oBAC1B;AAAA,oBACA,EAAE,SAAS,MAAM;AAAA,kBACrB;AAAA,kBACA,EAAE,UAAU,YAAY;AAAA,gBAC5B;AAAA,cACJ;AAAA,YACJ;AAGA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,UAAU;AAAA,kBAC1B;AAAA,kBACA,MAAM,GAAE,CAAC;AAAA,gBACb;AAAA,cACJ;AAAA,YACJ;AAEA,cAAE;AAAA,cACE,EAAE;AAAA,gBAAS;AAAA,gBACP,EAAE;AAAA,kBACE,EAAE,SAAS,EAAE;AAAA,kBACb,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE;AAAA,oBACb,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAEA,cAAI,KAAG,KAAK;AACR,cAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,iBACb,IAAE,OAAK;AAAA,gBACR,EAAE,SAAS,EAAE;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AACA,YAAE;AAAA,YACE,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,EAAE;AAAA,YACjB;AAAA,YACA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,SAAS,GAAG;AAAA,YACd,MAAI,IAAE;AAAA,YACN,EAAE,SAAS,MAAM;AAAA,UACrB;AAAA,QACJ;AAEA,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,aAAa,EAAE,SAAS,MAAM,CAAC;AAAA,YACjC,EAAE,KAAK,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YAClF,EAAE;AAAA,cACE,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAG;AAAA,cAC3D,EAAE,KAAK,EAAE,KAAK,YAAU,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YACtF;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAGA,eAAS,iBAAiB;AACtB,cAAM,IAAIA,QAAO,YAAY,SAAO,YAAY;AAChD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,MACxF;AAEA,eAAS,oBAAoB;AACzB,cAAM,IAAIA,QAAO,YAAY,SAAO,eAAe;AACnD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAC3B,UAAE,QAAQ,EAAE,KAAK,SAAO,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,MACvF;AAEA,eAAS,sBAAsB;AAE3B,cAAM,QAAQA,QAAO,MAAM,KAAG,CAAC;AAE/B,cAAM,IAAIA,QAAO,YAAY,SAAO,iBAAiB;AACrD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAC3B,UAAE,QAAQ,EAAE,KAAK,YAAY,SAAS,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,KAAK,CAAE,CAAC;AAC3E,UAAE,QAAQ,EAAE,KAAK,YAAY,SAAS,EAAE,UAAU,QAAQ,EAAE,CAAE,CAAC;AAC/D,UAAE,QAAQ,EAAE,KAAK,SAAO,YAAY,EAAE,UAAU,KAAK,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,MAC5E;AAEA,eAAS,eAAe;AAEpB,cAAM,IAAIA,QAAO,YAAY,SAAQ,UAAU;AAC/C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAC3B,UAAE,QAAQ,EAAE,KAAK,SAAS,mBAAmB,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAC9E,UAAE,QAAQ,EAAE,KAAK,YAAY,eAAe,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAC9F,UAAE,QAAQ,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,MAChF;AAKA,UAAI,OAAO;AACX,UAAI,QAAQ,CAAC,GAAG;AACZ,eAAO,OAAO,MAAM,IAAI,CAAC,MAAM;AAAW,iBAAO,OAAO;AAAA,MAC5D;AAEA,UAAI,KAAK;AACT,UAAI,KAAK;AAET,aAAQ,CAACF,OAAM,EAAE,KAAK,OAAO,IAAK;AAC9B;AACA,aAAK,MAAM;AAAA,MACf;AACA,YAAM,KAAKE,QAAO,MAAM,IAAIJ,OAAM,eAAe,IAAI,EAAE,CAAC;AAExD,YAAM,UAAU,OAAO,MAAM,IAAI,CAAC;AAClC,YAAM,UAAUI,QAAO,MAAMJ,OAAM,gBAAgB,WAAW,OAAO,MAAI,EAAE,KAAK,GAAG,EAAE,CAAC;AAEtF,YAAM,iBAAkB,KAAK,MAAO;AACpC,YAAM,iBAAiBI,QAAO,MAAM,IAAIJ,OAAM,eAAe,gBAAgB,EAAE,CAAC;AAEhF,eAASK,aAAY;AAEjB,cAAM,IAAID,QAAO,YAAY,SAAQ,OAAO;AAC5C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAU,IAAI;AAC5B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAEtC,UAAE;AAAA,UAGE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,GAAG,CAAC;AAAA,YAC1C,EAAE;AAAA,cACE,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,GAAG,CAAC;AAAA,YAC5C;AAAA,UACJ;AAAA,UAEA,EAAE,SAAS,KAAK,EAAE,UAAU,EAAE,CAAC;AAAA,UAC/B,EAAE,KAAK,SAAS,SAAS,EAAE,UAAU,OAAO,GAAG,CAAC;AAAA,UAChD,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,CAAC;AAAA,UAC5E,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,cAAc,GAAG,EAAE,UAAU,EAAE,GAAG,CAAC;AAAA,UAExF,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,MAAM,GAAG,EAAE,KAAK,SAAS,OAAO,GAAG,GAAG,CAAC;AAAA,YAEzC,EAAE,KAAK,SAAS,WAAW,GAAG,EAAE;AAAA,YAChC,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,YAC9B,EAAE,MAAM,EAAE;AAAA,cACN,EAAE,MAAM,GAAG,EAAE,KAAK,SAAS,OAAO,IAAI,GAAG,CAAC;AAAA,cAC1C,EAAE,KAAK,SAAS,WAAW,IAAI,EAAE;AAAA,cACjC,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,cAC1D,EAAE,GAAG,CAAC;AAAA,YACV,CAAC;AAAA,YAED,EAAE,KAAK,SAAS,SAAS,GAAG,CAAC;AAAA,YAC7B,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,QAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAE;AAAA,YACxF,EAAE,MAAM,EAAE;AAAA,cACN,EAAE,MAAM,GAAG,EAAE,QAAQ,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,cACrC,EAAE,KAAK,SAAS,WAAW,GAAG,CAAC;AAAA,cAC/B,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,cAC1D,EAAE,GAAG,CAAC;AAAA,YACV,CAAC;AAAA,YAED,EAAE,SAAS,KAAK,EAAE,SAAS,GAAG,CAAC;AAAA,YAC/B,EAAE,KAAK,SAAS,WAAW,GAAG,CAAC;AAAA,YAC/B,EAAE,KAAK,SAAS,QAAQ,GAAG,GAAG,CAAC;AAAA,YAC/B,EAAE,KAAK,SAAS,QAAQ,GAAG,GAAG,CAAC;AAAA,YAE/B,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAED,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,eAAe,CAAC;AAAA,YAChC,EAAE,KAAK,SAAS,QAAQ,GAAG,EAAE,SAAS,GAAG,CAAC;AAAA,YAC1C,EAAE,KAAK,SAAS,SAAS,GAAG,EAAE,SAAS,GAAG,CAAC;AAAA,UAC/C;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,gBAAgB;AACrB,cAAM,IAAIA,QAAO,YAAY,SAAO,WAAW;AAC/C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAU,IAAI;AAC5B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,GAAG,CAAC;AAAA,YAC1C,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,UACxB;AAAA,UACA,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,GAAG;AAAA,UAC9E,EAAE,KAAK,SAAS,OAAO,KAAK,GAAG;AAAA,QACnC;AAAA,MACJ;AAGA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,OAAOA,QAAO,MAAM,EAAE;AAC5B,cAAM,MAAM,EAAE,UAAU,IAAI;AAE5B,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,SAAS,EAAE,SAAS,GAAG,CAAC;AAAA,UAC3C,EAAE,SAAS,KAAK,EAAE,UAAU,EAAE,CAAC;AAAA,UAC/B,EAAE,SAAS,KAAK,EAAE,SAAS,QAAQ,CAAC;AAAA,UACpC,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,MAAM,GAAG,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,WAAW,CAAC,CAAC;AAAA,YAE/D,EAAE;AAAA,cACE,EAAE,OAAO,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,cACzC,EAAE,KAAK,SAAS,QAAQ,CAAC;AAAA,cACzB,EAAE,KAAK,SAAS,QAAQ,GAAG,EAAE,UAAU,GAAG,GAAG,CAAC;AAAA,YAClD;AAAA,YACA,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,GAAG,GAAG;AAAA,YAC/C,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,KAAK,EAAE,SAAS,GAAG,CAAC;AAAA,YAE7D,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC3D,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC3D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAED,EAAE,SAAS,KAAK,EAAE,UAAW,EAAE,SAAS,WAAW,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,UACtE,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;AAAA,UAC1C,EAAE,KAAK,YAAY,SAAS,GAAG;AAAA,UAC/B,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,MAAM,GAAG,EAAE,OAAO,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YAErD,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,cACd;AAAA,cACA,EAAE,YAAY,EAAE,SAAS,GAAG,CAAC;AAAA,YACjC;AAAA,YACA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAED,EAAE;AAAA,YACE,EAAE,OAAO,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,YACzC,EAAE,KAAK,SAAS,QAAQ,CAAC;AAAA,YACzB,EAAE,KAAK,SAAS,QAAQ,GAAG,EAAE,UAAU,GAAG,GAAG,CAAC;AAAA,UAClD;AAAA,UACA,EAAE,KAAK,SAAS,QAAQ,KAAK,GAAG,GAAG;AAAA,UACnC,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,KAAK,EAAE,SAAS,GAAG,CAAC;AAAA,QACjE;AAAA,MACJ;AAEA,eAAS,mBAAmB;AACxB,cAAM,IAAIA,QAAO,YAAY,SAAO,cAAc;AAClD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,QAAQ,GAAG,EAAE,SAAS,WAAW,GAAG,GAAG;AAAA,UAC3E,EAAE,KAAK,SAAS,iBAAiB,KAAK,GAAG;AAAA,UACzC,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,KAAK,EAAE,SAAS,GAAG,CAAC;AAAA,QACjE;AAAA,MACJ;AAEA,eAAS,aAAa;AAClB,cAAM,IAAIA,QAAO,YAAY,SAAO,QAAQ;AAC5C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAC3B,UAAE;AAAA,UACE,EAAE,IAAI,EAAE,KAAK,YAAY,OAAO,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC,CAAC;AAAA,QACvE;AAAA,MACJ;AAGA,MAAAA,QAAO,eAAe,YAAY,SAAS,SAAO,OAAO;AACzD,MAAAA,QAAO,eAAe,YAAY,SAAS,SAAO,OAAO;AACzD,MAAAA,QAAO,eAAe,YAAY,WAAW,SAAO,SAAS;AAC7D,MAAAA,QAAO,eAAe,YAAY,OAAO,SAAO,KAAK;AAErD,iBAAW;AACX,eAAS;AACT,eAAS;AACT,eAAS;AACT,mBAAa;AACb,eAAS;AACT,kBAAY;AACZ,qBAAe;AACf,wBAAkB;AAClB,0BAAoB;AACpB,sBAAgB;AAChB,gBAAU;AACV,mBAAa;AACb,eAAS;AACT,gBAAU;AACV,uBAAiB;AACjB,wBAAkBA,SAAQ,MAAM;AAChC,2BAAqBA,SAAQ,SAAS,sBAAsB,SAAS,iBAAiB,IAAI,EAAE;AAC5F,2BAAqBA,SAAQ,SAAS,wBAAwB,SAAS,mBAAmB,IAAI,EAAE;AAChG,2BAAqBA,SAAQ,SAAS,aAAa,SAAS,QAAQ,IAAI,EAAE;AAC1E,mBAAaA,SAAQ,SAAS,aAAa,SAAS,QAAQ,IAAI,EAAE;AAClE,mBAAaA,SAAQ,SAAS,aAAa,SAAS,QAAQ,IAAI,EAAE;AAClE,mBAAaA,SAAQ,SAAS,aAAa,SAAS,QAAQ,IAAI,EAAE;AAElE,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,aAAa;AAC5C,MAAAA,QAAO,eAAe,SAAS,QAAQ;AACvC,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,UAAU;AACzC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,YAAY;AAC3C,MAAAA,QAAO,eAAe,SAAS,iBAAiB;AAChD,MAAAA,QAAO,eAAe,SAAS,eAAe;AAC9C,MAAAA,QAAO,eAAe,SAAS,UAAU;AACzC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,cAAc;AAC7C;AAAA,QACIA;AAAA,QACA,SAAS;AAAA,QACT;AAAA,QACA,SAAS;AAAA,QACT,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,SAAS;AAAA,MACb;AACA,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,eAAe;AAC9C,UAAI,QAAQ,CAAC,GAAG;AACZ,QAAAC,WAAU;AACV,sBAAc;AACd,QAAAD,QAAO,eAAe,SAAS,OAAO;AACtC,QAAAA,QAAO,eAAe,SAAS,WAAW;AAAA,MAC9C;AACA,MAAAA,QAAO,eAAe,SAAS,oBAAoB;AACnD,MAAAA,QAAO,eAAe,SAAS,sBAAsB;AAGrD,aAAO;AAAA,IACX;AAAA;AAAA;;;ACpiCA;AAAA;AAAA;AAAA;AAmBA,QAAM,WAAU;AAChB,QAAM,EAAE,WAAAE,WAAU,IAAI;AAEtB,WAAO,UAAU,SAAS,QAAQC,SAAQ,IAAI,SAAS,YAAY,YAAY;AAE3E,YAAM,IAAI,OAAO,EAAE;AACnB,YAAM,MAAM,KAAK,OAAOD,WAAU,IAAI,EAAE,IAAI,KAAG,EAAE,IAAG;AACpD,YAAM,KAAK,MAAI;AAEf,YAAM,SAAS,WAAW;AAC1B,UAAIC,QAAO,QAAQ;AAAS,eAAO;AACnC,MAAAA,QAAO,QAAQ,UAAU;AAAA,QACrB;AAAA,MACJ;AAEA,YAAM,YAAY,cAAc;AAChC,YAAM,YAAY,SAASA,SAAQ,GAAG,YAAY,SAAS;AAG3D,YAAM,MAAUA,QAAO,QAAQ,WAAW;AAC1C,YAAM,KAASA,QAAO,QAAQ,WAAW;AACzC,YAAM,YAAYA,QAAO,QAAQ,WAAW;AAE5C,eAAS,WAAW;AAChB,cAAM,QAAQA,QAAO,MAAM,EAAE;AAE7B,cAAM,IAAIA,QAAO,YAAY,SAAQ,MAAM;AAC3C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAC3B,UAAE,QAAQ,EAAE,KAAK,YAAY,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,KAAK,CAAC,CAAC;AAC1F,UAAE,QAAQ,EAAE,KAAK,YAAY,QAAQ,EAAE,UAAU,KAAK,GAAG,EAAE,UAAU,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,MAC/F;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAO,SAAS;AAC7C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,MACxF;AAGA,eAAS,eAAe;AAEpB,cAAM,IAAIA,QAAO,YAAY,SAAQ,UAAU;AAC/C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAC3B,UAAE,QAAQ,EAAE,KAAK,YAAY,eAAe,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,MAClG;AAEA,eAAS,kBAAkB;AACvB,cAAM,IAAIA,QAAO,YAAY,SAAO,aAAa;AACjD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,SAAS,CAAE;AAAA,QACvE;AAAA,MACJ;AAGA,eAAS;AACT,kBAAY;AACZ,mBAAa;AACb,sBAAgB;AAChB,MAAAA,QAAO,eAAe,YAAY,QAAQ,SAAS,MAAM;AACzD,MAAAA,QAAO,eAAe,YAAY,QAAQ,SAAS,MAAM;AACzD,MAAAA,QAAO,eAAe,YAAY,QAAQ,SAAS,MAAM;AACzD,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,UAAU;AACzC,MAAAA,QAAO,eAAe,SAAS,aAAa;AAC5C,MAAAA,QAAO,eAAe,YAAY,SAAS,SAAO,OAAO;AACzD,MAAAA,QAAO,eAAe,YAAY,SAAS,SAAO,OAAO;AACzD,MAAAA,QAAO,eAAe,YAAY,QAAQ,SAAO,MAAM;AACvD,MAAAA,QAAO,eAAe,YAAY,WAAW,SAAO,SAAS;AAC7D,MAAAA,QAAO,eAAe,YAAY,OAAO,SAAO,KAAK;AAErD,aAAO;AAAA,IACX;AAAA;AAAA;;;AC3GA;AAAA;AAAA;AAAA;AAkBA,QAAM,WAAW;AACjB,QAAM,oBAAoB;AAC1B,QAAMC,SAAQ;AAEd,WAAO,UAAU,SAAS,SAASC,SAAQ,iBAAiB,QAAQ,WAAW;AAE3E,UAAIA,QAAO,QAAQ;AAAS,eAAO;AAEnC,YAAM,OAAOA,QAAO,QAAQ,WAAW,MAAI;AAC3C,YAAM,IAAIA,QAAO,QAAQ,WAAW;AAEpC,MAAAA,QAAO,QAAQ,UAAU;AAAA,QACrB,KAAKA,QAAO,QAAQ,WAAW,MAAI;AAAA,MACvC;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,QACvC;AAAA,MACJ;AAEA,eAAS,mBAAmB;AACxB,cAAM,IAAIA,QAAO,YAAY,SAAO,cAAc;AAClD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,gBAAgB,IAAI,EAAE,SAAS,QAAQ,GAAG,EAAE,SAAS,WAAW,GAAG,EAAE;AAAA,UACtF,EAAE,KAAK,YAAU,gBAAgB,IAAI,EAAE,SAAS,QAAQ,GAAG,EAAE,SAAS,WAAW,GAAG,EAAE;AAAA,QAC1F;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,QACvC;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,QAAQ,IAAI,EAAE;AAAA,UAC/B,EAAE,KAAK,YAAU,QAAQ,IAAI,EAAE;AAAA,QACnC;AAAA,MACJ;AAEA,eAAS,iBAAiB;AACtB,cAAM,IAAIA,QAAO,YAAY,SAAO,YAAY;AAChD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,SAAS,IAAI,EAAE;AAAA,UAChC,EAAE,KAAK,YAAU,QAAQ,IAAI,EAAE;AAAA,QACnC;AAAA,MACJ;AAGA,eAAS,kBAAkB;AACvB,cAAM,IAAIA,QAAO,YAAY,SAAO,aAAa;AACjD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,YAAU,WAAW,EAAE;AAAA,YAC9B,EAAE,IAAI,EAAE,KAAK,YAAU,eAAe,EAAE,CAAC;AAAA,UAC7C;AAAA,UACA,EAAE,IAAI,EAAE,KAAK,YAAU,eAAe,EAAE,CAAC;AAAA,QAC7C;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACxC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACxC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACxC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AAGxC,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,CAAC;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,CAAC;AAAA,UAEpC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,CAAC;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,CAAC;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAGlC,EAAE,KAAK,iBAAiB,GAAG,EAAE;AAAA,UAC7B,EAAE,KAAK,YAAY,QAAQ,GAAG,IAAI,EAAE;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,GAAG,IAAI,EAAE;AAAA,QACxC;AAAA,MAEJ;AAEA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,IAAI,EAAE,SAAS,GAAG;AACxB,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAGvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,QAAQ,IAAI,GAAG,EAAE;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,GAAG,EAAE;AAAA,QACxC;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAO,SAAS;AAC7C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC1C,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC3C,cAAM,SAAS,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AAG7C,UAAE;AAAA,UAEE,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UAGtC,EAAE,KAAK,iBAAiB,IAAI,IAAI;AAAA,UAChC,EAAE,KAAK,YAAY,QAAQ,IAAI,MAAM,IAAI;AAAA,UAGzC,EAAE,KAAK,iBAAiB,IAAI,MAAM;AAAA,UAClC,EAAE,KAAK,YAAY,QAAQ,QAAQ,IAAI,MAAM;AAAA,UAG7C,EAAE,KAAK,YAAY,QAAQ,KAAK,MAAM,EAAE;AAAA,UACxC,EAAE,KAAK,YAAY,QAAQ,IAAI,QAAQ,EAAE;AAAA,UAGzC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,QACzC;AAAA,MAEJ;AAGA,eAAS,oBAAoB;AACzB,cAAM,IAAIA,QAAO,YAAY,SAAO,eAAe;AACnD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,iBAAiB,IAAI,EAAE;AAAA,UACxC,EAAE,KAAK,YAAU,iBAAiB,IAAI,EAAE;AAAA,QAC5C;AAAA,MACJ;AAEA,eAAS,sBAAsB;AAC3B,cAAM,IAAIA,QAAO,YAAY,SAAO,iBAAiB;AACrD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,mBAAmB,IAAI,EAAE;AAAA,UAC1C,EAAE,KAAK,YAAU,mBAAmB,IAAI,EAAE;AAAA,QAC9C;AAAA,MACJ;AAEA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,SAAS,IAAI,EAAE;AAAA,UAChC,EAAE,KAAK,YAAU,SAAS,IAAI,EAAE;AAAA,QACpC;AAAA,MACJ;AAEA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,SAAS,EAAE;AAAA,UAC5B,EAAE,KAAK,YAAU,SAAS,EAAE;AAAA,QAChC;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,QAAQ,EAAE;AAAA,UAC3B,EAAE,KAAK,YAAU,SAAS,EAAE;AAAA,QAChC;AAAA,MACJ;AAEA,eAAS,UAAU;AACf,cAAM,IAAIA,QAAO,YAAY,SAAO,KAAK;AACzC,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,YAAU,OAAO,IAAI,EAAE;AAAA,YAC9B,EAAE,KAAK,YAAU,OAAO,IAAI,EAAE;AAAA,UAClC;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAO,SAAS;AAC7C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,YAAU,WAAW,EAAE;AAAA,YAC9B,EAAE,KAAK,YAAU,WAAW,EAAE;AAAA,UAClC;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,eAAe;AACpB,cAAM,IAAIA,QAAO,YAAY,SAAO,UAAU;AAC9C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AAEzC,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,WAAW,IAAI,EAAE;AAAA,UAClC,EAAE,KAAK,YAAU,WAAW,IAAI,EAAE;AAAA,UAElC,EAAE,KAAK,iBAAiB,IAAI,EAAE;AAAA,UAE9B,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,YAAY,IAAI,EAAE;AAAA,UAEnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,EAAE;AAAA,QACnC;AAAA,MACJ;AAGA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,SAAS,KAAM,EAAE,KAAM,YAAY,SAAS,EAAE,CAAC;AAAA,UACjD,EAAE;AAAA,YACE,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,IAAI,EAAE,SAAS,GAAG,CAAC;AAAA,UACzB;AAAA,UACA,EAAE,IAAI,EAAE,KAAM,YAAY,SAAS,EAAE,CAAC;AAAA,QAC1C;AAAA,MACJ;AAEA,eAAS,aAAa;AAClB,cAAM,IAAIA,QAAO,YAAY,SAAO,QAAQ;AAC5C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AAEvD,UAAE;AAAA,UACE,EAAE,IAAI,EAAE;AAAA,YACJ,EAAE,KAAK,YAAY,UAAU,EAAE;AAAA,YAC/B,EAAE,KAAK,YAAY,WAAW,EAAE;AAAA,UACpC,CAAC;AAAA,QACL;AAAA,MACJ;AAKA,eAASC,aAAY;AAEjB,cAAM,IAAID,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAG3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAMD,OAAM,gBAAgB,OAAO,KAAK,CAAC,IAAI,MAAM,IAAI,IAAK,CAAC,CAAC;AAE7F,cAAM,MAAM,EAAE,UAAUC,QAAO,MAAMD,OAAM,gBAAgB,OAAO,KAAK,CAAC,IAAI,MAAM,IAAI,IAAK,CAAC,CAAC;AAE7F,cAAM,IAAI,EAAE,SAAS,GAAG;AACxB,cAAM,KAAK,EAAE,UAAUC,QAAO,MAAM,OAAK,CAAC,CAAC;AAC3C,cAAM,QAAQ,EAAE,UAAUA,QAAO,MAAM,OAAK,CAAC,CAAC;AAC9C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,OAAK,CAAC,CAAC;AAC3C,cAAM,MAAMA,QAAO,MAAM,OAAK,CAAC;AAC/B,cAAM,KAAK,EAAE,UAAU,GAAG;AAC1B,cAAM,MAAM,EAAE,UAAU,GAAG;AAC3B,cAAM,MAAM,EAAE,UAAU,MAAI,IAAI;AAChC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,OAAK,CAAC,CAAC;AAC3C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,OAAK,CAAC,CAAC;AAE1C,UAAE;AAAA,UAEE,EAAE,KAAK,SAAS,QAAQ,EAAE;AAAA,UAC1B,EAAE,KAAK,SAAS,QAAQ,IAAI,EAAE;AAAA,UAG9B,EAAE,KAAK,SAAS,QAAQ,GAAG,KAAK,EAAE,UAAU,IAAI,GAAG,EAAE;AAAA,UAGrD,EAAE,KAAK,SAAS,WAAW,IAAI,KAAK;AAAA,UACpC,EAAE,KAAK,SAAS,QAAQ,GAAG,OAAO,KAAK;AAAA,UAGvC,EAAE,KAAK,SAAS,cAAc,OAAO,EAAE;AAAA,UACvC,EAAE,KAAK,SAAS,QAAQ,IAAI,OAAO,EAAE;AAAA,UAGrC,EAAE,GAAG,EAAE,KAAK,SAAS,OAAM,IAAG,EAAE,GAAG,EAAE,YAAY,CAAE;AAAA,UAGnD,EAAE,KAAK,SAAS,QAAQ,IAAI,GAAG,EAAE;AAAA,UAGjC,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,OAAO,OAAO,EAAE;AAAA,YAChC;AAAA,cAEI,GAAG,EAAE,KAAK,YAAY,SAAS,GAAG;AAAA,cAClC,GAAG,EAAE,KAAK,YAAY,QAAQ,GAAG;AAAA,cACjC,GAAG,EAAE,KAAK,SAAS,QAAQ,IAAI,IAAI,EAAE,SAAS,IAAI,CAAC;AAAA,YACvD;AAAA,YACA;AAAA,cAEI,GAAG,EAAE,KAAK,SAAS,QAAQ,CAAC;AAAA,cAC5B,GAAG,EAAE,KAAK,SAAS,QAAQ,GAAG,OAAO,CAAC;AAAA,cACtC,GAAG,EAAE,KAAK,SAAS,QAAQ,GAAG,KAAK,EAAE,UAAU,IAAI,GAAG,CAAC;AAAA,cAGvD,GAAG,EAAE,KAAK,SAAS,QAAQ,GAAG,IAAI,EAAE,SAAS,IAAI,CAAC;AAAA,YACtD;AAAA,UACJ;AAAA,QACJ;AAAA,MAEJ;AAGA,eAAS,gBAAgB;AAErB,cAAM,IAAIA,QAAO,YAAY,SAAO,WAAW;AAC/C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAG3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAMD,OAAM,gBAAgB,OAAO,KAAK,CAAC,IAAI,MAAM,IAAI,IAAK,CAAC,CAAC;AAE7F,cAAM,IAAI,EAAE,SAAS,GAAG;AACxB,cAAM,KAAK,EAAE,UAAUC,QAAO,MAAM,OAAK,CAAC,CAAC;AAC3C,cAAM,QAAQ,EAAE,UAAUA,QAAO,MAAM,OAAK,CAAC,CAAC;AAC9C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,OAAK,CAAC,CAAC;AAC3C,cAAM,MAAMA,QAAO,MAAM,OAAK,CAAC;AAC/B,cAAM,KAAK,EAAE,UAAU,GAAG;AAE1B,UAAE;AAAA,UAEE,EAAE,KAAK,SAAS,QAAQ,EAAE;AAAA,UAC1B,EAAE,KAAK,SAAS,QAAQ,IAAI,EAAE;AAAA,UAG9B,EAAE,KAAK,SAAS,QAAQ,GAAG,KAAK,EAAE,UAAU,IAAI,GAAG,EAAE;AAAA,UAGrD,EAAE,KAAK,SAAS,WAAW,IAAI,KAAK;AAAA,UACpC,EAAE,KAAK,SAAS,QAAQ,GAAG,OAAO,KAAK;AAAA,UAGvC,EAAE,KAAK,SAAS,cAAc,OAAO,EAAE;AAAA,UACvC,EAAE,KAAK,SAAS,QAAQ,IAAI,OAAO,EAAE;AAAA,UAGrC,EAAE;AAAA,YACE,EAAE;AAAA,cACE,SAAS;AAAA,cACT;AAAA,cACA;AAAA,YACJ;AAAA,YACA,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,UACxB;AAAA,UACA,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,QACxB;AAAA,MAEJ;AAGA,kBAAY;AACZ,iBAAW;AACX,gBAAU;AACV,eAAS;AACT,gBAAU;AACV,eAAS;AACT,gBAAU;AACV,kBAAY;AACZ,eAAS;AACT,eAAS;AACT,eAAS;AACT,qBAAe;AACf,wBAAkB;AAClB,0BAAoB;AACpB,cAAQ;AACR,mBAAa;AACb,uBAAiB;AACjB,gBAAU;AACV,sBAAgB;AAEhB,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,QAAQ;AACvC,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,YAAY;AAC3C,MAAAA,QAAO,eAAe,SAAS,iBAAiB;AAChD,MAAAA,QAAO,eAAe,SAAS,eAAe;AAC9C,MAAAA,QAAO,eAAe,SAAS,KAAK;AACpC,MAAAA,QAAO,eAAe,SAAS,UAAU;AACzC,wBAAkBA,SAAQ,MAAM;AAChC;AAAA,QACIA;AAAA,QACA,SAAS;AAAA,QACT,OAAK;AAAA,QACL,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AACA,MAAAC,WAAU;AACV,oBAAc;AAEd,MAAAD,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,cAAc;AAC7C,MAAAA,QAAO,eAAe,SAAS,eAAe;AAC9C,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,WAAW;AAC1C,MAAAA,QAAO,eAAe,SAAS,aAAa;AAG5C,aAAO;AAAA,IACX;AAAA;AAAA;;;ACtnBA;AAAA;AAAA;AAAA;AAkBA,QAAM,WAAW;AACjB,QAAM,oBAAoB;AAE1B,WAAO,UAAU,SAAS,SAASE,SAAQ,iBAAiB,QAAQ,WAAW;AAE3E,UAAIA,QAAO,QAAQ;AAAS,eAAO;AAEnC,YAAM,OAAOA,QAAO,QAAQ,WAAW,MAAI;AAC3C,MAAAA,QAAO,QAAQ,UAAU;AAAA,QACrB,KAAKA,QAAO,QAAQ,WAAW,MAAI;AAAA,MACvC;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,QACvC;AAAA,MACJ;AAEA,eAAS,mBAAmB;AACxB,cAAM,IAAIA,QAAO,YAAY,SAAO,cAAc;AAClD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,gBAAgB,IAAI,EAAE,SAAS,QAAQ,GAAG,EAAE,SAAS,WAAW,GAAG,EAAE;AAAA,UACtF,EAAE,KAAK,YAAU,gBAAgB,IAAI,EAAE,SAAS,QAAQ,GAAG,EAAE,SAAS,WAAW,GAAG,EAAE;AAAA,UACtF,EAAE,KAAK,YAAU,gBAAgB,IAAI,EAAE,SAAS,QAAQ,GAAG,EAAE,SAAS,WAAW,GAAG,EAAE;AAAA,QAC1F;AAAA,MACJ;AAGA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,QACvC;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,QAAQ,IAAI,EAAE;AAAA,UAC/B,EAAE,KAAK,YAAU,QAAQ,IAAI,EAAE;AAAA,UAC/B,EAAE,KAAK,YAAU,QAAQ,IAAI,EAAE;AAAA,QACnC;AAAA,MACJ;AAEA,eAAS,kBAAkB;AACvB,cAAM,IAAIA,QAAO,YAAY,SAAO,aAAa;AACjD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,YAAU,WAAW,EAAE;AAAA,YAC9B,EAAE;AAAA,cACE,EAAE,KAAK,YAAU,WAAW,EAAE;AAAA,cAC9B,EAAE,IAAI,EAAE,KAAK,YAAU,eAAe,EAAE,CAAC;AAAA,cACzC,EAAE,IAAI,EAAE,KAAK,YAAU,eAAe,EAAE,CAAC;AAAA,YAC7C;AAAA,UACJ;AAAA,UACA,EAAE,IAAI,EAAE,KAAK,YAAU,eAAe,EAAE,CAAC;AAAA,QAC7C;AAAA,MACJ;AAGA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,KAAK,EAAE,eAAe;AAE5B,cAAM,IAAI,GAAG,SAAS,GAAG;AACzB,cAAM,IAAI,GAAG,QAAQ,GAAG,SAAS,GAAG,GAAG,GAAG,UAAU,IAAI,CAAC;AACzD,cAAM,IAAI,GAAG,QAAQ,GAAG,SAAS,GAAG,GAAG,GAAG,UAAU,IAAE,IAAI,CAAC;AAC3D,cAAM,IAAI,GAAG,SAAS,GAAG;AACzB,cAAM,IAAI,GAAG,QAAQ,GAAG,SAAS,GAAG,GAAG,GAAG,UAAU,IAAI,CAAC;AACzD,cAAM,IAAI,GAAG,QAAQ,GAAG,SAAS,GAAG,GAAG,GAAG,UAAU,IAAE,IAAI,CAAC;AAC3D,cAAM,KAAK,GAAG,SAAS,GAAG;AAC1B,cAAM,KAAK,GAAG,QAAQ,GAAG,SAAS,GAAG,GAAG,GAAG,UAAU,IAAI,CAAC;AAC1D,cAAM,KAAK,GAAG,QAAQ,GAAG,SAAS,GAAG,GAAG,GAAG,UAAU,IAAE,IAAI,CAAC;AAE5D,cAAM,KAAK,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC1C,cAAM,KAAK,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC1C,cAAM,KAAK,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC1C,cAAM,MAAM,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC3C,cAAM,MAAM,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC3C,cAAM,MAAM,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC3C,cAAM,MAAM,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC3C,cAAM,MAAM,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC3C,cAAM,MAAM,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC3C,cAAM,QAAQ,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC7C,cAAM,QAAQ,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC7C,cAAM,QAAQ,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAC7C,cAAM,MAAM,GAAG,UAAUA,QAAO,MAAM,IAAI,CAAC;AAG3C,UAAE;AAAA,UACE,GAAG,KAAK,YAAY,QAAQ,GAAG,GAAG,EAAE;AAAA,UACpC,GAAG,KAAK,YAAY,QAAQ,GAAG,GAAG,EAAE;AAAA,UACpC,GAAG,KAAK,YAAY,QAAQ,GAAG,GAAG,EAAE;AAAA,UAEpC,GAAG,KAAK,YAAY,QAAQ,GAAG,GAAG,GAAG;AAAA,UACrC,GAAG,KAAK,YAAY,QAAQ,GAAG,GAAG,GAAG;AAAA,UACrC,GAAG,KAAK,YAAY,QAAQ,GAAG,GAAG,GAAG;AAAA,UACrC,GAAG,KAAK,YAAY,QAAQ,GAAG,GAAG,GAAG;AAAA,UACrC,GAAG,KAAK,YAAY,QAAQ,GAAG,GAAG,GAAG;AAAA,UACrC,GAAG,KAAK,YAAY,QAAQ,GAAG,GAAG,GAAG;AAAA,UAErC,GAAG,KAAK,YAAY,QAAQ,IAAI,IAAI,KAAK;AAAA,UACzC,GAAG,KAAK,YAAY,QAAQ,IAAI,IAAI,KAAK;AAAA,UACzC,GAAG,KAAK,YAAY,QAAQ,IAAI,IAAI,KAAK;AAAA,UAEzC,GAAG,KAAK,YAAY,QAAQ,KAAK,KAAK,EAAE;AAAA,UACxC,GAAG,KAAK,YAAY,QAAQ,IAAI,OAAO,EAAE;AAAA,UACzC,GAAG,KAAK,iBAAiB,IAAI,EAAE;AAAA,UAC/B,GAAG,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAEtC,GAAG,KAAK,YAAY,QAAQ,KAAK,KAAK,EAAE;AAAA,UACxC,GAAG,KAAK,YAAY,QAAQ,IAAI,OAAO,EAAE;AAAA,UACzC,GAAG,KAAK,iBAAiB,IAAI,GAAG;AAAA,UAChC,GAAG,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UAEvC,GAAG,KAAK,YAAY,QAAQ,KAAK,KAAK,EAAE;AAAA,UACxC,GAAG,KAAK,YAAY,QAAQ,IAAI,OAAO,EAAE;AAAA,UACzC,GAAG,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,QAC1C;AAAA,MAEJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAO,SAAS;AAC7C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,GAAG;AACxB,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACtD,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACxD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AAGzC,UAAE;AAAA,UAEE,EAAE,KAAK,YAAY,WAAW,GAAG,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,IAAI,GAAG,EAAE;AAAA,UACpC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UAEpC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,WAAW,GAAG,EAAE;AAAA,UAEnC,EAAE,KAAK,iBAAiB,IAAI,EAAE;AAAA,UAC9B,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,iBAAiB,IAAI,EAAE;AAAA,UAC9B,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,QACzC;AAAA,MAEJ;AAGA,eAAS,oBAAoB;AACzB,cAAM,IAAIA,QAAO,YAAY,SAAO,eAAe;AACnD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,iBAAiB,IAAI,EAAE;AAAA,UACxC,EAAE,KAAK,YAAU,iBAAiB,IAAI,EAAE;AAAA,UACxC,EAAE,KAAK,YAAU,iBAAiB,IAAI,EAAE;AAAA,QAC5C;AAAA,MACJ;AAEA,eAAS,sBAAsB;AAC3B,cAAM,IAAIA,QAAO,YAAY,SAAO,iBAAiB;AACrD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,mBAAmB,IAAI,EAAE;AAAA,UAC1C,EAAE,KAAK,YAAU,mBAAmB,IAAI,EAAE;AAAA,UAC1C,EAAE,KAAK,YAAU,mBAAmB,IAAI,EAAE;AAAA,QAC9C;AAAA,MACJ;AAEA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,SAAS,IAAI,EAAE;AAAA,UAChC,EAAE,KAAK,YAAU,SAAS,IAAI,EAAE;AAAA,UAChC,EAAE,KAAK,YAAU,SAAS,IAAI,EAAE;AAAA,QACpC;AAAA,MACJ;AAEA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,SAAS,EAAE;AAAA,UAC5B,EAAE,KAAK,YAAU,SAAS,EAAE;AAAA,UAC5B,EAAE,KAAK,YAAU,SAAS,EAAE;AAAA,QAChC;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,QAAQ,EAAE;AAAA,UAC3B,EAAE,KAAK,YAAU,SAAS,EAAE;AAAA,UAC5B,EAAE,KAAK,YAAU,SAAS,EAAE;AAAA,QAChC;AAAA,MACJ;AAEA,eAAS,UAAU;AACf,cAAM,IAAIA,QAAO,YAAY,SAAO,KAAK;AACzC,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,KAAK,YAAU,OAAO,IAAI,EAAE;AAAA,cAC9B,EAAE,KAAK,YAAU,OAAO,IAAI,EAAE;AAAA,YAClC;AAAA,YACA,EAAE,KAAK,YAAU,OAAO,IAAI,EAAE;AAAA,UAClC;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAO,SAAS;AAC7C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,KAAK,YAAU,WAAW,EAAE;AAAA,cAC9B,EAAE,KAAK,YAAU,WAAW,EAAE;AAAA,YAClC;AAAA,YACA,EAAE,KAAK,YAAU,WAAW,EAAE;AAAA,UAClC;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,eAAe;AACpB,cAAM,IAAIA,QAAO,YAAY,SAAO,UAAU;AAC9C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AACzC,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,IAAI,CAAC;AAE1C,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,WAAW,IAAI,EAAE;AAAA,UAClC,EAAE,KAAK,YAAU,WAAW,IAAI,EAAE;AAAA,UAClC,EAAE,KAAK,YAAU,WAAW,IAAI,EAAE;AAAA,UAClC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UAEnC,EAAE,KAAK,iBAAiB,IAAI,EAAE;AAAA,UAC9B,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UAEnC,EAAE,KAAK,iBAAiB,IAAI,EAAE;AAAA,UAC9B,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UAEnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UAEnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,GAAG;AAAA,UACpC,EAAE,KAAK,YAAU,QAAQ,IAAI,KAAK,EAAE;AAAA,UACpC,EAAE,KAAK,iBAAiB,IAAI,EAAE;AAAA,UAC9B,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,GAAG;AAAA,UACpC,EAAE,KAAK,YAAU,QAAQ,KAAK,IAAI,EAAE;AAAA,UAEpC,EAAE,KAAK,YAAU,YAAY,IAAI,EAAE;AAAA,UAEnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,QACvC;AAAA,MACJ;AAGA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,IAAI,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE,SAAS,KAAM,EAAE,KAAM,YAAY,SAAS,EAAE,CAAC;AAAA,UACjD,EAAE;AAAA,YACE,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,IAAI,EAAE,SAAS,GAAG,CAAC;AAAA,UACzB;AAAA,UACA,EAAE,SAAS,KAAM,EAAE,KAAM,YAAY,SAAS,EAAE,CAAC;AAAA,UACjD,EAAE;AAAA,YACE,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,IAAI,EAAE,SAAS,GAAG,CAAC;AAAA,UACzB;AAAA,UACA,EAAE,IAAI,EAAE,KAAM,YAAY,SAAS,EAAE,CAAC;AAAA,QAC1C;AAAA,MACJ;AAEA,eAAS,aAAa;AAClB,cAAM,IAAIA,QAAO,YAAY,SAAO,QAAQ;AAC5C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAI,CAAC;AACvD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,OAAK,CAAC,CAAC;AAEzD,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,KAAK,YAAY,UAAU,EAAE;AAAA,gBAC/B,EAAE,KAAK,YAAY,WAAW,EAAE;AAAA,cACpC;AAAA,cACA,EAAE,KAAK,YAAY,WAAW,EAAE;AAAA,YACpC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,kBAAY;AACZ,iBAAW;AACX,gBAAU;AACV,eAAS;AACT,gBAAU;AACV,eAAS;AACT,kBAAY;AACZ,eAAS;AACT,eAAS;AACT,eAAS;AACT,gBAAU;AACV,wBAAkB;AAClB,0BAAoB;AACpB,cAAQ;AACR,mBAAa;AACb,uBAAiB;AACjB,sBAAgB;AAEhB,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,QAAQ;AACvC,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,iBAAiB;AAChD,MAAAA,QAAO,eAAe,SAAS,eAAe;AAC9C,MAAAA,QAAO,eAAe,SAAS,KAAK;AACpC,MAAAA,QAAO,eAAe,SAAS,UAAU;AACzC,wBAAkBA,SAAQ,MAAM;AAChC;AAAA,QACIA;AAAA,QACA,SAAS;AAAA,QACT,OAAK;AAAA,QACL,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AACA,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,cAAc;AAC7C,MAAAA,QAAO,eAAe,SAAS,eAAe;AAC9C,MAAAA,QAAO,eAAe,SAAS,aAAa;AAE5C,aAAO;AAAA,IACX;AAAA;AAAA;;;AC5jBA;AAAA;AAAA;AAAA;AAmBA,WAAO,UAAU,SAAS,oBAAoBC,SAAQ,QAAQ,YAAY,MAAM,MAAM,OAAO,QAAQ,QAAQ;AAEzG,YAAM,IAAIA,QAAO,YAAY,MAAM;AACnC,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,UAAU,KAAK;AAC1B,QAAE,SAAS,gBAAgB,KAAK;AAChC,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,SAAS,KAAK;AACzB,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,OAAO,KAAK;AACvB,QAAE,SAAS,SAAS,KAAK;AACzB,QAAE,SAAS,KAAK,KAAK;AAErB,YAAM,IAAI,EAAE,eAAe;AAE3B,YAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,UAAU,CAAC;AAEhD,eAAS,OAAO,KAAK;AACjB,eAAO,EAAE;AAAA,UACL,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE;AAAA,oBACA,EAAE,UAAU,CAAC;AAAA,kBACjB;AAAA,kBACA,EAAE,UAAU,UAAU;AAAA,gBAC1B;AAAA,cACJ;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,UAAU,EAAI;AAAA,YACpB;AAAA,UACJ;AAAA,UACA,EAAE,UAAU,CAAC;AAAA,QACjB;AAAA,MACJ;AAEA,eAAS,QAAQ,GAAG;AAChB,eAAO;AAAA,UACH,GAAG,EAAE;AAAA,YACD,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,UAAU,CAAC;AAAA,UACjB;AAAA,UACA,GAAG,EAAE;AAAA,YACD;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,cACd,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,QAAE;AAAA,QACE,EAAE;AAAA,UACE,EAAE,QAAQ,EAAE,SAAS,cAAc,CAAC;AAAA,UACpC;AAAA,YACI,GAAG,EAAE,KAAK,QAAQ,EAAE,SAAS,GAAG,CAAC;AAAA,YACjC,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,UACf;AAAA,QACJ;AAAA,QACA,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,cAAc,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,QACzE,EAAE,SAAS,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,QAC7C,EAAE,SAAS,KAAK,EAAE,SAAS,MAAM,CAAC;AAAA,QAClC,EAAE;AAAA,UACE,EAAE,UAAU,CAAC;AAAA,UACb,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,cACA,EAAE,SAAS,OAAO;AAAA,YACtB;AAAA,YACA,EAAE,UAAU,UAAU;AAAA,UAC1B;AAAA,QACJ;AAAA,QACA,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,QAE9B,EAAE,SAAS,QAAO,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,QACxC,EAAE,SAAS,SAAQ,EAAE,UAAU,CAAC,CAAC;AAAA,QAEjC,EAAE,MAAM,EAAE;AAAA,UACN,EAAE,MAAM,GAAG,EAAE,OAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,OAAO,CAAC,CAAC;AAAA,UAE1D,EAAE,SAAS,OAAO,OAAO,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,UACzC,EAAE;AAAA,YAAI,EAAE,SAAS,MAAM;AAAA,YACnB,EAAE;AAAA,cAAI,EAAE,SAAS,KAAK;AAAA,cAClB,EAAE;AAAA,gBAAG,EAAE,SAAS,OAAO;AAAA,gBACnB;AAAA,kBACI,GAAG,EAAE,SAAS,QAAQ,EAAE,UAAU,CAAC,CAAC;AAAA,kBACpC,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,kBACrC,GAAG,QAAQ,CAAC;AAAA,gBAChB;AAAA,gBAEA;AAAA,kBACI,GAAG,EAAE,SAAS,QAAQ,EAAE,UAAU,CAAC,CAAC;AAAA,kBACpC,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,kBACrC,GAAG,QAAQ,GAAG;AAAA,gBAClB;AAAA,cACJ;AAAA,cACA,EAAE;AAAA,gBAAG,EAAE,SAAS,OAAO;AAAA,gBACnB;AAAA,kBACI,GAAG,EAAE,SAAS,QAAQ,EAAE,UAAU,CAAC,CAAC;AAAA,kBACpC,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,kBACrC,GAAG,QAAQ,GAAG;AAAA,gBAClB;AAAA,gBAEA;AAAA,kBACI,GAAG,EAAE,SAAS,QAAQ,EAAE,UAAU,CAAC,CAAC;AAAA,kBACpC,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,kBACrC,GAAG,QAAQ,CAAC;AAAA,gBAChB;AAAA,cACJ;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cAAI,EAAE,SAAS,KAAK;AAAA,cAClB,EAAE;AAAA,gBAAG,EAAE,SAAS,OAAO;AAAA,gBACnB;AAAA,kBACI,GAAG,EAAE,SAAS,QAAQ,EAAE,UAAU,CAAC,CAAC;AAAA,kBACpC,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,kBACrC,GAAG,QAAQ,CAAC;AAAA,gBAChB;AAAA,gBAEA;AAAA,kBACI,GAAG,EAAE,SAAS,QAAQ,EAAE,UAAU,CAAC,CAAC;AAAA,kBACpC,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,kBACrC,GAAG,QAAQ,CAAC;AAAA,gBAChB;AAAA,cACJ;AAAA,cACA,EAAE;AAAA,gBAAG,EAAE,SAAS,OAAO;AAAA,gBACnB;AAAA,kBACI,GAAG,EAAE,SAAS,QAAQ,EAAE,UAAU,CAAC,CAAC;AAAA,kBACpC,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,kBACrC,GAAG,QAAQ,CAAC;AAAA,gBAChB;AAAA,gBAEA;AAAA,kBACI,GAAG,EAAE,SAAS,QAAQ,EAAE,UAAU,CAAC,CAAC;AAAA,kBACpC,GAAG,EAAE,SAAS,SAAS,EAAE,UAAU,CAAC,CAAC;AAAA,kBACrC,GAAG,QAAQ,CAAC;AAAA,gBAChB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UAC1D,EAAE,GAAG,CAAC;AAAA,QACV,CAAC;AAAA,QAED,EAAE;AAAA,UAAI,EAAE,SAAS,MAAM;AAAA,UACnB,EAAE;AAAA,YAAG,EAAE,SAAS,OAAO;AAAA,YACnB;AAAA,cACI,GAAG,QAAQ,GAAG;AAAA,cACd,GAAG,QAAQ,CAAC;AAAA,cACZ,GAAG,QAAQ,CAAC;AAAA,YAChB;AAAA,YAEA;AAAA,cACI,GAAG,QAAQ,CAAC;AAAA,YAChB;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YAAG,EAAE,SAAS,OAAO;AAAA,YACnB;AAAA,cACI,GAAG,QAAQ,CAAC;AAAA,cACZ,GAAG,QAAQ,CAAC;AAAA,YAChB;AAAA,UACJ;AAAA,QACJ;AAAA,QAEA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,QAI1D,EAAE,KAAK,QAAQ,EAAE,SAAS,MAAM,GAAG,GAAG;AAAA,QAEtC,EAAE,KAAK,QAAQ,EAAE,SAAS,GAAG,CAAC;AAAA,QAE9B,EAAE,MAAM,EAAE;AAAA,UAGN,EAAE,KAAK,MAAM,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC;AAAA,UAG7C,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,YAClB;AAAA,UACJ;AAAA,UAEA,EAAE;AAAA,YACE,EAAE,SAAS,KAAK;AAAA,YAChB,EAAE;AAAA,cACE,EAAE,OAAO,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,CAAC,CAAC;AAAA,cAC1C,EAAE,KAAK,MAAO,EAAE,SAAS,GAAG,GAAG,KAAK,EAAE,SAAS,GAAG,CAAC;AAAA,cACnD,EAAE,KAAK,OAAO,EAAE,SAAS,GAAG,GAAG,KAAK,EAAE,SAAS,GAAG,CAAC;AAAA,YACvD;AAAA,UACJ;AAAA,UAEA,EAAE,MAAM,GAAG,EAAE,OAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,UACzD,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UAC1D,EAAE,GAAG,CAAC;AAAA,QAEV,CAAC;AAAA,QAED,EAAE,UAAW,EAAE,UAAU,CAAC,GAAG,EAAE,SAAS,MAAM,CAAC;AAAA,MAEnD;AAAA,IAEJ;AAAA;AAAA;;;ACxOA;AAAA;AAAA;AAAA;AAmBA,WAAO,UAAU,SAASC,eAAcC,SAAQ,QAAQ,QAAQ,OAAO,KAAK;AAExE,YAAM,OAAOA,QAAO,QAAQ,QAAQ;AACpC,YAAM,MAAM,OAAK;AAEjB,eAAS,gBAAgB;AACrB,cAAM,IAAIA,QAAO,YAAY,SAAS,WAAW;AACjD,UAAE,SAAS,WAAW,KAAK;AAC3B,UAAE,SAAS,cAAc,KAAK;AAC9B,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,YAAY;AAAA,gBACvB,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,cACA,EAAE,SAAS,UAAU;AAAA,YACzB;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,WAAW;AAAA,cACtB,EAAE,SAAS,WAAW;AAAA,YAC1B;AAAA,YACA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,UAAU,CAAC;AAAA,kBACb,EAAE,SAAS,WAAW;AAAA,gBAC1B;AAAA,gBACA,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,UAAU,CAAC;AAAA,kBACb,EAAE,SAAS,WAAW;AAAA,gBAC1B;AAAA,gBACA,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,SAAS;AAAA,kBACpB,EAAE;AAAA,oBACE,EAAE,SAAS,UAAU;AAAA,oBACrB,EAAE,UAAU,CAAC;AAAA,kBACjB;AAAA,gBACJ;AAAA,gBACA;AAAA,gBACA;AAAA,cACJ;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,UAAU;AAAA,gBACrB,EAAE,UAAU,CAAG;AAAA,cACnB;AAAA,YACJ;AAAA,YACA,EAAE,SAAS,MAAM;AAAA,UACrB;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,oBAAoB;AACzB,cAAM,IAAIA,QAAO,YAAY,SAAS,QAAQ;AAC9C,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,cAAc,KAAK;AAC9B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,WAAW,KAAK;AAC3B,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,aAAa,KAAK;AAE7B,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,QAAQ,EAAE,SAAS,GAAG,CAAC;AAAA,YACzB;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,cAC5C,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UAIA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,UAAU,CAAC;AAAA,cACb,EAAE,SAAS,WAAW;AAAA,YAC1B;AAAA,UACJ;AAAA,UACA,EAAE,SAAS,UAAU,EAAE,SAAU,EAAE,UAAU,CAAC,CAAE,CAAC;AAAA,UACjD,EAAE;AAAA,YACE,EAAE,UAAU,CAAC;AAAA,YACb,EAAE;AAAA,cACE,EAAE,SAAS,QAAQ;AAAA,cACnB,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE,UAAU,GAAG;AAAA,cACnB;AAAA,YACJ;AAAA,UACJ;AAAA,UAGA,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,QAAQ;AAAA,cACvB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,SAAS;AAAA,cACT,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAGD,EAAE,SAAS,UAAU,EAAE,SAAS,QAAQ,CAAC;AAAA,UACzC,EAAE,SAAS,YAAY,EAAE,SAAS,UAAU,CAAC;AAAA,UAC7C,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,SAAS,UAAU;AAAA,cACrB,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,YAAY;AAAA,cAC3B;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,UAAU;AAAA,gBACrB,EAAE,SAAS,WAAW;AAAA,cAC1B;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBAAK,SAAS;AAAA,gBACZ,EAAE,SAAS,UAAU;AAAA,gBACrB,EAAE,SAAS,YAAY;AAAA,gBACvB,EAAE,SAAS,UAAU;AAAA,gBACrB,EAAE,SAAS,WAAW;AAAA,cAC1B;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,EAAE,SAAS,KAAK;AAAA,cAChB;AAAA,gBACI,GAAG,EAAE;AAAA,kBACD;AAAA,kBACA,EAAE;AAAA,oBACE,EAAE,SAAS,QAAQ;AAAA,oBACnB,EAAE;AAAA,sBACE,EAAE;AAAA,wBACE,EAAE,SAAS,KAAK;AAAA,wBAChB,EAAE,UAAU,CAAC;AAAA,sBACjB;AAAA,sBACA,EAAE,UAAU,GAAG;AAAA,oBACnB;AAAA,kBACJ;AAAA,gBACJ;AAAA,gBACA,GAAG,EAAE;AAAA,kBACD;AAAA,kBACA,EAAE,SAAS,WAAW;AAAA,kBACtB,EAAE,SAAS,QAAQ;AAAA,kBACnB,EAAE,SAAS,WAAW;AAAA,gBAC1B;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE,SAAS,YAAY,EAAE,QAAQ,EAAE,SAAS,UAAU,GAAG,EAAE,SAAS,YAAY,CAAC,CAAC;AAAA,YAClF,EAAE,SAAS,UAAU,EAAE,QAAQ,EAAE,SAAS,QAAQ,GAAG,EAAE,UAAU,GAAG,CAAC,CAAC;AAAA,YACtE,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAED,EAAE,KAAK,SAAS,gBAAgB,EAAE,SAAS,QAAQ,GAAG,EAAE,SAAS,WAAW,CAAC;AAAA,UAC7E,EAAE;AAAA,YACE,SAAS;AAAA,YACT,EAAE,SAAS,QAAQ;AAAA,YACnB,EAAE,SAAS,IAAI;AAAA,UACnB;AAAA,UAGA,EAAE;AAAA,YACE,EAAE,UAAU,CAAC;AAAA,YACb,EAAE,SAAS,QAAQ;AAAA,UACvB;AAAA,QAEJ;AAAA,MACJ;AAEA,eAASD,iBAAgB;AACrB,cAAM,IAAIC,QAAO,YAAY,MAAM;AACnC,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,cAAc,KAAK;AAC9B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,WAAW,KAAK;AAC3B,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,aAAa,KAAK;AAE7B,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEzC,cAAM,UAAUA,QAAO,MAAM;AAAA,UACzB;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAM;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAC9B;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAM;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAC9B;AAAA,UAAI;AAAA,UAAI;AAAA,UAAK;AAAA,UAAM;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAC/B;AAAA,UAAK;AAAA,UAAI;AAAA,UAAI;AAAA,UAAM;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,QACnC,CAAC;AAED,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,UACzC,EAAE;AAAA,YACE,EAAE,QAAQ,EAAE,SAAS,GAAG,CAAC;AAAA,YACzB,EAAE,IAAI,CAAC,CAAC;AAAA,UACZ;AAAA,UACA,EAAE,SAAS,aAAa,EAAE,YAAa,EAAE,QAAQ,EAAE,SAAS,GAAG,CAAC,GAAI,OAAQ,CAAC;AAAA,UAC7E,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,YAAY;AAAA,oBACvB,EAAE,UAAU,CAAC;AAAA,kBACjB;AAAA,kBACA,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE,SAAS,WAAW;AAAA,cAC1B;AAAA,cACA,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,UAKA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,SAAS;AAAA,gBACpB,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,cACA,EAAE,SAAS,WAAW;AAAA,YAC1B;AAAA,UACJ;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,OAAO;AAAA,gBAClB,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,YACJ;AAAA,YAGA,EAAE;AAAA,cACE,EAAE,QAAQ,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC,CAAC;AAAA,cACtD;AAAA,gBACI,GAAG,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,gBACjC,GAAG,EAAE,MAAM,EAAE;AAAA,kBACT,EAAE;AAAA,oBACE;AAAA,oBACA,EAAE;AAAA,sBACE,EAAE,SAAS,GAAG;AAAA,sBACd,EAAE,SAAS,WAAW;AAAA,oBAC1B;AAAA,kBACJ;AAAA,kBAEA,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,kBAE7D,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,kBAC1D,EAAE,GAAG,CAAC;AAAA,gBACV,CAAC;AAAA,cACL;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,SAAS;AAAA,cACT,EAAE,SAAS,QAAQ;AAAA,cACnB,EAAE,SAAS,UAAU;AAAA,cACrB,EAAE,SAAS,YAAY;AAAA,cACvB,EAAE,SAAS,GAAG;AAAA,cACd,EAAE,SAAS,OAAO;AAAA,cAClB,EAAE,SAAS,WAAW;AAAA,cACtB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,SAAS;AAAA,cACT,EAAE,SAAS,IAAI;AAAA,cACf;AAAA,cACA,EAAE,SAAS,IAAI;AAAA,YACnB;AAAA,YACA,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,SAAS,WAAW,CAAC,CAAC;AAAA,YAC3E,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,mBAAmB;AACxB,cAAM,IAAIA,QAAO,YAAY,SAAS,cAAc;AACpD,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,OAAO,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC;AAAA,YACxC,EAAE,IAAI,CAAC,CAAC;AAAA,UACZ;AAAA,UACA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,UAAU,CAAC;AAAA,cACb,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,YACJ;AAAA,UACJ;AAAA,UAEA,EAAE,SAAS,OAAO,EAAE,SAAS,QAAQ,CAAC;AAAA,UACtC,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,QAAQ;AAAA,cACnB,EAAE;AAAA,gBACE,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE,UAAU,GAAG;AAAA,cACnB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,UAAU,GAAG;AAAA,YACnB;AAAA,UACJ;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,KAAK;AAAA,gBAChB,EAAE,SAAS,MAAM;AAAA,cACrB;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE,SAAS;AAAA,cACT,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,SAAS,KAAK;AAAA,YACpB;AAAA,YACA,EAAE;AAAA,cACE,SAAS;AAAA,cACT,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YACA,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,GAAG,CAAC,CAAC;AAAA,YAChE,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,GAAG,CAAC,CAAC;AAAA,YAChE,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAED,EAAE;AAAA,YACE,SAAS;AAAA,YACT,EAAE,SAAS,QAAQ;AAAA,YACnB,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,cACd,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,UAEA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UAC1D,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,MAAM,GAAG,EAAE,QAAQ,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YACrC,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,MAAM,GAAG,EAAE,SAAS,MAAM,CAAC;AAAA,YACjE,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAED,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,QAAQ,GAAG,EAAE,SAAS,MAAM,GAAG,EAAE,SAAS,QAAQ,CAAC;AAAA,QAC1F;AAAA,MACJ;AAEA,oBAAc;AACd,uBAAiB;AACjB,wBAAkB;AAClB,MAAAD,eAAc;AAEd,MAAAC,QAAO,eAAe,MAAM;AAC5B,MAAAA,QAAO,eAAe,SAAQ,QAAQ;AAAA,IAG1C;AAAA;AAAA;;;ACvdA;AAAA;AAAA;AAAA;AAmBA,QAAM,sBAAsB;AAE5B,QAAM,uBAAuB;AAC7B,QAAMC,iBAAgB;AAEtB,WAAO,UAAU,SAAS,WAAWC,SAAQ,QAAQ,aAAa,IAAI;AAGlE,YAAM,MAAMA,QAAO,QAAQ,aAAa;AACxC,YAAM,KAAK,MAAI;AAEf,UAAIA,QAAO,QAAQ;AAAS,eAAO;AACnC,MAAAA,QAAO,QAAQ,UAAU;AAAA,QACrB,KAAK,MAAI;AAAA,MACb;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAS,SAAS;AAC/C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE;AAAA,UACR,cAAc;AAAA,UACd,EAAE;AAAA,YACE,EAAE,SAAS,IAAI;AAAA,YACf,EAAE,UAAU,KAAG,CAAC;AAAA,UACpB;AAAA,QACJ,CAAC;AAAA,MACL;AACA,eAAS,oBAAoB;AACzB,cAAM,IAAIA,QAAO,YAAY,SAAS,eAAe;AACrD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE;AAAA,cACE,cAAc;AAAA,cACd,EAAE,SAAS,IAAI;AAAA,YACnB;AAAA,YACA,EAAE;AAAA,cACE,cAAc;AAAA,cACd,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAS,OAAO;AAC7C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,iBAAS,IAAE,GAAG,IAAE,MAAI,GAAG,KAAK;AACxB,YAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,IAAE;AAAA,cACF,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,IAAE;AAAA,cACN;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAGA,eAAS,kBAAkB;AACvB,cAAM,IAAIA,QAAO,YAAY,SAAS,aAAa;AACnD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,iBAAS,IAAE,GAAG,IAAE,MAAI,GAAG,KAAK;AACxB,YAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,IAAE;AAAA,cACF,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,IAAE;AAAA,cACN;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MAEJ;AAGA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAS,OAAO;AAC7C,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE;AAAA,UACR,cAAc;AAAA,UACd,EAAE,SAAS,IAAI;AAAA,QACnB,CAAC;AAED,UAAE,QAAQ,EAAE;AAAA,UACR,cAAc;AAAA,UACd,EAAE;AAAA,YACE,EAAE,SAAS,IAAI;AAAA,YACf,EAAE,UAAU,EAAE;AAAA,UAClB;AAAA,QACJ,CAAC;AAED,UAAE,QAAQ,EAAE;AAAA,UACR,cAAc;AAAA,UACd,EAAE;AAAA,YACE,EAAE,SAAS,IAAI;AAAA,YACf,EAAE,UAAU,KAAG,CAAC;AAAA,UACpB;AAAA,QACJ,CAAC;AAAA,MACL;AAGA,eAAS,kBAAkB;AACvB,cAAM,IAAIA,QAAO,YAAY,SAAS,aAAa;AACnD,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE;AAAA,UACR,cAAc;AAAA,UACd,EAAE,SAAS,IAAI;AAAA,QACnB,CAAC;AAED,UAAE,QAAQ,EAAE;AAAA,UACR,cAAc;AAAA,UACd,EAAE;AAAA,YACE,EAAE,SAAS,IAAI;AAAA,YACf,EAAE,UAAU,EAAE;AAAA,UAClB;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,eAAS,UAAU;AACf,cAAM,IAAIA,QAAO,YAAY,SAAS,KAAK;AAC3C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,cAAc,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,UAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC,CAAC;AAC1E,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,UAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC,CAAC;AAC1E,cAAM,KAAK,EAAE,SAAS,IAAI;AAE1B,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,WAAW,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAC7C,cAAM,WAAW,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAC7C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAGvC,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC;AAAA,YAC3C,EAAE,IAAK,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC,CAAC;AAAA,UACvD;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC;AAAA,YAC3C,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,UACxB;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,UAAU,EAAE;AAAA,YACjC,EAAE,IAAI,EAAE,KAAK,SAAS,YAAY,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC,CAAC;AAAA,UACzE;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,UAAU,EAAE;AAAA,YACjC,EAAE,IAAI,EAAE,KAAK,SAAS,YAAY,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC,CAAC;AAAA,UACzE;AAAA,UAEA,EAAE,KAAK,cAAc,WAAW,IAAI,IAAI;AAAA,UACxC,EAAE,KAAK,cAAc,WAAW,IAAI,IAAI;AAAA,UACxC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,EAAE;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,EAAE;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,QAAQ;AAAA,UAC/C,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,QAAQ;AAAA,UAC/C,EAAE,KAAK,cAAc,QAAQ,IAAI,UAAU,EAAE;AAAA,UAC7C,EAAE,KAAK,cAAc,QAAQ,IAAI,UAAU,EAAE;AAAA,UAE7C,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,OAAO,IAAI,EAAE;AAAA,YAClC,EAAE;AAAA,cACE,EAAE,KAAK,cAAc,OAAO,IAAI,EAAE;AAAA,cAClC,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,YACxB;AAAA,UACJ;AAAA,UACA,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,QACxB;AAAA,MACJ;AAGA,eAAS,eAAe;AACpB,cAAM,IAAIA,QAAO,YAAY,SAAS,UAAU;AAChD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,cAAc,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,UAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC,CAAC;AAC1E,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AAEtD,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,WAAW,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAC7C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAEvC,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC;AAAA,YAC3C,EAAE,IAAK,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,IAAI,CAAC,CAAC;AAAA,UAC7D;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,IAAI,CAAC;AAAA,YACjD,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,UACxB;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,UAAU,EAAE;AAAA,YACjC,EAAE,IAAI,EAAE,KAAK,SAAS,aAAa,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC,CAAC;AAAA,UAC1E;AAAA,UACA,EAAE,KAAK,cAAc,WAAW,IAAI,IAAI;AAAA,UACxC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,EAAE;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,QAAQ;AAAA,UAC/C,EAAE,KAAK,cAAc,QAAQ,IAAI,UAAU,EAAE;AAAA,UAE7C,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,OAAO,IAAI,EAAE;AAAA,YAClC,EAAE;AAAA,cACE,EAAE,KAAK,cAAc,OAAO,IAAI,EAAE;AAAA,cAClC,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,YACxB;AAAA,UACJ;AAAA,UACA,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,QACxB;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAS,SAAS;AAC/C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,IAAI;AACzB,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACrD,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAExD,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAMC,KAAI,EAAE,UAAUD,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,SAAS,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAE3C,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC;AAAA,YAC3C;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,cAC9D,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,UAAU,CAAC;AAAA,YAChC;AAAA,cACI,GAAG,EAAE,IAAI,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC,CAAC;AAAA,cAC7E,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UAEA,EAAE,KAAK,cAAc,WAAW,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,WAAW,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,WAAW,GAAG,CAAC;AAAA,UAEpC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,WAAW,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UAEpC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,WAAW,GAAGC,EAAC;AAAA,UAEpC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UAEpC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,EAAE;AAAA,UACrC,EAAE,KAAK,cAAc,QAAQA,IAAG,IAAI,EAAE;AAAA,UAEtC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,MAAM;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,QAAQ,QAAQ,MAAM;AAAA,UACnD,EAAE,KAAK,cAAc,QAAQ,QAAQ,QAAQ,MAAM;AAAA,UAEnD,EAAE,KAAK,cAAc,QAAQ,GAAG,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,QAAQ,EAAE;AAAA,UAE3C,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,EAAE;AAAA,QACzC;AAAA,MACJ;AAGA,eAAS,oBAAoB;AACzB,cAAM,IAAID,QAAO,YAAY,SAAS,eAAe;AACrD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,IAAI;AACzB,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACrD,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAExD,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,YAAY,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAE9C,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,IAAI,CAAC;AAAA,YACjD;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,eAAe,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,cACpE,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UAGA,EAAE,KAAK,cAAc,WAAW,GAAG,EAAE;AAAA,UAGrC,EAAE,KAAK,cAAc,WAAW,GAAG,EAAE;AAAA,UAGrC,EAAE,KAAK,cAAc,WAAW,IAAI,IAAI;AAAA,UAGxC,EAAE,KAAK,cAAc,QAAQ,GAAG,IAAI,CAAC;AAAA,UACrC,EAAE,KAAK,cAAc,WAAW,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,QAAQ,GAAG,IAAI,CAAC;AAAA,UACrC,EAAE,KAAK,cAAc,QAAQ,GAAG,MAAM,CAAC;AAAA,UACvC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UAGpC,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,CAAC;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,GAAG,IAAI,CAAC;AAAA,UAGrC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,EAAE;AAAA,UAIrC,EAAE,KAAK,cAAc,WAAW,GAAG,EAAE;AAAA,UACrC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UAGtC,EAAE,KAAK,cAAc,QAAQ,MAAM,MAAM,SAAS;AAAA,UAClD,EAAE,KAAK,cAAc,QAAQ,WAAW,WAAW,SAAS;AAAA,UAC5D,EAAE,KAAK,cAAc,QAAQ,WAAW,WAAW,SAAS;AAAA,UAC5D,EAAE,KAAK,cAAc,QAAQ,GAAG,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,WAAW,EAAE;AAAA,QAClD;AAAA,MACJ;AAGA,eAAS,gBAAgB;AACrB,cAAM,IAAIA,QAAO,YAAY,SAAS,WAAW;AACjD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,cAAc,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE,IAAI,EAAE;AAAA,YACJ,EAAE;AAAA,cACE,cAAc;AAAA,cACd,EAAE,SAAS,IAAI;AAAA,cACf,EAAE,SAAS,IAAI;AAAA,YACnB;AAAA,YACA,EAAE;AAAA,cACE,cAAc;AAAA,cACd,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,cAC3C,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,YAC/C;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,oBAAoB;AACzB,cAAM,IAAIA,QAAO,YAAY,SAAS,eAAe;AACrD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE;AAAA,UACR,cAAc;AAAA,UACd,EAAE,SAAS,IAAI;AAAA,UACf,EAAE,SAAS,IAAI;AAAA,QACnB,CAAC;AACD,iBAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,YAAE,QAAQ,EAAE;AAAA,YACR,cAAc;AAAA,YACd,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AAAA,YAC7C,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AAAA,UACjD,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,0BAA0B;AAC/B,cAAM,IAAIA,QAAO,YAAY,SAAS,qBAAqB;AAC3D,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE;AAAA,UACR,cAAc;AAAA,UACd,EAAE,SAAS,IAAI;AAAA,UACf,EAAE,SAAS,IAAI;AAAA,QACnB,CAAC;AACD,iBAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,YAAE,QAAQ,EAAE;AAAA,YACR,cAAc;AAAA,YACd,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AAAA,YAC7C,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AAAA,UACjD,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,sBAAsB;AAC3B,cAAM,IAAIA,QAAO,YAAY,SAAS,iBAAiB;AACvD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE;AAAA,UACR,cAAc;AAAA,UACd,EAAE,SAAS,IAAI;AAAA,UACf,EAAE,SAAS,IAAI;AAAA,QACnB,CAAC;AACD,iBAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,YAAE,QAAQ,EAAE;AAAA,YACR,cAAc;AAAA,YACd,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AAAA,YAC7C,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AAAA,UACjD,CAAC;AAAA,QACL;AAAA,MACJ;AAGA,eAAS,4BAA4B;AACjC,cAAM,IAAIA,QAAO,YAAY,SAAS,uBAAuB;AAC7D,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE,QAAQ,EAAE;AAAA,UACR,cAAc;AAAA,UACd,EAAE,SAAS,IAAI;AAAA,UACf,EAAE,SAAS,IAAI;AAAA,QACnB,CAAC;AACD,iBAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,YAAE,QAAQ,EAAE;AAAA,YACR,cAAc;AAAA,YACd,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AAAA,YAC7C,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AAAA,UACjD,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,WAAW;AAEhB,cAAM,IAAIA,QAAO,YAAY,SAAS,MAAM;AAC5C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,UAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC,CAAC;AAC1E,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,UAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC,CAAC;AAC1E,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAExD,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,WAAW,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAC7C,cAAM,WAAW,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAC7C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,cAAc,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAChD,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,QAAQ,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAE1C,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC;AAAA,YAC3C;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,cAC9D,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC;AAAA,YAC3C;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,cAC9D,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,UAAU,EAAE;AAAA,YACjC;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,aAAa,IAAI,IAAI,EAAE;AAAA,cAC1C,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,UAAU,EAAE;AAAA,YACjC;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,aAAa,IAAI,IAAI,EAAE;AAAA,cAC1C,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE,KAAK,cAAc,WAAW,IAAI,IAAI;AAAA,UACxC,EAAE,KAAK,cAAc,WAAW,IAAI,IAAI;AAAA,UACxC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,EAAE;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,EAAE;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,QAAQ;AAAA,UAC/C,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,QAAQ;AAAA,UAC/C,EAAE,KAAK,cAAc,QAAQ,IAAI,UAAU,EAAE;AAAA,UAC7C,EAAE,KAAK,cAAc,QAAQ,IAAI,UAAU,EAAE;AAAA,UAE7C,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,OAAO,IAAI,EAAE;AAAA,YAClC,EAAE;AAAA,cACE,EAAE,KAAK,cAAc,OAAO,IAAI,EAAE;AAAA,cAClC;AAAA,gBACI,GAAG,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,gBAChE,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,cACf;AAAA,YACJ;AAAA,UACJ;AAAA,UAEA,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,CAAC;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,WAAW;AAAA,UAChD,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,WAAW,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,QAAQ,aAAa,aAAa,CAAC;AAAA,UACxD,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,CAAC;AAAA,UACrC,EAAE,KAAK,cAAc,WAAW,GAAG,EAAE;AAAA,UACrC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,EAAE;AAAA,UAErC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,EAAE;AAAA,UAEvC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,KAAK;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,OAAO,OAAO,KAAK;AAAA,UAEhD,EAAE,KAAK,cAAc,QAAQ,GAAG,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,OAAO,EAAE;AAAA,UAE1C,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,EAAE;AAAA,UACvC,EAAE,KAAK,cAAc,WAAW,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,EAAE;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,EAAE;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,QAC1C;AAAA,MAEJ;AAGA,eAAS,gBAAgB;AAErB,cAAM,IAAIA,QAAO,YAAY,SAAS,WAAW;AACjD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,UAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC,CAAC;AAC1E,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAExD,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACzC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,WAAW,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAC7C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,cAAc,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAChD,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,QAAQ,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAE1C,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC;AAAA,YAC3C;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,eAAe,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,cACpE,GAAG,EAAE,KAAK,cAAc,QAAQ,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAI,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC;AAAA,cAC/E,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,IAAI,CAAC;AAAA,YACjD;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,cAC9D,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,UAAU,EAAE;AAAA,YACjC;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,cAAc,IAAI,IAAI,EAAE;AAAA,cAC3C,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE,KAAK,cAAc,WAAW,IAAI,IAAI;AAAA,UACxC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,EAAE;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,QAAQ;AAAA,UAC/C,EAAE,KAAK,cAAc,QAAQ,IAAI,UAAU,EAAE;AAAA,UAE7C,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,OAAO,IAAI,EAAE;AAAA,YAClC,EAAE;AAAA,cACE,EAAE,KAAK,cAAc,OAAO,IAAI,EAAE;AAAA,cAClC;AAAA,gBACI,GAAG,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,gBACtE,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,cACf;AAAA,YACJ;AAAA,UACJ;AAAA,UAEA,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,CAAC;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,WAAW;AAAA,UAChD,EAAE,KAAK,cAAc,WAAW,GAAG,EAAE;AAAA,UACrC,EAAE,KAAK,cAAc,QAAQ,IAAK,IAAI,CAAC;AAAA,UACvC,EAAE,KAAK,cAAc,QAAQ,GAAI,GAAG,CAAC;AAAA,UACrC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,QAAQ,aAAa,aAAa,CAAC;AAAA,UACxD,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,CAAC;AAAA,UACrC,EAAE,KAAK,cAAc,WAAW,GAAG,EAAE;AAAA,UACrC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,EAAE;AAAA,UAErC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,EAAE;AAAA,UAEvC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,KAAK;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,OAAO,OAAO,KAAK;AAAA,UAEhD,EAAE,KAAK,cAAc,QAAQ,GAAG,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,OAAO,EAAE;AAAA,UAE1C,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,WAAW,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,MAAM,EAAE;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,EAAE;AAAA,QAC3C;AAAA,MACJ;AAGA,eAAS,iBAAiB;AAEtB,cAAM,IAAIA,QAAO,YAAY,SAAS,YAAY;AAClD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,UAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC,CAAC;AAC1E,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAExD,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,cAAc,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAChD,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACtC,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,QAAQ,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAE1C,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,IAAI,CAAC;AAAA,YACjD;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,eAAe,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,cACpE,GAAG,EAAE,KAAK,cAAc,QAAQ,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAI,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC;AAAA,cAC/E,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,IAAI,CAAC;AAAA,YACjD;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,eAAe,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,cACpE,GAAG,EAAE,KAAK,cAAc,QAAQ,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAI,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC;AAAA,cAC/E,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UAGA,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,OAAO,IAAI,EAAE;AAAA,YAClC,EAAE;AAAA,cACE,EAAE,KAAK,cAAc,OAAO,IAAI,EAAE;AAAA,cAClC;AAAA,gBACI,GAAG,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,gBACtE,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,cACf;AAAA,YACJ;AAAA,UACJ;AAAA,UAEA,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,CAAC;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,WAAW;AAAA,UAChD,EAAE,KAAK,cAAc,WAAW,GAAG,EAAE;AAAA,UACrC,EAAE,KAAK,cAAc,QAAQ,IAAK,IAAI,CAAC;AAAA,UACvC,EAAE,KAAK,cAAc,QAAQ,GAAI,GAAG,CAAC;AAAA,UACrC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,CAAC;AAAA,UACpC,EAAE,KAAK,cAAc,QAAQ,aAAa,aAAa,CAAC;AAAA,UACxD,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,CAAC;AAAA,UACrC,EAAE,KAAK,cAAc,WAAW,GAAG,EAAE;AAAA,UACrC,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,EAAE;AAAA,UAErC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,IAAI,EAAE;AAAA,UAEvC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,KAAK;AAAA,UACzC,EAAE,KAAK,cAAc,QAAQ,OAAO,OAAO,KAAK;AAAA,UAEhD,EAAE,KAAK,cAAc,QAAQ,GAAG,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,IAAI,OAAO,EAAE;AAAA,UAE1C,EAAE,KAAK,cAAc,QAAQ,GAAG,GAAG,EAAE;AAAA,QACzC;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAS,MAAM;AAC5C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,IAAI;AACzB,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACrD,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAExD,UAAE;AAAA,UACE,EAAE,KAAK,cAAc,SAAS,GAAG,EAAE;AAAA,UACnC,EAAE,KAAK,cAAc,QAAQ,GAAG,EAAE;AAAA,UAClC,EAAE,KAAK,cAAc,SAAS,GAAG,EAAE;AAAA,QACvC;AAAA,MACJ;AAGA,eAAS,iBAAiB;AACtB,cAAM,IAAIA,QAAO,YAAY,SAAS,YAAY;AAClD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,IAAI;AACzB,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACrD,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AAEtD,UAAE;AAAA,UACE,EAAE,KAAK,cAAc,SAAS,GAAG,EAAE;AAAA,UACnC,EAAE,KAAK,cAAc,QAAQ,GAAG,EAAE;AAAA,QACtC;AAAA,MACJ;AAGA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAS,MAAM;AAC5C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,KAAG,CAAC,CAAC;AAE1C,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,IAAI,GAAG,GAAG;AAAA,UAC7C,EAAE,KAAK,SAAS,QAAQ,EAAE,SAAS,IAAI,GAAG,KAAK,EAAE,SAAS,IAAI,CAAC;AAAA,QACnE;AAAA,MACJ;AAEA,eAAS,gBAAgB;AACrB,cAAM,IAAIA,QAAO,YAAY,SAAS,WAAW;AACjD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,KAAG,CAAC,CAAC;AAE1C,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,IAAI,GAAG,GAAG;AAAA,UACnD,EAAE,KAAK,SAAS,aAAa,EAAE,SAAS,IAAI,GAAG,KAAK,EAAE,SAAS,IAAI,CAAC;AAAA,QACxE;AAAA,MACJ;AAGA,eAAS,iBAAiB;AACtB,cAAM,IAAIA,QAAO,YAAY,SAAS,YAAY;AAClD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,KAAG,CAAC,CAAC;AAE1C,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,IAAI,GAAG,GAAG;AAAA,UACnD,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,IAAI,GAAG,KAAK,EAAE,SAAS,IAAI,CAAC;AAAA,QACzE;AAAA,MACJ;AAGA,eAAS,iBAAiB;AACtB,cAAM,IAAIA,QAAO,YAAY,SAAS,YAAY;AAClD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,IAAI;AACzB,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACrD,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAGxD,cAAM,QAAQ,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAC1C,cAAM,SAAS,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAC3C,cAAM,SAAS,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAE3C,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC;AAAA,YAC3C,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,YACzC;AAAA,cACI,GAAG,EAAE,KAAK,cAAc,YAAY,GAAG,KAAK;AAAA,cAC5C,GAAG,EAAE,KAAK,cAAc,WAAW,OAAO,MAAM;AAAA,cAChD,GAAG,EAAE,KAAK,cAAc,QAAQ,OAAO,QAAQ,MAAM;AAAA,cACrD,GAAG,EAAE,KAAK,cAAc,QAAQ,GAAG,QAAQ,EAAE;AAAA,cAC7C,GAAG,EAAE,KAAK,cAAc,QAAQ,GAAG,QAAQ,EAAE;AAAA,cAC7C,GAAG,EAAE,KAAK,cAAc,QAAQ,EAAE;AAAA,YACtC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAIA,eAAS,gBAAgB;AACrB,cAAM,IAAIA,QAAO,YAAY,SAAS,WAAW;AACjD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,IAAI;AACzB,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACrD,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AACvD,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AAGtD,cAAM,QAAQ,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAC1C,cAAM,SAAS,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAC3C,cAAM,SAAS,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAE3C,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,IAAI,CAAC;AAAA,YAC3C;AAAA,cACI,GAAG,EAAE,KAAK,cAAc,SAAS,EAAE;AAAA,cACnC,GAAG,EAAE,KAAK,cAAc,SAAS,EAAE;AAAA,YACvC;AAAA,YACA;AAAA,cACI,GAAG,EAAE,KAAK,cAAc,YAAY,GAAG,KAAK;AAAA,cAC5C,GAAG,EAAE,KAAK,cAAc,WAAW,OAAO,MAAM;AAAA,cAChD,GAAG,EAAE,KAAK,cAAc,QAAQ,OAAO,QAAQ,MAAM;AAAA,cACrD,GAAG,EAAE,KAAK,cAAc,QAAQ,GAAG,QAAQ,EAAE;AAAA,cAC7C,GAAG,EAAE,KAAK,cAAc,QAAQ,GAAG,QAAQ,EAAE;AAAA,YACjD;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAGA,eAAS,kBAAkB;AACvB,cAAM,IAAIA,QAAO,YAAY,SAAS,aAAa;AACnD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,IAAI;AACzB,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACrD,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AACtD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAExD,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,IAAI,CAAC;AAAA,YACjD,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,YACzC;AAAA,cACI,GAAG,EAAE,KAAK,cAAc,QAAQ,EAAE;AAAA,cAClC,GAAG,EAAE,KAAK,cAAc,SAAS,GAAG,EAAE;AAAA,cACtC,GAAG,EAAE,KAAK,cAAc,SAAS,GAAG,EAAE;AAAA,YAC1C;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,qBAAqB;AAC1B,cAAM,IAAIA,QAAO,YAAY,SAAS,gBAAgB;AACtD,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UACE,EAAE,SAAS,QAAQ,EAAE,SAAU,EAAE,UAAU,CAAC,CAAE,CAAC;AAAA,UAC/C,EAAE;AAAA,YACE,EAAE,UAAU,CAAC;AAAA,YACb,EAAE;AAAA,cACE,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,YAC9C;AAAA,UACJ;AAAA,UAEA,EAAE;AAAA,YACE,cAAc;AAAA,YACd,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAAA,YAC9C,EAAE,UAAU,KAAG,CAAC;AAAA,YAChB,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,SAAS,MAAM;AAAA,YACjB,EAAE,UAAU,EAAE;AAAA,UAClB;AAAA,UAEA,EAAE,SAAS,QAAQ,EAAE,SAAS,KAAK,CAAC;AAAA,UACpC,EAAE,SAAS,SAAS,EAAE,SAAS,MAAM,CAAC;AAAA,UACtC,EAAE,SAAS,SAAS,EAAE,SAAS,MAAM,CAAC;AAAA,UACtC,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,MAAM,GAAG,EAAE,OAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,YAExD,EAAE;AAAA,cACE,EAAE,KAAK,cAAc,WAAW,EAAE,SAAS,OAAO,CAAC;AAAA,cACnD;AAAA,gBACI,GAAG,EAAE,KAAK,cAAc,SAAS,EAAE,SAAS,OAAO,CAAC;AAAA,gBACpD,GAAG,EAAE,KAAK,cAAc,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,cACpF;AAAA,cACA;AAAA,gBACI,GAAG,EAAE;AAAA,kBACD,cAAY;AAAA,kBACZ,EAAE,SAAS,OAAO;AAAA,kBAClB,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,kBAC7C;AAAA,gBACJ;AAAA,gBACA,GAAG,EAAE;AAAA,kBACD,cAAY;AAAA,kBACZ,EAAE,SAAS,OAAO;AAAA,kBAClB,EAAE,SAAS,OAAO;AAAA,gBACtB;AAAA,gBACA,GAAG,EAAE;AAAA,kBACD,cAAY;AAAA,kBACZ,EAAE,SAAS,OAAO;AAAA,kBAClB,EAAE,SAAS,MAAM;AAAA,kBACjB,EAAE,SAAS,OAAO;AAAA,gBACtB;AAAA,gBACA,GAAG,EAAE;AAAA,kBACD,cAAY;AAAA,kBACZ,EAAE,SAAS,OAAO;AAAA,kBAClB;AAAA,kBACA,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,gBAClD;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE,SAAS,QAAQ,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC;AAAA,YACnE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC,CAAC;AAAA,YACrE,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YACnE,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UACD,EAAE;AAAA,YACE,EAAE,UAAU,CAAC;AAAA,YACb,EAAE,SAAS,MAAM;AAAA,UACrB;AAAA,QACJ;AAAA,MACJ;AAIA,eAAS,oBAAoB;AACzB,cAAM,IAAIA,QAAO,YAAY,SAAS,gBAAgB;AACtD,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE,SAAS,GAAG;AAAA,cAClB;AAAA,cACA,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE;AAAA,YACA,EAAE,SAAS,KAAK;AAAA,UACpB;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,MAAM,GAAG,EAAE,SAAU,EAAE,SAAS,OAAO,GAAG,EAAE,SAAS,MAAM,CAAE,CAAC;AAAA,YAChE,EAAE;AAAA,cACE,EAAE,SAAS,OAAO;AAAA,cAClB,EAAE,YAAY,EAAE,SAAS,MAAM,CAAC;AAAA,YACpC;AAAA,YACA,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAClE,EAAE,SAAS,QAAQ,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAChE,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MAEJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAS,SAAS;AAC/C,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,WAAW,EAAE,SAAS,KAAK,CAAC;AAAA,YAC5C;AAAA,cACI,GAAG,EAAE,KAAK,cAAc,SAAS,EAAE,SAAS,MAAM,CAAC;AAAA,cACnD,GAAG,EAAE;AAAA,gBACD,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE,UAAU,EAAI;AAAA,cACpB;AAAA,cACA,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE,KAAK,cAAc,mBAAmB,EAAE,SAAS,KAAK,GAAG,GAAG;AAAA,UAC9D,EAAE,KAAK,SAAS,kBAAkB,KAAK,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,MAAM,CAAC;AAAA,UAC1E,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,KAAK,cAAc,SAAS,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,cAC3E,EAAE,UAAU,EAAE;AAAA,YAClB;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE;AAAA,gBACE,EAAE,YAAY,EAAE,SAAS,MAAM,CAAC;AAAA,gBAChC,EAAE,UAAU,GAAI;AAAA,cACpB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAS,SAAS;AAC/C,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAOA,QAAO,MAAM,KAAG,CAAC;AAC9B,cAAM,MAAM,EAAE,UAAU,IAAI;AAC5B,cAAM,OAAO,EAAE,UAAU,IAAI;AAC7B,cAAM,OAAO,EAAE,UAAU,OAAO,EAAE;AAElC,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,iBAAiB,EAAE,SAAS,KAAK,CAAC;AAAA,YAClD;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,eAAe,EAAE,SAAS,MAAM,CAAC;AAAA,cACpD,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UAEA,EAAE,KAAK,SAAS,yBAAyB,EAAE,SAAS,KAAK,GAAG,GAAG;AAAA,UAE/D,EAAE,KAAK,SAAS,kBAAkB,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,MAAM,CAAC;AAAA,UAC3E,EAAE,KAAK,SAAS,kBAAkB,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,QAC3G;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAS,SAAS;AAC/C,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAOA,QAAO,MAAM,KAAG,CAAC;AAC9B,cAAM,MAAM,EAAE,UAAU,IAAI;AAC5B,cAAM,OAAO,EAAE,UAAU,IAAI;AAC7B,cAAM,OAAO,EAAE,UAAU,OAAO,EAAE;AAElC,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,QAAQ,EAAE,YAAY,EAAE,SAAS,KAAK,CAAC,GAAG,EAAE,UAAU,EAAI,CAAC;AAAA,YAC7D;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,eAAe,EAAE,SAAS,MAAM,CAAC;AAAA,cACpD,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE,KAAK,SAAS,kBAAkB,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,GAAG,IAAI;AAAA,UAC1E,EAAE,KAAK,SAAS,kBAAkB,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,GAAG,EAAE,UAAU,EAAE,GAAG,IAAI;AAAA,UACtG,EAAE,KAAK,SAAS,uBAAuB,KAAM,EAAE,SAAS,MAAM,CAAC;AAAA,QACnE;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAS,SAAS;AAC/C,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,YAAY,KAAK;AAE5B,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAOA,QAAO,MAAM,KAAG,CAAC;AAC9B,cAAM,OAAO,EAAE,UAAU,IAAI;AAC7B,cAAM,OAAO,EAAE,UAAU,OAAO,EAAE;AAElC,UAAE;AAAA,UACE,EAAE,SAAS,aAAa,EAAE,YAAY,EAAE,SAAS,KAAK,CAAC,CAAC;AAAA,UACxD,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,WAAW;AAAA,cACtB,EAAE,UAAU,EAAI;AAAA,YACpB;AAAA,YACA;AAAA,cACI,GAAG,EAAE,KAAK,SAAS,eAAe,EAAE,SAAS,MAAM,CAAC;AAAA,cACpD,GAAG,EAAE,IAAI,CAAC,CAAC;AAAA,YACf;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,WAAW;AAAA,cACtB,EAAE,UAAU,GAAI;AAAA,YACpB;AAAA,UACJ;AAAA,UAEA,EAAE,KAAK,cAAc,SAAS,EAAE,SAAS,KAAK,GAAG,IAAI;AAAA,UACrD,EAAE,WAAW,MAAM,EAAE,QAAQ,EAAE,SAAS,WAAW,GAAG,EAAE,UAAU,EAAI,CAAC,CAAC;AAAA,UACxE,EAAE,KAAK,SAAS,kBAAkB,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI;AAAA,UAC7D,EAAE,KAAK,cAAc,iBAAiB,MAAM,EAAE,SAAS,MAAM,CAAC;AAAA,UAE9D,EAAE,KAAK,cAAc,WAAW,EAAE,SAAS,MAAM,GAAG,IAAI;AAAA,UACxD,EAAE,KAAK,cAAc,QAAQ,EAAE,SAAS,MAAM,GAAG,MAAO,IAAI;AAAA,UAC5D,EAAE,KAAK,cAAc,QAAQ,MAAM,EAAE,UAAU,EAAE,GAAI,IAAI;AAAA,UAEzD,EAAE,KAAK,cAAc,SAAS,MAAM,IAAI;AAAA,UACxC,EAAE,KAAK,cAAc,QAAQ,MAAM,IAAI;AAAA,UAEvC,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,KAAK,cAAc,SAAS,IAAI;AAAA,cAClC,EAAE,UAAU,EAAE;AAAA,YAClB;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,UAAU;AAAA,cACrB,EAAE,KAAK,cAAc,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,cAClF,EAAE,KAAK,cAAc,QAAQ,MAAM,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YACrF;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,UAAU;AAAA,cACrB,EAAE,KAAK,cAAc,QAAQ,MAAM,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,cACjF,EAAE,KAAK,cAAc,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,MAAM,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YACtF;AAAA,UACJ;AAAA,QAEJ;AAAA,MACJ;AAEA,eAAS,qBAAqB;AAC1B,cAAM,IAAIA,QAAO,YAAY,SAAS,gBAAgB;AACtD,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,KAAK;AAC1B,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC;AAEtD,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AACvC,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UACE,EAAE,KAAK,cAAc,WAAW,GAAG,EAAE;AAAA,UACrC,EAAE,KAAK,cAAc,WAAW,GAAG,GAAG;AAAA,UACtC,EAAE,KAAK,cAAc,QAAQ,GAAG,KAAK,GAAG;AAAA,UACxC,EAAE,KAAK,cAAc,QAAQ,KAAK,EAAE,UAAU,EAAE,GAAG,GAAG;AAAA,UAEtD,EAAE;AAAA,YACE,EAAE,KAAK,cAAc,OAAO,IAAI,GAAG;AAAA,UACvC;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,eAAe;AACpB,cAAM,IAAIA,QAAO,YAAY,SAAS,UAAU;AAChD,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,KAAG,CAAC,CAAC;AAE1C,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,aAAa,EAAE,SAAS,KAAK,GAAG,GAAG;AAAA,UAEnD,EAAE;AAAA,YACE,EAAE,KAAK,SAAS,kBAAkB,GAAG;AAAA,UACzC;AAAA,QACJ;AAAA,MACJ;AAEA,wBAAkB;AAClB,kBAAY;AACZ,sBAAgB;AAChB,gBAAU;AACV,sBAAgB;AAChB,gBAAU;AACV,sBAAgB;AAChB,oBAAc;AACd,mBAAa;AACb,cAAQ;AACR,wBAAkB;AAClB,kBAAY;AACZ,qBAAe;AACf,oBAAc;AACd,eAAS;AACT,qBAAe;AACf,eAAS;AACT,qBAAe;AACf,oBAAc;AACd,eAAS;AACT,gCAA0B;AAC1B,0BAAoB;AACpB,8BAAwB;AACxB,wBAAkB;AAClB,oBAAc;AACd,yBAAmB;AACnB,mBAAa;AAEb,yBAAmB;AAEnB,qBAAe;AAGf,wBAAkB;AAElB,kBAAY;AACZ,kBAAY;AACZ,kBAAY;AACZ,kBAAY;AAEZ,2BAAqBA,SAAQ,SAAS,gBAAgB,SAAS,WAAW,KAAG,GAAG,KAAG,CAAC;AACpF,2BAAqBA,SAAQ,SAAS,gBAAgB,SAAS,WAAW,KAAG,GAAG,EAAE;AAClF,2BAAqBA,SAAQ,SAAS,gBAAgB,SAAS,WAAW,KAAG,GAAG,KAAG,CAAC;AACpF,2BAAqBA,SAAQ,SAAS,gBAAgB,SAAS,WAAW,IAAI,KAAG,GAAG,IAAI;AAExF,2BAAqBA,SAAQ,SAAS,oBAAoB,SAAS,eAAe,KAAG,GAAG,KAAG,GAAG,IAAI;AAElG,MAAAD,eAAcC,SAAQ,QAAQ,SAAS,aAAa,SAAS,QAAQ,KAAG,CAAC;AACzE,MAAAD,eAAcC,SAAQ,QAAQ,SAAS,mBAAmB,SAAS,aAAa,KAAG,CAAC;AAapF;AAAA,QACIA;AAAA,QACA,SAAS;AAAA,QACT,KAAG;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AAEA;AAAA,QACIA;AAAA,QACA,SAAS;AAAA,QACT,KAAG;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AAEA,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,eAAe;AAE9C,MAAAA,QAAO,eAAe,SAAS,KAAK;AACpC,MAAAA,QAAO,eAAe,SAAS,UAAU;AACzC,MAAAA,QAAO,eAAe,SAAS,WAAW;AAE1C,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,aAAa;AAE5C,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,aAAa;AAE5C,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,eAAe;AAE9C,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,WAAW;AAC1C,MAAAA,QAAO,eAAe,SAAS,YAAY;AAE3C,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,YAAY;AAE3C,MAAAA,QAAO,eAAe,SAAS,MAAM;AACrC,MAAAA,QAAO,eAAe,SAAS,WAAW;AAC1C,MAAAA,QAAO,eAAe,SAAS,YAAY;AAE3C,MAAAA,QAAO,eAAe,SAAS,iBAAiB;AAChD,MAAAA,QAAO,eAAe,SAAS,uBAAuB;AAEtD,MAAAA,QAAO,eAAe,SAAS,eAAe;AAC9C,MAAAA,QAAO,eAAe,SAAS,qBAAqB;AAEpD,MAAAA,QAAO,eAAe,SAAS,cAAc;AAC7C,MAAAA,QAAO,eAAe,SAAS,oBAAoB;AAEnD,MAAAA,QAAO,eAAe,SAAS,YAAY;AAG3C,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,SAAS;AACxC,MAAAA,QAAO,eAAe,SAAS,SAAS;AAExC,MAAAA,QAAO,eAAe,SAAS,cAAc;AAC7C,MAAAA,QAAO,eAAe,SAAS,cAAc;AAC7C,MAAAA,QAAO,eAAe,SAAS,cAAc;AAC7C,MAAAA,QAAO,eAAe,SAAS,cAAc;AAE7C,MAAAA,QAAO,eAAe,SAAS,WAAW;AAC1C,MAAAA,QAAO,eAAe,SAAS,aAAa;AAE5C,MAAAA,QAAO,eAAe,SAAS,gBAAgB;AAC/C,MAAAA,QAAO,eAAe,SAAS,kBAAkB;AAEjD,MAAAA,QAAO,eAAe,SAAS,UAAU;AACzC,MAAAA,QAAO,eAAe,SAAS,gBAAgB;AAO/C,aAAO;AAAA,IACX;AAAA;AAAA;;;ACv+CA;AAAA;AAAA;AAAA;AAmBA,QAAM,EAAE,OAAAE,QAAO,QAAQ,OAAO,IAAI;AAClC,QAAMC,SAAQ;AAEd,WAAO,UAAU,SAASC,UAASC,SAAQ,QAAQ,SAAS,SAAS,WAAW;AAE5E,YAAM,OAAOA,QAAO,QAAQ,SAAS;AACrC,YAAM,MAAM,OAAK;AAEjB,YAAM,OAAOA,QAAO,QAAQ,SAAS;AACrC,YAAM,MAAM,OAAK;AAEjB,YAAM,IAAIA,QAAO,QAAQ,SAAS;AAElC,UAAI,MAAM,IAAI;AACd,UAAI,UAAU;AACd,aAAO,CAACH,OAAM,GAAG,GAAG;AAChB;AACA,cAAM,OAAO;AAAA,MACjB;AAEA,UAAI,KAAK;AAET,aAAQ,OAAO,IAAI,KAAK,IAAI,CAAC,MAAM;AAAK,aAAK,KAAK;AAIlD,YAAM,IAAI,IAAI,MAAM,UAAQ,CAAC;AAC7B,QAAE,WAAW,OAAO,IAAI,KAAK,CAAC;AAE9B,UAAI,IAAE,UAAQ;AACd,aAAO,KAAG,GAAG;AACT,UAAE,KAAK,OAAO,EAAE,IAAE,IAAI,IAAI,CAAC;AAC3B;AAAA,MACJ;AAEA,YAAM,QAAQ,CAAC;AACf,YAAM,KAAK,MAAM,OAAO,MAAI,CAAC,KAAK;AAElC,eAAS,IAAE,GAAG,IAAE,EAAE,QAAQ,KAAK;AAC3B,cAAM,IAAI,EAAE,KAAK,IAAI;AACrB,cAAM,KAAK,GAAGC,OAAM,eAAe,GAAG,GAAG,CAAC;AAAA,MAC9C;AAEA,YAAM,QAAQE,QAAO,MAAM,KAAK;AAEhC,YAAM,KAAK,IAAI,MAAM,UAAQ,CAAC;AAC9B,SAAG,KAAK;AAER,eAAS,IAAE,GAAG,KAAG,SAAS,KAAK;AAC3B,WAAG,KAAK,GAAG,IAAE,KAAK;AAAA,MACtB;AAEA,YAAM,UAAS,CAAC;AAChB,eAAS,IAAE,GAAG,KAAG,SAAS,KAAK;AAC3B,cAAM,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,IAAI;AACjC,gBAAQ,KAAK,GAAGF,OAAM,eAAe,GAAG,GAAG,CAAC;AAAA,MAChD;AAEA,YAAM,OAAOE,QAAO,MAAM,OAAO;AAEjC,YAAM,QAAQ,OAAO,IAAI,IAAI,CAAC;AAC9B,YAAM,qBAAoB,CAAC;AAC3B,YAAM,cAAa,CAAC;AACpB,eAAS,IAAE,GAAG,KAAG,SAAS,KAAK;AAC3B,cAAM,gBAAgB,OAAO,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC;AACtD,cAAM,SAAS,OAAO,IAAI,KAAK,eAAe,CAAC;AAC/C,2BAAmB,KAAK,GAAGF,OAAM,eAAe,gBAAgB,IAAI,GAAG,GAAG,CAAC;AAC3E,oBAAY,KAAK,GAAGA,OAAM,eAAe,SAAS,IAAI,GAAG,GAAG,CAAC;AAAA,MACjE;AAEA,YAAM,aAAaE,QAAO,MAAO,kBAAoB;AACrD,YAAM,SAASA,QAAO,MAAO,WAAa;AAE1C,eAAS,IAAI,GAAG;AACZ,YAAI,IAAE;AACN,iBAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,cAAI,IAAK,KAAK,GAAI;AACd,gBAAI,IAAK,OAAQ;AAAA,UACrB;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAEA,YAAM,SAAS,MAAM,GAAG;AACxB,eAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,eAAO,KAAK,IAAI,CAAC;AAAA,MACrB;AAEA,YAAM,WAAWA,QAAO,MAAM,MAAM;AAGpC,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,QAAQ;AAC5C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AACrB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,OAAO,KAAK;AAEvB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,cACd,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AACA,UAAE,QAAQ,EAAE,SAAS,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;AAE5C,UAAE,QAAQ,EAAE,MAAM,EAAE;AAAA,UAChB,EAAE;AAAA,YACE;AAAA,YACA,EAAE,QAAQ,EAAE,SAAS,KAAK,CAAC;AAAA,UAC/B;AAAA,UAEA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,UAEA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,UAEA,EAAE,GAAG,CAAC;AAAA,QACV,CAAC,CAAC;AAEF,UAAE,QAAQ,EAAE;AAAA,UACR,EAAE;AAAA,YACE,EAAE,SAAS,GAAG;AAAA,YACd,EAAE;AAAA,cACE,EAAE,UAAU,CAAC;AAAA,cACb,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,UACJ;AAAA,UACA,EAAE,YAAY;AAAA,QAClB,CAAC;AAED,UAAE,QAAQ,EAAE;AAAA,UACR,EAAE;AAAA,YACE,EAAE,SAAS,MAAM;AAAA,YACjB,EAAE,UAAU,OAAO;AAAA,UACvB;AAAA,UACA,EAAE,YAAY;AAAA,QAClB,CAAC;AAED,UAAE,QAAQ,EAAE,SAAS,MAAM,CAAC;AAAA,MAChC;AAEA,eAASD,YAAW;AAChB,cAAM,IAAIC,QAAO,YAAY,SAAO,MAAM;AAC1C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,KAAK,KAAK;AAErB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEzC,UAAE;AAAA,UACE,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,SAAS;AAAA,cACT,EAAE,SAAS,GAAG;AAAA,YAClB;AAAA,UACJ;AAAA,UACA,EAAE,KAAK,UAAU,QAAQ,GAAG;AAAA,UAC5B,EAAE;AAAA,YACE,SAAO;AAAA,YACP,EAAE,SAAS,IAAI;AAAA,YACf,EAAE,SAAS,MAAM;AAAA,YACjB,EAAE,UAAU,CAAC;AAAA,YACb;AAAA,UACJ;AAAA,QACJ;AAAA,MAEJ;AAEA,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,SAAS,KAAK;AAEzB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,SAAS;AAAA,cACT,EAAE,SAAS,GAAG;AAAA,YAClB;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,UAAU,IAAI;AAAA,cAChB,EAAE;AAAA,gBACE,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE,UAAU,GAAG;AAAA,cACnB;AAAA,YACJ;AAAA,UACJ;AAAA,UAEA,EAAE;AAAA,YACE,SAAO;AAAA,YACP,EAAE,SAAS,IAAI;AAAA,YACf,EAAE,SAAS,MAAM;AAAA,YACjB,EAAE,UAAU,CAAC;AAAA,YACb,EAAE,SAAS,OAAO;AAAA,UACtB;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAO,SAAS;AAC7C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,WAAW,KAAK;AAC3B,UAAE,SAAS,aAAa,KAAK;AAE7B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEvC,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,wBAAwB,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,MAAM,CAAC;AAAA,UAC5E,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,GAAG,EAAE,SAAS,MAAM,CAAC,CAAC;AAAA,UAC7D,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,MAAM;AAAA,cACrB;AAAA,YACJ;AAAA,YACA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YAC1D,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE,UAAU,KAAK;AAAA,gBACjB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YACA,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,YAC9B,EAAE,MAAM,EAAE;AAAA,cACN,EAAE;AAAA,gBACE;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,SAAS,GAAG;AAAA,gBAClB;AAAA,cACJ;AAAA,cAEA,EAAE,KAAK,UAAU,QAAQ,CAAC;AAAA,cAE1B,EAAE,SAAS,SAAS,EAAE,UAAU,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAE;AAAA,cACjE,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,cAC9B,EAAE,MAAM,EAAE;AAAA,gBACN,EAAE;AAAA,kBACE;AAAA,kBACA,EAAE;AAAA,oBACE,EAAE,SAAS,GAAG;AAAA,oBACd,EAAE,SAAS,OAAO;AAAA,kBACtB;AAAA,gBACJ;AAAA,gBAEA,EAAE;AAAA,kBACE;AAAA,kBACA,EAAE;AAAA,oBACE,EAAE,SAAS,IAAI;AAAA,oBACf,EAAE;AAAA,sBACE,EAAE;AAAA,wBACE,EAAE,SAAS,GAAG;AAAA,wBACd,EAAE,SAAS,GAAG;AAAA,sBAClB;AAAA,sBACA,EAAE,UAAU,GAAG;AAAA,oBACnB;AAAA,kBACJ;AAAA,gBACJ;AAAA,gBAEA,EAAE;AAAA,kBACE;AAAA,kBACA,EAAE;AAAA,oBACE,EAAE,SAAS,MAAM;AAAA,oBACjB,EAAE;AAAA,sBACE,EAAE,SAAS,OAAO;AAAA,sBAClB,EAAE,UAAU,GAAG;AAAA,oBACnB;AAAA,kBACJ;AAAA,gBACJ;AAAA,gBAEA,EAAE;AAAA,kBACE;AAAA,kBACA,EAAE,SAAS,MAAM;AAAA,kBACjB;AAAA,kBACA;AAAA,gBACJ;AAAA,gBAEA,EAAE;AAAA,kBACE,UAAU;AAAA,kBACV,EAAE,SAAS,MAAM;AAAA,kBACjB;AAAA,gBACJ;AAAA,gBAEA,EAAE;AAAA,kBACE,UAAU;AAAA,kBACV;AAAA,kBACA;AAAA,kBACA,EAAE,SAAS,MAAM;AAAA,gBACrB;AAAA,gBAEA,EAAE;AAAA,kBACE,UAAU;AAAA,kBACV;AAAA,kBACA;AAAA,kBACA,EAAE,SAAS,MAAM;AAAA,gBACrB;AAAA,gBAEA,EAAE;AAAA,kBACE,UAAU;AAAA,kBACV;AAAA,kBACA,EAAE,SAAS,KAAK;AAAA,kBAChB;AAAA,gBACJ;AAAA,gBAEA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,gBAC1D,EAAE,GAAG,CAAC;AAAA,cACV,CAAC;AAAA,cAED,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,cAC3D,EAAE,GAAG,CAAC;AAAA,YACV,CAAC;AAAA,YAED,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UACD,EAAE;AAAA,YACE,SAAS;AAAA,YACT,EAAE,SAAS,IAAI;AAAA,YACf,EAAE,SAAS,MAAM;AAAA,YACjB,EAAE,SAAS,SAAS;AAAA,YACpB,EAAE,SAAS,WAAW;AAAA,UAC1B;AAAA,QACJ;AAAA,MACJ;AAGA,eAAS,oBAAoB;AACzB,cAAM,IAAIA,QAAO,YAAY,SAAO,YAAY;AAChD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,WAAW,KAAK;AAC3B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEvC,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,QAAQ,EAAE,SAAS,SAAS,CAAC;AAAA,cAC/B,EAAE,KAAK,UAAU,UAAU,EAAE,SAAS,WAAW,CAAC;AAAA,YACtD;AAAA,YACA,EAAE,IAAI,CAAC,CAAC;AAAA,UACZ;AAAA,UACA,EAAE,SAAS,KAAK,EAAE,QAAS,EAAE,UAAU,CAAC,GAAG,EAAE,SAAS,MAAM,CAAC,CAAC;AAAA,UAE9D,EAAE,SAAS,QAAQ,EAAE,QAAS,EAAE,SAAS,GAAG,GAAI,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UAC/D,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,cACd,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,UACJ;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,OAAO;AAAA,cACtB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,GAAG;AAAA,oBACd,EAAE,SAAS,GAAG;AAAA,kBAClB;AAAA,kBACA,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,EAAE,SAAS,SAAS;AAAA,cACpB,EAAE;AAAA,gBACE,EAAE,KAAK,UAAU,UAAU,EAAE,SAAS,WAAW,CAAC;AAAA,gBAClD;AAAA,kBACI,GAAG,EAAE,KAAK,UAAU,SAAS,EAAE,SAAS,MAAM,GAAG,CAAC;AAAA,kBAClD,GAAG,EAAE,KAAK,UAAU,SAAS,EAAE,SAAS,MAAM,GAAI,EAAE,SAAS,MAAM,CAAE;AAAA,kBACrE,GAAG,EAAE,KAAK,UAAU,SAAS,GAAI,EAAE,SAAS,MAAM,CAAC;AAAA,gBACvD;AAAA,gBACA;AAAA,kBACI,GAAG,EAAE,KAAK,UAAU,SAAS,EAAE,SAAS,MAAM,GAAG,CAAC;AAAA,kBAClD,GAAG,EAAE,KAAK,WAAY,EAAE,SAAS,MAAM,GAAI,EAAE,SAAS,WAAW,GAAG,EAAE,SAAS,MAAM,CAAE;AAAA,kBACvF,GAAG,EAAE,KAAK,WAAY,GAAI,EAAE,SAAS,WAAW,GAAG,EAAE,SAAS,MAAM,CAAC;AAAA,gBACzE;AAAA,cACJ;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,KAAK,UAAU,UAAU,EAAE,SAAS,WAAW,CAAC;AAAA,gBAClD,CAEA;AAAA,gBACA;AAAA,kBACI,GAAG,EAAE,KAAK,WAAY,EAAE,SAAS,MAAM,GAAI,EAAE,SAAS,WAAW,GAAG,EAAE,SAAS,MAAM,CAAE;AAAA,kBACvF,GAAG,EAAE,KAAK,WAAY,EAAE,SAAS,MAAM,GAAI,EAAE,SAAS,WAAW,GAAG,EAAE,SAAS,MAAM,CAAC;AAAA,gBAC1F;AAAA,cACJ;AAAA,YACJ;AAAA,YACA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAE1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAED,EAAE;AAAA,YACE,EAAE,KAAK,UAAU,UAAU,EAAE,SAAS,WAAW,CAAC;AAAA,YAClD,CAEA;AAAA,YACA;AAAA,cACI,GAAG,EAAE,KAAK,WAAW,EAAE,SAAS,IAAI,GAAI,EAAE,SAAS,WAAW,GAAG,EAAE,SAAS,IAAI,CAAC;AAAA,cACjF,GAAG,EAAE;AAAA,gBAAS;AAAA,gBACV,EAAE;AAAA,kBACE,EAAE,SAAS,IAAI;AAAA,kBACf,EAAE;AAAA,oBACE,EAAE,SAAS,OAAO;AAAA,oBAClB,EAAE,UAAU,GAAG;AAAA,kBACnB;AAAA,gBACJ;AAAA,cACJ;AAAA,cACA,GAAG,EAAE,KAAK,WAAW,EAAE,SAAS,MAAM,GAAE,EAAE,SAAS,WAAW,GAAG,EAAE,SAAS,MAAM,CAAC;AAAA,YACvF;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,0BAA0B;AAC/B,cAAM,IAAIA,QAAO,YAAY,SAAO,sBAAsB;AAC1D,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEvC,UAAE;AAAA,UACE,EAAE,SAAS,KAAK,EAAE,QAAS,EAAE,UAAU,CAAC,GAAG,EAAE,SAAS,MAAM,CAAC,CAAC;AAAA,UAC9D,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,GAAG;AAAA,cAClB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE,SAAS,MAAM,EAAE,KAAK,SAAS,SAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,MAAM,CAAC,CAAC;AAAA,YAE9E,EAAE;AAAA,cAAS;AAAA,cACP,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE;AAAA,kBACE,EAAE,SAAS,IAAI;AAAA,kBACf,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,IAAI;AAAA,cACnB;AAAA,cACA;AAAA,gBACI,GAAG,EAAE,KAAK,UAAU,SAAS,EAAE,SAAS,MAAM,GAAG,CAAC;AAAA,gBAClD,GAAG,EAAE,KAAK,UAAU,SAAS,EAAE,SAAS,MAAM,GAAI,EAAE,SAAS,MAAM,CAAC;AAAA,gBACpE,GAAG,EAAE,KAAK,UAAU,SAAS,GAAI,EAAE,SAAS,MAAM,CAAC;AAAA,cACvD;AAAA,YACJ;AAAA,YAEA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAE1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE;AAAA,sBACE,EAAE,SAAS,GAAG;AAAA,sBACd,EAAE,UAAU,GAAI;AAAA,oBACpB;AAAA,oBACA;AAAA,oBACA;AAAA,kBACJ;AAAA,kBACA,EAAE,UAAU,EAAE;AAAA,gBAClB;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE;AAAA,sBACE,EAAE;AAAA,wBACE,EAAE,SAAS,GAAG;AAAA,wBACd,EAAE,UAAU,CAAC;AAAA,sBACjB;AAAA,sBACA,EAAE,UAAU,GAAI;AAAA,oBACpB;AAAA,oBACA;AAAA,oBACA;AAAA,kBACJ;AAAA,kBACA,EAAE,UAAU,EAAE;AAAA,gBAClB;AAAA,cACJ;AAAA,cACA,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE;AAAA,sBACE,EAAE;AAAA,wBACE,EAAE,SAAS,GAAG;AAAA,wBACd,EAAE,UAAU,EAAE;AAAA,sBAClB;AAAA,sBACA,EAAE,UAAU,GAAI;AAAA,oBACpB;AAAA,oBACA;AAAA,oBACA;AAAA,kBACJ;AAAA,kBACA,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE;AAAA,sBACE,EAAE,SAAS,GAAG;AAAA,sBACd,EAAE,UAAU,EAAE;AAAA,oBAClB;AAAA,oBACA,EAAE,UAAU,GAAI;AAAA,kBACpB;AAAA,kBACA;AAAA,kBACA;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,YACA,EAAE,SAAS,MAAM;AAAA,UACrB;AAAA,QACJ;AAAA,MACJ;AAGA,eAAS,eAAe;AACpB,cAAM,IAAIA,QAAO,YAAY,SAAO,UAAU;AAC9C,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEvC,UAAE;AAAA,UACE,EAAE,KAAM,UAAU,SAAS,EAAE,SAAS,OAAO,GAAG,CAAC;AAAA,UACjD,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,GAAG;AAAA,cAClB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB;AAAA,cACA;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV,EAAE,SAAS,MAAM;AAAA,cACjB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV;AAAA,cACA;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV;AAAA,cACA;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV;AAAA,cACA,EAAE,SAAS,KAAK;AAAA,cAChB;AAAA,YACJ;AAAA,YAEA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAGA,eAAS,kBAAkB;AACvB,cAAM,IAAIA,QAAO,YAAY,SAAO,aAAa;AACjD,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,aAAa,KAAK;AAE7B,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEvC,UAAE;AAAA,UAEE,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,UAAU,UAAU;AAAA,cACtB,EAAE;AAAA,gBACE,EAAE,SAAS,WAAW;AAAA,gBACtB,EAAE,UAAU,GAAG;AAAA,cACnB;AAAA,YACJ;AAAA,UACJ;AAAA,UAGA,EAAE,KAAM,UAAU,SAAS,EAAE,SAAS,OAAO,GAAG,CAAC;AAAA,UACjD,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,GAAG;AAAA,cAClB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,MAAM;AAAA,cACjB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,WAAW;AAAA,cACtB,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV;AAAA,cACA,EAAE,SAAS,KAAK;AAAA,cAChB;AAAA,YACJ;AAAA,YAEA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,qBAAqB;AAC1B,cAAM,IAAIA,QAAO,YAAY,SAAO,gBAAgB;AACpD,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,WAAW,KAAK;AAE3B,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEvC,UAAE;AAAA,UAEE,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,UAAU,UAAU;AAAA,cACtB,EAAE;AAAA,gBACE,EAAE,SAAS,WAAW;AAAA,gBACtB,EAAE,UAAU,GAAG;AAAA,cACnB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,UAAU,MAAM;AAAA,cAClB,EAAE;AAAA,gBACE,EAAE,SAAS,WAAW;AAAA,gBACtB,EAAE,UAAU,GAAG;AAAA,cACnB;AAAA,YACJ;AAAA,UACJ;AAAA,UAGA,EAAE,KAAM,UAAU,SAAS,EAAE,SAAS,OAAO,GAAG,CAAC;AAAA,UACjD,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,GAAG;AAAA,cAClB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB;AAAA,cACA;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV,EAAE,SAAS,MAAM;AAAA,cACjB;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,SAAS;AAAA,cACpB,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,WAAW;AAAA,cACtB,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,SAAS;AAAA,cACpB,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV;AAAA,cACA,EAAE,SAAS,KAAK;AAAA,cAChB;AAAA,YACJ;AAAA,YAEA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAIA,eAAS,iCAAiC;AACtC,cAAM,IAAIA,QAAO,YAAY,SAAO,4BAA4B;AAChE,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,WAAW,KAAK;AAE3B,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEvC,UAAE;AAAA,UAEE,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,UAAU,UAAU;AAAA,cACtB,EAAE;AAAA,gBACE,EAAE,SAAS,WAAW;AAAA,gBACtB,EAAE,UAAU,GAAG;AAAA,cACnB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,UAAU,MAAM;AAAA,cAClB,EAAE;AAAA,gBACE,EAAE,SAAS,WAAW;AAAA,gBACtB,EAAE,UAAU,GAAG;AAAA,cACnB;AAAA,YACJ;AAAA,UACJ;AAAA,UAGA,EAAE,KAAM,UAAU,SAAS,EAAE,SAAS,OAAO,GAAG,CAAC;AAAA,UACjD,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,GAAG;AAAA,cAClB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAGA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,WAAW;AAAA,cACtB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV,EAAE,SAAS,MAAM;AAAA,cACjB;AAAA,cACA;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA;AAAA,cACA,EAAE,SAAS,SAAS;AAAA,cACpB,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV;AAAA,cACA,EAAE,SAAS,KAAK;AAAA,cAChB;AAAA,YACJ;AAAA,YAEA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,SAAO,SAAS;AAC7C,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,WAAW,KAAK;AAC3B,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,iBAAiB,KAAK;AACjC,UAAE,SAAS,cAAc,KAAK;AAC9B,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,OAAO,KAAK;AAEvB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AACvC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEvC,UAAE;AAAA,UACE,EAAE,SAAS,aAAa,EAAE,QAAQ,EAAE,UAAU,CAAC,GAAG,EAAE,SAAS,KAAK,CAAC,CAAC;AAAA,UACpE,EAAE,SAAS,iBAAiB,EAAE,UAAU,EAAE,SAAS,WAAW,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UAChF,EAAE,SAAS,WAAW,EAAE,UAAU,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,KAAK,CAAC,CAAC;AAAA,UACrE,EAAE,SAAS,cAAc,EAAE,QAAQ,EAAE,SAAS,eAAe,GAAG,EAAE,UAAU,GAAG,CAAC,CAAC;AAAA,UACjF,EAAE;AAAA,YAAS;AAAA,YACP,EAAE;AAAA,cACE,EAAE,UAAU,KAAK;AAAA,cACjB,EAAE;AAAA,gBACE,EAAE,SAAS,KAAK;AAAA,gBAChB,EAAE,UAAU,GAAG;AAAA,cACnB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,SAAS;AAAA,cACxB;AAAA,YACJ;AAAA,YACA,EAAE,KAAM,UAAU,QAAQ,CAAC;AAAA,YAC3B,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,YAC9B,EAAE,MAAM,EAAE;AAAA,cACN,EAAE;AAAA,gBACE;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,SAAS,eAAe;AAAA,gBAC9B;AAAA,cACJ;AAAA,cAEA,EAAE;AAAA,gBACE;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,OAAO;AAAA,kBAClB,EAAE;AAAA,oBACE,EAAE;AAAA,sBACE,EAAE;AAAA,wBACE,EAAE,SAAS,GAAG;AAAA,wBACd,EAAE,SAAS,WAAW;AAAA,sBAC1B;AAAA,sBACA,EAAE,SAAS,GAAG;AAAA,oBAClB;AAAA,oBACA,EAAE,UAAU,GAAG;AAAA,kBACnB;AAAA,gBACJ;AAAA,cACJ;AAAA,cAEA,EAAE;AAAA,gBACE;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,MAAM;AAAA,kBACjB,EAAE,SAAS,YAAY;AAAA,gBAC3B;AAAA,cACJ;AAAA,cAEA,EAAE;AAAA,gBACE;AAAA,gBACA,EAAE,SAAS,MAAM;AAAA,gBACjB;AAAA,gBACA;AAAA,cACJ;AAAA,cAEA,EAAE;AAAA,gBACE,UAAU;AAAA,gBACV,EAAE,SAAS,MAAM;AAAA,gBACjB;AAAA,cACJ;AAAA,cAEA,EAAE;AAAA,gBACE,UAAU;AAAA,gBACV;AAAA,gBACA;AAAA,gBACA,EAAE,SAAS,MAAM;AAAA,cACrB;AAAA,cAEA,EAAE;AAAA,gBACE,UAAU;AAAA,gBACV;AAAA,gBACA;AAAA,gBACA,EAAE,SAAS,MAAM;AAAA,cACrB;AAAA,cAEA,EAAE;AAAA,gBACE,UAAU;AAAA,gBACV;AAAA,gBACA,EAAE,SAAS,KAAK;AAAA,gBAChB;AAAA,cACJ;AAAA,cACA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,cAC1D,EAAE,GAAG,CAAC;AAAA,YACV,CAAC;AAAA,YACD,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAIA,eAAS,gBAAgB;AACrB,cAAM,IAAIA,QAAO,YAAY,SAAO,WAAW;AAC/C,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AAEzB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEvC,UAAE;AAAA,UACE,EAAE,SAAS,SAAS,EAAE,UAAU,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UAChE,EAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,SAAS,GAAG;AAAA,cACd,EAAE,UAAU,CAAC;AAAA,YACjB;AAAA,YACA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,OAAO;AAAA,gBAClB,EAAE;AAAA,kBACE,EAAE,SAAS,OAAO;AAAA,kBAClB,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,cACA,EAAE,SAAS,QAAQ;AAAA,cACnB,EAAE;AAAA,gBACE,EAAE,SAAS,OAAO;AAAA,gBAClB,EAAE;AAAA,kBACE,EAAE,SAAS,OAAO;AAAA,kBAClB,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,OAAO;AAAA,cACtB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,OAAO;AAAA,gBAClB,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,OAAO;AAAA,gBAClB,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE;AAAA,sBACE,EAAE,SAAS,GAAG;AAAA,sBACd,EAAE,UAAU,CAAC;AAAA,oBACjB;AAAA,oBACA,EAAE,SAAS,GAAG;AAAA,kBAClB;AAAA,kBACA,EAAE,UAAU,GAAG;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,QAAQ;AAAA,cACnB;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,cACjB,EAAE,SAAS,QAAQ;AAAA,cACnB,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE;AAAA,cACE,UAAU;AAAA,cACV;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YAEA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS;AACT,8BAAwB;AACxB,wBAAkB;AAClB,kBAAY;AACZ,gBAAU;AACV,MAAAD,UAAS;AACT,gBAAU;AACV,mBAAa;AACb,sBAAgB;AAChB,yBAAmB;AACnB,kBAAY;AACZ,oBAAc;AACd,qCAA+B;AAE/B,MAAAC,QAAO,eAAe,SAAO,MAAM;AACnC,MAAAA,QAAO,eAAe,SAAO,OAAO;AACpC,MAAAA,QAAO,eAAe,SAAO,SAAS;AACtC,MAAAA,QAAO,eAAe,SAAO,UAAU;AACvC,MAAAA,QAAO,eAAe,SAAO,aAAa;AAC1C,MAAAA,QAAO,eAAe,SAAO,gBAAgB;AAC7C,MAAAA,QAAO,eAAe,SAAO,SAAS;AACtC,MAAAA,QAAO,eAAe,SAAO,WAAW;AACxC,MAAAA,QAAO,eAAe,SAAO,4BAA4B;AAAA,IAE7D;AAAA;AAAA;;;ACr1CA;AAAA;AAAA;AAAA;AAmBA,WAAO,UAAU,SAAS,SAASC,SAAQ,QAAQ,aAAa;AAE5D,YAAM,MAAMA,QAAO,QAAQ,aAAa;AACxC,YAAM,KAAK,MAAI;AAGf,eAAS,YAAY;AACjB,cAAM,IAAIA,QAAO,YAAY,SAAO,OAAO;AAC3C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE,SAAS,KAAK,EAAE,SAAS,IAAI,CAAC;AAAA,UAChC,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,OAAO;AAAA,cACtB;AAAA,YACJ;AAAA,YACA,EAAE,KAAK,cAAc,SAAS,EAAE,SAAS,GAAG,CAAC;AAAA,YAC7C,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC3D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,mBAAmB;AACxB,cAAM,IAAIA,QAAO,YAAY,SAAO,cAAc;AAClD,UAAE,SAAS,gBAAgB,KAAK;AAChC,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,UAAU,KAAK;AAE1B,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UACE,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UAC9B,EAAE,SAAS,MAAM,EAAE,SAAS,cAAc,CAAC;AAAA,UAC3C,EAAE,SAAS,MAAM,EAAE,SAAS,UAAU,CAAC;AAAA,UACvC,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,SAAS,UAAU;AAAA,cACzB;AAAA,YACJ;AAAA,YAEA,EAAE,SAAS,UAAU,EAAE,SAAS,EAAE,SAAS,IAAI,CAAC,CAAC;AAAA,YACjD,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAE5D,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,YAC9B,EAAE,MAAM,EAAE;AAAA,cACN,EAAE;AAAA,gBACE;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,SAAS,QAAQ;AAAA,gBACvB;AAAA,cACJ;AAAA,cAEA,EAAE;AAAA,gBACE;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,MAAM;AAAA,kBACjB,EAAE;AAAA,oBACE,EAAE,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,oBAC3B,EAAE,UAAU,EAAE;AAAA,kBAClB;AAAA,gBACJ;AAAA,cACJ;AAAA,cAEA,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,cAG5D,EAAE;AAAA,gBACE,cAAc;AAAA,gBACd,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE,SAAS,IAAI;AAAA,gBACf;AAAA,cACJ;AAAA,cAEA,EAAE;AAAA,gBACE,cAAc;AAAA,gBACd;AAAA,gBACA,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE,SAAS,IAAI;AAAA,cACnB;AAAA,cAEA,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,cAC7D,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,cAC1D,EAAE,GAAG,CAAC;AAAA,YACV,CAAC;AAAA,YAED,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC7D,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MAEJ;AAEA,gBAAU;AACV,uBAAiB;AAGjB,MAAAA,QAAO,eAAe,SAAS,OAAO;AACtC,MAAAA,QAAO,eAAe,SAAS,cAAc;AAE7C,aAAO;AAAA,IAKX;AAAA;AAAA;;;AC7JA;AAAA;AAAA;AAAA;AACA,WAAO,UAAU,SAAS,SAASC,SAAQ,QAAQ,aAAa;AAE5D,YAAM,MAAMA,QAAO,QAAQ,aAAa;AACxC,YAAM,KAAK,MAAI;AAGf,eAAS,gBAAgB;AACrB,cAAM,IAAIA,QAAO,YAAY,SAAO,WAAW;AAC/C,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,aAAa,KAAK;AAC7B,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,iBAAiB,KAAK;AACjC,UAAE,SAAS,YAAY,KAAK;AAC5B,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,QAAQ,KAAK;AACxB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UAGE,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,EAAE;AAAA,gBACE,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,KAAK;AAAA,gBAChB,EAAE,SAAS,MAAM;AAAA,cACrB;AAAA,YACJ;AAAA,YACA,EAAE,KAAK,cAAc,SAAS,EAAE,SAAS,KAAK,CAAC;AAAA,YAC/C,EAAE,KAAK,cAAc,SAAS,EAAE,SAAS,KAAK,CAAC;AAAA,YAC/C,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAGD,EAAE,SAAS,MAAM,EAAE,SAAS,QAAQ,CAAC;AAAA,UACrC,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,QAAQ;AAAA,cACnB,EAAE;AAAA,gBACE,EAAE,SAAS,QAAQ;AAAA,gBACnB,EAAE,UAAU,KAAG,EAAE;AAAA,cACrB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,IAAI;AAAA,gBACf,EAAE,SAAS,MAAM;AAAA,cACrB;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,EAAE,SAAS,IAAI,GAAG,CAAC;AAAA,YAClC;AAAA,YACA,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,SAAS,eAAe;AAAA,gBAC9B;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE;AAAA,oBACE,EAAE,SAAS,eAAe;AAAA,oBAC1B,EAAE,SAAS,UAAU;AAAA,kBACzB;AAAA,gBACJ;AAAA,cACJ;AAAA,cACA;AAAA,gBACI,GAAG,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,EAAE,CAAC,CAAC;AAAA,gBACnE,GAAG,EAAE,GAAG,CAAC;AAAA,cACb;AAAA,YACJ;AAAA,YAEA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,YAC/B;AAAA,YACA,EAAE;AAAA,cACE,EAAE,OAAO,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC;AAAA,cACxC,EAAE,SAAS,QAAQ,EAAE,SAAS,IAAI,CAAC;AAAA,cACnC,EAAE;AAAA,gBACE,EAAE,OAAO,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC;AAAA,gBACxC,EAAE,SAAS,QAAQ,EAAE,SAAS,IAAI,CAAC;AAAA,gBACnC;AAAA,kBACI,GAAG,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,EAAE,CAAC,CAAC;AAAA,kBACnE,GAAG,EAAE,GAAG,CAAC;AAAA,gBACb;AAAA,cACJ;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE;AAAA,cACA,EAAE,SAAS,EAAE,SAAS,IAAI,GAAG,CAAC;AAAA,YAClC;AAAA,YACA,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE,SAAS,WAAW;AAAA,gBAC1B;AAAA,gBACA,EAAE;AAAA,kBACE,EAAE,SAAS,GAAG;AAAA,kBACd,EAAE;AAAA,oBACE,EAAE,SAAS,WAAW;AAAA,oBACtB,EAAE,SAAS,MAAM;AAAA,kBACrB;AAAA,gBACJ;AAAA,cACJ;AAAA,cACA;AAAA,gBACI,GAAG,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,EAAE,CAAC,CAAC;AAAA,gBACnE,GAAG,EAAE,GAAG,CAAC;AAAA,cACb;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE;AAAA,kBACE,EAAE;AAAA,oBACE,EAAE,SAAS,GAAG;AAAA,oBACd,EAAE,SAAS,WAAW;AAAA,kBAC1B;AAAA,kBACA,EAAE,UAAU,EAAE;AAAA,gBAClB;AAAA,cACJ;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE,cAAc;AAAA,cACd,EAAE;AAAA,gBACE,EAAE,SAAS,UAAU;AAAA,gBACrB,EAAE;AAAA,kBACE,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,eAAe,CAAC;AAAA,kBACtD,EAAE,UAAU,EAAE;AAAA,gBAClB;AAAA,cACJ;AAAA,cACA,EAAE,QAAS,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC;AAAA,cAC5C;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE,cAAc;AAAA,cACd,EAAE,SAAS,MAAM;AAAA,cACjB;AAAA,cACA,EAAE,SAAS,MAAM;AAAA,YACrB;AAAA,YACA,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,EAAE,CAAC,CAAC;AAAA,YAChE,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UAED,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE,SAAS,MAAM,EAAE,SAAS,IAAI,CAAC;AAAA,UACjC,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,EAAE;AAAA,gBACE,EAAE,SAAS,MAAM;AAAA,gBACjB,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,KAAK;AAAA,gBAChB,EAAE,SAAS,MAAM;AAAA,cACrB;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE,cAAc;AAAA,cACd,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,SAAS,IAAI;AAAA,YACnB;AAAA,YACA,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC7D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QAEL;AAAA,MACJ;AAEA,eAAS,eAAe;AACpB,cAAM,IAAIA,QAAO,YAAY,SAAO,UAAU;AAC9C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UACE,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,KAAK;AAAA,gBAChB,EAAE,SAAS,MAAM;AAAA,cACrB;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE,cAAc;AAAA,cACd,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,SAAS,KAAK;AAAA,cAChB;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE,cAAc;AAAA,cACd;AAAA,cACA,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,SAAS,KAAK;AAAA,YACpB;AAAA,YACA,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,eAAS,gBAAgB;AACrB,cAAM,IAAIA,QAAO,YAAY,SAAO,WAAW;AAC/C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,QAAQ,KAAK;AAExB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;AAAA,UAClC,EAAE;AAAA,YACE;AAAA,YACA,EAAE;AAAA,cACE,EAAE,SAAS,IAAI;AAAA,cACf,EAAE;AAAA,gBACE,EAAE,SAAS,GAAG;AAAA,gBACd,EAAE,UAAU,EAAE;AAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,MAAM,EAAE;AAAA,YACN,EAAE;AAAA,cACE;AAAA,cACA,EAAE;AAAA,gBACE,EAAE,SAAS,KAAK;AAAA,gBAChB,EAAE,SAAS,MAAM;AAAA,cACrB;AAAA,YACJ;AAAA,YACA,EAAE;AAAA,cACE,cAAc;AAAA,cACd,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,SAAS,KAAK;AAAA,cAChB,EAAE,SAAS,KAAK;AAAA,YACpB;AAAA,YACA,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAAA,YAC/D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,oBAAc;AACd,mBAAa;AACb,oBAAc;AAEd,MAAAA,QAAO,eAAe,SAAS,WAAW;AAC1C,MAAAA,QAAO,eAAe,SAAS,UAAU;AACzC,MAAAA,QAAO,eAAe,SAAS,WAAW;AAE1C,aAAO;AAAA,IAEX;AAAA;AAAA;;;AChVA;AAAA;AAAA;AAAA;AAqBA,WAAO,UAAU,SAAS,cAAcC,SAAQ,QAAQ,SAAS,UAAU,SAAS,UAAU,OAAO,WAAW;AAE5G,YAAM,IAAIA,QAAO,YAAY,MAAM;AACnC,QAAE,SAAS,OAAO,KAAK;AACvB,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,UAAU,KAAK;AAC1B,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,QAAQ,KAAK;AACxB,QAAE,SAAS,YAAY,KAAK;AAC5B,QAAE,SAAS,KAAK,KAAK;AACrB,QAAE,SAAS,SAAS,KAAK;AACzB,QAAE,SAAS,OAAO,KAAK;AAEvB,YAAM,IAAI,EAAE,eAAe;AAE3B,YAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,KAAK,CAAC;AAEzC,QAAE;AAAA,QACE,EAAE,SAAS,SAAS,EAAE,SAAS,KAAK,CAAC;AAAA,QACrC,EAAE,SAAS,OAAO,EAAE,SAAS,MAAM,CAAC;AAAA,MACxC;AAGA,QAAE;AAAA,QACE,EAAE;AAAA,UACE,WAAW;AAAA,UACX,EAAE,SAAS,QAAQ;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AACA,QAAE;AAAA,QACE,EAAE,SAAS,KAAK,EAAE,UAAU,CAAC,CAAC;AAAA,QAC9B,EAAE,MAAM,EAAE;AAAA,UACN,EAAE,MAAM,GAAG,EAAE,OAAS,EAAE,SAAS,GAAG,GAAG,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,UAExD,EAAE;AAAA,YACE;AAAA,YACA,EAAE,SAAS,OAAO;AAAA,YAClB;AAAA,YACA,EAAE,SAAS,KAAK;AAAA,UACpB;AAAA,UACA,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,OAAO,CAAC,CAAC;AAAA,UACxE,EAAE,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,KAAK,GAAG,EAAE,UAAU,QAAQ,CAAC,CAAC;AAAA,UAGrE,EAAE;AAAA,YACE,WAAW;AAAA,YACX;AAAA,YACA,EAAE,SAAS,MAAM;AAAA,YACjB;AAAA,UACJ;AAAA,UACA,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,UAC1D,EAAE,GAAG,CAAC;AAAA,QACV,CAAC;AAAA,MACL;AAEA,MAAAA,QAAO,eAAe,MAAM;AAAA,IAEhC;AAAA;AAAA;;;AC/EA;AAAA;AAAA;AAAA;AAAA,QAAMC,SAAQ;AAEd,QAAM,WAAU;AAChB,QAAM,UAAS;AACf,QAAM,WAAU;AAChB,QAAM,WAAU;AAChB,QAAM,aAAY;AAClB,QAAMC,YAAW;AACjB,QAAM,WAAW;AACjB,QAAM,WAAW;AACjB,QAAM,gBAAgB;AACtB,QAAM,EAAE,WAAAC,YAAW,QAAQ,OAAAC,QAAO,YAAAC,YAAW,IAAI;AAEjD,WAAO,UAAU,SAAS,WAAWC,SAAQ,SAAS;AAElD,YAAM,SAAS,WAAW;AAE1B,UAAIA,QAAO,QAAQ;AAAS,eAAO;AAEnC,YAAM,IAAI;AACV,YAAM,IAAI;AAGV,YAAM,MAAM,KAAK,OAAOH,WAAU,IAAI,EAAE,IAAI,KAAG,EAAE,IAAG;AACpD,YAAM,KAAK,MAAI;AACf,YAAM,SAAS;AACf,YAAM,SAAS;AACf,YAAM,SAAS,SAAS;AACxB,YAAM,SAAS,SAAS;AAExB,YAAM,KAAKG,QAAO,MAAML,OAAM,eAAgB,GAAG,MAAO,CAAC;AAEzD,YAAM,YAAY,SAASK,SAAQ,GAAG,KAAK;AAC3C,cAAQA,SAAQ,GAAG,MAAM,KAAK;AAE9B,YAAM,OAAOA,QAAO,MAAML,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO,CAAC;AAC1E,YAAM,YAAY,WAAWK,SAAQ,OAAO,OAAO,IAAI;AAEvD,MAAAJ,UAASI,SAAQ,OAAO,OAAO,OAAO,SAAS;AAE/C,eAASA,SAAQ,OAAO,KAAK;AAC7B,eAASA,SAAQ,OAAO,KAAK;AAE7B,YAAM,YAAY,SAASA,SAAQ,WAAW,OAAO,KAAK;AAC1D,YAAM,OAAOA,QAAO,MAAM;AAAA,QACtB,GAAGL,OAAM,eAAgB,aAAa,8EAA8E,GAAG,MAAO;AAAA,QAC9H,GAAGA,OAAM,eAAgB,aAAa,4EAA4E,GAAG,MAAO;AAAA,MAChI,CAAC;AACD,YAAM,YAAY,WAAWK,SAAQ,OAAO,OAAO,IAAI;AAGvD,eAAS,cAAc,QAAQ,OAAO;AAClC,cAAM,IAAIA,QAAO,YAAY,MAAM;AACnC,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,EAAE,CAAC;AAExC,UAAE;AAAA,UACE,EAAE,KAAK,sBAAsB,EAAE,SAAS,KAAK,GAAG,GAAG;AAAA,UACnD,EAAE;AAAA,YACE;AAAA,YACA,EAAE,SAAS,IAAI;AAAA,YACf;AAAA,YACA,EAAE,UAAU,EAAE;AAAA,YACd,EAAE,SAAS,IAAI;AAAA,UACnB;AAAA,QACJ;AAEA,QAAAA,QAAO,eAAe,MAAM;AAAA,MAChC;AACA,oBAAc,eAAe,iBAAiB;AAC9C,MAAAJ,UAASI,SAAQ,OAAO,OAAO,OAAO,aAAa;AAEnD,oBAAc,eAAe,iBAAiB;AAC9C,MAAAJ,UAASI,SAAQ,OAAO,OAAO,OAAO,aAAa;AAEnD,oBAAc,qBAAqB,uBAAuB;AAC1D,oBAAc,qBAAqB,uBAAuB;AAE1D,oBAAcA,SAAQ,qBAAqB,OAAO,OAAO,IAAI,IAAI,IAAI,SAAS;AAC9E,oBAAcA,SAAQ,qBAAqB,OAAO,OAAO,KAAG,GAAG,KAAG,GAAG,IAAI,aAAa;AACtF,oBAAcA,SAAQ,0BAA0B,OAAO,OAAO,KAAG,GAAG,KAAG,GAAG,IAAI,mBAAmB;AACjG,oBAAcA,SAAQ,qBAAqB,OAAO,OAAO,KAAG,IAAE,GAAG,KAAG,IAAE,GAAG,IAAI,aAAa;AAC1F,oBAAcA,SAAQ,0BAA0B,OAAO,OAAO,KAAG,IAAE,GAAG,KAAG,IAAE,GAAG,IAAI,mBAAmB;AAErG,eAAS,aAAa,GAAG;AACrB,eAAO,OAAO,CAAC,KAAM,MAAM,OAAO,SAAO,CAAC,KAAK;AAAA,MACnD;AAEA,YAAM,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAEA,YAAM,SAASA,QAAO;AAAA,QAClB;AAAA,UACI,GAAGL,OAAM,eAAgB,aAAa,MAAM,EAAE,GAAG,MAAO;AAAA,UACxD,GAAGA,OAAM,eAAgB,aAAa,MAAM,EAAE,GAAG,MAAO;AAAA,UACxD,GAAGA,OAAM,eAAgB,aAAa,MAAM,EAAE,GAAG,MAAO;AAAA,QAC5D;AAAA,MACJ;AAEA,YAAM,SAAS;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAEA,YAAM,UAAUK,QAAO;AAAA,QACnB;AAAA,UACI,GAAGL,OAAM,eAAgB,aAAa,OAAO,EAAE,GAAG,MAAO;AAAA,UACzD,GAAGA,OAAM,eAAgB,aAAa,OAAO,EAAE,GAAG,MAAO;AAAA,UACzD,GAAGA,OAAM,eAAgB,aAAa,OAAO,EAAE,GAAG,MAAO;AAAA,QAC7D;AAAA,MACJ;AAEA,YAAM,QAAQ;AAAA,QACV;AAAA,UACI;AAAA,UACA;AAAA,QACJ;AAAA,QAAE;AAAA,UACE;AAAA,UACA;AAAA,QACJ;AAAA,QAAE;AAAA,UACE;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,SAASK,QAAO;AAAA,QAClB;AAAA,UACI,GAAGL,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,UAC3D,GAAGA,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,UAC3D,GAAGA,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,UAC3D,GAAGA,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,UAC3D,GAAGA,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,UAC3D,GAAGA,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,QAC/D;AAAA,MACJ;AAEA,YAAM,SAAS;AAAA,QACX;AAAA,UACI;AAAA,UACA;AAAA,QACJ;AAAA,QAAE;AAAA,UACE;AAAA,UACA;AAAA,QACJ;AAAA,QAAE;AAAA,UACE;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,UAAUK,QAAO;AAAA,QACnB;AAAA,UACI,GAAGL,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,UAC5D,GAAGA,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,UAC5D,GAAGA,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,UAC5D,GAAGA,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,UAC5D,GAAGA,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,UAC5D,GAAGA,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,QAChE;AAAA,MACJ;AAEA,YAAM,QAAQK,QAAO,MAAM;AAAA,QACvB,GAAGL,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,MACrD,CAAC;AAED,YAAM,gBAAgBK,QAAO,MAAM;AAAA,QAC/B,GAAGL,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,QACjD,GAAGA,OAAM,eAAgB,aAAa,CAAC,GAAG,MAAO;AAAA,MACrD,CAAC;AAED,YAAM,UAAUK,QAAO,MAAM;AAAA,QACzB,GAAGL,OAAM,eAAgB,aAAe,OAAO,IAAI,CAAC,CAAC,GAAG,MAAO;AAAA,QAC/D,GAAGA,OAAM,eAAgB,IAAI,MAAO;AAAA,MACxC,CAAC;AAED,YAAM,iBAAiB;AAEvB,YAAM,cAAcK,QAAO,MAAM;AAAA,QAC7B,GAAGL,OAAM,eAAgB,aAAa,8EAA8E,GAAG,MAAO;AAAA,QAC9H,GAAGA,OAAM,eAAgB,aAAa,4EAA4E,GAAG,MAAO;AAAA,MAChI,CAAC;AAED,eAAS,eAAe;AACpB,cAAM,IAAIK,QAAO,YAAY,SAAS,SAAS;AAC/C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE,YAAY;AAAA,YACZ,EAAE,UAAU,aAAa;AAAA,YACzB,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,SAAS,IAAI;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AACA,mBAAa;AAEb,YAAM,YAAY,SAASA,SAAQ,SAAO,WAAW,OAAO,KAAK;AAEjE,eAAS,gBAAgB;AACrB,cAAM,IAAIA,QAAO,YAAY,SAAS,UAAU;AAChD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE;AAAA,YACE,YAAY;AAAA,YACZ,EAAE,UAAU,aAAa;AAAA,YACzB,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAAA,YAC5C,EAAE,SAAS,IAAI;AAAA,UACnB;AAAA,UACA,EAAE;AAAA,YACE,YAAY;AAAA,YACZ,EAAE,SAAS,GAAG;AAAA,YACd,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAAA,UACjD;AAAA,UACA,EAAE;AAAA,YACE,YAAY;AAAA,YACZ,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAAA,YAC5C,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,CAAC,CAAC;AAAA,UACjD;AAAA,QACJ;AAAA,MACJ;AACA,oBAAc;AAEd,YAAM,YAAY,SAASA,SAAQ,SAAO,YAAY,OAAO,SAAS;AAGtE,YAAM,eAAe;AACrB,YAAM,kBAAkBC,MAAK,YAAY;AACzC,YAAM,mBAAmBD,QAAO,MAAM,eAAe;AACrD,YAAM,iBAAiB;AAEvB,YAAM,cAAc,IAAI;AACxB,YAAM,eAAe,gBAAgB,SAAO;AAC5C,YAAM,eAAe,gBAAgB,OAAO,CAAC,KAAK,MAAO,OAAQ,KAAG,IAAI,IAAI,IAAM,CAAC;AACnF,YAAM,YAAY,eAAe,eAAe;AAChD,YAAM,WAAW,IAAE,IAAE;AACrB,YAAM,WAAW,IAAE,KAAG,IAAI,YAAU;AACpC,YAAM,qBAAqB;AAG3B,MAAAA,QAAO,QAAQ,UAAU;AAAA,QACrB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,IAAIA,QAAO,QAAQ,OAAO;AAAA,QAC1B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,GAAG,EAAE,SAAS;AAAA,QACd,GAAG,EAAE,SAAS;AAAA,MAClB;AAKA,YAAM,YAAY;AAElB,eAASE,KAAI,GAAG;AACZ,YAAI,IAAI;AACR,cAAM,MAAM,CAAC;AACb,eAAO,IAAI,IAAI;AACX,cAAIJ,OAAM,CAAC,GAAG;AACV,kBAAM,IAAI,IAAI,OAAO,IAAI,EAAE;AAC3B,gBAAI,KAAM,CAAE;AACZ,gBAAI,IAAI,OAAO,CAAC;AAAA,UACpB,OAAO;AACH,gBAAI,KAAM,CAAE;AAAA,UAChB;AACA,cAAI,KAAK;AAAA,QACb;AACA,eAAO;AAAA,MACX;AAEA,eAASG,MAAK,GAAG;AACb,YAAI,IAAI;AACR,cAAM,MAAM,CAAC;AACb,eAAO,IAAI,IAAI;AACX,cAAIH,OAAM,CAAC,GAAG;AACV,gBAAI,KAAM,CAAE;AAAA,UAChB,OAAO;AACH,gBAAI,KAAM,CAAE;AAAA,UAChB;AACA,cAAI,KAAK;AAAA,QACb;AACA,eAAO;AAAA,MACX;AAEA,eAAS,iBAAiB;AACtB,cAAM,IAAIE,QAAO,YAAY,SAAQ,YAAY;AACjD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,SAAS,KAAK;AAEzB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,cAAc,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,QAC1E;AAAA,MACJ;AAEA,eAAS,mBAAmB;AACxB,cAAM,IAAIA,QAAO,YAAY,SAAQ,cAAc;AACnD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,SAAS,KAAK;AAEzB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAM,EAAE,SAAS,IAAI;AAC3B,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,MAAM,CAAC;AAE3D,cAAM,KAAM,EAAE,SAAS,IAAI;AAC3B,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,MAAM,CAAC;AAC3D,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAE7D,cAAM,QAAS,EAAE,SAAS,OAAO;AACjC,cAAM,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,MAAM,CAAC;AACjE,cAAM,SAAU,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAEpE,cAAM,IAAI;AACV,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAMG,KAAI,EAAE,UAAUH,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE5C,UAAE;AAAA,UAEE,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,CAAC;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,GAAG,CAAC;AAAA,UAGnC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,CAAC;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,GAAG,CAAC;AAAA,UAGnC,EAAE,KAAK,YAAY,WAAW,GAAGG,EAAC;AAAA,UAGlC,EAAE,KAAK,YAAY,WAAW,GAAG,CAAC;AAAA,UAGlC,EAAE,KAAK,YAAY,QAAQ,GAAGA,IAAG,CAAC;AAAA,UAGlC,EAAE,KAAK,YAAY,QAAQ,IAAIA,IAAG,CAAC;AAAA,UAGnC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,GAAG;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,GAAG,CAAC;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAClC,EAAE,KAAK,YAAY,QAAQ,GAAG,KAAK,CAAC;AAAA,UAIpC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,EAAE;AAAA,UAGnC,EAAE,KAAK,YAAY,QAAQ,GAAG,IAAI,EAAE;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,GAAG;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,GAAG,KAAK,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UAGtC,EAAE,KAAK,YAAY,QAAQ,IAAI,GAAG,EAAE;AAAA,UAGpC,EAAE,KAAK,YAAY,QAAQ,GAAG,IAAI,GAAG;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,GAAG,IAAI,KAAK;AAAA,UACvC,EAAE,KAAK,YAAY,QAAQ,OAAO,KAAK,KAAK;AAAA,UAC5C,EAAE,KAAK,YAAY,QAAQ,OAAO,EAAE,UAAU,cAAc,GAAG,KAAK;AAAA,UAIpE,EAAE,KAAK,YAAY,QAAQ,GAAG,MAAM;AAAA,QAKxC;AAAA,MACJ;AAIA,eAAS,sBAAsB;AAC3B,cAAM,IAAIH,QAAO,YAAY,SAAQ,cAAc;AACnD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,SAAS,KAAK;AAEzB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAM,EAAE,SAAS,IAAI;AAC3B,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,MAAM,CAAC;AAC3D,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAE7D,cAAM,QAAS,EAAE,SAAS,OAAO;AACjC,cAAM,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,MAAM,CAAC;AACjE,cAAM,SAAU,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAEpE,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAMG,KAAI,EAAE,UAAUH,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE5C,UAAE;AAAA,UAGE,EAAE,KAAK,YAAY,QAAQ,IAAI,EAAE,UAAU,OAAO,GAAG,CAAC;AAAA,UACtD,EAAE,KAAK,YAAY,QAAQ,IAAI,GAAG,CAAC;AAAA,UAGnC,EAAE,KAAK,YAAY,WAAW,IAAI,CAAC;AAAA,UAGnC,EAAE,KAAK,YAAY,WAAW,IAAI,CAAC;AAAA,UAGnC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAClC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAGlC,EAAE,KAAK,YAAY,QAAQ,EAAE,UAAU,WAAW,GAAG,GAAG,CAAC;AAAA,UAGzD,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAGG,EAAC;AAAA,UAClC,EAAE,KAAK,YAAY,QAAQ,GAAGA,IAAGA,EAAC;AAAA,UAGlC,EAAE,KAAK,YAAY,QAAQ,GAAGA,IAAG,CAAC;AAAA,UAClC,EAAE,KAAK,YAAY,QAAQ,GAAG,EAAE,UAAU,OAAO,GAAG,CAAC;AAAA,UAGrD,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,GAAG;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,CAAC;AAAA,UACpC,EAAE,KAAK,YAAY,WAAW,GAAG,CAAC;AAAA,UAClC,EAAE,KAAK,YAAY,QAAQ,GAAG,KAAK,CAAC;AAAA,UAGpC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAGlC,EAAE,KAAK,YAAY,WAAW,IAAI,CAAC;AAAA,UAGnC,EAAE,KAAK,YAAY,WAAW,GAAG,EAAE;AAAA,UAGnC,EAAE,KAAK,YAAY,QAAQ,GAAGA,IAAG,GAAG;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,GAAG,KAAK,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,GAAG;AAAA,UACvC,EAAE,KAAK,YAAY,WAAW,GAAG,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UAGtC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,EAAE;AAAA,UAGnC,EAAE,KAAK,YAAY,QAAQ,EAAE,UAAU,cAAc,GAAG,GAAG,KAAK;AAAA,UAGhE,EAAE,KAAK,YAAY,QAAQ,GAAG,MAAM;AAAA,UAGpC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,MAAM;AAAA,UACvC,EAAE,KAAK,YAAY,QAAQ,GAAG,QAAQ,MAAM;AAAA,QAEhD;AAAA,MACJ;AAEA,eAAS,cAAc;AACnB,cAAM,IAAIH,QAAO,YAAY,SAAS,SAAS;AAC/C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,IAAI;AACzB,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,MAAM,CAAC;AACzD,cAAM,IAAI,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAC3D,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,MAAM,CAAC;AAC1D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAE5D,cAAM,UAAU,EAAE,UAAUA,QAAO,MAAM;AAAA,UACrC,GAAGL,OAAM,eAAgB,aAAa,+EAA+E,GAAG,MAAO;AAAA,UAC/H,GAAGA,OAAM,eAAgB,aAAa,+EAA+E,GAAG,MAAO;AAAA,QACnI,CAAC,CAAC;AAEF,cAAM,UAAU,EAAE,UAAUK,QAAO,MAAM;AAAA,UACrC,GAAGL,OAAM,eAAgB,aAAa,8EAA8E,GAAG,MAAO;AAAA,UAC9H,GAAGA,OAAM,eAAgB,aAAa,8EAA8E,GAAG,MAAO;AAAA,QAClI,CAAC,CAAC;AAEF,UAAE;AAAA,UAEE,EAAE,KAAK,YAAY,cAAc,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,SAAS,IAAI,EAAE;AAAA,UAC1C,EAAE,KAAK,YAAY,cAAc,GAAG,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,SAAS,IAAI,EAAE;AAAA,UAC1C,EAAE,KAAK,YAAY,cAAc,GAAG,EAAE;AAAA,QAC1C;AAAA,MACJ;AAGA,eAAS,iBAAiB;AACtB,oBAAY;AACZ,cAAM,IAAIK,QAAO,YAAY,SAAQ,YAAY;AACjD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,IAAI;AAE1B,cAAM,KAAKA,QAAO,MAAM,SAAO,CAAC;AAChC,cAAM,IAAI,EAAE,UAAU,EAAE;AACxB,cAAM,KAAK,EAAE,UAAU,EAAE;AACzB,cAAM,KAAK,EAAE,UAAU,KAAG,MAAM;AAChC,cAAM,KAAK,EAAE,UAAU,KAAG,IAAE,MAAM;AAElC,cAAM,MAAM,EAAE,QAAS,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,CAAC,CAAC;AAC1D,cAAM,MAAM,EAAE,QAAS,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,MAAM,CAAC;AAE/D,cAAM,MAAMA,QAAO,MAAM,SAAO,CAAC;AACjC,cAAM,KAAK,EAAE,UAAU,GAAG;AAE1B,cAAM,MAAMA,QAAO,MAAM,SAAO,CAAC;AACjC,cAAM,KAAK,EAAE,UAAU,GAAG;AAC1B,cAAM,MAAM,EAAE,UAAU,MAAM,MAAM;AAEpC,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,cAAc,IAAI,GAAG;AAAA,UACxC,EAAE,KAAK,YAAY,SAAS,KAAK,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,SAAS,KAAK,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,EAAE;AAAA,QACjC;AAEA,UAAE;AAAA,UACE,EAAE,SAAS,SAAS,EAAE,QAAS,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC,CAAC;AAAA,UAC1E,EAAE,SAAS,KAAK,EAAE,UAAU,gBAAgB,SAAO,CAAC,CAAC;AAAA,UACrD,EAAE,MAAM,EAAE;AAAA,YAEN,EAAE,KAAK,SAAS,gBAAgB,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,YACtD,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,YAE5E,EAAE;AAAA,cACE,EAAE,YAAY,EAAE,SAAS,GAAG,GAAG,gBAAgB;AAAA,cAC/C;AAAA,gBACI,GAAG,EAAE,KAAK,SAAS,gBAAgB,KAAK,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,gBAC9D,GAAG,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,cACnF;AAAA,YACJ;AAAA,YACA,EAAE,MAAM,GAAG,EAAE,QAAU,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,YACxC,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAEA,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,WAAW,KAAK,EAAE;AAAA,UAClC,EAAE,KAAK,SAAS,WAAW,IAAI,EAAE;AAAA,QACrC;AAEA,YAAI,gBAAgB;AAChB,YAAE;AAAA,YACE,EAAE,KAAK,YAAY,QAAQ,IAAI,EAAE;AAAA,UACrC;AAAA,QACJ;AAEA,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,QAAQ,KAAK,GAAG;AAAA,UAEnC,EAAE,KAAK,SAAS,gBAAgB,IAAI,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,UAC1D,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,UAE5E,EAAE,KAAK,SAAS,gBAAgB,IAAI,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,UAC1D,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,QAChF;AAAA,MACJ;AAEA,eAAS,mBAAmB;AACxB,cAAM,IAAIA,QAAO,YAAY,SAAQ,eAAe;AACpD,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAM,EAAE,SAAS,OAAO;AAC9B,cAAM,KAAM,EAAE,SAAS,QAAQ;AAC/B,cAAM,KAAM,EAAE,SAAS,QAAQ;AAE/B,cAAM,KAAM,EAAE,SAAS,IAAI;AAE3B,cAAM,SAASA,QAAO,MAAM,MAAM;AAClC,cAAM,QAAQ,EAAE,UAAU,MAAM;AAChC,cAAM,UAAU,EAAE,UAAU,MAAM;AAClC,cAAM,UAAU,EAAE,UAAU,SAAO,MAAM;AACzC,cAAM,UAAU,EAAE,UAAU,SAAO,SAAO,CAAC;AAC3C,cAAM,UAAU,EAAE,UAAU,SAAO,SAAO,CAAC;AAC3C,cAAM,UAAU,EAAE,UAAU,SAAO,SAAO,CAAC;AAC3C,cAAM,WAAW,EAAE,UAAU,SAAO,SAAO,CAAC;AAE5C,UAAE;AAAA,UAEE,EAAE,KAAK,YAAY,SAAS,IAAI,OAAO;AAAA,UACvC,EAAE,KAAK,YAAY,SAAS,OAAO;AAAA,UACnC,EAAE,KAAK,YAAY,SAAS,IAAI,OAAO;AAAA,UACvC,EAAE,KAAK,YAAY,SAAS,OAAO;AAAA,UACnC,EAAE,KAAK,YAAY,SAAS,IAAI,OAAO;AAAA,UACvC,EAAE,KAAK,YAAY,SAAS,QAAQ;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,OAAO,IAAI,EAAE;AAAA,QAC5C;AAAA,MACJ;AAEA,eAAS,gBAAgB;AACrB,cAAM,IAAIA,QAAO,YAAY,SAAQ,YAAY;AACjD,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAM,EAAE,SAAS,OAAO;AAC9B,cAAM,KAAM,EAAE,SAAS,QAAQ;AAC/B,cAAM,KAAM,EAAE,SAAS,QAAQ;AAE/B,cAAM,KAAM,EAAE,SAAS,IAAI;AAC3B,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AACzD,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AACzD,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AACzD,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,IAAE,EAAE,CAAC;AACzD,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,KAAG,EAAE,CAAC;AAE1D,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE5C,UAAE;AAAA,UAGE,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAKrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,EAAE,UAAU,aAAa,GAAG,IAAI,EAAE;AAAA,UAC7D,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAKrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,EAAE,UAAU,aAAa,GAAG,IAAI,EAAE;AAAA,UAE7D,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAOrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UAEtC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAKrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UAEtC,EAAE,KAAK,YAAY,QAAQ,EAAE,UAAU,aAAa,GAAG,IAAI,EAAE;AAAA,UAE7D,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAKrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,EAAE,UAAU,aAAa,GAAG,IAAI,EAAE;AAAA,UAE7D,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UAEtC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAKrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,QAGzC;AAAA,MACJ;AAGA,eAAS,kBAAkB;AACvB,cAAM,IAAIA,QAAO,YAAY,SAAQ,aAAa;AAClD,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,UAAU,EAAE,SAAS,OAAO;AAClC,cAAM,UAAU,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,MAAM,CAAC;AAElE,cAAM,QAAS,EAAE,SAAS,OAAO;AACjC,cAAM,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,MAAM,CAAC;AACjE,cAAM,SAAU,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAGpE,cAAM,MAAMA,QAAO,MAAM,MAAM;AAC/B,cAAM,KAAK,EAAE,UAAU,GAAG;AAC1B,cAAM,MAAMA,QAAO,MAAM,MAAM;AAC/B,cAAM,KAAK,EAAE,UAAU,GAAG;AAE1B,cAAMG,KAAI,EAAE,SAAS,GAAG;AAGxB,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,QAAQA,EAAC;AAAA,UAE5B,EAAE,SAAS,SAAS,EAAE,QAAS,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC,CAAC;AAAA,UAE1E,EAAE,SAAS,KAAK,EAAE,UAAU,gBAAgB,SAAO,CAAC,CAAC;AAAA,UACrD,EAAE,MAAM,EAAE;AAAA,YAGN,EAAE,KAAK,YAAY,WAAWA,IAAGA,EAAC;AAAA,YAElC,EAAE,KAAK,YAAY,SAAS,QAAO,SAAS,EAAE;AAAA,YAC9C,EAAE,KAAK,YAAY,SAAS,QAAQ,SAAS,EAAE;AAAA,YAC/C,EAAE,KAAK,SAAS,cAAc,OAAO,IAAI,IAAIA,EAAC;AAAA,YAC9C,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,YAE5E,EAAE;AAAA,cACE,EAAE,YAAY,EAAE,SAAS,GAAG,GAAG,gBAAgB;AAAA,cAC/C;AAAA,gBACI,GAAG,EAAE,KAAK,YAAY,SAAS,QAAQ,SAAS,EAAE;AAAA,gBAClD,GAAG,EAAE,KAAK,YAAY,SAAS,QAAQ,SAAS,EAAE;AAAA,gBAElD,GAAG,EAAE,KAAK,SAAS,cAAc,OAAO,IAAI,IAAIA,EAAC;AAAA,gBACjD,GAAG,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,cAEnF;AAAA,YACJ;AAAA,YACA,EAAE,MAAM,GAAG,EAAE,QAAU,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,YACxC,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QAEL;AAEA,YAAI,gBAAgB;AAChB,YAAE;AAAA,YACE,EAAE,KAAK,YAAY,YAAYA,IAAGA,EAAC;AAAA,UACvC;AAAA,QACJ;AAEA,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,SAAS,QAAQ,SAAS,EAAE;AAAA,UAC/C,EAAE,KAAK,YAAY,SAAS,QAAQ,SAAS,EAAE;AAAA,UAC/C,EAAE,KAAK,SAAS,cAAc,OAAO,IAAI,IAAIA,EAAC;AAAA,UAC9C,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,UAE5E,EAAE,KAAK,YAAY,SAAS,QAAQ,SAAS,EAAE;AAAA,UAC/C,EAAE,KAAK,YAAY,SAAS,QAAQ,SAAS,EAAE;AAAA,UAC/C,EAAE,KAAK,SAAS,cAAc,OAAO,IAAI,IAAIA,EAAC;AAAA,UAC9C,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,QAEhF;AAAA,MAEJ;AAGA,eAAS,kBAAkB,GAAG;AAC1B,cAAM,MAAM;AAAA,UACR;AAAA,YACI,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,UACX;AAAA,UACA;AAAA,YACI,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,+EAA+E,8EAA8E;AAAA,YAC9J,CAAC,gFAAgF,EAAE;AAAA,YACnF,CAAC,gFAAgF,4EAA4E;AAAA,YAC7J,CAAC,gFAAgF,EAAE;AAAA,YACnF,CAAC,+EAA+E,6EAA6E;AAAA,YAC7J,CAAC,gFAAgF,EAAE;AAAA,YACnF,CAAC,gFAAgF,6EAA6E;AAAA,YAC9J,CAAC,6DAA6D,EAAE;AAAA,YAChE,CAAC,gFAAgF,8EAA8E;AAAA,YAC/J,CAAC,6DAA6D,EAAE;AAAA,YAChE,CAAC,gFAAgF,8EAA8E;AAAA,UACnK;AAAA,QACJ;AAEA,cAAM,KAAK;AAAA,UACP;AAAA,YACI,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,UACX;AAAA,UACA;AAAA,YACI,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,gFAAgF,8EAA8E;AAAA,YAC/J,CAAC,gFAAgF,EAAE;AAAA,YACnF,CAAC,+EAA+E,6EAA6E;AAAA,YAC7J,CAAC,6DAA6D,EAAE;AAAA,YAChE,CAAC,gFAAgF,6EAA6E;AAAA,UAClK;AAAA,UACA;AAAA,YACI,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,+EAA+E,8EAA8E;AAAA,YAC9J,CAAC,6DAA6D,EAAE;AAAA,YAChE,CAAC,+EAA+E,8EAA8E;AAAA,YAC9J,CAAC,gFAAgF,EAAE;AAAA,YACnF,CAAC,gFAAgF,6EAA6E;AAAA,UAClK;AAAA,QACJ;AAEA,cAAM,IAAIH,QAAO,YAAY,SAAQ,mBAAiB,CAAC;AACvD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,iBAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,gBAAM,IAAK,KAAG,IAAK,EAAE,SAAS,GAAG,IAAI,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AACrF,gBAAM,MAAM;AACZ,gBAAM,MAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,SAAS,MAAM,CAAC;AACrE,gBAAM,IAAK,KAAG,IAAK,EAAE,SAAS,GAAG,IAAI,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AACrF,gBAAM,MAAM;AACZ,gBAAM,MAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,SAAS,MAAM,CAAC;AACrE,gBAAM,OAAO,KAAK,IAAI,KAAK,MAAM,IAAE,CAAC,GAAG,IAAE,KAAM,GAAG,IAAE,GAAG,IAAE,EAAE;AAC3D,gBAAM,QAAQA,QAAO,MAAM;AAAA,YACvB,GAAGL,OAAM,eAAe,aAAa,KAAK,EAAE,GAAG,EAAE;AAAA,YACjD,GAAGA,OAAM,eAAe,aAAa,KAAK,EAAE,GAAG,EAAE;AAAA,UACrD,CAAC;AACD,cAAI,IAAE,KAAK,GAAG;AACV,cAAE;AAAA,cACE,EAAE,KAAK,YAAY,SAAS,KAAK,GAAG;AAAA,cACpC,EAAE,KAAK,YAAY,QAAQ,KAAK,GAAG;AAAA,cACnC,EAAE,KAAK,YAAY,QAAQ,GAAG,EAAE,UAAU,KAAK,GAAG,CAAC;AAAA,YACvD;AAAA,UACJ,OAAO;AACH,cAAE,QAAQ,EAAE,KAAK,YAAY,QAAQ,GAAG,EAAE,UAAU,KAAK,GAAG,CAAC,CAAC;AAAA,UAClE;AAAA,QACJ;AAEA,iBAAS,KAAK,GAAG,GAAG;AAChB,gBAAM,MAAM,OAAO,EAAE,EAAE;AACvB,gBAAM,MAAM,OAAO,EAAE,EAAE;AACvB,gBAAM,MAAM,OAAO,EAAE,EAAE;AACvB,gBAAM,MAAM,OAAO,EAAE,EAAE;AACvB,gBAAM,MAAM;AAAA,aACP,MAAM,MAAS,MAAM,OAAU;AAAA,aAC/B,MAAM,MAAS,MAAM,OAAU;AAAA,UACpC;AACA,cAAII,YAAW,IAAI,EAAE;AAAG,gBAAI,KAAK,IAAI,KAAK;AAC1C,iBAAO;AAAA,QACX;AAAA,MAEJ;AAIA,eAAS,qCAAqC;AAE1C,cAAM,IAAIC,QAAO,YAAY,SAAQ,iCAAiC;AACtE,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,SAAS,GAAG;AAC1B,cAAM,QAAQ;AACd,cAAM,QAAQ,EAAE,QAAQ,KAAK,EAAE,UAAU,KAAG,CAAC,CAAC;AAC9C,cAAMI,KAAI,EAAE,SAAS,GAAG;AACxB,cAAM,KAAKJ,QAAO,MAAM,MAAM;AAC9B,cAAM,IAAI,EAAE,UAAU,EAAE;AACxB,cAAM,MAAM;AACZ,cAAM,MAAM,EAAE,UAAU,KAAK,KAAG,CAAC;AACjC,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE1C,UAAE;AAAA,UAEE,EAAE,KAAK,YAAY,SAAS,OAAO,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,OAAO,GAAG;AAAA,UAGrC,EAAE,KAAK,YAAY,YAAY,KAAK,CAAC;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAElC,EAAE,KAAK,SAAS,mBAAmB,GAAG,CAAC;AAAA,UAEvC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAGI,EAAC;AAAA,QACtC;AAAA,MACJ;AAEA,eAAS,wBAAwB;AAC7B,cAAM,IAAIJ,QAAO,YAAY,SAAQ,oBAAoB;AACzD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,MAAM,CAAC;AACzD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAE3D,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,MAAM,CAAC;AACzD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAE3D,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC5C,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAG5C,UAAE;AAAA,UAKE,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,EAAE,UAAU,aAAa,GAAG,EAAE;AAAA,UAC7D,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,EAAE,UAAU,aAAa,GAAG,KAAK,GAAG;AAAA,UAC/D,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,GAAG;AAAA,UACxC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,EAAE;AAAA,UAMvC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,EAAE,UAAU,aAAa,GAAG,EAAE;AAAA,UAC7D,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,EAAE,UAAU,aAAa,GAAG,KAAK,GAAG;AAAA,UAC/D,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,GAAG;AAAA,UACxC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,EAAE;AAAA,UAMvC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,EAAE,UAAU,aAAa,GAAG,EAAE;AAAA,UAC7D,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,EAAE,UAAU,aAAa,GAAG,KAAK,GAAG;AAAA,UAC/D,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,GAAG;AAAA,UACxC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,EAAE;AAAA,UAIvC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAIrC,EAAE,KAAK,YAAY,QAAQ,IAAI,EAAE,UAAU,cAAc,GAAG,GAAG;AAAA,UAC/D,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UAEtC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAIrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,QAEzC;AAAA,MACJ;AAGA,eAAS,mBAAmB,UAAU,QAAQ;AAC1C,cAAM,mBAAmBE,KAAI,QAAQ,EAAE,IAAK,CAAC,MAAO,KAAG,KAAK,MAAM,CAAG;AACrE,cAAM,oBAAoBF,QAAO,MAAM,gBAAgB;AAEvD,cAAM,IAAIA,QAAO,YAAY,SAAQ,qBAAmB,MAAM;AAC9D,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,GAAG;AAExB,cAAM,MAAM,EAAE,SAAS,GAAG;AAE1B,cAAM,UAAU,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAGhD,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,cAAc,GAAG,OAAO;AAAA,UAC3C,EAAE,KAAK,YAAY,QAAQ,GAAG;AAAA,UAE9B,EAAE;AAAA,YACE,EAAE,SAAS,OAAO,EAAE,YAAY,EAAE,UAAU,iBAAiB,SAAO,CAAC,GAAG,iBAAiB,CAAC;AAAA,YAC1F,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,KAAK;AAAA,gBAChB,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,cACA,EAAE,KAAK,YAAY,QAAQ,KAAK,GAAG,GAAG;AAAA,cACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,SAAS,GAAG;AAAA,YAChD;AAAA,UACJ;AAAA,UAEA,EAAE,SAAS,KAAK,EAAE,UAAU,iBAAiB,SAAO,CAAC,CAAC;AAAA,UACtD,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,KAAK,SAAS,sBAAsB,KAAK,GAAG;AAAA,YAC9C,EAAE;AAAA,cACE,EAAE,SAAS,OAAO,EAAE,YAAY,EAAE,SAAS,GAAG,GAAG,iBAAiB,CAAC;AAAA,cACnE,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,KAAK;AAAA,kBAChB,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE,KAAK,YAAY,QAAQ,KAAK,GAAG,GAAG;AAAA,gBACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,SAAS,GAAG;AAAA,cAChD;AAAA,YACJ;AAAA,YACA,EAAE,MAAM,GAAG,EAAE,QAAU,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,YACxC,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAIA,eAAS,oCAAoC;AACzC,8BAAsB;AACtB,2BAAmB,WAAW,IAAI;AAElC,cAAM,IAAIA,QAAO,YAAY,SAAQ,gCAAgC;AACrE,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,SAAS,GAAG;AAC1B,cAAM,SAAS,EAAE,SAAS,GAAG;AAC7B,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAMG,KAAI,EAAE,UAAUH,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC1C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE1C,UAAE;AAAA,UAIE,EAAE,KAAK,SAAS,sBAAsB,KAAK,CAAC;AAAA,UAC5C,qBAAqB,CAAC,IAAI,EAAE,KAAK,YAAY,cAAc,GAAG,CAAC;AAAA,UAE/D,EAAE,KAAK,SAAS,sBAAsB,GAAG,CAAC;AAAA,UAE1C,EAAE,KAAK,SAAS,sBAAsB,GAAG,CAAC;AAAA,UAE1C,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAElC,EAAE,KAAK,SAAS,sBAAsB,GAAG,CAAC;AAAA,UAC1C,qBAAqB,CAAC,IAAI,EAAE,KAAK,YAAY,cAAc,GAAG,CAAC;AAAA,UAE/D,EAAE,KAAK,SAAS,sBAAsB,GAAGG,EAAC;AAAA,UAE1C,EAAE,KAAK,SAAS,sBAAsBA,IAAG,CAAC;AAAA,UAC1C,qBAAqB,CAAC,IAAI,EAAE,KAAK,YAAY,cAAc,GAAG,CAAC;AAAA,UAE/D,EAAE,KAAK,YAAY,cAAc,GAAG,CAAC;AAAA,UAErC,EAAE,KAAK,YAAY,cAAc,GAAG,CAAC;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAElC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAElC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAElC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAGlC,EAAE,KAAK,YAAY,QAAQ,GAAG,KAAK,CAAC;AAAA,UAGpC,EAAE,KAAK,SAAS,mBAAmB,GAAG,CAAC;AAAA,UAEvC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAElC,EAAE,KAAK,SAAS,mBAAmB,GAAG,CAAC;AAAA,UAEvC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAElC,EAAE,KAAK,YAAY,cAAc,KAAK,CAAC;AAAA,UAEvC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,CAAC;AAAA,UAElC,EAAE,KAAK,SAAS,mBAAmB,GAAG,CAAC;AAAA,UAEvC,EAAE,KAAK,YAAY,QAAQ,GAAG,GAAG,MAAM;AAAA,QAE3C;AAAA,MACJ;AAGA,eAAS,2BAA2B;AAChC,2CAAmC;AACnC,0CAAkC;AAClC,cAAM,IAAIH,QAAO,YAAY,SAAQ,sBAAsB;AAC3D,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,SAAS,GAAG;AAC1B,cAAM,SAAS,EAAE,SAAS,GAAG;AAC7B,cAAM,kBAAkB,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAExD,UAAE;AAAA,UACE,EAAE,KAAK,SAAS,mCAAmC,KAAK,eAAgB;AAAA,UACxE,EAAE,KAAK,SAAS,kCAAkC,iBAAiB,MAAO;AAAA,QAC9E;AAAA,MACJ;AAGA,eAAS,8BAA8B;AACnC,cAAM,IAAIA,QAAO,YAAY,SAAQ,yBAAyB;AAC9D,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,WAAW;AAEjB,cAAM,YAAYA,QAAO,MAAML,OAAM,eAAgB,UAAU,GAAI,CAAC;AAEpE,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,SAAS,GAAG,EAAE,UAAU,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC;AAAA,QACzG;AAAA,MACJ;AAKA,YAAM,QAAQK,QAAO,MAAM,QAAQ;AACnC,YAAM,QAAQA,QAAO,MAAM,QAAQ;AAEnC,eAAS,qBAAqB,WAAW;AAErC,cAAM,IAAIA,QAAO,YAAY,SAAQ,eAAa,SAAS;AAC3D,iBAAS,IAAE,GAAG,IAAE,WAAW,KAAK;AAC5B,YAAE,SAAS,OAAK,GAAG,KAAK;AACxB,YAAE,SAAS,OAAK,GAAG,KAAK;AAAA,QAC5B;AACA,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAGrB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC7C,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE7C,UAAE,QAAQ,EAAE,KAAK,YAAY,QAAQ,IAAK,CAAC;AAE3C,iBAAS,IAAE,GAAG,IAAE,WAAW,KAAK;AAE5B,YAAE,QAAQ,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,OAAK,CAAC,GAAG,EAAE,UAAU,KAAK,CAAE,CAAC;AAChF,YAAE,QAAQ,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,OAAK,CAAC,GAAG,EAAE,UAAU,KAAK,CAAE,CAAC;AAChF,YAAE,QAAQ,EAAE,KAAK,SAAS,eAAe,EAAE,UAAU,KAAK,GAAG,EAAE,UAAU,KAAK,GAAG,IAAK,CAAC;AAEvF,YAAE,QAAQ,EAAE,KAAK,YAAY,QAAQ,MAAM,MAAM,IAAK,CAAC;AAAA,QAC3D;AAEA,UAAE,QAAQ,EAAE,KAAK,SAAS,wBAAwB,MAAM,IAAK,CAAC;AAE9D,UAAE,QAAQ,EAAE,KAAK,YAAY,OAAO,MAAM,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,MAC9D;AAGA,eAASK,gBAAe;AAEpB,cAAM,IAAIL,QAAO,YAAY,SAAQ,UAAU;AAC/C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE7C,UAAE,QAAQ,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,KAAK,CAAE,CAAC;AAC7E,UAAE,QAAQ,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,KAAK,CAAE,CAAC;AAC7E,UAAE,QAAQ,EAAE,KAAK,SAAS,eAAe,EAAE,UAAU,KAAK,GAAG,EAAE,UAAU,KAAK,GAAG,IAAK,CAAC;AACvF,UAAE,QAAQ,EAAE,KAAK,SAAS,wBAAwB,MAAM,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,MAC7E;AAGA,uBAAiB;AACjB,0BAAoB;AAEpB,qBAAe;AACf,qBAAe;AAEf,oBAAc;AACd,uBAAiB;AACjB,sBAAgB;AAGhB,eAAS,IAAE,GAAG,IAAE,IAAI,KAAK;AACrB,0BAAkB,CAAC;AACnB,QAAAA,QAAO,eAAe,SAAS,mBAAiB,CAAC;AAAA,MACrD;AAEA,kCAA4B;AAC5B,+BAAyB;AAEzB,eAAS,IAAE,GAAG,KAAG,GAAG,KAAK;AACrB,6BAAqB,CAAC;AACtB,QAAAA,QAAO,eAAe,SAAS,eAAa,CAAC;AAAA,MACjD;AAEA,MAAAK,cAAa;AAEb,MAAAL,QAAO,eAAe,SAAS,UAAU;AAEzC,MAAAA,QAAO,eAAe,SAAS,YAAY;AAC3C,MAAAA,QAAO,eAAe,SAAS,YAAY;AAC3C,MAAAA,QAAO,eAAe,SAAS,aAAa;AAC5C,MAAAA,QAAO,eAAe,SAAS,sBAAsB;AACrD,MAAAA,QAAO,eAAe,SAAS,yBAAyB;AACxD,MAAAA,QAAO,eAAe,SAAS,YAAY;AAC3C,MAAAA,QAAO,eAAe,SAAS,eAAe;AAC9C,MAAAA,QAAO,eAAe,SAAS,oBAAoB;AACnD,MAAAA,QAAO,eAAe,SAAS,oBAAoB;AAAA,IAIvD;AAAA;AAAA;;;AC34CA;AAAA;AAAA;AAAA;AAAA,QAAMM,SAAQ;AAEd,QAAM,WAAU;AAChB,QAAM,UAAS;AACf,QAAM,WAAU;AAChB,QAAM,WAAU;AAChB,QAAM,aAAY;AAClB,QAAMC,YAAW;AACjB,QAAM,WAAW;AACjB,QAAM,WAAW;AACjB,QAAM,gBAAgB;AACtB,QAAM,EAAE,WAAAC,YAAW,OAAAC,QAAO,YAAAC,YAAW,IAAI;AAIzC,WAAO,UAAU,SAAS,cAAcC,SAAQ,SAAS;AAErD,YAAM,SAAS,WAAW;AAE1B,UAAIA,QAAO,QAAQ;AAAS,eAAO;AAEnC,YAAM,IAAI;AACV,YAAM,IAAI;AAEV,YAAM,OAAO,KAAK,OAAOH,WAAU,IAAI,EAAE,IAAI,KAAG,EAAE,IAAG;AACrD,YAAM,MAAM,OAAK;AACjB,YAAM,SAAS;AACf,YAAM,SAAS,SAAS;AACxB,YAAM,SAAS,SAAS;AAExB,YAAM,OAAO,KAAK,OAAOA,WAAU,IAAI,EAAE,IAAI,KAAG,EAAE,IAAG;AACrD,YAAM,MAAM,OAAK;AACjB,YAAM,SAAS;AAGf,YAAM,KAAKG,QAAO,MAAML,OAAM,eAAgB,GAAG,MAAO,CAAC;AAEzD,YAAM,YAAY,SAASK,SAAQ,GAAG,OAAO,MAAM;AACnD,cAAQA,SAAQ,GAAG,MAAM,OAAO,MAAM;AACtC,YAAM,OAAOA,QAAO,MAAML,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO,CAAC;AAC1E,YAAM,YAAY,WAAWK,SAAQ,OAAO,OAAO,IAAI;AAEvD,MAAAJ,UAASI,SAAQ,OAAO,OAAO,OAAO,SAAS;AAE/C,eAASA,SAAQ,OAAO,KAAK;AAC7B,eAASA,SAAQ,OAAO,KAAK;AAE7B,YAAM,YAAY,SAASA,SAAQ,WAAW,OAAO,KAAK;AAC1D,YAAM,OAAOA,QAAO,MAAM;AAAA,QACtB,GAAGL,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,MACtD,CAAC;AACD,YAAM,YAAY,WAAWK,SAAQ,OAAO,OAAO,IAAI;AAGvD,eAAS,cAAc,QAAQ,OAAO;AAClC,cAAM,IAAIA,QAAO,YAAY,MAAM;AACnC,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,GAAG,CAAC;AAEzC,UAAE;AAAA,UACE,EAAE,KAAK,sBAAsB,EAAE,SAAS,KAAK,GAAG,GAAG;AAAA,UACnD,EAAE;AAAA,YACE;AAAA,YACA,EAAE,SAAS,IAAI;AAAA,YACf;AAAA,YACA,EAAE,UAAU,GAAG;AAAA,YACf,EAAE,SAAS,IAAI;AAAA,UACnB;AAAA,QACJ;AAEA,QAAAA,QAAO,eAAe,MAAM;AAAA,MAChC;AACA,oBAAc,eAAe,iBAAiB;AAC9C,MAAAJ,UAASI,SAAQ,OAAO,OAAO,OAAO,aAAa;AAEnD,oBAAc,eAAe,iBAAiB;AAC9C,MAAAJ,UAASI,SAAQ,OAAO,OAAO,OAAO,aAAa;AAEnD,oBAAc,qBAAqB,uBAAuB;AAC1D,oBAAc,qBAAqB,uBAAuB;AAE1D,oBAAcA,SAAQ,qBAAqB,OAAO,OAAO,KAAK,KAAK,KAAK,SAAS;AACjF,oBAAcA,SAAQ,qBAAqB,OAAO,OAAO,MAAI,GAAG,MAAI,GAAG,KAAK,aAAa;AACzF,oBAAcA,SAAQ,0BAA0B,OAAO,OAAO,MAAI,GAAG,MAAI,GAAG,KAAK,mBAAmB;AACpG,oBAAcA,SAAQ,qBAAqB,OAAO,OAAO,MAAI,IAAE,GAAG,MAAI,IAAE,GAAG,KAAK,aAAa;AAC7F,oBAAcA,SAAQ,0BAA0B,OAAO,OAAO,MAAI,IAAE,GAAG,MAAI,IAAE,GAAG,KAAK,mBAAmB;AAGxG,eAAS,aAAa,GAAG;AACrB,eAAO,OAAO,CAAC,KAAK,MAAM,OAAO,SAAO,CAAC,KAAK;AAAA,MAClD;AAEA,YAAM,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAEA,YAAM,SAASA,QAAO;AAAA,QAClB;AAAA,UACI,GAAGL,OAAM,eAAgB,aAAa,MAAM,EAAE,GAAG,MAAO;AAAA,UACxD,GAAGA,OAAM,eAAgB,aAAa,MAAM,EAAE,GAAG,MAAO;AAAA,UACxD,GAAGA,OAAM,eAAgB,aAAa,MAAM,EAAE,GAAG,MAAO;AAAA,QAC5D;AAAA,MACJ;AAEA,YAAM,SAAS;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAEA,YAAM,UAAUK,QAAO;AAAA,QACnB;AAAA,UACI,GAAGL,OAAM,eAAgB,aAAa,OAAO,EAAE,GAAG,MAAO;AAAA,UACzD,GAAGA,OAAM,eAAgB,aAAa,OAAO,EAAE,GAAG,MAAO;AAAA,UACzD,GAAGA,OAAM,eAAgB,aAAa,OAAO,EAAE,GAAG,MAAO;AAAA,QAC7D;AAAA,MACJ;AAEA,YAAM,QAAQ;AAAA,QACV;AAAA,UACI;AAAA,UACA;AAAA,QACJ;AAAA,QAAE;AAAA,UACE;AAAA,UACA;AAAA,QACJ;AAAA,QAAE;AAAA,UACE;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,SAASK,QAAO;AAAA,QAClB;AAAA,UACI,GAAGL,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,UAC3D,GAAGA,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,UAC3D,GAAGA,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,UAC3D,GAAGA,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,UAC3D,GAAGA,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,UAC3D,GAAGA,OAAM,eAAgB,aAAa,MAAM,GAAG,EAAE,GAAG,MAAO;AAAA,QAC/D;AAAA,MACJ;AAEA,YAAM,SAAS;AAAA,QACX;AAAA,UACI;AAAA,UACA;AAAA,QACJ;AAAA,QAAE;AAAA,UACE;AAAA,UACA;AAAA,QACJ;AAAA,QAAE;AAAA,UACE;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,UAAUK,QAAO;AAAA,QACnB;AAAA,UACI,GAAGL,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,UAC5D,GAAGA,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,UAC5D,GAAGA,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,UAC5D,GAAGA,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,UAC5D,GAAGA,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,UAC5D,GAAGA,OAAM,eAAgB,aAAa,OAAO,GAAG,EAAE,GAAG,MAAO;AAAA,QAChE;AAAA,MACJ;AAEA,YAAM,QAAQK,QAAO,MAAM;AAAA,QACvB,GAAGL,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,MACtD,CAAC;AAED,YAAM,iBAAkBK,QAAO,MAAM;AAAA,QACjC,GAAGL,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,QAClD,GAAGA,OAAM,eAAgB,aAAa,EAAE,GAAG,MAAO;AAAA,MACtD,CAAC;AAED,eAAS,eAAe;AACpB,cAAM,IAAIK,QAAO,YAAY,YAAY,QAAQ;AACjD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC5C,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,MAAM,CAAC;AACzD,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,MAAM,CAAC;AAE1D,UAAE;AAAA,UACE,EAAE,KAAK,YAAU,SAAS,IAAI,GAAG;AAAA,UACjC,EAAE,KAAK,YAAU,QAAQ,IAAI,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAU,QAAQ,KAAK,IAAI,EAAE;AAAA,QACxC;AAAA,MACJ;AACA,mBAAa;AAEb,YAAM,YAAY,SAASA,SAAQ,YAAU,UAAU,OAAO,KAAK;AAEnE,eAAS,eAAe;AACpB,cAAM,IAAIA,QAAO,YAAY,YAAY,QAAQ;AACjD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,SAAS,EAAE,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAEjD,UAAE;AAAA,UACE,EAAE;AAAA,YACE,YAAY;AAAA,YACZ,EAAE,SAAS,GAAG;AAAA,YACd;AAAA,UACJ;AAAA,UACA,EAAE;AAAA,YACE,YAAY;AAAA,YACZ,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,MAAI,CAAC,CAAC;AAAA,YAC7C,EAAE,SAAS,IAAI;AAAA,UACnB;AAAA,UACA,EAAE;AAAA,YACE,YAAY;AAAA,YACZ,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,MAAI,CAAC,CAAC;AAAA,YAC7C,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,MAAI,CAAC,CAAC;AAAA,UAClD;AAAA,UACA,EAAE;AAAA,YACE,YAAY;AAAA,YACZ;AAAA,YACA,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,MAAI,CAAC,CAAC;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ;AACA,mBAAa;AAEb,YAAM,YAAY,SAASA,SAAQ,YAAU,UAAU,OAAO,SAAS;AAEvE,YAAM,eAAe;AACrB,YAAM,kBAAkBC,MAAK,YAAY;AACzC,YAAM,mBAAmBD,QAAO,MAAM,eAAe;AACrD,YAAM,iBAAiB;AAEvB,YAAM,cAAc,IAAI;AACxB,YAAM,eAAe,gBAAgB,SAAO;AAC5C,YAAM,eAAe,gBAAgB,OAAO,CAAC,KAAK,MAAO,OAAQ,KAAG,IAAI,IAAI,IAAM,CAAC;AACnF,YAAM,YAAY,eAAe,eAAe;AAChD,YAAM,WAAW,IAAE,IAAE;AACrB,YAAM,WAAW,IAAE,MAAI,IAAI,YAAU;AACrC,YAAM,qBAAqB;AAE3B,YAAM,YAAY;AAGlB,MAAAA,QAAO,QAAQ,UAAU;AAAA,QACrB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,IAAIA,QAAO,QAAQ,OAAO;AAAA,QAC1B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAGA,eAASE,KAAI,GAAG;AACZ,YAAI,IAAI;AACR,cAAM,MAAM,CAAC;AACb,eAAO,IAAI,IAAI;AACX,cAAIJ,OAAM,CAAC,GAAG;AACV,kBAAM,IAAI,IAAI,OAAO,IAAI,EAAE;AAC3B,gBAAI,KAAM,CAAE;AACZ,gBAAI,IAAI,OAAO,CAAC;AAAA,UACpB,OAAO;AACH,gBAAI,KAAM,CAAE;AAAA,UAChB;AACA,cAAI,KAAK;AAAA,QACb;AACA,eAAO;AAAA,MACX;AAEA,eAASG,MAAK,GAAG;AACb,YAAI,IAAI;AACR,cAAM,MAAM,CAAC;AACb,eAAO,IAAI,IAAI;AACX,cAAIH,OAAM,CAAC,GAAG;AACV,gBAAI,KAAM,CAAE;AAAA,UAChB,OAAO;AACH,gBAAI,KAAM,CAAE;AAAA,UAChB;AACA,cAAI,KAAK;AAAA,QACb;AACA,eAAO;AAAA,MACX;AAEA,eAAS,iBAAiB;AACtB,cAAM,IAAIE,QAAO,YAAY,SAAQ,YAAY;AACjD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,SAAS,KAAK;AAEzB,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,cAAc,EAAE,SAAS,IAAI,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,QAC1E;AAAA,MACJ;AAIA,eAAS,sBAAsB;AAC3B,cAAM,IAAIA,QAAO,YAAY,SAAQ,cAAc;AACnD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAM,EAAE,SAAS,GAAG;AAC1B,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,GAAG,CAAC;AACzD,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,GAAG,CAAC;AAEzD,cAAM,KAAM,EAAE,SAAS,GAAG;AAC1B,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,GAAG,CAAC;AACzD,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,GAAG,CAAC;AAGzD,cAAM,WAAW,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AACjD,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE3C,UAAE;AAAA,UAGE,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UAGpC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UAGpC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UAGpC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UAGpC,EAAE,KAAK,YAAY,WAAW,IAAI,QAAQ;AAAA,UAG1C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,UAAU,EAAE;AAAA,UAG3C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,UAAU,EAAE;AAAA,UAG3C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,EAAE;AAAA,UAGjC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,UAAU,EAAE;AAAA,UAG3C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,QAEzC;AAAA,MACJ;AAEA,eAAS,mBAAmB;AACxB,cAAM,IAAIA,QAAO,YAAY,SAAQ,cAAc;AACnD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAM,EAAE,SAAS,GAAG;AAC1B,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,GAAG,CAAC;AACzD,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,GAAG,CAAC;AAEzD,cAAM,KAAM,EAAE,SAAS,GAAG;AAC1B,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,GAAG,CAAC;AAEzD,cAAM,MAAO,EAAE,SAAS,GAAG;AAC3B,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,GAAG,CAAC;AACzD,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,GAAG,CAAC;AAEzD,cAAM,WAAW,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AACjD,cAAM,WAAW,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AACjD,cAAM,YAAY,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAClD,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE3C,UAAE;AAAA,UAGE,EAAE,KAAK,YAAY,WAAW,IAAI,QAAQ;AAAA,UAG1C,EAAE,KAAK,YAAY,WAAW,IAAI,QAAQ;AAAA,UAG1C,EAAE,KAAK,YAAY,QAAQ,UAAU,IAAI,EAAE;AAAA,UAG3C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,UAAU,EAAE;AAAA,UAC3C,EAAE,KAAK,YAAY,QAAQ,IAAI,UAAU,EAAE;AAAA,UAC3C,EAAE,KAAK,YAAY,QAAQ,IAAI,UAAU,EAAE;AAAA,UAG3C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UAGpC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,WAAW,IAAI,EAAE;AAAA,UACpC,EAAE,KAAK,YAAY,QAAQ,IAAI,UAAU,EAAE;AAAA,UAC3C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UAGtC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,WAAW,KAAK,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,UAAU,GAAG;AAAA,UAG7C,EAAE,KAAK,YAAY,WAAW,IAAI,SAAS;AAAA,UAG3C,EAAE,KAAK,YAAY,QAAQ,KAAK,WAAW,GAAG;AAAA,UAG9C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UAGtC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UAGtC,EAAE,KAAK,YAAY,QAAQ,IAAI,EAAE;AAAA,UAGjC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,QACzC;AAAA,MACJ;AAGA,eAAS,iBAAiB;AACtB,cAAM,IAAIA,QAAO,YAAY,SAAQ,YAAY;AACjD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAG3B,cAAM,IAAI,EAAE,SAAS,IAAI;AAEzB,cAAM,KAAKA,QAAO,MAAM,SAAO,CAAC;AAChC,cAAM,IAAI,EAAE,UAAU,EAAE;AAExB,cAAM,OAAO,EAAE,SAAS,OAAO;AAE/B,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,cAAc,GAAG,IAAI;AAAA,UACxC,EAAE;AAAA,YACE,EAAE,KAAK,YAAY,WAAW,IAAI;AAAA,YAClC,EAAE,IAAI,CAAC,CAAC;AAAA,UACZ;AAAA,UACA,EAAE,KAAK,YAAY,SAAS,MAAM,CAAC;AAAA,UACnC,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC,CAAC;AAAA,QAC7E;AAEA,UAAE;AAAA,UACE,EAAE,SAAS,KAAK,EAAE,UAAU,gBAAgB,SAAO,CAAC,CAAC;AAAA,UACrD,EAAE,MAAM,EAAE;AAAA,YAEN,EAAE,KAAK,SAAS,gBAAgB,GAAG,EAAE,SAAS,OAAO,CAAC;AAAA,YACtD,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,YAE5E,EAAE;AAAA,cACE,EAAE,YAAY,EAAE,SAAS,GAAG,GAAG,gBAAgB;AAAA,cAC/C;AAAA,gBACI,GAAG,EAAE,KAAK,SAAS,gBAAgB,GAAG,MAAM,EAAE,SAAS,OAAO,CAAC;AAAA,gBAC/D,GAAG,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,cACnF;AAAA,YACJ;AAAA,YACA,EAAE,MAAM,GAAG,EAAE,QAAU,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,YACxC,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ;AAGA,eAAS,cAAc;AACnB,cAAM,IAAIA,QAAO,YAAY,YAAW,OAAO;AAC/C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,EAAE,SAAS,IAAI;AAC5B,cAAM,OAAO,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAC9D,cAAM,OAAO,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAE9D,cAAM,KAAM,EAAE,SAAS,KAAK;AAE5B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAC5D,cAAM,MAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAE7D,cAAM,UAAU,EAAE,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAClD,cAAM,UAAU,EAAE,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAElD,UAAE;AAAA,UAEE,EAAE,KAAK,YAAY,QAAQ,MAAM,MAAM,OAAO;AAAA,UAC9C,EAAE,KAAK,YAAY,QAAQ,MAAM,MAAM,OAAO;AAAA,UAG9C,EAAE,KAAK,YAAY,QAAQ,MAAM,IAAI,GAAG;AAAA,UAGxC,EAAE,KAAK,YAAY,QAAQ,SAAS,IAAI,EAAE;AAAA,UAC1C,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UAGtC,EAAE,KAAK,YAAY,UAAU,IAAI,EAAE;AAAA,UAGnC,EAAE,KAAK,YAAY,QAAQ,SAAS,IAAI,EAAE;AAAA,UAC1C,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,QAC1C;AAAA,MACJ;AACA,kBAAY;AAEZ,eAAS,eAAe;AACpB,cAAM,IAAIA,QAAO,YAAY,YAAW,QAAQ;AAChD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,EAAE,SAAS,IAAI;AAC5B,cAAM,OAAO,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAC9D,cAAM,OAAO,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAE9D,cAAM,KAAM,EAAE,SAAS,KAAK;AAC5B,cAAM,KAAM,EAAE,SAAS,KAAK;AAE5B,cAAM,KAAK,EAAE,SAAS,IAAI;AAC1B,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAC5D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAE5D,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAC9C,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAC9C,cAAM,UAAU,EAAE,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAClD,cAAM,UAAU,EAAE,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAElD,UAAE;AAAA,UAEE,EAAE,KAAK,YAAY,QAAQ,MAAM,IAAI,GAAG;AAAA,UAGxC,EAAE,KAAK,YAAY,QAAQ,MAAM,IAAI,GAAG;AAAA,UAGxC,EAAE,KAAK,YAAY,QAAQ,MAAM,MAAM,OAAO;AAAA,UAC9C,EAAE,KAAK,YAAY,QAAQ,MAAM,MAAM,OAAO;AAAA,UAG9C,EAAE,KAAK,YAAY,QAAQ,MAAM,MAAM,EAAE;AAAA,UACzC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UAGtC,EAAE,KAAK,YAAY,UAAU,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UAGtC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,SAAS,EAAE;AAAA,UAC1C,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UAGtC,EAAE,KAAK,YAAY,QAAQ,SAAS,IAAI,EAAE;AAAA,UAC1C,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,QAG1C;AAAA,MACJ;AACA,mBAAa;AAGb,eAAS,iBAAiB;AAEtB,cAAM,IAAIA,QAAO,YAAY,YAAW,SAAS;AACjD,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAG3B,cAAM,OAAO,EAAE,SAAS,IAAI;AAC5B,cAAM,OAAO,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAE9D,cAAM,KAAM,EAAE,SAAS,KAAK;AAC5B,cAAM,KAAM,EAAE,SAAS,KAAK;AAC5B,cAAM,KAAM,EAAE,SAAS,KAAK;AAE5B,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAC7C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAC7C,cAAM,IAAI,EAAE,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAE5C,cAAM,OAAO,EAAE,SAAS,IAAI;AAC5B,cAAM,OAAO,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAE9D,UAAE;AAAA,UAEE,EAAE,KAAK,YAAY,UAAU,MAAM,IAAI,IAAI,EAAE;AAAA,UAG7C,EAAE,KAAK,YAAY,SAAS,MAAM,IAAI,EAAE;AAAA,UAGxC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,CAAC;AAAA,UAGpC,EAAE,KAAK,YAAY,QAAQ,MAAM,MAAM,IAAI;AAAA,UAG3C,EAAE,KAAK,YAAY,UAAU,MAAM,IAAI,GAAG,IAAI;AAAA,UAG9C,EAAE,KAAK,YAAY,QAAQ,MAAM,IAAI,IAAI;AAAA,UACzC,EAAE,KAAK,YAAY,QAAQ,MAAM,IAAI,IAAI;AAAA,UAGzC,EAAE,KAAK,YAAY,SAAS,IAAI,IAAI;AAAA,UAGpC,EAAE,KAAK,YAAY,UAAU,MAAM,IAAI;AAAA,UAGvC,EAAE,KAAK,YAAY,QAAQ,MAAM,IAAI,IAAI;AAAA,QAC7C;AAAA,MACJ;AACA,qBAAe;AAGf,eAAS,WAAW;AAChB,cAAM,IAAIA,QAAO,YAAY,SAAQ,MAAM;AAC3C,UAAE,SAAS,MAAM,KAAK;AACtB,UAAE,SAAS,UAAU,KAAK;AAC1B,UAAE,SAAS,MAAM,KAAK;AAEtB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAM,EAAE,SAAS,IAAI;AAC3B,cAAM,KAAM,EAAE,QAAQ,EAAE,SAAS,IAAI,GAAG,EAAE,UAAU,GAAG,CAAC;AAExD,cAAMG,KAAK,EAAE,SAAS,IAAI;AAE1B,cAAM,UAAW,EAAE,SAAS,QAAQ;AACpC,cAAM,UAAW,EAAE,QAAQ,EAAE,SAAS,QAAQ,GAAG,EAAE,UAAU,MAAM,CAAC;AACpE,cAAM,UAAW,EAAE,QAAQ,EAAE,SAAS,QAAQ,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AACtE,cAAM,UAAW,EAAE,QAAQ,EAAE,SAAS,QAAQ,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AACtE,cAAM,QAAS,EAAE,QAAQ,EAAE,SAAS,QAAQ,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC;AAEpE,cAAM,MAAMH,QAAO,MAAM,SAAO,CAAC;AACjC,cAAM,KAAM,EAAE,UAAU,GAAG;AAC3B,cAAM,QAAQ,EAAE,UAAU,GAAG;AAC7B,cAAM,QAAQ,EAAE,UAAU,MAAI,MAAM;AAEpC,cAAM,MAAMA,QAAO,MAAM,SAAO,CAAC;AACjC,cAAM,KAAM,EAAE,UAAU,GAAG;AAC3B,cAAM,QAAQ,EAAE,UAAU,GAAG;AAC7B,cAAM,QAAQ,EAAE,UAAU,MAAI,MAAM;AACpC,UAAE;AAAA,UAYE,EAAE,KAAK,YAAY,QAAQ,SAAS,IAAI,KAAK;AAAA,UAC7C,EAAE,KAAK,YAAY,QAAQ,SAAS,IAAI,KAAK;AAAA,UAC7C,EAAE,KAAK,YAAY,QAAQ,SAAS,IAAI,KAAK;AAAA,UAC7C,EAAE,KAAK,YAAY,QAAQ,SAAS,IAAI,KAAK;AAAA,UAE7C,EAAE,KAAK,YAAY,WAAWG,IAAG,OAAO,IAAI,IAAIA,EAAC;AAAA,QAErD;AAAA,MAEJ;AACA,eAAS;AAET,eAAS,kBAAkB;AACvB,cAAM,IAAIH,QAAO,YAAY,SAAQ,aAAa;AAClD,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,SAAS,KAAK;AACzB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,EAAE,SAAS,OAAO;AAE/B,cAAM,QAAS,EAAE,SAAS,OAAO;AAEjC,cAAMG,KAAI,EAAE,SAAS,GAAG;AAGxB,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,QAAQA,EAAC;AAAA,UAE5B,EAAE;AAAA,YACE,EAAE,KAAK,YAAY,WAAW,IAAI;AAAA,YAClC,EAAE,IAAI,CAAC,CAAC;AAAA,UACZ;AAAA,UACA,EAAE;AAAA,YACE,EAAE,KAAK,YAAY,WAAW,EAAE,SAAS,OAAO,CAAC;AAAA,YACjD,EAAE,IAAI,CAAC,CAAC;AAAA,UACZ;AAAA,UACA,EAAE,SAAS,SAAS,EAAE,QAAS,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,SAAO,CAAC,CAAC,CAAC;AAAA,UAE1E,EAAE,SAAS,KAAK,EAAE,UAAU,gBAAgB,SAAO,CAAC,CAAC;AAAA,UACrD,EAAE,MAAM,EAAE;AAAA,YAGN,EAAE,KAAK,SAAS,QAAQ,MAAM,OAAQA,EAAC;AAAA,YACvC,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,YAE5E,EAAE;AAAA,cACE,EAAE,YAAY,EAAE,SAAS,GAAG,GAAG,gBAAgB;AAAA,cAC/C;AAAA,gBACI,GAAG,EAAE,KAAK,SAAS,QAAQ,MAAM,OAAQA,EAAC;AAAA,gBAC1C,GAAG,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAE,SAAS,OAAO,GAAG,EAAE,UAAU,WAAW,CAAC,CAAC;AAAA,cACnF;AAAA,YACJ;AAAA,YACA,EAAE,KAAK,YAAY,WAAWA,IAAGA,EAAC;AAAA,YAElC,EAAE,MAAM,GAAG,EAAE,OAAS,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAE,CAAC;AAAA,YACvD,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,UACD,EAAE,KAAK,SAAS,QAAQ,MAAM,OAAQA,EAAC;AAAA,QAE3C;AAGA,YAAI,gBAAgB;AAChB,YAAE;AAAA,YACE,EAAE,KAAK,YAAY,cAAcA,IAAGA,EAAC;AAAA,UACzC;AAAA,QACJ;AAAA,MACJ;AAGA,eAAS,kBAAkB,GAAG;AAC1B,cAAM,MAAM;AAAA,UACR;AAAA,YACI,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,UACX;AAAA,UACA;AAAA,YACI,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,sHAAsH,mHAAmH;AAAA,YAC1O,CAAC,mGAAmG,EAAE;AAAA,YACtG,CAAC,sHAAsH,oHAAoH;AAAA,YAC3O,CAAC,mGAAmG,EAAE;AAAA,YACtG,CAAC,sHAAsH,mHAAmH;AAAA,YAC1O,CAAC,sHAAsH,EAAE;AAAA,YACzH,CAAC,qHAAqH,oHAAoH;AAAA,YAC1O,CAAC,sHAAsH,EAAE;AAAA,YACzH,CAAC,sHAAsH,oHAAoH;AAAA,YAC3O,CAAC,sHAAsH,EAAE;AAAA,YACzH,CAAC,qHAAqH,oHAAoH;AAAA,UAC9O;AAAA,QACJ;AAEA,cAAM,KAAK;AAAA,UACP;AAAA,YACI,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,EAAE;AAAA,UACX;AAAA,UACA;AAAA,YACI,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,IAAI,oHAAoH;AAAA,YACzH,CAAC,mGAAmG,EAAE;AAAA,YACtG,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,sHAAsH,EAAE;AAAA,YACzH,CAAC,IAAI,iGAAiG;AAAA,UAC1G;AAAA,UACA;AAAA,YACI,CAAC,IAAI,EAAE;AAAA,YACP,CAAC,sHAAsH,EAAE;AAAA,YACzH,CAAC,sHAAsH,EAAE;AAAA,YACzH,CAAC,sHAAsH,EAAE;AAAA,YACzH,CAAC,mGAAmG,EAAE;AAAA,YACtG,CAAC,mGAAmG,EAAE;AAAA,UAC1G;AAAA,QACJ;AAEA,cAAM,IAAIH,QAAO,YAAY,YAAY,kBAAgB,CAAC;AAC1D,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,iBAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,gBAAM,IAAK,KAAG,IAAK,EAAE,SAAS,GAAG,IAAI,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AACrF,gBAAM,MAAM;AACZ,gBAAM,MAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,SAAS,MAAM,CAAC;AACrE,gBAAM,IAAK,KAAG,IAAK,EAAE,SAAS,GAAG,IAAI,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AACrF,gBAAM,MAAM;AACZ,gBAAM,MAAM,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,SAAS,MAAM,CAAC;AACrE,gBAAM,OAAO,KAAK,IAAI,KAAK,MAAM,IAAE,CAAC,GAAG,IAAE,KAAM,GAAG,IAAE,GAAG,IAAE,EAAE;AAC3D,gBAAM,QAAQA,QAAO,MAAM;AAAA,YACvB,GAAGL,OAAM,eAAe,aAAa,KAAK,EAAE,GAAG,GAAG;AAAA,YAClD,GAAGA,OAAM,eAAe,aAAa,KAAK,EAAE,GAAG,GAAG;AAAA,UACtD,CAAC;AACD,cAAI,IAAE,KAAK,GAAG;AACV,cAAE;AAAA,cACE,EAAE,KAAK,YAAY,SAAS,KAAK,GAAG;AAAA,cACpC,EAAE,KAAK,YAAY,QAAQ,KAAK,GAAG;AAAA,cACnC,EAAE,KAAK,YAAY,QAAQ,GAAG,EAAE,UAAU,KAAK,GAAG,CAAC;AAAA,YACvD;AAAA,UACJ,OAAO;AACH,cAAE,QAAQ,EAAE,KAAK,YAAY,QAAQ,GAAG,EAAE,UAAU,KAAK,GAAG,CAAC,CAAC;AAAA,UAClE;AAAA,QACJ;AAEA,iBAAS,KAAK,GAAG,GAAG;AAChB,gBAAM,MAAM,EAAE;AACd,gBAAM,MAAM,EAAE;AACd,gBAAM,MAAM,EAAE;AACd,gBAAM,MAAM,EAAE;AACd,gBAAM,MAAM;AAAA,aACP,MAAM,MAAO,MAAM,OAAQ;AAAA,aAC3B,MAAM,MAAO,MAAM,OAAQ;AAAA,UAChC;AACA,cAAII,YAAW,IAAI,EAAE;AAAG,gBAAI,KAAK,IAAI,KAAK;AAC1C,iBAAO;AAAA,QACX;AAAA,MAEJ;AAGA,eAAS,wBAAwB;AAC7B,cAAM,IAAIC,QAAO,YAAY,SAAQ,oBAAoB;AACzD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,MAAM,CAAC;AACzD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAE3D,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,MAAM,CAAC;AACzD,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAC3D,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,IAAE,MAAM,CAAC;AAE3D,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC5C,cAAM,MAAM,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAG5C,UAAE;AAAA,UAKE,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,UAAU,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,UAAU,KAAK,GAAG;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,GAAG;AAAA,UACxC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,EAAE;AAAA,UAMvC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,UAAU,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,UAAU,KAAK,GAAG;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,GAAG;AAAA,UACxC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,EAAE;AAAA,UAMvC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,UAAU,IAAI,EAAE;AAAA,UACnC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,UAAU,KAAK,GAAG;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,GAAG;AAAA,UACxC,EAAE,KAAK,YAAY,QAAQ,IAAI,KAAK,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,KAAK,EAAE;AAAA,UAIvC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAIrC,EAAE,KAAK,YAAY,QAAQ,IAAI,EAAE,UAAU,cAAc,GAAG,GAAG;AAAA,UAC/D,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,KAAK,IAAI,EAAE;AAAA,UAEtC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAIrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAErC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,QAEzC;AAAA,MACJ;AAGA,eAAS,mBAAmB,UAAU,eAAe,QAAQ;AACzD,cAAM,mBAAmBE,KAAI,QAAQ,EAAE,IAAK,CAAC,MAAO,KAAG,KAAK,MAAM,CAAG;AACrE,cAAM,oBAAoBF,QAAO,MAAM,gBAAgB;AAGvD,cAAM,IAAIA,QAAO,YAAY,SAAQ,qBAAmB,MAAM;AAC9D,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,OAAO,KAAK;AACvB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,IAAI,EAAE,SAAS,GAAG;AAExB,cAAM,MAAM,EAAE,SAAS,GAAG;AAE1B,cAAM,UAAU,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAGhD,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,cAAc,GAAG,OAAO;AAAA,UAC3C,EAAE,KAAK,YAAY,QAAQ,GAAG;AAAA,UAE9B,EAAE;AAAA,YACE,EAAE,SAAS,OAAO,EAAE,YAAY,EAAE,UAAU,iBAAiB,SAAO,CAAC,GAAG,iBAAiB,CAAC;AAAA,YAC1F,EAAE;AAAA,cACE,EAAE;AAAA,gBACE,EAAE,SAAS,KAAK;AAAA,gBAChB,EAAE,UAAU,CAAC;AAAA,cACjB;AAAA,cACA,EAAE,KAAK,YAAY,QAAQ,KAAK,GAAG,GAAG;AAAA,cACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,SAAS,GAAG;AAAA,YAChD;AAAA,UACJ;AAAA,UAEA,EAAE,SAAS,KAAK,EAAE,UAAU,iBAAiB,SAAO,CAAC,CAAC;AAAA,UACtD,EAAE,MAAM,EAAE;AAAA,YACN,EAAE,KAAK,SAAS,sBAAsB,KAAK,GAAG;AAAA,YAC9C,EAAE;AAAA,cACE,EAAE,SAAS,OAAO,EAAE,YAAY,EAAE,SAAS,GAAG,GAAG,iBAAiB,CAAC;AAAA,cACnE,EAAE;AAAA,gBACE,EAAE;AAAA,kBACE,EAAE,SAAS,KAAK;AAAA,kBAChB,EAAE,UAAU,CAAC;AAAA,gBACjB;AAAA,gBACA,EAAE,KAAK,YAAY,QAAQ,KAAK,GAAG,GAAG;AAAA,gBACtC,EAAE,KAAK,YAAY,QAAQ,KAAK,SAAS,GAAG;AAAA,cAChD;AAAA,YACJ;AAAA,YACA,EAAE,MAAM,GAAG,EAAE,QAAU,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,YACxC,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;AAAA,YAC1D,EAAE,GAAG,CAAC;AAAA,UACV,CAAC;AAAA,QACL;AAEA,YAAI,eAAe;AACf,YAAE;AAAA,YACE,EAAE,KAAK,YAAY,cAAc,KAAK,GAAG;AAAA,UAC7C;AAAA,QACJ;AAAA,MAEJ;AAEA,eAAS,2BAA2B;AAChC,8BAAsB;AACtB,2BAAmB,WAAW,oBAAoB,IAAI;AAEtD,cAAM,IAAIA,QAAO,YAAY,SAAQ,sBAAsB;AAC3D,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,MAAM,EAAE,SAAS,GAAG;AAC1B,cAAM,MAAM,EAAE,SAAS,GAAG;AAC1B,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC3C,cAAM,KAAK,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE3C,UAAE;AAAA,UAGE,EAAE,KAAK,YAAY,kBAAkB,KAAK,EAAE;AAAA,UAG5C,EAAE,KAAK,YAAY,YAAY,KAAK,EAAE;AAAA,UAGtC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,SAAS,IAAI,EAAE;AAAA,UAGlC,EAAE,KAAK,YAAY,kBAAkB,IAAI,EAAE;AAAA,UAG3C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAIrC,EAAE,KAAK,SAAS,sBAAsB,IAAI,EAAE;AAAA,UAC5C,EAAE,KAAK,YAAY,cAAc,IAAI,EAAE;AAAA,UAGvC,EAAE,KAAK,SAAS,sBAAsB,IAAI,EAAE;AAAA,UAG5C,EAAE,KAAK,SAAS,sBAAsB,IAAI,EAAE;AAAA,UAG5C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,SAAS,sBAAsB,IAAI,EAAE;AAAA,UAG5C,EAAE,KAAK,SAAS,sBAAsB,IAAI,EAAE;AAAA,UAG5C,EAAE,KAAK,SAAS,sBAAsB,IAAI,EAAE;AAAA,UAG5C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,SAAS,sBAAsB,IAAI,EAAE;AAAA,UAG5C,EAAE,KAAK,YAAY,cAAc,IAAI,EAAE;AAAA,UAGvC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UACrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,cAAc,IAAI,EAAE;AAAA,UAGvC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,kBAAkB,IAAI,EAAE;AAAA,UAG3C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,kBAAkB,IAAI,EAAE;AAAA,UAG3C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,kBAAkB,IAAI,EAAE;AAAA,UAG3C,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,EAAE;AAAA,UAGrC,EAAE,KAAK,YAAY,QAAQ,IAAI,IAAI,GAAG;AAAA,QAE1C;AAAA,MACJ;AAGA,eAAS,8BAA8B;AACnC,cAAM,IAAIA,QAAO,YAAY,SAAQ,yBAAyB;AAC9D,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,WAAW;AAEjB,cAAM,YAAYA,QAAO,MAAML,OAAM,eAAgB,UAAU,GAAI,CAAC;AAEpE,cAAM,IAAI,EAAE,eAAe;AAE3B,UAAE;AAAA,UACE,EAAE,KAAK,YAAY,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,SAAS,GAAG,EAAE,UAAU,GAAG,GAAG,EAAE,SAAS,GAAG,CAAC;AAAA,QACzG;AAAA,MACJ;AAGA,YAAM,QAAQK,QAAO,MAAM,QAAQ;AACnC,YAAM,QAAQA,QAAO,MAAM,QAAQ;AAEnC,eAAS,qBAAqB,WAAW;AAErC,cAAM,IAAIA,QAAO,YAAY,SAAQ,eAAa,SAAS;AAC3D,iBAAS,IAAE,GAAG,IAAE,WAAW,KAAK;AAC5B,YAAE,SAAS,OAAK,GAAG,KAAK;AACxB,YAAE,SAAS,OAAK,GAAG,KAAK;AAAA,QAC5B;AACA,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAGrB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC7C,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE7C,UAAE,QAAQ,EAAE,KAAK,YAAY,QAAQ,IAAK,CAAC;AAE3C,iBAAS,IAAE,GAAG,IAAE,WAAW,KAAK;AAE5B,YAAE,QAAQ,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,OAAK,CAAC,GAAG,EAAE,UAAU,KAAK,CAAE,CAAC;AAChF,YAAE,QAAQ,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,OAAK,CAAC,GAAG,EAAE,UAAU,KAAK,CAAE,CAAC;AAGhF,YAAE;AAAA,YACE,EAAE;AAAA,cACE,EAAE,QAAQ,EAAE,KAAK,YAAY,kBAAkB,EAAE,UAAU,KAAK,CAAC,CAAC;AAAA,cAClE,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,YACxB;AAAA,YACA,EAAE;AAAA,cACE,EAAE,QAAQ,EAAE,KAAK,YAAY,kBAAkB,EAAE,UAAU,KAAK,CAAC,CAAC;AAAA,cAClE,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAAA,YACxB;AAAA,UACJ;AAEA,YAAE,QAAQ,EAAE,KAAK,SAAS,eAAe,EAAE,UAAU,KAAK,GAAG,EAAE,UAAU,KAAK,GAAG,IAAK,CAAC;AAEvF,YAAE,QAAQ,EAAE,KAAK,YAAY,QAAQ,MAAM,MAAM,IAAK,CAAC;AAAA,QAC3D;AAEA,UAAE,QAAQ,EAAE,KAAK,SAAS,wBAAwB,MAAM,IAAK,CAAC;AAE9D,UAAE,QAAQ,EAAE,KAAK,YAAY,OAAO,MAAM,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,MAC9D;AAGA,eAASI,gBAAe;AAEpB,cAAM,IAAIJ,QAAO,YAAY,SAAQ,UAAU;AAC/C,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,SAAS,KAAK,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAE7C,UAAE,QAAQ,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,KAAK,CAAE,CAAC;AAC7E,UAAE,QAAQ,EAAE,KAAK,SAAS,cAAc,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,KAAK,CAAE,CAAC;AAC7E,UAAE,QAAQ,EAAE,KAAK,SAAS,eAAe,EAAE,UAAU,KAAK,GAAG,EAAE,UAAU,KAAK,GAAG,IAAK,CAAC;AACvF,UAAE,QAAQ,EAAE,KAAK,SAAS,wBAAwB,MAAM,EAAE,SAAS,GAAG,CAAE,CAAC;AAAA,MAC7E;AAGA,eAAS,iBAAiB;AACtB,cAAM,IAAIA,QAAO,YAAY,YAAW,gBAAgB;AACxD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO;AAAA,UACT;AAAA,UACA;AAAA,QACJ;AAEA,cAAM,SAAS;AACf,cAAM,SAAS;AAAA,UACX;AAAA,UACA;AAAA,QACJ;AAEA,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAM;AAAA,UAClC,GAAGL,OAAM,eAAe,aAAa,KAAK,EAAE,GAAG,GAAG;AAAA,UAClD,GAAGA,OAAM,eAAe,aAAa,KAAK,EAAE,GAAG,GAAG;AAAA,QACtD,CAAC,CAAC;AAEF,cAAM,SAAS,EAAE,UAAUK,QAAO,MAAML,OAAM,eAAe,aAAa,MAAM,GAAG,GAAG,CAAC,CAAC;AACxF,cAAM,SAAS,EAAE,UAAUK,QAAO,MAAM;AAAA,UACpC,GAAGL,OAAM,eAAe,aAAa,OAAO,EAAE,GAAG,GAAG;AAAA,UACpD,GAAGA,OAAM,eAAe,aAAa,OAAO,EAAE,GAAG,GAAG;AAAA,QACxD,CAAC,CAAC;AAEF,cAAM,IAAI,EAAE,UAAUK,QAAO,MAAML,OAAM,eAAe,WAAW,CAAC,CAAC,CAAC;AAEtE,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,MAAM,CAAC;AAEzD,cAAM,MAAM,EAAE,UAAUK,QAAO,MAAM,MAAM,CAAC;AAE5C,cAAM,SAAS,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC/C,cAAM,SAAS,EAAE,UAAUA,QAAO,MAAM,MAAM,CAAC;AAC/C,cAAM,MAAMA,QAAO,MAAM,SAAO,CAAC;AACjC,cAAM,KAAK,EAAE,UAAU,GAAG;AAC1B,cAAM,MAAM,EAAE,UAAU,GAAG;AAC3B,cAAM,SAAS,EAAE,UAAU,GAAG;AAC9B,cAAM,SAAS,EAAE,UAAU,MAAI,MAAM;AACrC,cAAM,MAAM,EAAE,UAAU,MAAI,MAAM;AAClC,cAAM,SAAS,EAAE,UAAU,MAAI,MAAM;AACrC,cAAM,SAAS,EAAE,UAAU,MAAI,SAAO,MAAM;AAC5C,cAAM,MAAMA,QAAO,MAAM,SAAO,CAAC;AACjC,cAAM,KAAK,EAAE,UAAU,GAAG;AAC1B,cAAM,MAAM,EAAE,UAAU,GAAG;AAC3B,cAAM,SAAS,EAAE,UAAU,GAAG;AAC9B,cAAM,SAAS,EAAE,UAAU,MAAI,MAAM;AACrC,cAAM,MAAM,EAAE,UAAU,MAAI,MAAM;AAClC,cAAM,SAAS,EAAE,UAAU,MAAI,MAAM;AACrC,cAAM,SAAS,EAAE,UAAU,MAAI,SAAO,MAAM;AAC5C,cAAM,MAAM,EAAE,UAAU,MAAI,SAAO,CAAC;AAGpC,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,YAAY,iBAAiB,EAAE,SAAS,GAAG,CAAC;AAAA,YACnD,EAAE,IAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UACzB;AAAA,UACA,EAAE;AAAA,YACE,EAAE,QAAQ,EAAE,KAAK,YAAY,kBAAkB,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YAC/D,EAAE,IAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UACzB;AAAA,UACA,EAAE,KAAK,YAAY,QAAQ,IAAI,MAAM,MAAM;AAAA,UAC3C,EAAE,KAAK,YAAY,QAAQ,IAAI,MAAM,MAAM;AAAA,UAE3C,EAAE,KAAK,YAAY,SAAS,QAAQ,QAAQ,GAAG;AAAA,UAC/C,EAAE,KAAK,YAAY,QAAQ,QAAQ,GAAG;AAAA,UAEtC,EAAE,KAAK,YAAY,QAAQ,QAAQ,GAAG;AAAA,UACtC,EAAE,KAAK,YAAY,QAAQ,QAAQ,QAAQ,GAAG;AAAA,UAE9C,EAAE,KAAK,YAAY,QAAQ,QAAQ,QAAQ,GAAG;AAAA,UAC9C,EAAE,KAAK,YAAY,QAAQ,QAAQ,QAAQ,MAAM;AAAA,UACjD,EAAE,KAAK,YAAY,SAAS,KAAK,MAAM;AAAA,UAEvC,EAAE,KAAK,YAAY,QAAQ,QAAQ,QAAQ,GAAG;AAAA,UAC9C,EAAE,KAAK,YAAY,QAAQ,QAAQ,QAAQ,MAAM;AAAA,UACjD,EAAE,KAAK,YAAY,SAAS,KAAK,MAAM;AAAA,UAEvC,EAAE,KAAK,YAAY,QAAQ,QAAQ,QAAQ,GAAG;AAAA,UAC9C,EAAE,KAAK,YAAY,QAAQ,QAAQ,QAAQ,MAAM;AAAA,UACjD,EAAE,KAAK,YAAY,SAAS,KAAK,MAAM;AAAA,UAEvC,EAAE,KAAK,YAAY,QAAQ,QAAQ,QAAQ,GAAG;AAAA,UAC9C,EAAE,KAAK,YAAY,QAAQ,QAAQ,QAAQ,MAAM;AAAA,UACjD,EAAE,KAAK,YAAY,SAAS,KAAK,MAAM;AAAA,UAEvC,EAAE,KAAK,YAAY,QAAQ,GAAG;AAAA,UAE9B,EAAE,KAAK,YAAY,gBAAgB,IAAI,GAAG,EAAE,UAAU,CAAC,GAAG,EAAE;AAAA,UAC5D,EAAE,KAAK,YAAY,aAAa,IAAI,IAAI,EAAE;AAAA,UAE1C,EAAE;AAAA,YACE,EAAE,KAAK,YAAY,YAAY,IAAI,EAAE,SAAS,GAAG,CAAC;AAAA,UACtD;AAAA,QACJ;AAEA,cAAM,WAAWA,QAAO,YAAY,YAAY,UAAU;AAC1D,iBAAS,SAAS,OAAO,KAAK;AAC9B,iBAAS,cAAc,KAAK;AAE5B,cAAM,KAAK,SAAS,eAAe;AAEnC,cAAM,OAAO,GAAG,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAEhD,iBAAS;AAAA,UACL,GAAG,KAAK,YAAY,aAAa,GAAG,SAAS,KAAK,GAAG,IAAI;AAAA,UAEzD,GAAG;AAAA,YACC,GAAG,KAAK,YAAY,kBAAkB,IAAI;AAAA,UAC9C;AAAA,QACJ;AAAA,MAEJ;AAEA,eAAS,iBAAiB;AACtB,cAAM,IAAIA,QAAO,YAAY,YAAW,gBAAgB;AACxD,UAAE,SAAS,KAAK,KAAK;AACrB,UAAE,cAAc,KAAK;AAErB,cAAM,IAAI,EAAE,eAAe;AAE3B,cAAM,OAAO;AACb,cAAM,QAAQ;AACd,cAAM,UAAU,YAAY,YAAY,MAAM;AAE9C,cAAM,OAAO,EAAE,UAAUA,QAAO,MAAML,OAAM,eAAe,aAAa,IAAI,GAAG,GAAG,CAAC,CAAC;AACpF,cAAM,QAAQ,EAAE,UAAUK,QAAO,MAAML,OAAM,eAAe,aAAa,KAAK,GAAG,GAAG,CAAC,CAAC;AAEtF,cAAM,SAAS,EAAE,UAAUK,QAAO,MAAML,OAAM,eAAe,QAAQ,EAAE,CAAC,CAAC;AAGzE,cAAM,KAAK,EAAE,SAAS,GAAG;AACzB,cAAM,KAAK,EAAE,QAAQ,EAAE,SAAS,GAAG,GAAG,EAAE,UAAU,MAAM,CAAC;AAEzD,cAAM,MAAMK,QAAO,MAAM,SAAO,CAAC;AACjC,cAAM,KAAK,EAAE,UAAU,GAAG;AAC1B,cAAM,MAAM,EAAE,UAAU,GAAG;AAC3B,cAAM,MAAM,EAAE,UAAU,MAAI,MAAM;AAElC,cAAM,OAAOA,QAAO,MAAM,SAAO,CAAC;AAClC,cAAM,MAAM,EAAE,UAAU,IAAI;AAC5B,cAAM,OAAO,EAAE,UAAU,IAAI;AAC7B,cAAM,OAAO,EAAE,UAAU,OAAK,MAAM;AAEpC,UAAE;AAAA,UACE,EAAE;AAAA,YACE,EAAE,KAAK,YAAY,iBAAiB,EAAE,SAAS,GAAG,CAAC;AAAA,YACnD,EAAE,IAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UACzB;AAAA,UACA,EAAE;AAAA,YACE,EAAE,QAAQ,EAAE,KAAK,YAAY,kBAAkB,EAAE,SAAS,GAAG,CAAC,CAAC;AAAA,YAC/D,EAAE,IAAK,EAAE,UAAU,CAAC,CAAC;AAAA,UACzB;AAAA,UAEA,EAAE,KAAK,YAAY,QAAQ,IAAI,MAAM,GAAG;AAAA,UACxC,EAAE,KAAK,YAAY,SAAS,IAAI,GAAG;AAAA,UAEnC,EAAE,KAAK,YAAY,QAAQ,IAAI,OAAO,IAAI;AAAA,UAC1C,EAAE,KAAK,YAAY,SAAS,IAAI,IAAI;AAAA,UAGpC,EAAE,KAAK,YAAY,iBAAiB,IAAI,EAAE;AAAA,UAC1C,EAAE,KAAK,YAAY,aAAa,IAAI,EAAE,SAAS,GAAG,GAAG,EAAE;AAAA,UACvD,EAAE,KAAK,YAAY,aAAa,IAAI,KAAK,EAAE;AAAA,UAE3C,EAAE,KAAK,YAAY,gBAAgB,IAAI,QAAQ,EAAE,UAAU,EAAE,GAAG,EAAE;AAAA,UAElE,EAAE;AAAA,YACE,EAAE,KAAK,YAAY,YAAY,IAAI,GAAG;AAAA,UAC1C;AAAA,QAEJ;AAEA,cAAM,WAAWA,QAAO,YAAY,YAAY,UAAU;AAC1D,iBAAS,SAAS,OAAO,KAAK;AAC9B,iBAAS,cAAc,KAAK;AAE5B,cAAM,KAAK,SAAS,eAAe;AAEnC,cAAM,OAAO,GAAG,UAAUA,QAAO,MAAM,SAAO,CAAC,CAAC;AAEhD,iBAAS;AAAA,UACL,GAAG,KAAK,YAAY,aAAa,GAAG,SAAS,KAAK,GAAG,IAAI;AAAA,UAEzD,GAAG;AAAA,YACC,GAAG,KAAK,YAAY,kBAAkB,IAAI;AAAA,UAC9C;AAAA,QACJ;AAAA,MACJ;AAEA,eAAS,IAAE,GAAG,IAAE,IAAI,KAAK;AACrB,0BAAkB,CAAC;AACnB,QAAAA,QAAO,eAAe,YAAY,kBAAgB,CAAC;AAAA,MACvD;AAGA,qBAAe;AACf,qBAAe;AAEf,uBAAiB;AACjB,0BAAoB;AAEpB,qBAAe;AACf,qBAAe;AAEf,sBAAgB;AAEhB,kCAA4B;AAC5B,+BAAyB;AAEzB,eAAS,IAAE,GAAG,KAAG,GAAG,KAAK;AACrB,6BAAqB,CAAC;AACtB,QAAAA,QAAO,eAAe,SAAS,eAAa,CAAC;AAAA,MACjD;AAEA,MAAAI,cAAa;AAEb,MAAAJ,QAAO,eAAe,SAAS,UAAU;AAGzC,MAAAA,QAAO,eAAe,SAAS,YAAY;AAC3C,MAAAA,QAAO,eAAe,SAAS,YAAY;AAC3C,MAAAA,QAAO,eAAe,SAAS,aAAa;AAC5C,MAAAA,QAAO,eAAe,SAAS,sBAAsB;AACrD,MAAAA,QAAO,eAAe,SAAS,yBAAyB;AACxD,MAAAA,QAAO,eAAe,SAAS,oBAAoB;AACnD,MAAAA,QAAO,eAAe,SAAS,oBAAoB;AAEnD,MAAAA,QAAO,eAAe,YAAY,OAAO;AACzC,MAAAA,QAAO,eAAe,YAAY,QAAQ;AAC1C,MAAAA,QAAO,eAAe,YAAY,SAAS;AAE3C,MAAAA,QAAO,eAAe,YAAY,gBAAgB;AAClD,MAAAA,QAAO,eAAe,YAAY,UAAU;AAC5C,MAAAA,QAAO,eAAe,YAAY,gBAAgB;AAClD,MAAAA,QAAO,eAAe,YAAY,UAAU;AAAA,IAGhD;AAAA;AAAA;;;ACjlDA;AAAA;AAAA;AAAA;AAwBA,WAAO,QAAQ,aAAa;AAC5B,WAAO,QAAQ,gBAAgB;AAG/B,WAAO,QAAQ,WAAW;AAAA;AAAA;;;AC5B1B,IAAAK,mBAAA;AAAA;AAAA;AAAA;AAeA,WAAO,UAAU;AAAA;AAAA;;;ACfjB;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;AAAO,IAAM,oBAAoB;;;ACAjC;AAAA;AAGO,IAAM,mBAA6B;AAEnC,IAAM,iBAA2B;AAEjC,IAAM,kBAA4B;AAElC,IAAM,6BAA6B;AAEnC,IAAM,mBAAmB,IAAI,WAAW,0BAA0B;AAElE,IAAM,oBAAoB;;;ACbjC;AAAA;AAAO,IAAM,iBAAiB;AACvB,IAAM,WAAW;AACjB,IAAM,iBAAiB,WAAW;;;ACFzC;AAAA;AACO,IAAM,iBAAiB;AACvB,IAAM,kBAAkB,iBAAiB;;;ACFhD;AAAA;AAAA,IAAM,UAAU;AAET,IAAM,aAAa,OAAO,OAAO;AACjC,IAAM,mBAAmB,aAAa,OAAO,GAAG;;;ACHvD;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;AAEO,IAAM,qBAAqB,CAAC,WAA4B;AAC7D,SAAO,SAAS;AAClB;;;ADAO,IAAM,aAAgD,CAAC,IAAI,OAAO;AACvE,MAAI,WAAW;AACf,KAAG,QAAQ,CAAC,KAAK,QAAQ;AACvB,QAAI,QAAQ,GAAG,MAAM;AACnB,iBAAW;AAAA,IACb;AAAA,EACF,CAAC;AACD,SAAO;AACT;AAGO,IAAM,iBAAiB,CAAC,UAAwB;AACrD,QAAM,aAAa,IAAI,YAAY,MAAM,MAAM;AAC/C,QAAM,YAAY,IAAI,WAAW,UAAU;AAE3C,QAAM,QAAQ,CAAC,GAAG,QAAQ;AACxB,cAAU,OAAO,MAAM,MAAM,SAAS,IAAI;AAAA,EAC5C,CAAC;AAED,SAAO;AACT;AAEO,IAAM,qBAAqB,CAAC,UAAyB;AAC1D,SAAO,OAAO,MAAM,OAAO,CAAC,KAAK,MAAM,MAAM,EAAE,SAAS,CAAC,EAAE,SAAS,GAAG,GAAG,GAAG,EAAE;AACjF;AAEO,IAAM,UAAU,CAAC,QAAe,MAAuB;AAC5D,UAAQ,OAAO,UAAU,IAAI,GAAG,SAAS,CAAC,KAAM,KAAK,IAAI,OAAQ;AACnE;AAEO,IAAM,mBAAmB,CAAC,QAAe,MAAuB;AACrE,UAAQ,OAAO,OAAO,SAAS,SAAS,GAAG,IAAI,GAAG,IAAI,KAAM,KAAK,IAAI,OAAQ;AAC/E;AAGO,IAAM,kBAAkB,CAAC,QAAe,MAAoB;AACjE,SAAO,OAAO,SAAS,SAAS,GAAG,IAAI,GAAG,IAAI,MAAM,KAAK,IAAI;AAC/D;AAEA,IAAM,WAAW;AACV,IAAM,YAAY,CAAC,MAAqB;AAC7C,QAAM,MAAM,IAAI,MAAM,EAAE,SAAS,CAAC;AAClC,MAAI,IAAI;AACR,IAAE,QAAQ,CAAC,MAAM;AACf,QAAI,KAAK,SAAS,UAAU,KAAK,GAAG,SAAS,EAAE,CAAC;AAChD,QAAI,IAAI,KAAK,SAAS,UAAU,IAAI,IAAI,SAAS,EAAE,CAAC;AACpD,SAAK;AAAA,EACP,CAAC;AAED,SAAO,IAAI,KAAK,EAAE;AACpB;AAIO,IAAM,qBAAqB,CAAC,UAAyB;AAC1D,MAAI,MAAM,WAAW,mBAAmB;AACtC,UAAM,4BAA4B,MAAM;AAAA,EAC1C;AAEA,QAAM,SAAS,OAAO,mBAAmB,KAAK,CAAC;AAC/C,MAAI,CAAC,mBAAmB,MAAM,GAAG;AAC/B,UAAM;AAAA,EACR;AAEA,SAAO;AACT;AAEO,IAAM,YAAY,CAAC,QACxB,IAAI,WAAW,IAAI,SAAS,CAAC,EAAE,IAAI,CAAC,GAAG,MAAM,IAAI,WAAW,CAAC,CAAC;;;AExEhE;AAAA;;;ACAA;AAAA;AAYO,IAAM,qBAAqB,CAAC,WAA0B;AAC3D,QAAM,OAAO,OAAO,GAAG;AACvB,QAAM,QAAQ,IAAI,WAAW,iBAAiB;AAC9C,MAAI,IAAI;AACR,SAAO,SAAS,OAAO,CAAC,GAAG;AACzB,UAAM,oBAAoB,IAAI,KAAK,OAAO,SAAS,IAAI;AACvD,aAAS,SAAS;AAClB,SAAK;AAAA,EACP;AACA,SAAO;AACT;;;ACtBA;;;;ACAA;;;;ACAA;;wBAA4B;;;ACA5B;;AAAM,IAAO,MAAP,MAAU;EAId,OAAO,aAAa,GAAS;AAC3B,WAAO,IAAI;EACb;EAEA,OAAO,OAAO,KAAe;AAC3B,UAAM,MAAM,IAAI,WAAW,IAAI,aAAa,IAAI,MAAM,CAAC;AACvD,QAAI,IAAI;AACR,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,UAAI,KAAK,IAAI,UAAU,IAAI,MAAM,GAAG,WAAW,CAAC;AAChD,UAAI,IAAI,KAAK,IAAI,UAAU,IAAI,KAAK,IAAM,WAAW,CAAC;AACtD,WAAK;;AAEP,WAAO;EACT;EAEA,OAAO,aAAa,GAAS;AAC3B,WAAO,IAAI,OAAO,CAAC;EACrB;EACA,OAAO,YAAY,GAAS;AAC1B,QAAI,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,IAAI,WAAW,CAAC,GAAG;AACpD,aAAO,IAAI,IAAI,WAAW,CAAC;eAClB,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,IAAI,WAAW,CAAC,GAAG;AAC3D,aAAO,IAAI,IAAI,WAAW,CAAC,IAAI;;AAEjC,QAAI,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,IAAI,WAAW,CAAC,GAAG;AACpD,aAAO,IAAI,IAAI,WAAW,CAAC,IAAI;;AAGjC,UAAM,IAAI,MAAM,qBAAqB,GAAG;EAC1C;EAEQ,OAAO,OAAO,KAAW;AAC/B,QAAI,IAAI;AACR,QAAI,IAAI;AACR,UAAM,MAAgB,CAAA;AACtB,WAAO,IAAI,IAAI,QAAQ,KAAK,GAAG;AAC7B,YAAM,IAAI,IAAI,YAAY,IAAI,IAAI,GAAG,WAAW,CAAC,CAAC;AAClD,YAAM,IAAI,IAAI,YAAY,IAAI,GAAG,WAAW,CAAC,CAAC;AAC9C,UAAI,KAAM,KAAK,IAAK;AACpB;;AAEF,QAAI,IAAI,SAAS,KAAK,GAAG;AACvB,YAAM,IAAI,MAAM,oBAAoB;;AAEtC,WAAO,WAAW,KAAK,GAAG;EAC5B;EAEA,OAAO,aAAa,GAAa;AAC/B,WAAO,IAAI,YAAW,EAAG,OAAO,IAAI,OAAO,CAAC,CAAC;EAC/C;;AApDgB,IAAA,YAAY;AACrB,IAAA,cAAc,IAAI,YAAW;;;ACFtC;;;;ACAA;;;;ACAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAEA,IAAM,SAAS,CAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAExD,SAASD,YAAW,GAAG,OAAO;AACjC,MAAK,CAAC,SAAS,SAAO,IAAK;AACvB,WAAO,OAAO,CAAC;AAAA,EACnB,WAAW,SAAO,IAAI;AAClB,QAAI,EAAE,MAAM,GAAE,CAAC,KAAK,MAAM;AACtB,aAAO,OAAO,CAAC;AAAA,IACnB,OAAO;AACH,aAAO,OAAO,OAAK,CAAC;AAAA,IACxB;AAAA,EACJ;AACJ;AAEO,IAAM,IAAIA;AAEV,SAAS,UAAU,GAAG,OAAO;AAChC,MAAI,MAAK,OAAO,CAAC;AACjB,UAAQ,OAAO,KAAK;AACpB,WAAS,IAAE,GAAG,IAAE,EAAE,QAAQ,KAAK;AAC3B,UAAM,MAAI,QAAQ,OAAO,EAAE,EAAE;AAAA,EACjC;AACA,SAAO;AACX;AAEO,SAAS,UAAU,GAAG;AACzB,QAAM,KAAI,EAAE,SAAS,EAAE;AACvB,UAAQ,GAAG,SAAO,KAAG,IAAG,OAAO,SAAS,GAAG,IAAI,EAAE;AACrD;AAEO,SAAS,WAAW,GAAG;AAC1B,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,OAAO,GAAG;AACtB,SAAO,CAAC;AACZ;AAEO,SAAS,UAAU,GAAG,GAAG;AAC5B,SAAO,OAAO,CAAC,KAAK,OAAO,CAAC;AAChC;AAEO,SAAS,WAAW,GAAG,GAAG;AAC7B,SAAO,OAAO,CAAC,KAAK,OAAO,CAAC;AAChC;AAEO,IAAM,MAAM;AACZ,IAAM,MAAM;AAEZ,SAAS,MAAM,GAAG;AACrB,UAAQ,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,OAAO,CAAC;AAC9C;AAGO,SAAS,IAAI,GAAG;AACnB,MAAI,IAAI,OAAO,CAAC;AAChB,QAAM,MAAM,CAAC;AACb,SAAO,GAAG;AACN,QAAI,IAAI,OAAO,CAAC,GAAG;AACf,YAAM,IAAI,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC;AAClC,UAAI,KAAM,CAAE;AACZ,UAAI,IAAI,OAAO,CAAC;AAAA,IACpB,OAAO;AACH,UAAI,KAAM,CAAE;AAAA,IAChB;AACA,QAAI,KAAK,OAAO,CAAC;AAAA,EACrB;AACA,SAAO;AACX;AAGO,SAAS,KAAK,GAAG;AACpB,MAAI,IAAI,OAAO,CAAC;AAChB,QAAM,MAAM,CAAC;AACb,SAAO,GAAG;AACN,QAAI,IAAI,OAAO,CAAC,GAAG;AACf,UAAI,KAAK,CAAC;AAAA,IACd,OAAO;AACH,UAAI,KAAM,CAAE;AAAA,IAChB;AACA,QAAI,KAAK,OAAO,CAAC;AAAA,EACrB;AACA,SAAO;AACX;AAEO,SAAS,SAAS,GAAG;AACxB,MAAI,IAAE,OAAO,OAAO,gBAAiB,GAAG;AACpC,UAAM,IAAI,MAAM,gBAAgB;AAAA,EACpC;AACA,SAAO,OAAO,CAAC;AACnB;AAEO,SAAS,QAAQ,GAAG,OAAO;AAC9B,QAAM,MAAM,CAAC;AACb,MAAI,MAAM,OAAO,CAAC;AAClB,UAAQ,OAAO,KAAK;AACpB,SAAO,KAAK;AACR,QAAI,QAAS,OAAO,MAAM,KAAK,CAAC;AAChC,UAAM,MAAM;AAAA,EAChB;AACA,SAAO;AACX;AAGO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,IAAI,GAAG;AACnB,SAAO,CAAC,OAAO,CAAC;AACpB;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,OAAO,GAAG;AACtB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,KAAK,OAAO,CAAC;AAChC;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,KAAK,OAAO,CAAC;AAChC;AAEO,SAAS,IAAI,GAAG;AACnB,SAAO,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;AACjD;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,GAAG,GAAG,GAAG;AACrB,SAAO,OAAO,CAAC,KAAK,OAAO,CAAC;AAChC;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,KAAK,OAAO,CAAC;AAChC;AAEO,SAAS,GAAG,GAAG,GAAG;AACrB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,GAAG,GAAG,GAAG;AACrB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,KAAK,OAAO,CAAC;AAChC;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,KAAK,OAAO,CAAC;AAChC;AAEO,SAAS,KAAK,GAAG,GAAG;AACvB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,KAAK,GAAG,GAAG;AACvB,SAAO,OAAO,CAAC,IAAI,OAAO,CAAC;AAC/B;AAEO,SAAS,KAAK,GAAG,GAAG;AACvB,SAAO,OAAO,CAAC,KAAK,OAAO,CAAC;AAChC;AAEO,SAAS,IAAI,GAAG,GAAG;AACtB,SAAO,OAAO,CAAC,KAAK,OAAO,CAAC;AAChC;AAEO,SAAS,KAAK,GAAG;AACpB,SAAO,CAAC,OAAO,CAAC;AACpB;AAGO,SAAS,QAAQ,MAAM,GAAGE,IAAG,IAAI;AACpC,QAAM,IAAI,YAAYA,GAAE,SAAS,EAAE;AACnC,QAAM,IAAI,IAAI,YAAY,KAAK,QAAQ,KAAK,aAAa,GAAG,KAAG,CAAC;AAChE,QAAM,MAAO,EAAE,SAAO,KAAG,IAAI,KAAM,KAAG;AACtC,WAAS,IAAE,GAAG,IAAE,GAAG;AAAK,MAAE,KAAK,SAAS,EAAE,UAAU,EAAE,SAAO,IAAE,IAAE,GAAG,EAAE,SAAO,IAAE,CAAC,GAAG,EAAE;AACrF,WAAS,IAAE,GAAG,IAAE,EAAE,QAAQ;AAAK,MAAE,KAAK;AACtC,WAAS,IAAE,EAAE,SAAO,GAAG,IAAE,IAAI;AAAK,SAAK,KAAK,SAAS,KAAK,WAAWA,IAAG,IAAE,CAAC,GAAG,GAAI,CAAC;AACvF;AAGO,SAAS,QAAQ,MAAM,GAAGA,IAAG,IAAI;AACpC,QAAM,IAAI,YAAYA,GAAE,SAAS,EAAE;AACnC,QAAM,IAAI,IAAI,SAAS,KAAK,QAAQ,KAAK,aAAa,GAAG,EAAE;AAC3D,QAAM,MAAO,EAAE,SAAO,KAAG,IAAI,KAAM,KAAG;AACtC,WAAS,IAAE,GAAG,IAAE,GAAG;AAAK,MAAE,UAAU,KAAG,IAAE,IAAG,GAAG,SAAS,EAAE,UAAU,EAAE,SAAO,IAAE,IAAE,GAAG,EAAE,SAAO,IAAE,CAAC,GAAG,EAAE,GAAG,KAAK;AAC7G,WAAS,IAAE,GAAG,IAAE,KAAG,IAAE,GAAG;AAAK,MAAE,KAAK;AACxC;AAGO,SAAS,UAAU,MAAM,GAAG,IAAI;AACnC,OAAK,MAAM,KAAK;AAChB,MAAI,KAAK;AACT,QAAM,IAAI,IAAI,YAAY,KAAK,QAAQ,KAAK,aAAa,GAAG,KAAG,CAAC;AAChE,QAAM,IAAI,IAAI,MAAM,KAAG,CAAC;AACxB,IAAE,QAAS,CAAC,IAAG,MAAM,EAAE,EAAE,SAAO,IAAE,KAAK,GAAG,SAAS,EAAE,EAAE,SAAS,GAAE,GAAG,CAAE;AACvE,SAAOF,YAAW,EAAE,KAAK,EAAE,GAAG,EAAE;AACpC;AAGO,SAAS,UAAU,MAAM,GAAG,IAAI;AACnC,OAAK,MAAM,KAAK;AAChB,MAAI,KAAK;AACT,QAAM,IAAI,IAAI,SAAS,KAAK,QAAQ,KAAK,aAAa,GAAG,EAAE;AAC3D,QAAM,IAAI,IAAI,MAAM,KAAG,CAAC;AACxB,WAAS,IAAE,GAAG,IAAE,KAAG,GAAG,KAAK;AACvB,MAAE,KAAK,EAAE,UAAU,IAAE,GAAG,KAAK,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;AAAA,EAC/D;AACA,SAAOA,YAAW,EAAE,KAAK,EAAE,GAAG,EAAE;AACpC;AAEO,SAASC,UAAS,GAAG,OAAO;AAC/B,SAAO,EAAE,SAAS,KAAK;AAC3B;AAEO,SAAS,SAAS,GAAG;AACxB,QAAM,OAAO,IAAI,WAAW,KAAK,OAAO,UAAU,CAAC,IAAI,KAAK,CAAC,IAAG,CAAC;AACjE,UAAQ,MAAM,GAAG,GAAG,KAAK,UAAU;AACnC,SAAO;AACX;AAEO,IAAM,OAAO,EAAE,CAAC;AAChB,IAAM,MAAM,EAAE,CAAC;;;ACtPtB;AAAA;AAokBA,IAAM,YAAY,CAAC;AACnB,SAAS,IAAE,GAAG,IAAE,KAAK,KAAK;AACtB,YAAU,KAAK,SAAS,GAAG,CAAC;AAChC;AAEA,SAAS,SAAS,KAAKE,OAAM;AACzB,MAAI,MAAK;AACT,MAAI,IAAI;AACR,WAAS,IAAE,GAAG,IAAEA,OAAM,KAAK;AACvB,YAAQ;AACR,UAAM,MAAO,IAAG;AAChB,UAAK;AAAA,EACT;AACA,SAAO;AACX;;;ACllBA;AAAA;;;ACAA;AAAA;AAuEO,SAASC,KAAIC,IAAG,MAAMC,IAAG;AAE5B,MAAW,OAAOA,EAAC;AAAG,WAAOD,GAAE;AAE/B,QAAM,IAAW,KAAKC,EAAC;AAEvB,MAAI,EAAE,UAAQ;AAAG,WAAOD,GAAE;AAE1B,MAAI,MAAM;AAEV,WAAS,IAAE,EAAE,SAAO,GAAG,KAAG,GAAG,KAAK;AAE9B,UAAMA,GAAE,OAAO,GAAG;AAElB,QAAI,EAAE,IAAI;AACN,YAAMA,GAAE,IAAI,KAAK,IAAI;AAAA,IACzB;AAAA,EACJ;AAEA,SAAO;AACX;;;AC3FA;AAAA;AAGe,SAAR,UAA4BE,IAAG;AAClC,MAAKA,GAAE,IAAI,KAAM,GAAG;AAChB,QAAW,GAAU,IAAIA,GAAE,GAAG,CAAC,GAAG,CAAE,GAAG;AACnC,UAAW,GAAU,IAAIA,GAAE,GAAG,CAAC,GAAG,CAAE,GAAG;AACnC,YAAW,GAAU,IAAIA,GAAE,GAAG,EAAE,GAAG,CAAE,GAAG;AAEpC,6BAAmBA,EAAC;AAAA,QACxB,WAAkB,GAAU,IAAIA,GAAE,GAAG,EAAE,GAAG,CAAE,GAAG;AAC3C,oBAAUA,EAAC;AAAA,QACf,OAAO;AACH,gBAAM,IAAI,MAAM,mBAAmB;AAAA,QACvC;AAAA,MACJ,WAAkB,GAAU,IAAIA,GAAE,GAAG,CAAC,GAAG,CAAE,GAAG;AAC1C,mBAAWA,EAAC;AAAA,MAChB,OAAO;AACH,cAAM,IAAI,MAAM,mBAAmB;AAAA,MACvC;AAAA,IACJ,WAAkB,GAAU,IAAIA,GAAE,GAAG,CAAC,GAAG,CAAE,GAAG;AAC1C,kBAAYA,EAAC;AAAA,IACjB;AAAA,EACJ,OAAO;AACH,UAAM,UAAiB,IAAW,IAAIA,GAAE,GAAGA,GAAE,IAAE,CAAC,GAAG,CAAC;AACpD,QAAI,WAAW,GAAG;AACd,gBAAUA,EAAC;AAAA,IACf,WAAW,WAAW,GAAG;AACrB,eAASA,EAAC;AAAA,IACd,OAAO;AACH,mBAAaA,EAAC;AAAA,IAClB;AAAA,EAEJ;AACJ;AAGA,SAAS,mBAAmBA,IAAG;AAC3B,EAAAA,GAAE,SAAgB,IAAIA,GAAE,GAAGA,GAAE,CAAC;AAE9B,EAAAA,GAAE,SAAS;AACX,EAAAA,GAAE,SAAgB,IAAIA,GAAE,QAAQ,CAAC;AAEjC,SAAO,CAAQ,MAAMA,GAAE,MAAM,GAAG;AAC5B,IAAAA,GAAE,SAASA,GAAE,SAAS;AACtB,IAAAA,GAAE,SAAgB,IAAIA,GAAE,QAAQ,CAAC;AAAA,EACrC;AAEA,MAAI,KAAKA,GAAE;AAEX,SAAOA,GAAE,GAAG,IAAIA,GAAE,GAAG,GAAG;AACpB,UAAM,IAAIA,GAAE,OAAO;AACnB,IAAAA,GAAE,SAASA,GAAE,IAAI,GAAGA,GAAE,MAAM;AAC5B,SAAKA,GAAE,IAAIA,GAAE,QAAQ,MAAMA,GAAE,SAAO,EAAG;AAAA,EAC3C;AAEA,EAAAA,GAAE,aAAoB,IAAW,IAAIA,GAAE,QAAQ,CAAC,GAAE,CAAC;AAEnD,EAAAA,GAAE,OAAO,SAAS,GAAG;AACjB,UAAMA,KAAE;AACR,QAAIA,GAAE,OAAO,CAAC;AAAG,aAAOA,GAAE;AAC1B,QAAI,IAAIA,GAAE,IAAI,GAAGA,GAAE,UAAU;AAC7B,UAAM,KAAKA,GAAE,IAAKA,GAAE,IAAIA,GAAE,OAAO,CAAC,GAAG,CAAC,GAAG,MAAMA,GAAE,SAAO,EAAG;AAC3D,QAAIA,GAAE,GAAG,IAAIA,GAAE,MAAM;AAAG,aAAO;AAE/B,QAAI,IAAIA,GAAE;AACV,QAAI,IAAIA,GAAE,IAAI,GAAG,CAAC;AAClB,QAAI,IAAIA,GAAE,IAAI,GAAG,CAAC;AAClB,QAAI,IAAIA,GAAE;AACV,WAAO,CAACA,GAAE,GAAG,GAAGA,GAAE,GAAG,GAAG;AACpB,UAAI,MAAMA,GAAE,OAAO,CAAC;AACpB,UAAI,IAAE;AACN,aAAO,CAACA,GAAE,GAAG,KAAKA,GAAE,GAAG,GAAG;AACtB,cAAMA,GAAE,OAAO,GAAG;AAClB;AAAA,MACJ;AAEA,UAAI;AACJ,eAAS,IAAE,GAAG,IAAE,IAAE,IAAE,GAAG,KAAK;AACxB,YAAIA,GAAE,OAAO,CAAC;AAAA,MAClB;AACA,UAAIA,GAAE,OAAO,CAAC;AACd,UAAIA,GAAE,IAAI,GAAG,CAAC;AACd,UAAIA,GAAE,IAAI,GAAG,CAAC;AACd,UAAI;AAAA,IACR;AACA,WAAOA,GAAE,IAAI,GAAGA,GAAE,IAAI,IAAI,IAAIA,GAAE,IAAI,CAAC;AAAA,EACzC;AACJ;AAEA,SAAS,UAAUA,IAAG;AAClB,EAAAA,GAAE,OAAO,WAAW;AAChB,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAChD;AACJ;AAEA,SAAS,WAAWA,IAAG;AACnB,EAAAA,GAAE,OAAO,WAAW;AAChB,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAChD;AACJ;AAEA,SAAS,YAAYA,IAAG;AAEpB,EAAAA,GAAE,SAAgB,IAAIA,GAAE,GAAGA,GAAE,CAAC;AAC9B,EAAAA,GAAE,UAAiB,IAAY,IAAIA,GAAE,QAAQ,CAAC,GAAI,CAAC;AAEnD,EAAAA,GAAE,OAAO,SAAS,GAAG;AACjB,QAAI,KAAK,OAAO,CAAC;AAAG,aAAO,KAAK;AAGhC,UAAM,KAAK,KAAK,IAAI,GAAG,KAAK,OAAO;AAEnC,UAAM,KAAK,KAAK,IAAI,KAAK,OAAO,EAAE,GAAG,CAAC;AAEtC,QAAK,KAAK,GAAG,IAAI,KAAK,MAAM;AAAI,aAAO;AAEvC,UAAM,IAAI,KAAK,IAAI,IAAI,CAAC;AAExB,WAAOA,GAAE,IAAI,GAAGA,GAAE,IAAI,IAAI,IAAIA,GAAE,IAAI,CAAC;AAAA,EACzC;AACJ;AAEA,SAAS,UAAUA,IAAG;AAClB,EAAAA,GAAE,OAAO,WAAW;AAChB,UAAM,IAAI,MAAM,6BAA6B;AAAA,EACjD;AACJ;AAEA,SAAS,SAASA,IAAG;AACjB,EAAAA,GAAE,SAAgB,IAAIA,GAAE,GAAGA,GAAE,IAAE,CAAC;AAChC,EAAAA,GAAE,WAAkB,IAAY,IAAIA,GAAE,QAAQ,CAAC,GAAI,CAAC;AACpD,EAAAA,GAAE,WAAkB,IAAY,IAAIA,GAAE,QAAQ,CAAC,GAAI,CAAC;AAEpD,EAAAA,GAAE,YAAY,SAAS,GAAG,GAAG;AACzB,QAAK,IAAE,KAAM,GAAG;AACZ,aAAOA,GAAE,UAAU,CAAC;AAAA,IACxB,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,EAAAA,GAAE,OAAO,SAAS,GAAG;AACjB,UAAMA,KAAI;AACV,UAAM,KAAKA,GAAE,IAAI,GAAGA,GAAE,QAAQ;AAC9B,UAAM,OAAOA,GAAE,IAAIA,GAAE,OAAO,EAAE,GAAG,CAAC;AAClC,UAAM,KAAKA,GAAE,IAAIA,GAAE,UAAU,GAAG,IAAI,GAAG,IAAI;AAC3C,QAAIA,GAAE,GAAG,IAAIA,GAAE,MAAM;AAAG,aAAO;AAC/B,UAAM,KAAKA,GAAE,IAAI,IAAI,CAAC;AACtB,QAAI;AACJ,QAAIA,GAAE,GAAG,MAAMA,GAAE,MAAM,GAAG;AACtB,UAAIA,GAAE,IAAI,IAAI,CAACA,GAAE,EAAE,MAAMA,GAAE,EAAE,GAAG,CAAC;AAAA,IACrC,OAAO;AACH,YAAM,IAAIA,GAAE,IAAIA,GAAE,IAAIA,GAAE,KAAK,IAAI,GAAGA,GAAE,QAAQ;AAC9C,UAAIA,GAAE,IAAI,GAAG,EAAE;AAAA,IACnB;AACA,WAAOA,GAAE,IAAI,GAAGA,GAAE,IAAI,IAAI,IAAIA,GAAE,IAAI,CAAC;AAAA,EACzC;AACJ;AAGA,SAAS,aAAaA,IAAG;AACrB,EAAAA,GAAE,OAAO,WAAW;AAChB,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAChD;AACJ;;;ACrKA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;AAAA,IAAO,iBAAQ,CAAC;;;AFGT,SAAS,eAAe,GAAG;AAC9B,MAAI,QAAQ,IAAI,WAAW,CAAC;AAC5B,MAAI,QAAQ,SAAS;AACjB,QAAI,OAAO,WAAW,WAAW,aAAa;AAC1C,iBAAW,OAAO,gBAAgB,KAAK;AAAA,IAC3C,OAAO;AACH,eAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,cAAM,KAAM,KAAK,OAAO,IAAE,eAAc;AAAA,MAC5C;AAAA,IACJ;AAAA,EACJ,OACK;AACD,mBAAO,eAAe,KAAK;AAAA,EAC/B;AACA,SAAO;AACX;;;AGlBA;AAAA;AA0BA,IAAqB,MAArB,MAAyB;AAAA,EACrB,YAAa,GAAGC,IAAG,SAAS;AACxB,SAAK,IAAIA;AACT,SAAK,IAAI;AACT,SAAK,UAAU;AAEf,QAAI,MAAMA,GAAE,UAAUA,GAAE;AACxB,QAAI,IAAIA,GAAE,UAAUA,GAAE;AAEtB,QAAI,MAAMA,GAAE;AACZ,WAAOA,GAAE,GAAGA,GAAE,IAAI,KAAKA,GAAE,IAAI,GAAGA,GAAE,GAAG;AAAG,YAAMA,GAAE,IAAI,KAAKA,GAAE,GAAG;AAE9D,SAAK,IAAI,IAAI,MAAM,IAAE,CAAC;AACtB,SAAK,KAAK,IAAI,MAAM,IAAE,CAAC;AACvB,SAAK,EAAE,KAAK,KAAK,EAAE,IAAI,KAAK,GAAG;AAC/B,SAAK,GAAG,KAAK,KAAK,EAAE,IAAI,KAAK,EAAE,EAAE;AAEjC,QAAI,IAAE,IAAE;AACR,WAAO,KAAG,GAAG;AACT,WAAK,EAAE,KAAK,KAAK,EAAE,OAAO,KAAK,EAAE,IAAE,EAAE;AACrC,WAAK,GAAG,KAAK,KAAK,EAAE,OAAO,KAAK,GAAG,IAAE,EAAE;AACvC;AAAA,IACJ;AAGA,SAAK,QAAQ,CAAC;AAcd,SAAK,UAAU,KAAK,IAAI,GAAG,EAAE,CAAC;AAAA,EAClC;AAAA,EAEA,UAAU,GAAG;AACT,aAAS,IAAE,GAAI,KAAG,KAAO,CAAC,KAAK,MAAM,IAAK,KAAK;AAC3C,UAAI,IAAI,KAAK,EAAE;AACf,YAAM,SAAS,KAAK;AACpB,YAAM,SAAS,IAAI,MAAM,MAAM;AAC/B,eAAS,IAAE,GAAG,IAAE,QAAQ,KAAK;AACzB,eAAO,KAAK;AACZ,YAAI,KAAK,EAAE,IAAI,GAAG,KAAK,EAAE,EAAE;AAAA,MAC/B;AAEA,WAAK,MAAM,KAAK;AAAA,IACpB;AAAA,EACJ;AAAA,EAEA,IAAI,GAAG;AACH,QAAI,EAAE,UAAU;AAAG,aAAO;AAC1B,UAAMC,QAAO,KAAK,EAAE,SAAO,CAAC,IAAE;AAC9B,SAAK,UAAUA,KAAI;AAEnB,UAAM,IAAI,KAAKA;AACf,QAAI,EAAE,UAAU,GAAG;AACf,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAChD;AACA,UAAM,MAAM,MAAM,MAAM,GAAGA,OAAM,GAAG,CAAC;AACrC,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,GAAG;AAEJ,QAAI,EAAE,UAAU;AAAG,aAAO;AAC1B,UAAMA,QAAO,KAAK,EAAE,SAAO,CAAC,IAAE;AAC9B,SAAK,UAAUA,KAAI;AACnB,UAAM,IAAI,KAAKA;AACf,QAAI,EAAE,UAAU,GAAG;AACf,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAChD;AACA,UAAM,MAAO,MAAM,MAAM,GAAGA,OAAM,GAAG,CAAC;AACtC,UAAM,UAAU,KAAK,EAAE,IAAK,KAAK,EAAE,UAAU,KAAK,EAAE,KAAK,CAAC,CAAE;AAC5D,UAAM,OAAO,IAAI,MAAM,CAAC;AACxB,aAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,WAAK,KAAK,KAAK,QAAQ,KAAK,IAAE,KAAG,IAAI,OAAO;AAAA,IAChD;AAEA,WAAO;AAAA,EACX;AAGJ;AAEA,SAAS,KAAM,GACf;AACI,WAAY,IAAI,gBAAiB,KAAM,KAAK,YAAY,MAAO,OAAU,IAAI,gBAAiB,KAAM,KAAK,YAAY,KAAM,OAAU,IAAI,gBAAiB,KAAM,KAAK,YAAY,KAAM,OAAU,IAAI,gBAAiB,KAAM,KAAK,YAAY,KAAM,MAAU,IAAI,gBAAiB;AACtR;AAGA,SAAS,MAAM,IAAI,MAAMA,OAAM,QAAQ,MAAM;AAEzC,QAAM,IAAI,KAAKA;AACf,MAAI,KAAG,GAAG;AACN,WAAO,CAAE,KAAK,OAAQ;AAAA,EAC1B,WAAW,KAAG,GAAG;AACb,WAAO;AAAA,MACH,GAAG,EAAE,IAAI,KAAK,SAAS,KAAK,SAAS,KAAK;AAAA,MAC1C,GAAG,EAAE,IAAI,KAAK,SAAS,KAAK,SAAS,KAAK;AAAA,IAAC;AAAA,EACnD;AAEA,QAAM,QAAQ,KAAK;AACnB,QAAM,KAAK,MAAM,IAAI,MAAMA,QAAK,GAAG,QAAQ,OAAK,CAAC;AACjD,QAAM,KAAK,MAAM,IAAI,MAAMA,QAAK,GAAG,SAAO,MAAM,OAAK,CAAC;AAEtD,QAAM,MAAM,IAAI,MAAM,CAAC;AAEvB,WAAS,IAAE,GAAG,IAAE,OAAO,KAAK;AACxB,QAAI,KAAK,GAAG,EAAE,IAAI,GAAG,IAAI,GAAG,QAAQ,GAAG,IAAI,GAAG,MAAMA,OAAM,EAAE,CAAC;AAC7D,QAAI,IAAE,SAAS,GAAG,EAAE,IAAI,GAAG,IAAI,GAAG,QAAQ,GAAG,IAAI,GAAG,MAAMA,OAAM,EAAE,CAAC;AAAA,EACvE;AAEA,SAAO;AACX;;;AN3IA,IAAqB,UAArB,MAA6B;AAAA,EACzB,YAAY,GAAG;AACX,SAAK,OAAK;AACV,SAAK,MAAM,OAAO,CAAC;AACnB,SAAK,OAAO,OAAO,CAAC;AACpB,SAAK,IAAI,OAAO,CAAC;AACjB,SAAK,IAAI;AACT,SAAK,SAAS,KAAK,IAAE,KAAK;AAC1B,SAAK,MAAM,OAAO,CAAC;AACnB,SAAK,OAAO,KAAK,KAAK,KAAK;AAC3B,SAAK,YAAmB,UAAU,KAAK,CAAC;AACxC,SAAK,QAAQ,KAAK,OAAO,OAAO,KAAK,SAAS,KAAK,KAAK;AAExD,SAAK,MAAM,KAAK,OAAO,KAAK,YAAY,KAAK,EAAE,IAAE;AACjD,SAAK,MAAM,KAAK,MAAI;AACpB,SAAK,KAAK,KAAK,MAAI;AACnB,SAAK,IAAI,KAAK,EAAE,KAAK,OAAO,OAAO,KAAK,MAAI,EAAE,CAAC;AAC/C,SAAK,KAAK,KAAK,IAAI,KAAK,CAAC;AAEzB,UAAMC,KAAI,KAAK,UAAU,KAAK;AAC9B,SAAK,MAAM,KAAK;AAChB,QAAI,IAAI,KAAK,IAAI,KAAK,KAAKA,EAAC;AAC5B,WAAO,CAAC,KAAK,GAAG,GAAG,KAAK,MAAM,GAAG;AAC7B,WAAK,MAAM,KAAK,MAAM,KAAK;AAC3B,UAAI,KAAK,IAAI,KAAK,KAAKA,EAAC;AAAA,IAC5B;AAGA,SAAK,IAAI;AACT,SAAK,IAAI,KAAK;AAEd,YAAQ,KAAK,IAAI,KAAK,QAAQ,KAAK,MAAM;AACrC,WAAK,IAAI,KAAK,IAAI;AAClB,WAAK,IAAI,KAAK,KAAK,KAAK;AAAA,IAC5B;AAEA,SAAK,WAAW,KAAK,IAAI,KAAK,KAAK,KAAK,CAAC;AAEzC,cAAU,IAAI;AAEd,SAAK,MAAM,IAAI,IAAK,MAAM,MAAM,KAAK,IAAI,KAAK,IAAI,CAAC;AAEnD,SAAK,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,GAAG;AACrC,SAAK,OAAO,KAAK,IAAI,KAAK,KAAK,KAAK,GAAG;AACvC,SAAK,IAAI,KAAK,IAAI;AAClB,SAAK,KAAK,KAAK,IAAI;AAEnB,SAAK,QAAQ,KAAK,OAAO,KAAK,GAAG;AACjC,SAAK,IAAI,KAAK,IAAI,KAAK,KAAK,KAAG,KAAK,CAAC;AAAA,EACzC;AAAA,EAEA,EAAE,GAAE,GAAG;AACH,QAAI;AACJ,QAAI,CAAC,GAAG;AACJ,YAAM,OAAO,CAAC;AAAA,IAClB,WAAW,KAAG,IAAI;AACd,YAAM,OAAO,OAAK,CAAC;AAAA,IACvB;AACA,QAAI,MAAM,GAAG;AACT,UAAI,OAAO,CAAC;AACZ,UAAI,QAAQ,KAAK;AAAG,eAAO,OAAO,KAAK;AACvC,aAAO,KAAK,IAAI;AAAA,IACpB,OAAO;AACH,aAAQ,OAAM,KAAK,IAAK,MAAI,KAAK,IAAI;AAAA,IACzC;AAAA,EAEJ;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,UAAM,MAAM,IAAI;AAChB,WAAO,OAAO,KAAK,IAAI,MAAI,KAAK,IAAI;AAAA,EACxC;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,WAAQ,KAAK,IAAK,IAAE,IAAI,KAAK,IAAE,IAAE;AAAA,EACrC;AAAA,EAEA,IAAI,GAAG;AACH,WAAO,IAAI,KAAK,IAAE,IAAI;AAAA,EAC1B;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,WAAQ,IAAE,IAAG,KAAK;AAAA,EACtB;AAAA,EAEA,UAAU,MAAM,GAAG;AACf,WAAQ,OAAO,KAAK,EAAE,CAAC,IAAK,KAAK;AAAA,EACrC;AAAA,EAEA,OAAO,GAAG;AACN,WAAQ,IAAE,IAAK,KAAK;AAAA,EACxB;AAAA,EAEA,GAAG,GAAG,GAAG;AACL,WAAO,KAAG;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,WAAO,KAAG;AAAA,EACd;AAAA,EAEA,GAAG,GAAG,GAAG;AACL,UAAM,KAAM,IAAI,KAAK,OAAQ,IAAI,KAAK,IAAI;AAC1C,UAAM,KAAM,IAAI,KAAK,OAAQ,IAAI,KAAK,IAAI;AAC1C,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,GAAG,GAAG,GAAG;AACL,UAAM,KAAM,IAAI,KAAK,OAAQ,IAAI,KAAK,IAAI;AAC1C,UAAM,KAAM,IAAI,KAAK,OAAQ,IAAI,KAAK,IAAI;AAC1C,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,UAAM,KAAM,IAAI,KAAK,OAAQ,IAAI,KAAK,IAAI;AAC1C,UAAM,KAAM,IAAI,KAAK,OAAQ,IAAI,KAAK,IAAI;AAC1C,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,UAAM,KAAM,IAAI,KAAK,OAAQ,IAAI,KAAK,IAAI;AAC1C,UAAM,KAAM,IAAI,KAAK,OAAQ,IAAI,KAAK,IAAI;AAC1C,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,WAAO,KAAK,IAAI,GAAG,KAAK,IAAI,CAAC,CAAC;AAAA,EAClC;AAAA,EAEA,KAAK,GAAG,GAAG;AACP,QAAI,CAAC;AAAG,YAAM,IAAI,MAAM,kBAAkB;AAC1C,WAAO,IAAI;AAAA,EACf;AAAA,EAEA,IAAI,GAAG;AACH,QAAI,CAAC;AAAG,YAAM,IAAI,MAAM,kBAAkB;AAE1C,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,QAAI,OAAO,KAAK;AAChB,QAAI,OAAO,IAAI,KAAK;AACpB,WAAO,MAAM;AACT,UAAI,IAAI,IAAE;AACV,OAAC,GAAG,IAAI,IAAI,CAAC,MAAM,IAAE,IAAE,IAAI;AAC3B,OAAC,GAAG,IAAI,IAAI,CAAC,MAAM,IAAE,IAAE,IAAI;AAAA,IAC/B;AACA,QAAI,IAAE,KAAK;AAAM,WAAK,KAAK;AAC3B,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,WAAO,IAAI;AAAA,EACf;AAAA,EAEA,IAAI,GAAGA,IAAG;AACN,WAAcC,KAAI,MAAM,GAAGD,EAAC;AAAA,EAChC;AAAA,EAEA,IAAI,GAAGA,IAAG;AACN,WAAcC,KAAI,MAAM,GAAGD,EAAC;AAAA,EAChC;AAAA,EAEA,KAAK,GAAG,GAAG;AACP,UAAM,MAAS,IAAI,IAAK,KAAK;AAC7B,WAAO,OAAO,KAAK,IAAI,MAAI,KAAK,IAAI;AAAA,EACxC;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,UAAM,OAAS,IAAI,KAAK,KAAK;AAC7B,WAAO,OAAO,KAAK,IAAI,MAAI,KAAK,IAAI;AAAA,EACxC;AAAA,EAEA,KAAK,GAAG,GAAG;AACP,UAAM,OAAS,IAAI,KAAK,KAAK;AAC7B,WAAO,OAAO,KAAK,IAAI,MAAI,KAAK,IAAI;AAAA,EACxC;AAAA,EAEA,KAAK,GAAG;AACJ,UAAM,MAAM,IAAI,KAAK;AACrB,WAAO,OAAO,KAAK,IAAI,MAAI,KAAK,IAAI;AAAA,EACxC;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,QAAI,OAAO,CAAC,IAAI,KAAK,WAAW;AAC5B,YAAM,MAAO,KAAK,IAAK,KAAK;AAC5B,aAAO,OAAO,KAAK,IAAI,MAAI,KAAK,IAAI;AAAA,IACxC,OAAO;AACH,YAAM,KAAK,KAAK,IAAI;AACpB,UAAI,OAAO,EAAE,IAAI,KAAK,WAAW;AAC7B,eAAO,KAAK;AAAA,MAChB,OAAO;AACH,eAAO,KAAK;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,QAAI,OAAO,CAAC,IAAI,KAAK,WAAW;AAC5B,aAAO,KAAK;AAAA,IAChB,OAAO;AACH,YAAM,KAAK,KAAK,IAAI;AACpB,UAAI,OAAO,EAAE,IAAI,KAAK,WAAW;AAC7B,cAAM,MAAO,KAAK,KAAM,KAAK;AAC7B,eAAO,OAAO,KAAK,IAAI,MAAI,KAAK,IAAI;AAAA,MACxC,OAAO;AACH,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,KAAK,GAAG,GAAG;AACP,WAAQ,KAAK,IAAK,KAAK,MAAM,KAAK;AAAA,EACtC;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,WAAQ,KAAK,IAAK,KAAK,MAAM,KAAK;AAAA,EACtC;AAAA,EAEA,KAAK,GAAG;AACJ,WAAQ,IAAK,KAAK,OAAO,KAAK;AAAA,EAClC;AAAA,EAEA,SAAS,GAAG;AAER,QAAI,KAAK,KAAK;AAAM,aAAO,KAAK;AAGhC,UAAM,MAAM,KAAK,IAAI,GAAG,KAAK,UAAU,KAAK,GAAG;AAC/C,QAAK,OAAO,KAAK;AAAM,aAAO;AAE9B,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC;AAC1B,QAAI,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,KAAK,GAAI;AAE3D,WAAQ,KAAK,KAAK,KAAM;AACpB,UAAI,KAAK,KAAK,OAAO,CAAC;AACtB,UAAI,IAAI;AACR,aAAO,MAAM,KAAK,KAAM;AACpB;AACA,aAAK,KAAK,OAAO,EAAE;AAAA,MACvB;AAGA,UAAI,IAAI;AACR,eAAS,IAAE,GAAG,IAAG,IAAE,IAAE,GAAG;AAAM,YAAI,KAAK,OAAO,CAAC;AAE/C,UAAI;AACJ,UAAI,KAAK,OAAO,CAAC;AACjB,UAAI,KAAK,IAAI,GAAG,CAAC;AACjB,UAAI,KAAK,IAAI,GAAG,CAAC;AAAA,IACrB;AAEA,QAAI,IAAK,KAAK,KAAK,KAAK,KAAM;AAC1B,UAAI,KAAK,IAAI,CAAC;AAAA,IAClB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,UAAU,GAAG,GAAG;AACZ,QAAI,OAAO,GAAE,CAAC;AACd,QAAI,IAAI,GAAG;AACP,UAAI,KAAK,CAAC;AACV,UAAI,MAAM,KAAK;AAAG,aAAK,KAAK,KAAK;AACjC,aAAO,KAAK,IAAI;AAAA,IACpB,OAAO;AACH,aAAQ,KAAI,KAAK,IAAK,IAAE,KAAK,IAAI;AAAA,IACrC;AAAA,EACJ;AAAA,EAEA,SAAS;AACL,UAAM,SAAU,KAAK,YAAU,IAAI;AACnC,QAAI,MAAK,KAAK;AACd,aAAS,IAAE,GAAG,IAAE,QAAQ,KAAK;AACzB,aAAO,OAAO,OAAO,CAAC,KAAK,OAAO,eAAe,CAAC,EAAE,EAAE;AAAA,IAC1D;AACA,WAAO,MAAM,KAAK;AAAA,EACtB;AAAA,EAEA,SAAS,GAAG,MAAM;AACd,WAAO,QAAQ;AACf,QAAI;AACJ,QAAK,IAAI,KAAK,QAAQ,QAAQ,IAAK;AAC/B,YAAM,IAAI,KAAK,IAAE;AACjB,WAAK,MAAI,EAAE,SAAS,IAAI;AAAA,IAC5B,OAAO;AACH,WAAK,EAAE,SAAS,IAAI;AAAA,IACxB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,GAAG;AACN,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,QAAQ,KAAK;AACT,QAAI;AACJ,OAAG;AACC,UAAE,KAAK;AACP,eAAS,IAAE,GAAG,IAAE,KAAK,KAAK,KAAK;AAC3B,aAAK,IAAI,QAAQ,KAAK,OAAO,KAAI,CAAC;AAAA,MACtC;AACA,WAAK,KAAK;AAAA,IACd,SAAS,KAAK,KAAK;AACnB,QAAK,IAAI,KAAK,KAAM,KAAK;AACzB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,GAAG;AACH,WAAO,KAAK,IAAI,IAAI,CAAC;AAAA,EACzB;AAAA,EAEA,KAAK,GAAG;AACJ,WAAO,KAAK,IAAI,KAAK,CAAC;AAAA,EAC1B;AAAA,EAGA,QAAQ,MAAM,GAAGA,IAAG;AAChB,IAAO,QAAQ,MAAM,GAAGA,IAAG,KAAK,MAAI,CAAC;AAAA,EACzC;AAAA,EAGA,QAAQ,MAAM,GAAGA,IAAG;AAChB,IAAO,QAAQ,MAAM,GAAGA,IAAG,KAAK,MAAI,CAAC;AAAA,EACzC;AAAA,EAGA,SAAS,MAAM,GAAGA,IAAG;AACjB,WAAO,KAAK,QAAQ,MAAM,GAAG,KAAK,IAAI,KAAK,GAAGA,EAAC,CAAC;AAAA,EACpD;AAAA,EAEA,SAAS,MAAM,GAAGA,IAAG;AACjB,WAAO,KAAK,QAAQ,MAAM,GAAG,KAAK,IAAI,KAAK,GAAGA,EAAC,CAAC;AAAA,EACpD;AAAA,EAIA,UAAU,MAAM,GAAG;AACf,WAAc,UAAU,MAAM,GAAG,KAAK,EAAE;AAAA,EAC5C;AAAA,EAGA,UAAU,MAAM,GAAG;AACf,WAAc,UAAU,MAAM,GAAG,KAAK,EAAE;AAAA,EAC5C;AAAA,EAEA,WAAW,MAAM,GAAG;AAChB,WAAO,KAAK,IAAI,KAAK,UAAU,MAAM,CAAC,GAAG,KAAK,EAAE;AAAA,EACpD;AAAA,EAEA,WAAW,MAAM,GAAG;AAChB,WAAO,KAAK,IAAI,KAAK,UAAU,MAAM,CAAC,GAAG,KAAK,EAAE;AAAA,EACpD;AAAA,EAEA,SAAS,GAAG;AACR,WAAO;AAAA,EACX;AACJ;;;AO7WA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;AAAA,wBAA6C;;;ACA7C;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAAE;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGO,SAAS,iBAAiB,GAAG;AAChC,MAAI,OAAO,KAAK,YAAY,EAAE,OAAO,QAAW;AAC5C,WAAO,EAAE,SAAS,EAAE;AAAA,EACxB,WAAW,aAAa,YAAY;AAChC,WAAc,UAAU,GAAG,CAAC;AAAA,EAChC,WAAW,MAAM,QAAQ,CAAC,GAAG;AACzB,WAAO,EAAE,IAAI,gBAAgB;AAAA,EACjC,WAAW,OAAO,KAAK,UAAU;AAC7B,UAAM,MAAM,CAAC;AACb,UAAM,OAAO,OAAO,KAAK,CAAC;AAC1B,SAAK,QAAQ,CAAC,MAAM;AAChB,UAAI,KAAK,iBAAiB,EAAE,EAAE;AAAA,IAClC,CAAC;AACD,WAAO;AAAA,EACX,OAAO;AACH,WAAO;AAAA,EACX;AACJ;AAEO,SAAS,mBAAmB,GAAG;AAClC,MAAI,OAAO,KAAK,YAAY,WAAW,KAAK,CAAC,GAAG;AAC5C,WAAO,OAAO,CAAC;AAAA,EACnB,WAAW,OAAO,KAAK,YAAY,mBAAmB,KAAK,CAAC,GAAG;AAC3D,WAAO,OAAO,CAAC;AAAA,EACnB,WAAW,MAAM,QAAQ,CAAC,GAAG;AACzB,WAAO,EAAE,IAAI,kBAAkB;AAAA,EACnC,WAAW,OAAO,KAAK,UAAU;AAC7B,QAAI,MAAM;AAAM,aAAO;AACvB,UAAM,MAAM,CAAC;AACb,UAAM,OAAO,OAAO,KAAK,CAAC;AAC1B,SAAK,QAAQ,CAAC,MAAM;AAChB,UAAI,KAAK,mBAAmB,EAAE,EAAE;AAAA,IACpC,CAAC;AACD,WAAO;AAAA,EACX,OAAO;AACH,WAAO;AAAA,EACX;AACJ;AAEO,SAAS,WAAW,MAAM;AAC7B,MAAI,MAAM,OAAO,CAAC;AAClB,MAAI,IAAI,KAAK;AACb,MAAI,SAAS;AACb,QAAM,QAAQ,IAAI,SAAS,KAAK,QAAQ,KAAK,YAAY,KAAK,UAAU;AACxE,SAAO,IAAI,GAAG;AACV,QAAI,KAAK,GAAG;AACR,WAAK;AACL,aAAO,OAAO,MAAM,UAAU,CAAC,CAAC,KAAK,OAAO,SAAS,CAAC;AACtD,gBAAU;AAAA,IACd,WAAW,KAAK,GAAG;AACf,WAAK;AACL,aAAO,OAAO,MAAM,UAAU,CAAC,CAAC,KAAK,OAAO,SAAS,CAAC;AACtD,gBAAU;AAAA,IACd,OAAO;AACH,WAAK;AACL,aAAO,OAAO,MAAM,SAAS,CAAC,CAAC,KAAK,OAAO,SAAS,CAAC;AACrD,gBAAU;AAAA,IACd;AAAA,EACJ;AACA,SAAO;AACX;AAEO,SAAS,WAAW,GAAG,KAAK;AAC/B,MAAI,IAAI;AACR,QAAM,OAAO,IAAI,WAAW,GAAG;AAC/B,QAAM,QAAQ,IAAI,SAAS,KAAK,MAAM;AACtC,MAAI,IAAI;AACR,SAAO,IAAI,GAAG;AACV,QAAI,IAAI,KAAK,GAAG;AACZ,WAAK;AACL,YAAM,UAAU,GAAG,OAAO,IAAI,OAAO,UAAU,CAAC,CAAC;AACjD,UAAI,KAAK,OAAO,EAAE;AAAA,IACtB,WAAW,IAAI,KAAK,GAAG;AACnB,WAAK;AACL,YAAM,UAAU,GAAG,OAAO,IAAI,OAAO,KAAM,CAAC,CAAC;AAC7C,UAAI,KAAK,OAAO,EAAE;AAAA,IACtB,OAAO;AACH,WAAK;AACL,YAAM,SAAS,GAAG,OAAO,IAAI,OAAO,GAAI,CAAC,CAAC;AAC1C,UAAI,KAAK,OAAO,CAAC;AAAA,IACrB;AAAA,EACJ;AACA,MAAI,GAAG;AACH,UAAM,IAAI,MAAM,oCAAoC;AAAA,EACxD;AACA,SAAO;AACX;AAEO,SAAS,WAAW,MAAM;AAC7B,MAAI,MAAM,OAAO,CAAC;AAClB,MAAI,IAAI;AACR,QAAM,QAAQ,IAAI,SAAS,KAAK,QAAQ,KAAK,YAAY,KAAK,UAAU;AACxE,SAAO,IAAI,KAAK,QAAQ;AACpB,QAAI,IAAI,KAAK,KAAK,QAAQ;AACtB,aAAO,OAAO,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC;AACvD,WAAK;AAAA,IACT,WAAW,IAAI,KAAK,KAAK,QAAQ;AAC7B,aAAO,OAAO,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC;AACvD,WAAK;AAAA,IACT,OAAO;AACH,aAAO,OAAO,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC;AACtD,WAAK;AAAA,IACT;AAAA,EACJ;AACA,SAAO;AACX;AAEO,SAAS,WAAW,GAAG,KAAK;AAC/B,MAAI,IAAI;AACR,MAAI,OAAO,QAAQ,aAAa;AAC5B,UAAM,KAAK,OAAc,UAAU,CAAC,IAAI,KAAK,CAAC,IAAI;AAClD,QAAI,OAAO;AAAG,YAAM;AAAA,EACxB;AACA,QAAM,OAAO,IAAI,WAAW,GAAG;AAC/B,QAAM,QAAQ,IAAI,SAAS,KAAK,MAAM;AACtC,MAAI,IAAI;AACR,SAAO,IAAI,KAAK;AACZ,QAAI,IAAI,KAAK,KAAK;AACd,YAAM,UAAU,GAAG,OAAO,IAAI,OAAO,UAAU,CAAC,GAAG,IAAI;AACvD,WAAK;AACL,UAAI,KAAK,OAAO,EAAE;AAAA,IACtB,WAAW,IAAI,KAAK,KAAK;AACrB,YAAM,UAAU,GAAG,OAAO,IAAI,OAAO,KAAM,CAAC,GAAG,IAAI;AACnD,WAAK;AACL,UAAI,KAAK,OAAO,EAAE;AAAA,IACtB,OAAO;AACH,YAAM,SAAS,GAAG,OAAO,IAAI,OAAO,GAAI,CAAC,GAAG,IAAI;AAChD,WAAK;AACL,UAAI,KAAK,OAAO,CAAC;AAAA,IACrB;AAAA,EACJ;AACA,MAAI,GAAG;AACH,UAAM,IAAI,MAAM,oCAAoC;AAAA,EACxD;AACA,SAAO;AACX;AAEO,SAAS,mBAAmBC,IAAG,GAAG;AACrC,MAAI,OAAO,KAAK,YAAY,EAAE,OAAO,QAAW;AAC5C,WAAO,EAAE,SAAS,EAAE;AAAA,EACxB,WAAW,aAAa,YAAY;AAChC,WAAOA,GAAE,SAASA,GAAE,EAAE,CAAC,CAAC;AAAA,EAC5B,WAAW,MAAM,QAAQ,CAAC,GAAG;AACzB,WAAO,EAAE,IAAI,mBAAmB,KAAK,MAAMA,EAAC,CAAC;AAAA,EACjD,WAAW,OAAO,KAAK,UAAU;AAC7B,UAAM,MAAM,CAAC;AACb,UAAM,OAAO,OAAO,KAAK,CAAC;AAC1B,SAAK,QAAQ,CAAC,MAAM;AAChB,UAAI,KAAK,mBAAmBA,IAAG,EAAE,EAAE;AAAA,IACvC,CAAC;AACD,WAAO;AAAA,EACX,OAAO;AACH,WAAO;AAAA,EACX;AACJ;AAEO,SAAS,qBAAqBA,IAAG,GAAG;AACvC,MAAI,OAAO,KAAK,YAAY,WAAW,KAAK,CAAC,GAAG;AAC5C,WAAOA,GAAE,EAAE,CAAC;AAAA,EAChB,WAAW,OAAO,KAAK,YAAY,mBAAmB,KAAK,CAAC,GAAG;AAC3D,WAAOA,GAAE,EAAE,CAAC;AAAA,EAChB,WAAW,MAAM,QAAQ,CAAC,GAAG;AACzB,WAAO,EAAE,IAAI,qBAAqB,KAAK,MAAMA,EAAC,CAAC;AAAA,EACnD,WAAW,OAAO,KAAK,UAAU;AAC7B,QAAI,MAAM;AAAM,aAAO;AACvB,UAAM,MAAM,CAAC;AACb,UAAM,OAAO,OAAO,KAAK,CAAC;AAC1B,SAAK,QAAQ,CAAC,MAAM;AAChB,UAAI,KAAK,qBAAqBA,IAAG,EAAE,EAAE;AAAA,IACzC,CAAC;AACD,WAAO;AAAA,EACX,OAAO;AACH,WAAO;AAAA,EACX;AACJ;AAEA,IAAMC,aAAY,CAAC;AACnB,SAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,EAAAA,WAAU,KAAKC,UAAS,GAAG,CAAC;AAChC;AAEA,SAASA,UAAS,KAAKC,OAAM;AACzB,MAAI,MAAM;AACV,MAAI,IAAI;AACR,WAAS,IAAI,GAAG,IAAIA,OAAM,KAAK;AAC3B,YAAQ;AACR,UAAM,MAAO,IAAI;AACjB,UAAM;AAAA,EACV;AACA,SAAO;AACX;AAEO,SAAS,WAAW,KAAKA,OAAM;AAClC,UACKF,WAAU,QAAQ,MAClBA,WAAW,QAAQ,KAAM,QAAS,IAClCA,WAAW,QAAQ,IAAK,QAAS,KACjCA,WAAU,MAAM,QAAS,QACzB,KAAKE;AAEd;AAEO,SAASC,MAAK,GAAG;AACpB,WACM,IAAI,gBAAgB,KAAM,KAAK,YAAa,MAAM,OAClD,IAAI,gBAAgB,KAAM,KAAK,YAAa,KAAK,OACjD,IAAI,gBAAgB,KAAM,KAAK,YAAa,KAAK,OACjD,IAAI,gBAAgB,KAAM,KAAK,YAAa,KAAK,MACjD,IAAI,gBAAgB;AAE9B;AAEO,SAAS,gBAAgB,MAAM,OAAO;AACzC,QAAM,IAAI,KAAK,aAAa;AAC5B,QAAMD,QAAOC,MAAK,CAAC;AACnB,MAAI,KAAK,KAAKD,OAAM;AAChB,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAChD;AACA,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,UAAM,IAAI,WAAW,GAAGA,KAAI;AAC5B,QAAI,IAAI,GAAG;AACP,YAAM,MAAM,KAAK,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AACjD,WAAK,IAAI,KAAK,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK;AAC1D,WAAK,IAAI,KAAK,IAAI,KAAK;AAAA,IAC3B;AAAA,EACJ;AACJ;AAEO,SAAS,aAAa,KAAK,IAAI;AAClC,QAAM,OAAO,IAAI,WAAW,KAAK,IAAI,MAAM;AAE3C,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,SAAK,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,EAC3B;AAEA,SAAO;AACX;AAEO,SAAS,aAAa,MAAM,IAAI;AACnC,QAAM,IAAI,KAAK,aAAa;AAC5B,QAAM,MAAM,IAAI,MAAM,CAAC;AACvB,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,QAAI,KAAK,KAAK,MAAM,IAAI,IAAI,IAAI,KAAK,EAAE;AAAA,EAC3C;AACA,SAAO;AACX;;;ACxPA;AAAA;;;ACAA;AAAA;AACA,IAAM,YAAY,KAAG;;;ACDrB;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;AAEe,SAAR,OAAwBE,OAAM;AACjC,QAAM,SAAS;AACf,MAAI;AACJ,MAAI;AAEJ,MAAIA,OAAM;AACN,IAAAA,MAAK,YAAY,SAASC,IAAG;AACzB,UAAI;AACJ,UAAIA,GAAE,MAAM;AACR,eAAOA,GAAE;AAAA,MACb,OAAO;AACH,eAAOA;AAAA,MACX;AAEA,UAAI,KAAK,GAAG,OAAO,QAAQ;AACvB,QAAAC,MAAK,KAAK,EAAE,EAAE,KAAK,WAAW;AAC1B,UAAAF,MAAK,YAAY,KAAK,MAAM;AAAA,QAChC,CAAC;AAAA,MACL,WAAW,KAAK,GAAG,OAAO,aAAa;AACnC,QAAAA,MAAK,MAAM;AAAA,MACf,OAAO;AACH,cAAM,MAAM,QAAQ,IAAI;AACxB,QAAAA,MAAK,YAAY,GAAG;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAEA,iBAAeE,MAAK,MAAM;AACtB,UAAM,OAAO,IAAI,WAAW,KAAK,IAAI;AACrC,UAAM,aAAa,MAAM,YAAY,QAAQ,IAAI;AACjD,aAAS,IAAI,YAAY,OAAO,EAAC,SAAQ,KAAK,MAAM,SAAS,OAAM,CAAC;AAEpE,eAAW,MAAM,YAAY,YAAY,YAAY;AAAA,MACjD,KAAK;AAAA,QACD,UAAU;AAAA,MACd;AAAA,IACJ,CAAC;AAAA,EACL;AAIA,WAASC,OAAM,QAAQ;AACnB,UAAMC,OAAM,IAAI,YAAY,OAAO,QAAQ,GAAG,CAAC;AAC/C,WAAOA,KAAI,KAAK;AAAG,MAAAA,KAAI;AACvB,UAAM,MAAMA,KAAI;AAChB,IAAAA,KAAI,MAAM;AACV,QAAIA,KAAI,KAAK,SAAS,OAAO,OAAO,YAAY;AAC5C,YAAM,eAAe,OAAO,OAAO,aAAa;AAChD,UAAI,gBAAgB,KAAK,OAAOA,KAAI,KAAK,UAAU,KAAO,IAAE;AAC5D,UAAI,gBAAc;AAAQ,wBAAc;AACxC,aAAO,KAAK,gBAAc,YAAY;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAEA,WAAS,YAAY,QAAQ;AACzB,UAAM,IAAID,OAAM,OAAO,UAAU;AACjC,cAAU,GAAG,MAAM;AACnB,WAAO;AAAA,EACX;AAEA,WAAS,UAAU,SAAS,QAAQ;AAChC,UAAM,KAAK,IAAI,WAAW,OAAO,MAAM;AACvC,WAAO,IAAI,WAAW,GAAG,QAAQ,GAAG,aAAa,SAAS,MAAM;AAAA,EACpE;AAEA,WAAS,UAAU,SAAS,QAAQ;AAChC,UAAM,KAAK,IAAI,WAAW,OAAO,MAAM;AACvC,OAAG,IAAI,IAAI,WAAW,MAAM,GAAG,OAAO;AAAA,EAC1C;AAEA,WAAS,QAAQ,MAAM;AACnB,QAAI,KAAK,GAAG,OAAO,QAAQ;AACvB,aAAOD,MAAK,KAAK,EAAE;AAAA,IACvB;AACA,UAAM,MAAM;AAAA,MACR,MAAM,CAAC;AAAA,MACP,KAAK,CAAC;AAAA,IACV;AACA,UAAM,OAAO,IAAI,YAAY,OAAO,QAAQ,GAAG,CAAC;AAChD,UAAM,WAAW,KAAK;AACtB,aAAS,IAAE,GAAG,IAAE,KAAK,QAAQ,KAAK;AAC9B,cAAQ,KAAK,GAAG,KAAK;AAAA,QACrB,KAAK;AACD,cAAI,KAAK,KAAK,GAAG,OAAO,YAAY,KAAK,GAAG,IAAI;AAChD;AAAA,QACJ,KAAK;AACD,cAAI,KAAK,KAAK,GAAG,OAAOC,OAAM,KAAK,GAAG,GAAG;AACzC;AAAA,QACJ,KAAK;AACD,oBAAU,IAAI,KAAK,KAAK,GAAG,MAAM,KAAK,GAAG,IAAI;AAC7C;AAAA,QACJ,KAAK,QAAQ;AACT,gBAAM,SAAS,CAAC;AAChB,mBAAS,IAAE,GAAG,IAAE,KAAK,GAAG,OAAO,QAAQ,KAAK;AACxC,kBAAM,IAAI,KAAK,GAAG,OAAO;AACzB,gBAAI,OAAO,EAAE,QAAQ,aAAa;AAC9B,qBAAO,KAAK,IAAI,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE;AAAA,YACjD,WAAW,OAAO,EAAE,OAAO,aAAa;AACpC,qBAAO,KAAK,EAAE,GAAG;AAAA,YACrB;AAAA,UACJ;AACA,mBAAS,QAAQ,KAAK,GAAG,QAAQ,GAAG,MAAM;AAC1C;AAAA,QACJ;AAAA,QACA,KAAK;AACD,cAAI,IAAI,KAAK,GAAG,OAAO,UAAU,IAAI,KAAK,KAAK,GAAG,MAAM,KAAK,GAAG,GAAG,EAAE,MAAM;AAC3E;AAAA,QACJ;AACI,gBAAM,IAAI,MAAM,aAAa;AAAA,MACjC;AAAA,IACJ;AACA,UAAM,OAAO,IAAI,YAAY,OAAO,QAAQ,GAAG,CAAC;AAChD,SAAK,KAAK;AACV,WAAO,IAAI;AAAA,EACf;AAGA,SAAO;AACX;;;ACzHA;AAAA;;;AF0BA,wBAAmB;AAenB,SAAS,eAAe,KAAK;AACzB,MAAI,QAAQ,SAAS;AACjB,WAAO,WAAW,KAAK,GAAG;AAAA,EAC9B,OAAO;AACH,WAAOE,QAAO,KAAK,GAAG,EAAE,SAAS,QAAQ;AAAA,EAC7C;AACJ;AAEA,IAAM,eAAe,eAAe,MAAM,OAAO,SAAS,IAAI,SAAS;AACvE,IAAM,eAAe,wCAAwC;;;AGlD7D;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;AxBKA,WAAW,cAAc;;;AyBLzB;AAAA;AAAA,IAAAC,qBAAmD;AAKnD,WAAW,iBAAiB;;;ACL5B;AAAA;AAIA,IAAM,YAAmB,EAAE,oEAAoE,EAAE;AACjG,IAAM,SAAgB,EAAE,+EAA+E;AAEvG,IAAM,YAAmB,EAAE,oGAAoG,EAAE;AACjI,IAAM,SAAgB,EAAE,+EAA+E;;;AvCNhG,IAAM,SAAO;AAeb,IAAM,QAAQ;;;AFdf,IAAO,UAAP,MAAc;EAUlB,YAAYC,IAAiB;AAC3B,SAAK,IAAIA;AACT,SAAK,IAAI,OAAO,WACd,+EAA+E;AAEjF,SAAK,QAAQ,OAAO,IAAI,OAAO,IAAI,KAAK,GAAG,OAAO,EAAE,CAAC,CAAC,GAAG,OAAO,EAAE,CAAC,CAAC;AAEpE,SAAK,YAAY;MACfA,GAAE,EAAE,6EAA6E;MACjFA,GAAE,EAAE,8EAA8E;;AAEpF,SAAK,QAAQ;MACXA,GAAE,EAAE,8EAA8E;MAClFA,GAAE,EAAE,+EAA+E;;AAErF,SAAK,QAAQ,OAAO,WAClB,+EAA+E;AAEjF,SAAK,WAAW,OAAO,WAAW,KAAK,OAAO,CAAC;AAC/C,SAAK,IAAIA,GAAE,EAAE,QAAQ;AACrB,SAAK,IAAIA,GAAE,EAAE,QAAQ;EACvB;EAEA,SAAS,GAAa,GAAW;AAC/B,UAAMA,KAAI,KAAK;AAEf,UAAM,MAAM,IAAI,MAAM,CAAC;AAOvB,UAAM,OAAOA,GAAE,IAAI,EAAE,IAAI,EAAE,EAAE;AAC7B,UAAM,QAAQA,GAAE,IAAI,EAAE,IAAI,EAAE,EAAE;AAC9B,UAAM,QAAQA,GAAE,IAAIA,GAAE,IAAI,EAAE,IAAIA,GAAE,IAAI,KAAK,GAAG,EAAE,EAAE,CAAC,GAAGA,GAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;AACvE,UAAM,MAAMA,GAAE,IAAI,MAAM,KAAK;AAC7B,UAAM,OAAOA,GAAE,IAAI,KAAK,GAAG,GAAG;AAE9B,QAAI,KAAKA,GAAE,IAAIA,GAAE,IAAI,MAAM,KAAK,GAAGA,GAAE,IAAIA,GAAE,KAAK,IAAI,CAAC;AAErD,QAAI,KAAKA,GAAE,IAAIA,GAAE,IAAI,OAAOA,GAAE,IAAIA,GAAE,IAAI,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC,GAAGA,GAAE,IAAIA,GAAE,KAAK,IAAI,CAAC;AAElF,WAAO;EACT;EAEA,gBAAgB,MAAgBC,IAAS;AACvC,UAAMD,KAAI,KAAK;AACf,QAAI,MAAwB,CAACA,GAAE,EAAE,GAAG,GAAGA,GAAE,EAAE,GAAG,CAAC;AAC/C,QAAI,MAAMC;AACV,QAAIC,OAAM;AAEV,WAAO,CAAC,OAAO,OAAO,GAAG,GAAG;AAC1B,UAAI,OAAO,MAAM,GAAG,GAAG;AACrB,cAAM,KAAK,SAAS,KAAKA,IAAG;;AAE9B,MAAAA,OAAM,KAAK,SAASA,MAAKA,IAAG;AAC5B,YAAM,OAAO,WAAW,KAAK,CAAC;;AAGhC,WAAO;EACT;EAEA,WAAW,GAAW;AACpB,UAAMF,KAAI,KAAK;AACf,QAAI,CAAC,KAAK,QAAQ,CAAC;AAAG,aAAO;AAC7B,UAAM,MAAM,KAAK,gBAAgB,GAAG,KAAK,QAAQ;AACjD,WAAOA,GAAE,OAAO,IAAI,EAAE,KAAKA,GAAE,GAAG,IAAI,IAAIA,GAAE,GAAG;EAC/C;EAEA,QAAQ,GAAW;AACjB,UAAMA,KAAI,KAAK;AACf,UAAM,KAAKA,GAAE,OAAO,EAAE,EAAE;AACxB,UAAM,KAAKA,GAAE,OAAO,EAAE,EAAE;AAExB,QAAI,CAACA,GAAE,GAAGA,GAAE,IAAIA,GAAE,IAAI,KAAK,GAAG,EAAE,GAAG,EAAE,GAAGA,GAAE,IAAIA,GAAE,KAAKA,GAAE,IAAIA,GAAE,IAAI,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC;AAChF,aAAO;AAET,WAAO;EACT;EAEA,UAAU,GAAW;AACnB,UAAMA,KAAI,KAAK;AACf,UAAM,OAAO,IAAI,WAAW,EAAE;AAC9B,IAAAA,GAAE,QAAQ,MAAM,GAAG,EAAE,EAAE;AACvB,UAAM,IAAIA,GAAE,SAAS,EAAE,EAAE;AACzB,QAAI,OAAO,GAAG,GAAG,KAAK,KAAK,GAAG;AAC5B,WAAK,MAAM,KAAK,MAAM;;AAExB,WAAO;EACT;EAEA,YAAY,MAAgB;AAC1B,UAAMA,KAAI,KAAK;AACf,QAAI,OAAO;AACX,UAAM,IAAsB,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AACjD,QAAI,KAAK,MAAM,KAAM;AACnB,aAAO;AACP,WAAK,MAAM,KAAK,MAAM;;AAExB,MAAE,KAAKA,GAAE,UAAU,MAAM,CAAC;AAC1B,QAAI,OAAO,GAAGA,GAAE,SAAS,EAAE,EAAE,GAAG,KAAK,CAAC;AAAG,aAAO;AAEhD,UAAM,KAAKA,GAAE,OAAO,EAAE,EAAE;AAExB,UAAM,KAAKA,GAAE,IAAIA,GAAE,IAAIA,GAAE,KAAK,EAAE,GAAGA,GAAE,IAAI,KAAK,GAAGA,GAAE,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC;AAEnE,UAAM,MAAMA,GAAE,IAAI,IAAIA,GAAE,IAAI;AAC5B,QAAI,CAACA,GAAE,GAAGA,GAAE,KAAK,GAAG;AAAG,aAAO;AAE9B,QAAI,IAAIA,GAAE,KAAK,EAAE;AAEjB,QAAI,KAAK;AAAM,aAAO;AAEtB,QAAI;AAAM,UAAIA,GAAE,IAAI,CAAC;AAErB,MAAE,KAAK,OAAO,CAAC;AAEf,WAAO;EACT;;AAEF,IAAM,IAAI,IAAI,QACZ,OAAO,WAAW,+EAA+E,CAAC;AAG7F,IAAM,UAAU,IAAI,QAAQ,CAAC;;;A0C1IpmBAAmB,8BAAE;AAE9C,IAAM,aAAa;AACnB,IAAM,aAAa,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAClF,IAAM,gBAAgB;AACtB,IAAM,oBAAoB;AAE1B,IAAMG,KAAI,IAAI,QACZ,OAAO,WAAW,+EAA+E,CAAC;AAEpG,IAAM,OAAO,CAAC,MAAsBA,GAAE,IAAI,GAAGA,GAAE,OAAOA,GAAE,OAAO,GAAG,CAAC,CAAC,CAAC;AAG/D,IAAO,WAAP,MAAe;EAEnB,OAAO,KAAK,QAAgB;AAC1B,QAAI,EAAE,OAAO,SAAS,KAAK,OAAO,UAAU,WAAW,SAAS;AAC9D,YAAM,IAAI,MAAM,gBAAgB;;AAGlC,UAAM,IAAI,OAAO,SAAS;AAC1B,UAAM,WAAW;AACjB,UAAM,WAAW,WAAW,IAAI;AAChC,UAAM,IAAI,IAAI,EAAE,IAAI;AACpB,UAAM,IAAI,IAAI,EAAE,IAAI;AACpB,UAAM,IAAI,IAAI,EAAE,IAAI;AACpB,UAAM,IAAI,IAAI,EAAE,IAAI;AAEpB,QAAI,QAAkB,CAACA,GAAE,MAAM,GAAG,OAAO,IAAI,CAAC,MAAMA,GAAE,EAAE,CAAC,CAAC,CAAC;AAE3D,YAAQ,MAAM,IAAI,CAAC,GAAG,MAAMA,GAAE,IAAI,GAAG,EAAE,EAAE,CAAC;AAE1C,aAAS,IAAI,GAAG,IAAI,WAAW,IAAI,GAAG,KAAK;AACzC,cAAQ,MAAM,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;AAChC,cAAQ,MAAM,IAAI,CAAC,GAAG,MAAMA,GAAE,IAAI,GAAG,GAAG,IAAI,KAAK,IAAI,EAAE,CAAC;AACxD,cAAQ,MAAM,IAAI,CAAC,GAAG,MACpB,MAAM,OAAO,CAAC,KAAK,GAAG,MAAMA,GAAE,IAAI,KAAKA,GAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,GAAGA,GAAE,IAAI,CAAC;;AAGtE,YAAQ,MAAM,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;AAChC,YAAQ,MAAM,IAAI,CAAC,GAAG,MAAMA,GAAE,IAAI,GAAG,GAAG,WAAW,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;AACvE,YAAQ,MAAM,IAAI,CAAC,GAAG,MAAM,MAAM,OAAO,CAAC,KAAK,GAAG,MAAMA,GAAE,IAAI,KAAKA,GAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,GAAGA,GAAE,IAAI,CAAC;AAC9F,aAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AACjC,YAAM,KAAK,KAAK,MAAM,EAAE;AACxB,YAAM,KAAKA,GAAE,IAAI,MAAM,IAAI,GAAG,WAAW,IAAI,KAAK,IAAI,EAAE;AAExD,YAAM,KAAK,MAAM,OAAO,CAAC,KAAK,GAAG,MAAK;AACpC,eAAOA,GAAE,IAAI,KAAKA,GAAE,IAAI,GAAG,IAAI,IAAI,KAAK,IAAI,IAAI,CAAC,CAAC;MACpD,GAAGA,GAAE,IAAI;AACT,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,cAAM,KAAKA,GAAE,IAAI,MAAM,IAAIA,GAAE,IAAI,MAAM,IAAI,GAAG,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC;;AAE5E,YAAM,KAAK;;AAEb,aAAS,IAAI,GAAG,IAAI,WAAW,IAAI,GAAG,KAAK;AACzC,cAAQ,MAAM,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;AAChC,cAAQ,MAAM,IAAI,CAAC,GAAG,MAAMA,GAAE,IAAI,GAAG,GAAG,WAAW,IAAI,KAAK,IAAI,WAAW,IAAI,IAAI,EAAE,CAAC;AACtF,cAAQ,MAAM,IAAI,CAAC,GAAG,MACpB,MAAM,OAAO,CAAC,KAAK,GAAG,MAAMA,GAAE,IAAI,KAAKA,GAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,GAAGA,GAAE,IAAI,CAAC;;AAGtE,YAAQ,MAAM,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;AAChC,YAAQ,MAAM,IAAI,CAAC,GAAG,MAAM,MAAM,OAAO,CAAC,KAAK,GAAG,MAAMA,GAAE,IAAI,KAAKA,GAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,GAAGA,GAAE,IAAI,CAAC;AAE9F,WAAOA,GAAE,UAAU,MAAM,EAAE;EAC7B;EAGA,OAAO,UAAU,KAAe;AAC9B,WAAO,SAAS,WAAW,KAAK,aAAa;EAC/C;EAGA,OAAO,WAAW,KAAiB,WAAiB;AAClD,UAAM,SAAS,IAAI,MAAM,SAAS,EAAE,KAAK,OAAO,CAAC,CAAC;AAClD,QAAI,QAAQ;AACZ,QAAI;AAEJ,QAAI,IAAI;AACR,aAAS,IAAI,GAAG,IAAI,SAAS,GAAG,IAAI,SAAS,mBAAmB,GAAG,KAAK,GAAG;AACzE,cAAQ;AACR,aAAO,KAAK,MAAM,WAAW,IAAI,MAAM,oBAAoB,GAAG,qBAAqB,IAAI,EAAE,CAAC;AAC1F,UAAI,MAAM,YAAY,GAAG;AACvB,eAAO,SAAS,KAAK,MAAM;AAC3B,gBAAQ;AACR,eAAO,KAAK;AACZ,eAAO,KAAK,OAAO,CAAC,GAAG,GAAG,iBAAiB;AAC3C,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AACrC,iBAAO,KAAK,OAAO,CAAC;;AAEtB,YAAI;aACC;AACL,aAAK;;;AAIT,QAAI,IAAI,SAAS,qBAAqB,GAAG;AACvC,YAAM,OAAO,IAAI,WAAW,iBAAiB;AAC7C,YAAMC,SAAQ,IAAI,MAAM,SAAS,GAAG,IAAI,SAAS,mBAAmB,IAAI,iBAAiB;AACzF,MAAAA,OAAM,QAAQ,CAAC,GAAG,QAAO;AACvB,aAAK,OAAO;MACd,CAAC;AACD,aAAO,KAAK,MAAM,WAAW,IAAI;AACjC,cAAQ;;AAGV,QAAI,OAAO;AAET,aAAO,SAAS,KAAK,MAAM;;AAG7B,WAAO;EACT;EAGA,OAAO,YAAY,QAAkB,WAAiB;AACpD,QAAI,YAAY,KAAK,YAAY,IAAI;AACnC,YAAM,IAAI,MAAM,sBAAsB;;AAIxC,QAAI,QAAQ,IAAI,MAAM,SAAS,EAAE,KAAK,OAAO,CAAC,CAAC;AAE/C,QAAI,QAAQ;AACZ,QAAI;AAEJ,QAAI,IAAI;AACR,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,cAAQ;AACR,YAAM,KAAK,OAAO;AAClB,UAAI,MAAM,YAAY,GAAG;AACvB,eAAO,KAAK,KAAK,KAAK;AACtB,gBAAQ;AACR,gBAAQ,IAAI,MAAM,SAAS,EAAE,KAAK,OAAO,CAAC,CAAC;AAC3C,cAAM,KAAK;AACX,YAAI;aACC;AACL;;;AAIJ,QAAI,OAAO;AAET,aAAO,KAAK,KAAK,KAAK;;AAGxB,QAAI,CAAC,MAAM;AACT,YAAM,IAAI,MAAM,mBAAmB;;AAGrC,WAAO;EACT;;AAzIO,SAAA,IAAID;AA2IN,IAAM,WAAW;;;AC5JxB;;;;AlDQO,IAAM,oBAAoB,CAAC,WAAyB;AACzD,MAAI,CAAC,mBAAmB,MAAM,GAAG;AAC/B,UAAM;AAAA,EACR;AAEA,QAAM,QAAQ,mBAAmB,MAAM;AAEvC,QAAM,OAAO,IAAI,KAAK;AACtB,OAAK,QAAQ;AACb,SAAO;AACT;AAEO,IAAM,iBAAiB,CAAC,MAAoB;AACjD,MAAI,CAAC,GAAG;AACN,WAAO;AAAA,EACT;AAIA,QAAM,OAAO,IAAI,KAAK;AACtB,OAAK,QAAQ,eAAe,IAAI,aAAa,CAAC,CAAC;AAC/C,SAAO;AACT;AAGO,IAAM,oBAAoB,CAAC,kBAAgC;AAChE,QAAM,SAAS,OAAO,aAAa;AAEnC,MAAI,CAAC,mBAAmB,MAAM,GAAG;AAC/B,UAAM;AAAA,EACR;AAEA,SAAO,kBAAkB,MAAM;AACjC;;;AmDzCA;AAAA;AAKO,IAAM,YAAY,CAACE,OAA2B;AACnD,QAAM,aAAa,SAAS,KAAKA,EAAC;AAClC,SAAO,kBAAkB,UAAU;AACrC;AAEO,IAAM,eAAe,CAAC,GAAWA,OAA2B;AACjE,QAAM,aAAa,SAAS,KAAK,CAAC,GAAGA,IAAG,CAAC,CAAC;AAC1C,SAAO,kBAAkB,UAAU;AACrC;;;ACbA;AAAA;;;ACAA;AAAA;AAAA;AAIO,IAAM,YAAN,MAAgB;AAAA,EAIrB,cAAc;AAFd;AAGE,uBAAK,QAAS,IAAI,WAAW,cAAc;AAAA,EAC7C;AAAA,EAEA,IAAI,QAAe;AACjB,WAAO,mBAAK;AAAA,EACd;AAAA,EAEA,IAAI,MAAM,GAAU;AAClB,uBAAK,QAAS;AAAA,EAChB;AAAA,EAEA,SAAiB;AACf,WAAO,mBAAmB,eAAe,mBAAK,OAAM,CAAC;AAAA,EACvD;AAAA,EAEA,SAAiB;AACf,UAAM,SAAS,UAAU,mBAAK,QAAO,MAAM,GAAG,CAAC,CAAC;AAChD,WAAO,GAAG;AAAA,EACZ;AACF;AAtBE;;;ACNF;AAAA;AAAA;AAKO,IAAM,OAAN,MAAW;AAAA,EAGhB,cAAc;AAFd;AAGE,uBAAK,QAAS,IAAI,MAAiB,QAAQ;AAAA,EAC7C;AAAA,EAEA,IAAI,QAA0B;AAC5B,WAAO,mBAAK;AAAA,EACd;AAAA,EAEA,IAAI,MAAM,IAAiB;AACzB,QAAI,GAAG,WAAW,UAAU;AAC1B,YAAM,+BAA+B,iBAAiB,GAAG;AAAA,IAC3D;AACA,uBAAK,QAAS;AAAA,EAChB;AAAA,EAEA,QAAe;AACb,UAAM,IAAI,IAAI,WAAW,WAAW,cAAc;AAElD,aAAS,MAAM,GAAG,MAAM,UAAU,OAAO,GAAG;AAC1C,yBAAK,QAAO,KAAK,MAAM,QAAQ,CAAC,GAAG,SAAS;AAC1C,UAAE,MAAM,iBAAiB,QAAQ;AAAA,MACnC,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,IAAmB;AACvB,WACE,WAAW,mBAAK,QAAO,GAAG,OAAO,GAAG,MAAM,GAAG,KAAK,KAClD,WAAW,mBAAK,QAAO,GAAG,OAAO,GAAG,MAAM,GAAG,KAAK,KAClD,WAAW,mBAAK,QAAO,GAAG,OAAO,GAAG,MAAM,GAAG,KAAK,KAClD,WAAW,mBAAK,QAAO,GAAG,OAAO,GAAG,MAAM,GAAG,KAAK;AAAA,EAEtD;AACF;AApCE;;;AFCK,IAAM,qBAAqB,CAAC,OAAwC;AACzE,QAAM,UAAU,GAAG,IAAI,CAACC,OAAM;AAC5B,WAAOA,GAAE,OAAO;AAAA,EAClB,CAAC;AAED,SAAO;AACT;AAEO,IAAM,oBAAoB,CAACA,OAAsB;AACtD,QAAM,UAAU,mBAAmBA,GAAE,KAAK,KAAK;AAC/C,MAAI,OAAO;AAEX,UAAQ,QAAQ,CAAC,MAAM;AACrB,QAAI,CAAC,mBAAmB,CAAC,GAAG;AAC1B,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEO,IAAM,mBAAmB,CAAC,UAAuB;AACtD,MAAI,MAAM,WAAW,gBAAgB;AACnC,UAAM,+BAA+B,uBAAuB,MAAM;AAAA,EACpE;AACA,QAAM,IAAI,IAAI,KAAK;AACnB,QAAM,MAAM,IAAI,MAAiB,cAAc;AAE/C,WAAS,IAAI,GAAG,IAAI,UAAU,KAAK,GAAG;AACpC,UAAM,MAAM,IAAI,UAAU;AAC1B,QAAI,QAAQ,MAAM,MAAM,IAAI,iBAAiB,IAAI,KAAK,cAAc;AACpE,QAAI,KAAK;AAAA,EACX;AAEA,IAAE,QAAQ;AACV,SAAO;AACT;;;AG3CA;AAAA;AAGO,IAAM,6BAA6B,CAAC,UAAoB,WAA6B;AAC1F,WAAS,IAAI,SAAS,QAAQ,IAAI,QAAQ,KAAK,GAAG;AAChD,aAAS,KAAK,SAAS;AAAA,EACzB;AACA,SAAO;AACT;;;ACRA;AAAA;AAMO,IAAM,UAAU,CAAC,WAAmB,MAAmB;AAC5D,QAAM,OAAO,IAAI,MAAe,SAAS;AAEzC,WAAS,MAAM,GAAG,MAAM,WAAW,OAAO,GAAG;AAC3C,SAAK,OAAO,QAAQ,GAAG,GAAG;AAAA,EAC5B;AACA,SAAO;AACT;AAEO,IAAM,iBAAiB,CAAC,aAA8B;AAC3D,QAAM,mBAAmB,IAAI,YAAY,oBAAoB,SAAS,MAAM;AAC5E,QAAM,eAAe,IAAI,WAAW,gBAAgB;AACpD,WAAS,QAAQ,CAAC,GAAG,MAAM;AACzB,iBAAa,IAAI,EAAE,OAAO,IAAI,iBAAiB;AAAA,EACjD,CAAC;AAED,SAAO;AACT;;;ACvBA;AAAA;;;ACAA;AAAA;AAUO,IAAM,UAAU,OAAO,GAAS,MAA2B;AAChE,SAAO,aAAa,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,GAAG,EAAE,OAAO,CAAC,CAAC;AACzD;AAEO,IAAM,YAAY,CAAC,MAAgB,GAAS,MAAmB;AACpE,QAAM,QAAQ,IAAI,WAAW,0BAA0B;AACvD,QAAM,SAAS,mBAAmB,EAAE,OAAO,CAAC;AAC5C,QAAM,SAAS,mBAAmB,EAAE,OAAO,CAAC;AAC5C,QAAM,KAAK;AAEX,WAAS,MAAM,GAAG,MAAM,IAAI,OAAO,GAAG;AACpC,UAAM,OAAO,OAAO,MAAM;AAAA,EAC5B;AAEA,WAAS,MAAM,IAAI,OAAO,4BAA4B,OAAO,GAAG;AAC9D,UAAM,OAAO,OAAO,MAAM;AAAA,EAC5B;AAEA,SAAO;AACT;;;AC7BA;AAAA;AAAA;AAaO,IAAM,WAAN,MAA+B;AAAA,EAMpC,YAAY,GAAS,GAAS;AAF9B;AAGE,SAAK,OAAO;AACZ,SAAK,QAAQ,CAAC,GAAG,CAAC;AAClB,uBAAK,MAAO;AAAA,EACd;AAAA,EAEA,MAAM,SAAwB;AAC5B,QAAI,mBAAK,UAAS,WAAW;AAC3B,aAAO,MAAM,QAAQ,KAAK,MAAM,IAAI,KAAK,MAAM,EAAE;AAAA,IACnD;AACA,WAAO,mBAAK;AAAA,EACd;AAAA,EAEA,IAAI,QAAe;AACjB,WAAO,UAAU,KAAK,MAAM,KAAK,MAAM,IAAI,KAAK,MAAM,EAAE;AAAA,EAC1D;AAAA,EAEA,IAAI,SAAiB;AACnB,WAAO,UAAU,KAAK,MAAM,QAAQ,KAAK,MAAM;AAAA,EACjD;AACF;AAtBE;AAjBF,IAAAC;AAyCO,IAAM,aAAN,MAAiC;AAAA,EAMtC,YAAY,IAAU,IAAU;AAFhC,uBAAAA,OAAA;AAGE,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,SAAS;AACd,uBAAKA,OAAO;AAAA,EACd;AAAA,EAEA,MAAM,SAAwB;AAC5B,QAAI,mBAAKA,WAAS,WAAW;AAC3B,aAAO,UAAU,CAAC,KAAK,OAAO,OAAO,GAAG,KAAK,OAAO,OAAO,CAAC,CAAC;AAAA,IAC/D;AACA,WAAO,mBAAKA;AAAA,EACd;AAAA,EAEA,IAAI,QAAe;AACjB,WAAO,UAAU,KAAK,MAAM,KAAK,QAAQ,KAAK,MAAM;AAAA,EACtD;AAAA,EAEA,IAAI,SAAiB;AACnB,WAAO,YAAY,KAAK,YAAY,KAAK;AAAA,EAC3C;AACF;AAvBEA,QAAA;AA7CF,IAAAA;AAsEO,IAAM,YAAN,MAAgC;AAAA,EAIrC,cAAc;AAFd,uBAAAA,OAAA;AAGE,SAAK,OAAO;AACZ,uBAAKA,OAAO;AAAA,EACd;AAAA,EAEA,MAAM,SAAwB;AAC5B,WAAO;AAAA,EACT;AAAA,EAEA,IAAI,QAAe;AACjB,WAAO;AAAA,EACT;AAAA,EAEA,IAAI,SAAiB;AACnB,WAAO;AAAA,EACT;AACF;AAlBEA,QAAA;;;ACxEF;AAAA;AAAO,IAAM,kCACX;;;AHYK,IAAM,qBAAqB,CAAC,UAA2B;AAC5D,MAAI,SAAS;AACb,QAAM,WAAqB,CAAC;AAE5B,WAAS,IAAI,GAAG,IAAI,MAAM,OAAO,KAAK,GAAG;AACvC,QAAI,iBAAiB,MAAM,YAAY,CAAC,GAAG;AACzC,eAAS,KAAK,MAAM,SAAS,OAAO;AACpC,gBAAU;AAAA,IACZ,OAAO;AACL,eAAS,KAAK,SAAS;AAAA,IACzB;AAAA,EACF;AAEA,SAAO;AACT;AAEO,IAAM,cAAc,OACzB,SACA,OACA,GACA,MACqB;AACrB,MAAI;AACF,UAAM,aAAa,MAAM,cAAc,OAAO,GAAG,CAAC;AAClD,WAAO,WAAW,QAAQ,OAAO,WAAW,KAAK;AAAA,EACnD,SAAS,KAAP;AACA,QAAI,QAAQ,iCAAiC;AAC3C,aAAO;AAAA,IACT;AACA,UAAM;AAAA,EACR;AACF;AAEO,IAAM,gBAAgB,OAAO,OAAc,GAAW,MAA6B;AACxF,QAAM,QAAQ,kBAAkB,CAAC;AACjC,QAAM,QAAQ,kBAAkB,CAAC;AAEjC,MAAI,SAAS,MAAM,SAAS,SAAS;AACrC,MAAI;AAEJ,MAAI,MAAM,WAAW;AACnB,aAAS,MAAM,QAAQ,OAAO,KAAK;AAAA,EACrC,OAAO;AACL,QAAI,OAAO,MAAM,YAAY,aAAa;AACxC,eAAS;AAAA,IACX,OAAO;AACL,YAAM,UAAU,MAAM;AACtB,UAAI,WAAW,MAAM,OAAO,QAAQ,IAAI,KAAK,GAAG;AAC9C,cAAM;AAAA,MACR;AACA,eAAS,MAAM,QAAQ,QAAQ,KAAK,QAAQ,KAAK;AAAA,IACnD;AAAA,EACF;AAEA,QAAM,OAAO,QAAQ,MAAM,OAAO,MAAM,KAAK;AAC7C,MAAI;AAEJ,WAAS,IAAI,MAAM,QAAQ,GAAG,KAAK,GAAG,KAAK,GAAG;AAC5C,QAAI,iBAAiB,MAAM,YAAY,CAAC,GAAG;AACzC,mBAAa,MAAM,SAAS;AAC5B,gBAAU;AAAA,IACZ,OAAO;AACL,mBAAa;AAAA,IACf;AACA,QAAI,KAAK,IAAI;AACX,eAAS,MAAM,IAAI,WAAW,YAAY,MAAM,EAAE,OAAO;AAAA,IAC3D,OAAO;AACL,eAAS,MAAM,IAAI,WAAW,QAAQ,UAAU,EAAE,OAAO;AAAA,IAC3D;AAAA,EACF;AAEA,SAAO;AACT;;;A7DjFO,IAAM,OAAN,MAA4B;AAAA,EAIjC,YAAYC,SAAgB;AAC1B,QAAIA,SAAQ,QAAQ;AAClB,UAAIA,QAAO,WAAW,mBAAmB;AACvC,cAAM,IAAI,MAAM,YAAY,kCAAkCA,QAAO,cAAc;AAAA,MACrF;AACA,WAAK,QAAQA;AAAA,IACf,OAAO;AACL,WAAK,QAAQ,IAAI,WAAW,iBAAiB;AAAA,IAC/C;AAAA,EACF;AAAA,EAGA,IAAI,QAAe;AACjB,WAAO,KAAK;AAAA,EACd;AAAA,EAGA,IAAI,MAAM,OAAc;AACtB,QAAI,MAAM,WAAW,mBAAmB;AACtC,YAAM,4BAA4B,MAAM;AAAA,IAC1C;AACA,SAAK,QAAQ,eAAe,KAAK;AAAA,EACnC;AAAA,EAEA,SAAiB;AACf,WAAO,KAAK,OAAO,EAAE,SAAS,EAAE;AAAA,EAClC;AAAA,EAEA,MAAc;AACZ,WAAO,UAAU,KAAK,KAAK;AAAA,EAC7B;AAAA,EAEA,OAAO,MAAqB;AAC1B,WAAO,WAAW,KAAK,OAAO,KAAK,KAAK;AAAA,EAC1C;AAAA,EAEA,SAAiB;AACf,UAAM,QAAQ,eAAe,KAAK,KAAK;AACvC,WAAO,OAAO,mBAAmB,KAAK,CAAC;AAAA,EACzC;AACF;AAEO,IAAM,YAAY,IAAI,KAAK;;;ADlDlC;AAMO,IAAM,aAAN,MAAyC;AAAA,EAO9C,YAAY,SAAgB;AAL5B;AAGA;AAGE,SAAK,SAAS;AACd,uBAAK,QAAS,CAAC;AACf,uBAAK,cAAe;AAAA,EACtB;AAAA,EAEA,MAAM,IAAI,GAAqC;AAC7C,UAAM,SAAS,IAAI,WAAW,CAAC,GAAG,KAAK,QAAQ,GAAG,CAAC,CAAC;AACpD,UAAM,MAAM,mBAAK,QAAO,OAAO,SAAS,KAAK,mBAAK,QAAO,OAAO,SAAS,KAAK;AAC9E,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,IAAI,GAAU,GAAwB;AAC1C,UAAM,SAAS,IAAI,WAAW,CAAC,GAAG,KAAK,QAAQ,GAAG,CAAC,CAAC;AACpD,uBAAK,QAAO,OAAO,SAAS,KAAK;AAAA,EACnC;AAAA,EAEA,MAAM,UAAyB;AAC7B,WAAO,mBAAK;AAAA,EACd;AAAA,EAEA,MAAM,QAAQ,GAAwB;AACpC,uBAAK,cAAe;AAAA,EACtB;AACF;AA7BE;AAGA;;;AkEXF;AAAA;AAAA,IAAAC;AASO,IAAM,iBAAN,MAA6C;AAAA,EAGlD,YAA6B,SAAgB;AAAhB;AAF7B,uBAAAA,eAAA;AAGE,UAAM,UAAU,aAAa,QAAQ,UAAU,OAAO,CAAC;AACvD,QAAI,SAAS;AACX,YAAM,QAAkB,KAAK,MAAM,OAAO;AAE1C,yBAAKA,eAAe,IAAI,KAAK,WAAW,KAAK,KAAK,CAAC;AAAA,IACrD,OAAO;AACL,yBAAKA,eAAe;AAAA,IACtB;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,GAAqC;AAC7C,UAAM,SAAS,IAAI,WAAW,CAAC,GAAG,KAAK,SAAS,GAAG,CAAC,CAAC;AACrD,UAAM,MAAM,UAAU,MAAM;AAC5B,UAAM,MAAM,aAAa,QAAQ,GAAG;AAEpC,QAAI,QAAQ,MAAM;AAChB,aAAO;AAAA,IACT;AAEA,UAAM,MAAM,KAAK,MAAM,GAAG;AAC1B,YAAQ,IAAI,MAAM;AAAA,MAChB,KAAK;AACH,eAAO,IAAI,UAAU;AAAA,MACvB,KAAK;AACH,cAAM,KAAK,IAAI,KAAK,WAAW,KAAK,IAAI,MAAM,CAAC;AAC/C,cAAM,KAAK,IAAI,KAAK,WAAW,KAAK,IAAI,MAAM,CAAC;AAE/C,eAAO,IAAI,WAAW,IAAI,EAAE;AAAA,MAC9B,KAAK;AACH,cAAMC,KAAI,IAAI,KAAK,WAAW,KAAK,IAAI,MAAM,EAAE,CAAC;AAChD,cAAM,IAAI,IAAI,KAAK,WAAW,KAAK,IAAI,MAAM,EAAE,CAAC;AAEhD,eAAO,IAAI,SAASA,IAAG,CAAC;AAAA,IAC5B;AAEA,UAAM,8BAA8B,UAAU,MAAM;AAAA,EACtD;AAAA,EAEA,MAAM,IAAI,GAAU,GAAwB;AAC1C,UAAM,SAAS,IAAI,WAAW,CAAC,GAAG,KAAK,SAAS,GAAG,CAAC,CAAC;AACrD,UAAM,MAAM,UAAU,MAAM;AAC5B,UAAM,cAAuC;AAAA,MAC3C,MAAM,EAAE;AAAA,IACV;AACA,QAAI,aAAa,YAAY;AAC3B,kBAAY,SAAS,MAAM,KAAK,EAAE,OAAO,KAAK;AAC9C,kBAAY,SAAS,MAAM,KAAK,EAAE,OAAO,KAAK;AAAA,IAChD,WAAW,aAAa,UAAU;AAChC,kBAAY,QAAQ,CAAC,MAAM,KAAK,EAAE,MAAM,GAAG,KAAK,GAAG,MAAM,KAAK,EAAE,MAAM,GAAG,KAAK,CAAC;AAAA,IACjF;AACA,UAAM,MAAM,KAAK,UAAU,WAAW;AACtC,iBAAa,QAAQ,KAAK,GAAG;AAAA,EAC/B;AAAA,EAEA,MAAM,UAAyB;AAC7B,WAAO,mBAAKD;AAAA,EACd;AAAA,EAEA,MAAM,QAAQ,GAAwB;AACpC,uBAAKA,eAAe;AACpB,iBAAa,QAAQ,UAAU,KAAK,OAAO,GAAG,KAAK,UAAU,MAAM,KAAK,EAAE,KAAK,CAAC,CAAC;AAAA,EACnF;AACF;AAjEEA,gBAAA;;;ACVF;AAAA;;;ACAA;AAAA;AAAA,SAAS,iBAAiB,SAAS;AAC/B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEpC,YAAQ,aAAa,QAAQ,YAAY,MAAM,QAAQ,QAAQ,MAAM;AAErE,YAAQ,UAAU,QAAQ,UAAU,MAAM,OAAO,QAAQ,KAAK;AAAA,EAClE,CAAC;AACL;AACA,SAAS,YAAY,QAAQ,WAAW;AACpC,QAAM,UAAU,UAAU,KAAK,MAAM;AACrC,UAAQ,kBAAkB,MAAM,QAAQ,OAAO,kBAAkB,SAAS;AAC1E,QAAM,MAAM,iBAAiB,OAAO;AACpC,SAAO,CAAC,QAAQ,aAAa,IAAI,KAAK,CAAC,OAAO,SAAS,GAAG,YAAY,WAAW,MAAM,EAAE,YAAY,SAAS,CAAC,CAAC;AACpH;AACA,IAAI;AACJ,SAAS,kBAAkB;AACvB,MAAI,CAAC,qBAAqB;AACtB,0BAAsB,YAAY,gBAAgB,QAAQ;AAAA,EAC9D;AACA,SAAO;AACX;AAOA,SAAS,IAAI,KAAK,cAAc,gBAAgB,GAAG;AAC/C,SAAO,YAAY,YAAY,CAAC,UAAU,iBAAiB,MAAM,IAAI,GAAG,CAAC,CAAC;AAC9E;AAQA,SAAS,IAAI,KAAK,OAAO,cAAc,gBAAgB,GAAG;AACtD,SAAO,YAAY,aAAa,CAAC,UAAU;AACvC,UAAM,IAAI,OAAO,GAAG;AACpB,WAAO,iBAAiB,MAAM,WAAW;AAAA,EAC7C,CAAC;AACL;;;AD1CA,IAAAE;AAQO,IAAM,oBAAN,MAA+C;AAAA,EAQpD,YAA6B,SAAgB,cAAuB;AAAvC;AAF7B,uBAAAA,eAAA;AAGE,uBAAKA,eAAe;AACpB,SAAK,cAAc,UAAU,OAAO;AACpC,SAAK,SAAS;AAAA,MACZ,GAAG,gBAAgB,kBAAiB;AAAA,MACpC,kBAAiB;AAAA,IACnB;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,GAAqC;AAC7C,UAAM,SAAS,IAAI,WAAW,CAAC,GAAG,KAAK,SAAS,GAAG,CAAC,CAAC;AACrD,UAAM,MAAM,UAAU,MAAM;AAC5B,UAAM,MAAM,MAAM,IAAI,KAAK,KAAK,MAAM;AACtC,QAAI,QAAQ,QAAQ,QAAQ,QAAW;AACrC,aAAO;AAAA,IACT;AACA,QAAI,IAAI,SAAS,iBAAiB;AAChC,aAAO,IAAI,UAAU;AAAA,IACvB;AACA,QAAI,IAAI,SAAS,kBAAkB;AACjC,YAAM,KAAK,IAAI,KAAK,WAAW,KAAK,IAAI,OAAO,KAAK,CAAC;AACrD,YAAM,KAAK,IAAI,KAAK,WAAW,KAAK,IAAI,OAAO,KAAK,CAAC;AACrD,aAAO,IAAI,WAAW,IAAI,EAAE;AAAA,IAC9B;AACA,QAAI,IAAI,SAAS,gBAAgB;AAC/B,YAAMC,KAAI,IAAI,KAAK,WAAW,KAAK,IAAI,MAAM,GAAG,KAAK,CAAC;AACtD,YAAM,IAAI,IAAI,KAAK,WAAW,KAAK,IAAI,MAAM,GAAG,KAAK,CAAC;AAEtD,aAAO,IAAI,SAASA,IAAG,CAAC;AAAA,IAC1B;AACA,UAAM,IAAI,MAAM,8BAA8B,yBAAyB;AAAA,EACzE;AAAA,EAEA,MAAM,IAAI,GAAU,GAAwB;AAC1C,UAAM,SAAS,IAAI,WAAW,CAAC,GAAG,KAAK,SAAS,GAAG,CAAC,CAAC;AACrD,UAAM,MAAM,UAAU,MAAM;AAC5B,UAAM,IAAI,KAAK,GAAG,KAAK,MAAM;AAAA,EAC/B;AAAA,EAEA,MAAM,UAAyB;AAC7B,QAAI,CAAC,mBAAKD,eAAa,OAAO,SAAS,GAAG;AACxC,aAAO,mBAAKA;AAAA,IACd;AACA,UAAM,OAAO,MAAM,IAAI,KAAK,aAAa,KAAK,MAAM;AAEpD,QAAI,CAAC,MAAM;AACT,yBAAKA,eAAe;AAAA,IACtB,OAAO;AACL,yBAAKA,eAAe,IAAI,KAAK,KAAK,KAAK;AAAA,IACzC;AACA,WAAO,mBAAKA;AAAA,EACd;AAAA,EAEA,MAAM,QAAQ,GAAwB;AACpC,UAAM,IAAI,KAAK,aAAa,GAAG,KAAK,MAAM;AAC1C,uBAAKA,eAAe;AAAA,EACtB;AACF;AAjEO,IAAM,mBAAN;AAMLA,gBAAA;AANW,iBACY,cAAc;;;AETvC;AAAA;;;ACAA;AAAA;AAAA;AAMO,IAAM,SAAN,MAAY;AAAA,EAKjB,YAAYE,QAAc;AAJ1B;AACA;AACA;AAGE,uBAAK,OAAQA,SAAQA,SAAQ,IAAI,KAAK;AACtC,uBAAK,SAAU;AACf,uBAAK,SAAU;AAAA,EACjB;AAAA,EAEA,IAAI,OAAa;AACf,WAAO,mBAAK;AAAA,EACd;AAAA,EAEA,IAAI,QAA0B;AAC5B,WAAO,mBAAK,OAAM,MAAM,MAAM,GAAG,CAAC;AAAA,EACpC;AAAA,EAEA,IAAI,QAA0B;AAC5B,WAAO,mBAAK,OAAM,MAAM,MAAM,GAAG,CAAC;AAAA,EACpC;AAAA,EAEA,MAAM,SAAwB;AAC5B,QAAI,mBAAK,aAAY,WAAW;AAC9B,aAAO,UAAU,mBAAmB,KAAK,KAAK,CAAC;AAAA,IACjD;AACA,WAAO,mBAAK;AAAA,EACd;AAAA,EAEA,MAAM,SAAwB;AAC5B,QAAI,mBAAK,aAAY,WAAW;AAC9B,aAAO,UAAU,mBAAmB,KAAK,KAAK,CAAC;AAAA,IACjD;AACA,WAAO,mBAAK;AAAA,EACd;AAAA,EAEA,OAAwC;AACtC,YAAQ,YAAY;AAClB,YAAM,KAAK,MAAM,KAAK,OAAO;AAC7B,YAAM,KAAK,MAAM,KAAK,OAAO;AAC7B,aAAO,EAAE,IAAI,GAAG;AAAA,IAClB,GAAG;AAAA,EACL;AAAA,EAEA,QAA0B;AACxB,WAAO,mBAAK,OAAM;AAAA,EACpB;AAAA,EAEA,MAAM,IAAoB;AACxB,WAAO,mBAAK,OAAM,MAAM,GAAG,IAAI;AAAA,EACjC;AAAA,EAEA,QAAe;AACb,WAAO,IAAI,OAAM,mBAAK,MAAK;AAAA,EAC7B;AACF;AAxDO,IAAM,QAAN;AACL;AACA;AACA;;;ACTF;AAAA;;;ACAA;AAAA;AAAO,IAAM,0BAA0B;AAEhC,IAAM,iBAAiB;AAGvB,IAAM,sBAAsB;AAG5B,IAAM,qBAAqB;AAG3B,IAAM,sBAAsB;AAE5B,IAAM,uBAAuB;AAI7B,IAAM,oBAAoB;AAG1B,IAAM,6BAA6B;AAGnC,IAAM,iBAAiB;;;ACvB9B;AAAA;AAAO,IAAM,cAAc;;;ACA3B;AAAA;;;ACAA;AAAA;AAGO,IAAM,sBAAN,MAA0D;AAAA,EAW/D,YACEC,SAAc,WACd,YAAsB,CAAC,GACvB,UAAgB,WAChB,YAAkB,WAClB,UAAU,OACVC,QAAa,WACbC,UAAe,WACf,OAAO,GACP;AACA,SAAK,OAAOF;AACZ,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,MAAMC;AACX,SAAK,QAAQC;AACb,SAAK,MAAM;AAAA,EACb;AACF;AAEO,IAAM,uBAAN,MAA4D;AAAA,EAYjE,YACE,WAAiB,WACjB,WAAiB,WACjB,YAAsB,CAAC,GACvB,UAAgB,WAChB,YAAkB,WAClB,UAAgB,WAChB,YAAkB,WAClB,UAAU,OACV,OAAO,GACP;AACA,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,MAAM;AAAA,EACb;AACF;;;ACpEA;AAAA;;;ACAA;AAAA;AAKO,IAAM,QAAN,MAAY;AAAA,EAQjB,cAAc;AACZ,SAAK,YAAY;AACjB,SAAK,QAAQ;AACb,SAAK,WAAW,CAAC;AAEjB,UAAM,UAAU,IAAI,YAAY,eAAe;AAC/C,SAAK,aAAa,IAAI,WAAW,OAAO;AAAA,EAC1C;AAAA,EAEA,QAAe;AACb,QAAI,QAAQ,iBAAiB,KAAK,WAAW,SAAS,iBAAiB,KAAK,SAAS;AAErF,QAAI,OAAO,KAAK,YAAY,aAAa;AACvC,eAAS,IAAI;AAAA,IACf;AAEA,UAAM,UAAU,IAAI,YAAY,KAAK;AACrC,UAAM,KAAY,IAAI,WAAW,OAAO;AAExC,QAAI,CAAC,KAAK,WAAW;AACnB,SAAG,MAAM;AAAA,IACX;AACA,OAAG,KAAK,KAAK;AACb,OAAG,IAAI,KAAK,YAAY,cAAc;AACtC,UAAM,eAAe,eAAe,KAAK,QAAQ;AACjD,OAAG,IAAI,cAAc,KAAK,WAAW,SAAS,cAAc;AAE5D,QAAI,OAAO,KAAK,YAAY,aAAa;AACvC,SAAG,MAAM;AACT,SAAG,IAAI,KAAK,QAAQ,IAAI,OAAO,GAAG,SAAS,IAAI,cAAc;AAC7D,SAAG,IAAI,KAAK,QAAQ,MAAM,OAAO,GAAG,SAAS,IAAI,cAAc;AAAA,IACjE;AACA,WAAO;AAAA,EACT;AAAA,EAEA,cAAwB;AACtB,WAAO,mBAAmB,IAAI;AAAA,EAChC;AACF;;;ADnDA;AA4BO,IAAM,aAAN,MAAiB;AAAA,EAMtB,YAAYC,MAAmBC,YAAoB,YAAoB;AALvE;AACA;AACA;AACA;AAGE,uBAAK,KAAMD;AACX,uBAAK,WAAYC;AACjB,uBAAK,WAAY;AAAA,EACnB;AAAA,EAEA,MAAM,OAAsB;AAC1B,QAAI,CAAC,mBAAK,QAAO;AACf,yBAAK,OAAQ,MAAM,mBAAK,KAAI,QAAQ;AAAA,IACtC;AACA,WAAO,mBAAK;AAAA,EACd;AAAA,EAEA,IAAI,YAAoB;AACtB,WAAO,mBAAK;AAAA,EACd;AAAA,EAEA,MAAM,IAAI,GAAW,GAA0B;AAC7C,QAAI,CAAC,mBAAK,YAAW;AACnB,YAAM;AAAA,IACR;AAEA,uBAAK,OAAQ,MAAM,KAAK,KAAK;AAC7B,UAAM,QAAQ,kBAAkB,CAAC;AACjC,UAAM,QAAQ,kBAAkB,CAAC;AAEjC,UAAM,cAAc,IAAI,SAAS,OAAO,KAAK;AAC7C,UAAM,OAAO,QAAQ,KAAK,WAAW,MAAM,KAAK;AAEhD,UAAM,aAAa,MAAM,KAAK,QAAQ,aAAa,mBAAK,QAAO,GAAG,IAAI;AACtE,uBAAK,OAAQ;AACb,UAAM,mBAAK,KAAI,QAAQ,mBAAK,MAAK;AAAA,EACnC;AAAA,EAEA,MAAM,WAAW,GAAwB;AACvC,QAAI,CAAC,mBAAK,YAAW;AACnB,YAAM;AAAA,IACR;AAEA,QAAI,EAAE,SAAS,iBAAiB;AAC9B,aAAO,MAAM,EAAE,OAAO;AAAA,IACxB;AAEA,UAAM,IAAI,MAAM,EAAE,OAAO;AAEzB,UAAM,mBAAK,KAAI,IAAI,EAAE,OAAO,CAAC;AAC7B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,QAAQ,GAAwB;AACpC,QAAI,CAAC,mBAAK,YAAW;AACnB,YAAM;AAAA,IACR;AACA,QAAI,EAAE,SAAS,iBAAiB;AAC9B,aAAO,MAAM,EAAE,OAAO;AAAA,IACxB;AAEA,UAAM,IAAI,MAAM,EAAE,OAAO;AAKzB,UAAM,mBAAK,KAAI,IAAI,EAAE,OAAO,CAAC;AAC7B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,SAASC,IAAyB;AACtC,QAAI,CAAC,mBAAK,YAAW;AACnB,YAAM;AAAA,IACR;AAEA,QAAI,CAAC,kBAAkBA,EAAC,GAAG;AACzB,YAAM;AAAA,IACR;AACA,uBAAK,OAAQ,MAAM,mBAAK,KAAI,QAAQ;AACpC,UAAM,SAAS,MAAMA,GAAE,OAAO;AAC9B,UAAM,SAAS,MAAMA,GAAE,OAAO;AAE9B,UAAM,cAAc,IAAI,SAAS,QAAQ,MAAM;AAC/C,UAAM,OAAO,QAAQ,KAAK,WAAW,OAAO,KAAK;AAEjD,UAAM,aAAa,MAAM,KAAK,QAAQ,aAAa,mBAAK,QAAO,GAAG,IAAI;AACtE,uBAAK,OAAQ;AACb,UAAM,mBAAK,KAAI,QAAQ,mBAAK,MAAK;AAAA,EACnC;AAAA,EAEA,MAAM,SACJ,SACA,SACA,KACA,aACA,aACe;AACf,QAAI,MAAM,mBAAK,aAAY,GAAG;AAC5B,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACpC;AAEA,QAAI;AAEJ,QAAI,YAAY,SAAS,YAAY,MAAM;AACzC,YAAM,UAAU,MAAM,KAAK,SAAS,SAAS,SAAS,MAAM,GAAG,aAAa,WAAW;AACvF,UAAI,YAAY,MAAM;AACpB,wBAAgB,IAAI,WAAW,IAAI,KAAK,GAAG,OAAO;AAAA,MACpD,OAAO;AACL,wBAAgB,IAAI,WAAW,SAAS,IAAI,KAAK,CAAC;AAAA,MACpD;AAEA,aAAO,MAAM,KAAK,QAAQ,aAAa;AAAA,IACzC;AAEA,UAAM,aAAa,MAAM,QAAQ,OAAO;AACxC,UAAM,aAAa,MAAM,QAAQ,OAAO;AAExC,QAAI,YAAY,MAAM;AACpB,sBAAgB,IAAI,WAAW,YAAY,UAAU;AAAA,IACvD,OAAO;AACL,sBAAgB,IAAI,WAAW,YAAY,UAAU;AAAA,IACvD;AAEA,UAAM,KAAK,QAAQ,OAAO;AAC1B,WAAO,MAAM,KAAK,QAAQ,aAAa;AAAA,EACzC;AAAA,EAEA,MAAM,QAAQ,SAAmB,KAAW,KAAa,MAAqC;AAC5F,QAAI,MAAM,mBAAK,aAAY,GAAG;AAC5B,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACpC;AAEA,UAAM,IAAI,MAAM,KAAK,QAAQ,GAAG;AAChC,QAAI,OAAO,MAAM,aAAa;AAC5B,YAAM;AAAA,IACR;AAEA,YAAQ,EAAE,MAAM;AAAA,MACd,KAAK;AACH,eAAO,KAAK,QAAQ,OAAO;AAAA,MAC7B,KAAK,gBAAgB;AACnB,cAAM,OAAQ,EAAe,MAAM;AACnC,cAAM,aAAa,QAAQ,MAAM;AAEjC,YAAI,WAAW,KAAK,OAAO,WAAW,KAAK,GAAG;AAC5C,gBAAM;AAAA,QACR;AAEA,cAAM,cAAc,QAAQ,KAAK,WAAW,KAAK,KAAK;AACtD,eAAO,KAAK,SAAS,SAAS,GAAG,KAAK,MAAM,WAAW;AAAA,MACzD;AAAA,MACA,KAAK,kBAAkB;AACrB;AACA,YAAI;AAEJ,YAAI,KAAK,MAAM;AACb,gBAAM,UAAU,MAAM,KAAK,QAAQ,SAAU,EAAiB,QAAQ,MAAM,GAAG,IAAI;AACnF,0BAAgB,IAAI,WAAY,EAAiB,QAAQ,OAAO;AAAA,QAClE,OAAO;AACL,gBAAM,UAAU,MAAM,KAAK,QAAQ,SAAU,EAAiB,QAAQ,MAAM,GAAG,IAAI;AACnF,0BAAgB,IAAI,WAAW,SAAU,EAAiB,MAAM;AAAA,QAClE;AAEA,eAAO,KAAK,QAAQ,aAAa;AAAA,MACnC;AAAA,MACA,SAAS;AACP,cAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,GAAwE;AAChF,UAAM,QAAQ,kBAAkB,CAAC;AACjC,UAAM,OAAO,QAAQ,KAAK,WAAW,MAAM,KAAK;AAEhD,QAAI,UAAU,MAAM,KAAK,KAAK;AAC9B,UAAM,WAAqB,CAAC;AAE5B,aAAS,IAAI,GAAG,IAAI,KAAK,WAAW,KAAK;AACvC,YAAM,IAAI,MAAM,KAAK,QAAQ,OAAO;AACpC,UAAI,OAAO,MAAM,aAAa;AAC5B,cAAM;AAAA,MACR;AAEA,cAAQ,EAAE,MAAM;AAAA,QACd,KAAK;AACH,iBAAO;AAAA,YACL,KAAK,OAAO,GAAG;AAAA,YACf,OAAO,OAAO,GAAG;AAAA,YACjB;AAAA,UACF;AAAA,QACF,KAAK;AAQH,iBAAO;AAAA,YACL,KAAM,EAAe,MAAM,GAAG,OAAO;AAAA,YACrC,OAAQ,EAAe,MAAM,GAAG,OAAO;AAAA,YACvC;AAAA,UACF;AAAA,QACF,KAAK;AACH,cAAI,KAAK,IAAI;AACX,sBAAW,EAAiB;AAC5B,qBAAS,KAAM,EAAiB,MAAM;AAAA,UACxC,OAAO;AACL,sBAAW,EAAiB;AAC5B,qBAAS,KAAM,EAAiB,MAAM;AAAA,UACxC;AACA;AAAA,QACF;AACE,gBAAM;AAAA,MACV;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,kBAAkB;AAAA,EACpC;AAAA,EAEA,MAAM,OAAO,GAAW,GAA0C;AAChE,QAAI,CAAC,mBAAK,YAAW;AACnB,YAAM;AAAA,IACR;AAEA,QAAI,CAAC,mBAAmB,CAAC,GAAG;AAC1B,YAAM;AAAA,IACR;AACA,QAAI,CAAC,mBAAmB,CAAC,GAAG;AAC1B,YAAM;AAAA,IACR;AAEA,UAAM,QAAQ,kBAAkB,CAAC;AACjC,UAAM,QAAQ,kBAAkB,CAAC;AAEjC,UAAM,OAAO,QAAQ,KAAK,WAAW,MAAM,KAAK;AAEhD,UAAM,KAAK,IAAI,qBAAqB;AAEpC,OAAG,MAAM;AACT,OAAG,UAAU,MAAM,KAAK,KAAK;AAC7B,OAAG,SAAS;AACZ,OAAG,SAAS;AACZ,OAAG,WAAW;AAEd,QAAI,UAAU,MAAM,KAAK,KAAK;AAC9B,UAAM,WAAqB,CAAC;AAE5B,aAAS,IAAI,GAAG,IAAI,KAAK,WAAW,KAAK,GAAG;AAC1C,YAAM,IAAI,MAAM,KAAK,QAAQ,OAAO;AACpC,UAAI,OAAO,MAAM,aAAa;AAC5B,cAAM;AAAA,MACR;AAEA,cAAQ,EAAE,MAAM;AAAA,QACd,KAAK;AACH,gBAAM;AAAA,QACR,KAAK;AACH,cAAI,WAAW,MAAM,OAAQ,EAAe,MAAM,GAAG,KAAK,GAAG;AAC3D,eAAG,WAAY,EAAe,MAAM;AACpC,eAAG,WAAW,2BAA2B,CAAC,GAAG,QAAQ,GAAG,KAAK,SAAS;AACtE,kBAAM,cAAc,IAAI,SAAS,OAAO,KAAK;AAC7C,kBAAM,KAAK,WAAW,WAAW;AAEjC,kBAAM,aAAa,MAAM,KAAK,yBAAyB,MAAM,aAAa,QAAQ;AAElF,+BAAK,OAAQ;AACb,kBAAM,mBAAK,KAAI,QAAQ,UAAU;AACjC,eAAG,UAAU;AACb,mBAAO;AAAA,UACT;AACA;AAAA,QACF,KAAK;AACH,cAAI,KAAK,IAAI;AACX,sBAAW,EAAiB;AAC5B,qBAAS,KAAM,EAAiB,MAAM;AAAA,UACxC,OAAO;AACL,sBAAW,EAAiB;AAC5B,qBAAS,KAAM,EAAiB,MAAM;AAAA,UACxC;AACA;AAAA,QACF;AACE,gBAAM;AAAA,MACV;AAAA,IACF;AAEA,UAAM;AAAA,EACR;AAAA,EAEA,MAAM,QAAQ,GAAoC;AAChD,QAAI,WAAW,EAAE,OAAO,UAAU,KAAK,GAAG;AACxC,aAAO,IAAI,UAAU;AAAA,IACvB;AACA,WAAO,MAAM,mBAAK,KAAI,IAAI,EAAE,KAAK;AAAA,EACnC;AAAA,EAEA,MAAM,yBACJ,MACA,MACA,UACe;AACf,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK,GAAG;AAChD,YAAMC,WAAU,MAAM,KAAK,OAAO;AAClC,UAAI,KAAK,IAAI;AACX,eAAO,IAAI,WAAW,SAAS,IAAIA,QAAO;AAAA,MAC5C,OAAO;AACL,eAAO,IAAI,WAAWA,UAAS,SAAS,EAAE;AAAA,MAC5C;AACA,YAAM,KAAK,QAAQ,IAAI;AAAA,IACzB;AAEA,UAAM,UAAU,MAAM,KAAK,OAAO;AAClC,WAAO;AAAA,EACT;AAAA,EAYA,MAAM,OAAO,GAA0B;AACrC,QAAI,CAAC,mBAAK,YAAW;AACnB,YAAM;AAAA,IACR;AAEA,UAAM,QAAQ,kBAAkB,CAAC;AACjC,UAAM,OAAO,QAAQ,KAAK,WAAW,MAAM,KAAK;AAEhD,QAAI,UAAU,mBAAK;AACnB,UAAM,WAAqB,CAAC;AAE5B,aAAS,IAAI,GAAG,IAAI,mBAAK,YAAW,KAAK,GAAG;AAC1C,YAAM,IAAI,MAAM,KAAK,QAAQ,OAAO;AACpC,UAAI,OAAO,MAAM,aAAa;AAC5B,cAAM;AAAA,MACR;AACA,cAAQ,EAAE,MAAM;AAAA,QACd,KAAK;AACH,gBAAM;AAAA,QACR,KAAK;AACH,cAAI,WAAW,MAAM,OAAQ,EAAe,MAAM,GAAG,KAAK,GAAG;AAC3D,kBAAM,KAAK,YAAY,MAAM,OAAO,QAAQ;AAC5C;AAAA,UACF;AACA,gBAAM;AAAA,QACR,KAAK;AACH,cAAI,KAAK,IAAI;AACX,sBAAW,EAAiB;AAC5B,qBAAS,KAAM,EAAiB,MAAM;AAAA,UACxC,OAAO;AACL,sBAAW,EAAiB;AAC5B,qBAAS,KAAM,EAAiB,MAAM;AAAA,UACxC;AACA;AAAA,QACF;AACE,gBAAM;AAAA,MACV;AAAA,IACF;AAEA,UAAM;AAAA,EACR;AAAA,EAEA,MAAM,YAAY,MAAsB,OAAa,UAAmC;AACtF,QAAI,SAAS,WAAW,GAAG;AACzB,yBAAK,OAAQ;AACb,YAAM,mBAAK,KAAI,QAAQ,mBAAK,MAAK;AACjC;AAAA,IACF;AAEA,UAAM,WAAW,SAAS,SAAS,SAAS;AAC5C,QAAI,SAAS,SAAS,GAAG;AACvB,yBAAK,OAAQ,SAAS;AACtB,YAAM,mBAAK,KAAI,QAAQ,mBAAK,MAAK;AAAA,IACnC;AAEA,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK,GAAG;AAChD,UAAI,CAAC,WAAW,SAAS,GAAG,OAAO,UAAU,KAAK,GAAG;AACnD,YAAI;AACJ,YAAI,KAAK,IAAI;AACX,oBAAU,IAAI,WAAW,SAAS,IAAI,QAAQ;AAAA,QAChD,OAAO;AACL,oBAAU,IAAI,WAAW,UAAU,SAAS,EAAE;AAAA,QAChD;AACA,cAAM,KAAK,QAAQ,OAAO;AAE1B,cAAM,aAAa,MAAM,KAAK,yBAAyB,MAAM,SAAS,SAAS,MAAM,GAAG,CAAC,CAAC;AAE1F,2BAAK,OAAQ;AACb,cAAM,mBAAK,KAAI,QAAQ,mBAAK,MAAK;AACjC;AAAA,MACF;AAEA,UAAI,MAAM,GAAG;AACX,2BAAK,OAAQ;AACb,cAAM,mBAAK,KAAI,QAAQ,mBAAK,MAAK;AACjC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,QAAQ,KAAW,GAA8C;AACrE,UAAM,IAAI,MAAM,KAAK,QAAQ,GAAG;AAChC,QAAI,OAAO,MAAM,aAAa;AAC5B,YAAM;AAAA,IACR;AAEA,YAAQ,EAAE,MAAM;AAAA,MACd,KAAK;AACH,cAAM,EAAE,CAAC;AACT;AAAA,MACF,KAAK;AACH,cAAM,EAAE,CAAC;AACT;AAAA,MACF,KAAK;AACH,cAAM,EAAE,CAAC;AACT,cAAM,KAAK,KAAM,EAAiB,QAAQ,CAAC;AAC3C,cAAM,KAAK,KAAM,EAAiB,QAAQ,CAAC;AAC3C;AAAA,MACF;AACE,cAAM;AAAA,IACV;AAAA,EACF;AAAA,EAEA,MAAM,KAAK,SAAe,GAA8C;AACtE,QAAI,WAAW,QAAQ,OAAO,UAAU,KAAK,GAAG;AAC9C,gBAAU,MAAM,KAAK,KAAK;AAAA,IAC5B;AACA,UAAM,KAAK,KAAK,SAAS,CAAC;AAAA,EAC5B;AAAA,EAEA,MAAM,4BAA4B,GAAW,SAA6C;AACxF,UAAM,KAAK,MAAM,KAAK,wBAAwB,GAAG,OAAO;AACxD,OAAG,WAAW,2BAA2B,GAAG,UAAU,KAAK,SAAS;AACpE,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,wBAAwB,GAAW,SAA6C;AACpF,QAAI,WAAW,QAAQ,OAAO,UAAU,KAAK,GAAG;AAC9C,gBAAU,MAAM,KAAK,KAAK;AAAA,IAC5B;AAEA,UAAM,EAAE,OAAO,MAAM,IAAI,MAAM,KAAK,cAAc,GAAG,OAAO;AAC5D,UAAM,KAAK,IAAI,oBAAoB;AACnC,OAAG,OAAO;AACV,OAAG,WAAW,MAAM;AACpB,QAAI,OAAO,MAAM,YAAY,aAAa;AACxC,SAAG,SAAS,MAAM,QAAQ;AAC1B,SAAG,WAAW,MAAM,QAAQ;AAAA,IAC9B,OAAO;AACL,SAAG,SAAS;AACZ,SAAG,WAAW;AAAA,IAChB;AACA,OAAG,MAAM,kBAAkB,CAAC;AAC5B,OAAG,QAAQ,kBAAkB,KAAK;AAElC,QAAI,MAAM,WAAW;AACnB,SAAG,MAAM;AAAA,IACX,OAAO;AACL,SAAG,MAAM;AAAA,IACX;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,cAAc,GAAW,SAA0D;AACvF,UAAM,IAAI,IAAI,MAAM;AACpB,QAAI;AAEJ,UAAM,QAAQ,kBAAkB,CAAC;AACjC,UAAM,OAAO,QAAQ,KAAK,WAAW,MAAM,KAAK;AAChD,QAAI,CAAC,SAAS;AACZ,gBAAU,MAAM,KAAK,KAAK;AAAA,IAC5B;AACA,QAAI,UAAU;AAEd,SAAK,EAAE,QAAQ,GAAG,EAAE,QAAQ,KAAK,WAAW,EAAE,SAAS,GAAG;AACxD,YAAM,IAAI,MAAM,KAAK,QAAQ,OAAO;AACpC,UAAI,OAAO,MAAM,aAAa;AAC5B,cAAM;AAAA,MACR;AACA,cAAQ,EAAE,MAAM;AAAA,QACd,KAAK;AACH,iBAAO,EAAE,OAAO,GAAG,OAAO,OAAO,GAAG,EAAE;AAAA,QACxC,KAAK;AACH,cAAI,WAAW,MAAM,OAAQ,EAAe,MAAM,GAAG,KAAK,GAAG;AAC3D,cAAE,YAAY;AACd,mBAAO,EAAE,OAAO,GAAG,OAAQ,EAAe,MAAM,GAAG,OAAO,EAAE;AAAA,UAC9D;AACA,YAAE,UAAU;AAAA,YACV,KAAM,EAAe,MAAM;AAAA,YAC3B,OAAQ,EAAe,MAAM;AAAA,UAC/B;AACA,iBAAO,EAAE,OAAO,GAAG,OAAQ,EAAe,MAAM,GAAG,OAAO,EAAE;AAAA,QAC9D,KAAK;AACH,cAAI,KAAK,EAAE,QAAQ;AACjB,sBAAW,EAAiB;AAC5B,yBAAc,EAAiB;AAAA,UACjC,OAAO;AACL,sBAAW,EAAiB;AAC5B,yBAAc,EAAiB;AAAA,UACjC;AACA;AAAA,QACF;AACE,gBAAM;AAAA,MACV;AAEA,UAAI,CAAC,WAAW,WAAW,OAAO,UAAU,KAAK,GAAG;AAClD,wBAAgB,EAAE,YAAY,EAAE,KAAK;AACrC,UAAE,SAAS,KAAK,UAAU;AAAA,MAC5B;AAAA,IACF;AACA,UAAM;AAAA,EACR;AAAA,EAEA,MAAM,qBAAqB,GAAW,GAA0C;AAC9E,UAAM,KAAK,IAAI,qBAAqB;AACpC,OAAG,MAAM;AACT,OAAG,UAAU,MAAM,KAAK,KAAK;AAC7B,QAAI,MAAM,OAAO,GAAG;AACpB,QAAI,QAAQ,OAAO,GAAG;AACtB,QAAI,WAAqB,CAAC;AAC1B,QAAI;AACF,YAAM,MAAM,MAAM,KAAK,IAAI,CAAC;AAC5B,YAAM,IAAI;AACV,cAAQ,IAAI;AACZ,iBAAW,IAAI;AAAA,IACjB,SAAS,KAAP;AACA,UAAI,QAAQ,gBAAgB;AAC1B,cAAM;AAAA,MACR;AAAA,IACF;AAEA,QAAI,OAAO,QAAQ,eAAe,OAAO,UAAU,aAAa;AAC9D,YAAM;AAAA,IACR;AAEA,OAAG,SAAS,kBAAkB,GAAG;AACjC,OAAG,WAAW,kBAAkB,KAAK;AAErC,QAAI,WAAW,GAAG,OAAO,OAAO,UAAU,KAAK,GAAG;AAChD,SAAG,SAAS;AAAA,IACd;AAEA,OAAG,WAAW,2BAA2B,UAAU,KAAK,SAAS;AACjE,UAAM,KAAK,IAAI,GAAG,CAAC;AAEnB,OAAG,SAAS,kBAAkB,CAAC;AAC/B,OAAG,WAAW,kBAAkB,CAAC;AACjC,OAAG,UAAU,MAAM,KAAK,KAAK;AAE7B,WAAO;AAAA,EACT;AAAA,EAGA,MAAM,SAAS,SAA8B;AAC3C,QAAI,MAAM;AAEV,UAAM,KAAK,KAAK,SAAS,OAAO,MAAY;AAC1C,YAAM,IAAI,MAAM,EAAE,OAAO;AACzB,UAAI;AACJ,UAAI;AAEJ,cAAQ,EAAE,MAAM;AAAA,QACd,KAAK;AACH;AAAA,QACF,KAAK;AAEH,kBAAQ,IAAI,IAAI,EAAE,OAAO,mBAAmB;AAC5C;AAAA,QACF,KAAK;AACH,eAAK,CAAE,EAAiB,OAAO,OAAO,GAAI,EAAiB,OAAO,OAAO,CAAC;AAC1E,uBAAa;AAEb,aAAG,QAAQ,CAAC,GAAG,MAAM;AACnB,gBAAI,MAAM,KAAK;AACb,iBAAG,KAAK,QAAQ;AAChB,4BAAc,IAAI,GAAG;AAAA;AACrB,qBAAO;AAAA,YACT;AAAA,UACF,CAAC;AAED,kBAAQ,IAAI,IAAI,EAAE,OAAO,WAAW,GAAG,MAAM;AAE7C,kBAAQ,IAAI,UAAU;AACtB;AAAA,QACF;AACE;AAAA,MACJ;AAAA,IACF,CAAC;AAGD,YAAQ,IAAI;AAAA,CAAK;AAAA,EACnB;AAAA,EAEA,MAAM,cAAc,SAA8B;AAChD,QAAI,WAAW,QAAQ,OAAO,UAAU,KAAK,GAAG;AAC9C,gBAAU,MAAM,KAAK,KAAK;AAAA,IAC5B;AAEA,YAAQ;AAAA,MACN;AAAA,0CAAqD,QAAQ,OAAO,EAAE,SAAS,EAAE;AAAA;AAAA,IACnF;AACA,UAAM,KAAK,SAAS,SAAS;AAE7B,YAAQ;AAAA,MACN,kDAAkD,QAAQ,OAAO,EAAE,SAAS,EAAE;AAAA;AAAA;AAAA,IAChF;AAAA,EACF;AACF;AAvmBE;AACA;AACA;AACA;;;AEhCF;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;",
  "names": ["e", "Buffer", "fill", "string", "read", "i", "e", "compare", "byteLength", "mul", "sub", "self", "listeners", "e", "copy", "emit", "domain", "addListener", "once", "removeListener", "removeAllListeners", "Buffer", "isBuffer", "init", "inited", "lookup", "revLookup", "Arr", "tripletToBase64", "encodeChunk", "e", "write", "kMaxLength", "createBuffer", "allocUnsafe", "from", "fromArrayBuffer", "fromString", "fromObject", "assertSize", "alloc", "fill", "checked", "string", "byteLength", "fromArrayLike", "internalIsBuffer", "isnan", "utf8ToBytes", "base64ToBytes", "slowToString", "hexSlice", "utf8Slice", "asciiSlice", "latin1Slice", "base64Slice", "utf16leSlice", "swap", "bidirectionalIndexOf", "arrayIndexOf", "read", "i", "hexWrite", "utf8Write", "blitBuffer", "asciiWrite", "asciiToBytes", "latin1Write", "base64Write", "ucs2Write", "utf16leToBytes", "decodeCodePointsArray", "MAX_ARGUMENTS_LENGTH", "toHex", "checkOffset", "checkInt", "objectWriteUInt16", "objectWriteUInt32", "checkIEEE754", "writeFloat", "writeDouble", "base64clean", "stringtrim", "INVALID_BASE64_RE", "isFastBuffer", "isSlowBuffer", "toString", "init_buffer", "compare", "isEncoding", "concat", "swap16", "swap32", "swap64", "equals", "includes", "indexOf", "lastIndexOf", "toJSON", "slice", "readUIntLE", "mul", "readUIntBE", "readUInt8", "readUInt16LE", "readUInt16BE", "readUInt32LE", "readUInt32BE", "readIntLE", "readIntBE", "readInt8", "readInt16LE", "readInt16BE", "readInt32LE", "readInt32BE", "readFloatLE", "readFloatBE", "readDoubleLE", "readDoubleBE", "writeUIntLE", "writeUIntBE", "writeUInt8", "writeUInt16LE", "writeUInt16BE", "writeUInt32LE", "writeUInt32BE", "writeIntLE", "sub", "writeIntBE", "writeInt8", "writeInt16LE", "writeInt16BE", "writeInt32LE", "writeInt32BE", "writeFloatLE", "writeFloatBE", "writeDoubleLE", "writeDoubleBE", "copy", "defaultSetTimout", "defaultClearTimeout", "runTimeout", "cachedSetTimeout", "e", "runClearTimeout", "cachedClearTimeout", "cleanUpNextTick", "draining", "currentQueue", "queue", "queueIndex", "drainQueue", "nextTick", "Item", "noop", "binding", "cwd", "chdir", "umask", "hrtime", "performanceNow", "performance", "uptime", "startTime", "title", "platform", "browser", "env", "argv", "version", "versions", "release", "config", "on", "addListener", "once", "off", "removeListener", "removeAllListeners", "emit", "inherits", "inspect", "isArray", "isBuffer", "x", "set", "e", "Buffer", "add", "Buffer", "inspect", "concat", "err", "self", "NodeError", "includes", "inherits", "deprecate", "config", "Buffer", "realHasInstance", "get", "set", "keys", "get", "self", "set", "Buffer", "fill", "Buffer", "isEncoding", "self", "once", "_key", "noop", "onlegacyfinish", "onfinish", "onend", "onerror", "onclose", "onrequest", "createReadableStreamAsyncIterator", "EElistenerCount", "Buffer", "debug", "from", "prependListener", "get", "set", "indexOf", "self", "n", "once", "noop", "from", "_key", "Buffer", "require_blake", "Buffer", "Buffer", "e", "Buffer", "Buffer", "e", "Buffer", "module", "module", "module", "module", "module", "compare", "square", "isOdd", "isNegative", "bitLength", "abs", "exp", "mod", "isPrime", "bits", "utils", "bitLength", "isOdd", "square", "module", "buildSqrt", "bitLength", "module", "utils", "module", "buildSqrt", "module", "module", "buildMultiexp", "module", "buildMultiexp", "module", "F", "isOdd", "utils", "buildFFT", "module", "module", "module", "module", "utils", "buildFFT", "bitLength", "isOdd", "isNegative", "module", "bits", "naf", "F", "r", "buildPairing", "utils", "buildFFT", "bitLength", "isOdd", "isNegative", "module", "bits", "naf", "F", "buildPairing", "require_browser", "fromString", "toString", "e", "bits", "exp", "F", "e", "F", "F", "bits", "e", "exp", "log2", "F", "_revTable", "_revSlow", "bits", "log2", "self", "e", "init", "alloc", "u32", "Buffer", "import_wasmcurves", "F", "e", "exp", "F", "slice", "e", "e", "_key", "_bytes", "_currentRoot", "k", "_currentRoot", "k", "_data", "_root", "_key", "_value", "_db", "_writable", "e", "nodeKey"]
}
