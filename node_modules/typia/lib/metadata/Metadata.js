"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metadata = void 0;
var Writable_1 = require("../typings/Writable");
var ArrayUtil_1 = require("../utils/ArrayUtil");
var MetadataAlias_1 = require("./MetadataAlias");
var MetadataArray_1 = require("./MetadataArray");
var MetadataObject_1 = require("./MetadataObject");
var MetadataProperty_1 = require("./MetadataProperty");
var MetadataResolved_1 = require("./MetadataResolved");
var MetadataTuple_1 = require("./MetadataTuple");
var Metadata = (function () {
    function Metadata(props) {
        this.parent_resolved_ = false;
        this.any = props.any;
        this.required = props.required;
        this.optional = props.optional;
        this.nullable = props.nullable;
        this.functional = props.functional;
        this.resolved = props.resolved;
        this.atomics = props.atomics;
        this.constants = props.constants;
        this.templates = props.templates;
        this.rest = props.rest;
        this.arrays = props.arrays;
        this.tuples = props.tuples;
        this.objects = props.objects;
        this.aliases = props.aliases;
        this.natives = props.natives;
        this.sets = props.sets;
        this.maps = props.maps;
    }
    Metadata.create = function (props) {
        return new Metadata(props);
    };
    Metadata.initialize = function (parentResolved) {
        if (parentResolved === void 0) { parentResolved = false; }
        var meta = this.create({
            any: false,
            nullable: false,
            required: true,
            optional: false,
            functional: false,
            resolved: null,
            constants: [],
            atomics: [],
            templates: [],
            arrays: [],
            tuples: [],
            objects: [],
            aliases: [],
            rest: null,
            natives: [],
            sets: [],
            maps: [],
        });
        meta.parent_resolved_ = parentResolved;
        return meta;
    };
    Metadata.prototype.toJSON = function () {
        return {
            any: this.any,
            required: this.required,
            optional: this.optional,
            nullable: this.nullable,
            functional: this.functional,
            atomics: this.atomics.slice(),
            constants: JSON.parse(JSON.stringify(this.constants)),
            templates: this.templates.map(function (tpl) {
                return tpl.map(function (meta) { return meta.toJSON(); });
            }),
            resolved: this.resolved ? this.resolved.toJSON() : null,
            rest: this.rest ? this.rest.toJSON() : null,
            arrays: this.arrays.map(function (array) { return array.name; }),
            tuples: this.tuples.map(function (tuple) { return tuple.name; }),
            objects: this.objects.map(function (obj) { return obj.name; }),
            aliases: this.aliases.map(function (alias) { return alias.name; }),
            natives: this.natives.slice(),
            sets: this.sets.map(function (meta) { return meta.toJSON(); }),
            maps: this.maps.map(function (entry) { return ({
                key: entry.key.toJSON(),
                value: entry.value.toJSON(),
            }); }),
        };
    };
    Metadata.from = function (meta, collection) {
        var e_1, _a, _b, e_2, _c, e_3, _d, e_4, _e;
        var _this = this;
        var dict = {
            objects: new Map(collection.objects.map(function (obj) { return [
                obj.name,
                MetadataObject_1.MetadataObject._From_without_properties(obj),
            ]; })),
            aliases: new Map(collection.aliases.map(function (alias) { return [
                alias.name,
                MetadataAlias_1.MetadataAlias._From_without_value(alias),
            ]; })),
            arrays: new Map(collection.arrays.map(function (arr) { return [
                arr.name,
                MetadataArray_1.MetadataArray._From_without_value(arr),
            ]; })),
            tuples: new Map(collection.tuples.map(function (tpl) { return [
                tpl.name,
                MetadataTuple_1.MetadataTuple._From_without_elements(tpl),
            ]; })),
        };
        try {
            for (var _f = __values(collection.objects), _g = _f.next(); !_g.done; _g = _f.next()) {
                var obj = _g.value;
                var initialized = dict.objects.get(obj.name);
                (_b = initialized.properties).push.apply(_b, __spreadArray([], __read(obj.properties.map(function (prop) {
                    return MetadataProperty_1.MetadataProperty._From(prop, dict);
                })), false));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _h = __values(collection.aliases), _j = _h.next(); !_j.done; _j = _h.next()) {
                var alias = _j.value;
                (0, Writable_1.Writable)(dict.aliases.get(alias.name)).value = this._From(alias.value, dict);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var _k = __values(collection.arrays), _l = _k.next(); !_l.done; _l = _k.next()) {
                var array = _l.value;
                (0, Writable_1.Writable)(dict.arrays.get(array.name)).value = this._From(array.value, dict);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_d = _k.return)) _d.call(_k);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _m = __values(collection.tuples), _o = _m.next(); !_o.done; _o = _m.next()) {
                var tuple = _o.value;
                (0, Writable_1.Writable)(dict.tuples.get(tuple.name)).elements =
                    tuple.elements.map(function (elem) { return _this._From(elem, dict); });
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_e = _m.return)) _e.call(_m);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return this._From(meta, dict);
    };
    Metadata._From = function (meta, dict) {
        var _this = this;
        return this.create({
            any: meta.any,
            required: meta.required,
            optional: meta.optional,
            nullable: meta.nullable,
            functional: meta.functional,
            constants: JSON.parse(JSON.stringify(meta.constants)),
            atomics: meta.atomics.slice(),
            templates: meta.templates.map(function (tpl) {
                return tpl.map(function (meta) { return _this._From(meta, dict); });
            }),
            resolved: meta.resolved
                ? MetadataResolved_1.MetadataResolved._From(meta.resolved, dict)
                : null,
            rest: meta.rest ? this._From(meta.rest, dict) : null,
            arrays: meta.arrays.map(function (id) {
                var array = dict.arrays.get(id);
                if (array === undefined)
                    throw new Error("Error on Metadata.from(): failed to find array \"".concat(id, "\"."));
                return array;
            }),
            tuples: meta.tuples.map(function (id) {
                var tuple = dict.tuples.get(id);
                if (tuple === undefined)
                    throw new Error("Error on Metadata.from(): failed to find tuple \"".concat(id, "\"."));
                return tuple;
            }),
            objects: meta.objects.map(function (name) {
                var found = dict.objects.get(name);
                if (found === undefined)
                    throw new Error("Error on Metadata.from(): failed to find object \"".concat(name, "\"."));
                return found;
            }),
            aliases: meta.aliases.map(function (alias) {
                var found = dict.aliases.get(alias);
                if (found === undefined)
                    throw new Error("Error on Metadata.from(): failed to find alias \"".concat(alias, "\"."));
                return found;
            }),
            natives: meta.natives.slice(),
            sets: meta.sets.map(function (meta) { return _this._From(meta, dict); }),
            maps: meta.maps.map(function (entry) { return ({
                key: _this._From(entry.key, dict),
                value: _this._From(entry.value, dict),
            }); }),
        });
    };
    Metadata.prototype.getName = function () {
        var _a;
        (_a = this.name_) !== null && _a !== void 0 ? _a : (this.name_ = getName(this));
        return this.name_;
    };
    Metadata.prototype.empty = function () {
        return this.bucket() === 0 || this.size() === 0;
    };
    Metadata.prototype.size = function () {
        return ((this.any ? 1 : 0) +
            (this.resolved ? 1 : 0) +
            (this.functional ? 1 : 0) +
            (this.rest ? this.rest.size() : 0) +
            this.templates.length +
            this.atomics.length +
            this.constants
                .map(function (c) { return c.values.length; })
                .reduce(function (x, y) { return x + y; }, 0) +
            this.arrays.length +
            this.tuples.length +
            this.natives.length +
            this.maps.length +
            this.sets.length +
            this.objects.length +
            this.aliases.length);
    };
    Metadata.prototype.bucket = function () {
        return ((this.any ? 1 : 0) +
            (this.resolved ? 1 : 0) +
            (this.functional ? 1 : 0) +
            (this.templates.length ? 1 : 0) +
            (this.atomics.length ? 1 : 0) +
            (this.constants.length ? 1 : 0) +
            (this.rest ? this.rest.size() : 0) +
            (this.arrays.length ? 1 : 0) +
            (this.tuples.length ? 1 : 0) +
            (this.natives.length ? 1 : 0) +
            (this.sets.length ? 1 : 0) +
            (this.maps.length ? 1 : 0) +
            (this.objects.length ? 1 : 0) +
            (this.aliases.length ? 1 : 0));
    };
    Metadata.prototype.isConstant = function () {
        return this.bucket() === (this.constants.length ? 1 : 0);
    };
    Metadata.prototype.isRequired = function () {
        return this.required === true && this.optional === false;
    };
    Metadata.prototype.isUnionBucket = function () {
        var size = this.bucket();
        var emended = this.constants.length ? size - 1 : size;
        return emended > 1;
    };
    Metadata.prototype.getSoleLiteral = function () {
        if (this.size() === 1 &&
            this.constants.length === 1 &&
            this.constants[0].type === "string" &&
            this.constants[0].values.length === 1)
            return this.constants[0].values[0];
        else
            return null;
    };
    Metadata.prototype.isSoleLiteral = function () {
        return this.getSoleLiteral() !== null;
    };
    Metadata.prototype.isParentResolved = function () {
        return this.parent_resolved_;
    };
    return Metadata;
}());
exports.Metadata = Metadata;
(function (Metadata) {
    Metadata.intersects = function (x, y) {
        var e_5, _a, e_6, _b;
        if (x.any || y.any)
            return true;
        if (x.isRequired() === false && false === y.isRequired())
            return true;
        if (x.nullable === true && true === y.nullable)
            return true;
        if (x.functional === true && y.functional === true)
            return true;
        if (x.arrays.length && y.arrays.length)
            return true;
        if (x.tuples.length && y.tuples.length)
            return true;
        if (x.objects.length && y.objects.length)
            return true;
        if (x.aliases.length && y.aliases.length)
            return true;
        if (x.natives.length && y.natives.length)
            if (x.natives.some(function (xn) { return y.natives.some(function (yn) { return xn === yn; }); }))
                return true;
        try {
            for (var _c = __values(x.atomics), _d = _c.next(); !_d.done; _d = _c.next()) {
                var atomic = _d.value;
                if (y.atomics.includes(atomic))
                    return true;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_5) throw e_5.error; }
        }
        var _loop_1 = function (constant) {
            var opposite = y.constants.find(function (elem) { return elem.type === constant.type; });
            if (opposite === undefined)
                return "continue";
            var values = new Set(__spreadArray(__spreadArray([], __read(constant.values), false), __read(opposite.values), false));
            if (values.size !== constant.values.length + opposite.values.length)
                return { value: true };
        };
        try {
            for (var _e = __values(x.constants), _f = _e.next(); !_f.done; _f = _e.next()) {
                var constant = _f.value;
                var state_1 = _loop_1(constant);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return false;
    };
    Metadata.covers = function (x, y, level) {
        var e_7, _a, e_8, _b, e_9, _c, e_10, _d, e_11, _e, e_12, _f, e_13, _g;
        if (level === void 0) { level = 0; }
        if (x === y)
            return false;
        else if (x.any)
            return true;
        else if (y.any)
            return false;
        if (level === 0) {
            var _loop_2 = function (ya) {
                if (!x.arrays.some(function (xa) {
                    return Metadata.covers(xa.value, ya.value, level + 1);
                })) {
                    return { value: false };
                }
            };
            try {
                for (var _h = __values(y.arrays), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var ya = _j.value;
                    var state_2 = _loop_2(ya);
                    if (typeof state_2 === "object")
                        return state_2.value;
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
                }
                finally { if (e_7) throw e_7.error; }
            }
            var _loop_3 = function (yt) {
                if (yt.elements.length !== 0 &&
                    x.tuples.some(function (xt) {
                        return xt.elements.length >= yt.elements.length &&
                            xt.elements
                                .slice(yt.elements.length)
                                .every(function (xv, i) {
                                return Metadata.covers(xv, yt.elements[i], level + 1);
                            });
                    }) === false)
                    return { value: false };
            };
            try {
                for (var _k = __values(y.tuples), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var yt = _l.value;
                    var state_3 = _loop_3(yt);
                    if (typeof state_3 === "object")
                        return state_3.value;
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        var _loop_4 = function (yo) {
            if (x.objects.some(function (xo) { return MetadataObject_1.MetadataObject.covers(xo, yo); }) === false)
                return { value: false };
        };
        try {
            for (var _m = __values(y.objects), _o = _m.next(); !_o.done; _o = _m.next()) {
                var yo = _o.value;
                var state_4 = _loop_4(yo);
                if (typeof state_4 === "object")
                    return state_4.value;
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
            }
            finally { if (e_9) throw e_9.error; }
        }
        var _loop_5 = function (yd) {
            if (x.aliases.some(function (xd) { return xd.name === yd.name; }) === false)
                return { value: false };
        };
        try {
            for (var _p = __values(y.aliases), _q = _p.next(); !_q.done; _q = _p.next()) {
                var yd = _q.value;
                var state_5 = _loop_5(yd);
                if (typeof state_5 === "object")
                    return state_5.value;
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
            }
            finally { if (e_10) throw e_10.error; }
        }
        var _loop_6 = function (yn) {
            if (x.natives.some(function (xn) { return xn === yn; }) === false)
                return { value: false };
        };
        try {
            for (var _r = __values(y.natives), _s = _r.next(); !_s.done; _s = _r.next()) {
                var yn = _s.value;
                var state_6 = _loop_6(yn);
                if (typeof state_6 === "object")
                    return state_6.value;
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
            }
            finally { if (e_11) throw e_11.error; }
        }
        var _loop_7 = function (ys) {
            if (x.sets.some(function (xs) { return Metadata.covers(xs, ys); }) === false)
                return { value: false };
        };
        try {
            for (var _t = __values(y.sets), _u = _t.next(); !_u.done; _u = _t.next()) {
                var ys = _u.value;
                var state_7 = _loop_7(ys);
                if (typeof state_7 === "object")
                    return state_7.value;
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_u && !_u.done && (_f = _t.return)) _f.call(_t);
            }
            finally { if (e_12) throw e_12.error; }
        }
        if (y.atomics.some(function (atomic) { return x.atomics.includes(atomic) === false; }))
            return false;
        var _loop_8 = function (yc) {
            if (x.atomics.some(function (type) { return yc.type === type; }))
                return "continue";
            var xc = x.constants.find(function (elem) { return elem.type === yc.type; });
            if (xc === undefined)
                return { value: false };
            else if (yc.values.some(function (yv) { return xc.values.includes(yv) === false; }))
                return { value: false };
        };
        try {
            for (var _v = __values(y.constants), _w = _v.next(); !_w.done; _w = _v.next()) {
                var yc = _w.value;
                var state_8 = _loop_8(yc);
                if (typeof state_8 === "object")
                    return state_8.value;
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_w && !_w.done && (_g = _v.return)) _g.call(_v);
            }
            finally { if (e_13) throw e_13.error; }
        }
        if (x.functional === false && y.functional)
            return false;
        return true;
    };
    Metadata.merge = function (x, y) {
        var e_14, _a, e_15, _b, e_16, _c, e_17, _d, e_18, _e;
        var _f, _g;
        var output = Metadata.create({
            any: x.any || y.any,
            nullable: x.nullable || y.nullable,
            required: x.required && y.required,
            optional: x.optional || y.optional,
            functional: x.functional || y.functional,
            resolved: x.resolved !== null && y.resolved !== null
                ?
                    MetadataResolved_1.MetadataResolved.create({
                        original: Metadata.merge(x.resolved.original, y.resolved.original),
                        returns: Metadata.merge(x.resolved.returns, y.resolved.returns),
                    })
                : (_f = x.resolved) !== null && _f !== void 0 ? _f : y.resolved,
            atomics: __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(x.atomics), false), __read(y.atomics), false))), false),
            constants: __spreadArray([], __read(x.constants), false),
            templates: x.templates.slice(),
            rest: x.rest !== null && y.rest !== null
                ? Metadata.merge(x.rest, y.rest)
                : (_g = x.rest) !== null && _g !== void 0 ? _g : y.rest,
            arrays: x.arrays.slice(),
            tuples: x.tuples.slice(),
            objects: x.objects.slice(),
            aliases: x.aliases.slice(),
            natives: __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(x.natives), false), __read(y.natives), false))), false),
            sets: x.sets.slice(),
            maps: x.maps.slice(),
        });
        var _loop_9 = function (constant) {
            var e_19, _t;
            var target = ArrayUtil_1.ArrayUtil.take(output.constants, function (elem) { return elem.type === constant.type; }, function () { return ({
                type: constant.type,
                values: [],
            }); });
            try {
                for (var _u = (e_19 = void 0, __values(constant.values)), _v = _u.next(); !_v.done; _v = _u.next()) {
                    var value = _v.value;
                    ArrayUtil_1.ArrayUtil.add(target.values, value);
                }
            }
            catch (e_19_1) { e_19 = { error: e_19_1 }; }
            finally {
                try {
                    if (_v && !_v.done && (_t = _u.return)) _t.call(_u);
                }
                finally { if (e_19) throw e_19.error; }
            }
        };
        try {
            for (var _h = __values(y.constants), _j = _h.next(); !_j.done; _j = _h.next()) {
                var constant = _j.value;
                _loop_9(constant);
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
            }
            finally { if (e_14) throw e_14.error; }
        }
        try {
            for (var _k = __values(y.arrays), _l = _k.next(); !_l.done; _l = _k.next()) {
                var array = _l.value;
                ArrayUtil_1.ArrayUtil.set(output.arrays, array, function (elem) { return elem.name; });
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
            }
            finally { if (e_15) throw e_15.error; }
        }
        try {
            for (var _m = __values(y.tuples), _o = _m.next(); !_o.done; _o = _m.next()) {
                var tuple = _o.value;
                ArrayUtil_1.ArrayUtil.set(output.tuples, tuple, function (elem) { return elem.name; });
            }
        }
        catch (e_16_1) { e_16 = { error: e_16_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
            }
            finally { if (e_16) throw e_16.error; }
        }
        try {
            for (var _p = __values(y.objects), _q = _p.next(); !_q.done; _q = _p.next()) {
                var obj = _q.value;
                ArrayUtil_1.ArrayUtil.set(output.objects, obj, function (elem) { return elem.name; });
            }
        }
        catch (e_17_1) { e_17 = { error: e_17_1 }; }
        finally {
            try {
                if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
            }
            finally { if (e_17) throw e_17.error; }
        }
        try {
            for (var _r = __values(y.aliases), _s = _r.next(); !_s.done; _s = _r.next()) {
                var alias = _s.value;
                ArrayUtil_1.ArrayUtil.set(output.aliases, alias, function (elem) { return elem.name; });
            }
        }
        catch (e_18_1) { e_18 = { error: e_18_1 }; }
        finally {
            try {
                if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
            }
            finally { if (e_18) throw e_18.error; }
        }
        return output;
    };
})(Metadata || (exports.Metadata = Metadata = {}));
var getName = function (metadata) {
    var e_20, _a, e_21, _b, e_22, _c, e_23, _d, e_24, _e, e_25, _f, e_26, _g, e_27, _h, e_28, _j, e_29, _k, e_30, _l;
    if (metadata.any === true)
        return "any";
    var elements = [];
    if (metadata.nullable === true)
        elements.push("null");
    if (metadata.isRequired() === false)
        elements.push("undefined");
    try {
        for (var _m = __values(metadata.atomics), _o = _m.next(); !_o.done; _o = _m.next()) {
            var type = _o.value;
            elements.push(type);
        }
    }
    catch (e_20_1) { e_20 = { error: e_20_1 }; }
    finally {
        try {
            if (_o && !_o.done && (_a = _m.return)) _a.call(_m);
        }
        finally { if (e_20) throw e_20.error; }
    }
    try {
        for (var _p = __values(metadata.constants), _q = _p.next(); !_q.done; _q = _p.next()) {
            var constant = _q.value;
            try {
                for (var _r = (e_22 = void 0, __values(constant.values)), _s = _r.next(); !_s.done; _s = _r.next()) {
                    var value = _s.value;
                    elements.push(JSON.stringify(value));
                }
            }
            catch (e_22_1) { e_22 = { error: e_22_1 }; }
            finally {
                try {
                    if (_s && !_s.done && (_c = _r.return)) _c.call(_r);
                }
                finally { if (e_22) throw e_22.error; }
            }
        }
    }
    catch (e_21_1) { e_21 = { error: e_21_1 }; }
    finally {
        try {
            if (_q && !_q.done && (_b = _p.return)) _b.call(_p);
        }
        finally { if (e_21) throw e_21.error; }
    }
    try {
        for (var _t = __values(metadata.templates), _u = _t.next(); !_u.done; _u = _t.next()) {
            var template = _u.value;
            elements.push("`" +
                template
                    .map(function (child) {
                    return child.isConstant() && child.size() === 1
                        ? child.constants[0].values[0]
                        : "${".concat(child.getName(), "}");
                })
                    .join("")
                    .split("`")
                    .join("\\`") +
                "`");
        }
    }
    catch (e_23_1) { e_23 = { error: e_23_1 }; }
    finally {
        try {
            if (_u && !_u.done && (_d = _t.return)) _d.call(_t);
        }
        finally { if (e_23) throw e_23.error; }
    }
    try {
        for (var _v = __values(metadata.natives), _w = _v.next(); !_w.done; _w = _v.next()) {
            var native = _w.value;
            elements.push(native);
        }
    }
    catch (e_24_1) { e_24 = { error: e_24_1 }; }
    finally {
        try {
            if (_w && !_w.done && (_e = _v.return)) _e.call(_v);
        }
        finally { if (e_24) throw e_24.error; }
    }
    try {
        for (var _x = __values(metadata.sets), _y = _x.next(); !_y.done; _y = _x.next()) {
            var set = _y.value;
            elements.push("Set<".concat(set.getName(), ">"));
        }
    }
    catch (e_25_1) { e_25 = { error: e_25_1 }; }
    finally {
        try {
            if (_y && !_y.done && (_f = _x.return)) _f.call(_x);
        }
        finally { if (e_25) throw e_25.error; }
    }
    try {
        for (var _z = __values(metadata.maps), _0 = _z.next(); !_0.done; _0 = _z.next()) {
            var map = _0.value;
            elements.push("Map<".concat(map.key.getName(), ", ").concat(map.value.getName(), ">"));
        }
    }
    catch (e_26_1) { e_26 = { error: e_26_1 }; }
    finally {
        try {
            if (_0 && !_0.done && (_g = _z.return)) _g.call(_z);
        }
        finally { if (e_26) throw e_26.error; }
    }
    if (metadata.rest !== null)
        elements.push("...".concat(metadata.rest.getName()));
    try {
        for (var _1 = __values(metadata.tuples), _2 = _1.next(); !_2.done; _2 = _1.next()) {
            var tuple = _2.value;
            elements.push(tuple.name);
        }
    }
    catch (e_27_1) { e_27 = { error: e_27_1 }; }
    finally {
        try {
            if (_2 && !_2.done && (_h = _1.return)) _h.call(_1);
        }
        finally { if (e_27) throw e_27.error; }
    }
    try {
        for (var _3 = __values(metadata.arrays), _4 = _3.next(); !_4.done; _4 = _3.next()) {
            var array = _4.value;
            elements.push(array.name);
        }
    }
    catch (e_28_1) { e_28 = { error: e_28_1 }; }
    finally {
        try {
            if (_4 && !_4.done && (_j = _3.return)) _j.call(_3);
        }
        finally { if (e_28) throw e_28.error; }
    }
    try {
        for (var _5 = __values(metadata.objects), _6 = _5.next(); !_6.done; _6 = _5.next()) {
            var object = _6.value;
            elements.push(object.name);
        }
    }
    catch (e_29_1) { e_29 = { error: e_29_1 }; }
    finally {
        try {
            if (_6 && !_6.done && (_k = _5.return)) _k.call(_5);
        }
        finally { if (e_29) throw e_29.error; }
    }
    try {
        for (var _7 = __values(metadata.aliases), _8 = _7.next(); !_8.done; _8 = _7.next()) {
            var alias = _8.value;
            elements.push(alias.name);
        }
    }
    catch (e_30_1) { e_30 = { error: e_30_1 }; }
    finally {
        try {
            if (_8 && !_8.done && (_l = _7.return)) _l.call(_7);
        }
        finally { if (e_30) throw e_30.error; }
    }
    if (metadata.resolved !== null)
        elements.push(metadata.resolved.getName());
    if (elements.length === 0)
        return "unknown";
    else if (elements.length === 1)
        return elements[0];
    elements.sort();
    return "(".concat(elements.join(" | "), ")");
};
//# sourceMappingURL=Metadata.js.map