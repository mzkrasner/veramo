"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationProgrammer = void 0;
var application_schema_1 = require("./internal/application_schema");
var ApplicationProgrammer;
(function (ApplicationProgrammer) {
    var IOptions;
    (function (IOptions) {
        IOptions.complement = function (options) {
            var _a;
            var purpose = (_a = options === null || options === void 0 ? void 0 : options.purpose) !== null && _a !== void 0 ? _a : "swagger";
            return {
                purpose: purpose,
            };
        };
    })(IOptions = ApplicationProgrammer.IOptions || (ApplicationProgrammer.IOptions = {}));
    ApplicationProgrammer.write = function (options) {
        return function (metadatas) {
            var fullOptions = IOptions.complement(options);
            var components = {
                schemas: {},
            };
            var generator = (0, application_schema_1.application_schema)(fullOptions)(true)(components);
            return __assign({ schemas: metadatas.map(function (meta, i) {
                    var schema = generator(meta)({});
                    if (schema === null)
                        throw new Error("Error on typia.application(): invalid type on argument - (".concat(meta.getName(), ", ").concat(i, ")"));
                    return schema;
                }), components: components }, fullOptions);
        };
    };
})(ApplicationProgrammer || (exports.ApplicationProgrammer = ApplicationProgrammer = {}));
//# sourceMappingURL=ApplicationProgrammer.js.map