"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.application_number = void 0;
var application_default_1 = require("./application_default");
var application_number = function (attribute) {
    var e_1, _a;
    var _b, _c;
    var output = __assign(__assign({}, attribute), { type: "number" });
    try {
        for (var _d = __values((_b = attribute["x-typia-metaTags"]) !== null && _b !== void 0 ? _b : []), _e = _d.next(); !_e.done; _e = _d.next()) {
            var tag = _e.value;
            if (tag.kind === "type" &&
                (tag.value === "int" ||
                    tag.value === "uint" ||
                    tag.value === "int32" ||
                    tag.value === "uint32" ||
                    tag.value === "int64" ||
                    tag.value === "uint64"))
                output.type = "integer";
            else if (tag.kind === "minimum")
                output.minimum = tag.value;
            else if (tag.kind === "maximum")
                output.maximum = tag.value;
            else if (tag.kind === "exclusiveMinimum") {
                output.minimum = tag.value;
                output.exclusiveMinimum = true;
            }
            else if (tag.kind === "exclusiveMaximum") {
                output.maximum = tag.value;
                output.exclusiveMaximum = true;
            }
            else if (tag.kind === "multipleOf")
                output.multipleOf = tag.value;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (output.type === "integer" &&
        ((_c = attribute["x-typia-metaTags"]) !== null && _c !== void 0 ? _c : []).find(function (tag) {
            return tag.kind === "type" &&
                (tag.value === "uint" ||
                    tag.value === "uint32" ||
                    tag.value === "uint64");
        }))
        if (output.minimum === undefined ||
            (output.exclusiveMaximum !== true && output.minimum < 0))
            output.minimum = 0;
        else if (output.exclusiveMinimum === true && output.minimum < -1) {
            output.maximum = 0;
            delete output.exclusiveMinimum;
        }
    output.default = (0, application_default_1.application_default)(attribute)(function (str) {
        var value = Number(str);
        var conditions = [!Number.isNaN(value)];
        if (output.minimum !== undefined)
            if (output.exclusiveMinimum === true)
                conditions.push(value > output.minimum);
            else
                conditions.push(value >= output.minimum);
        if (output.maximum !== undefined)
            if (output.exclusiveMaximum === true)
                conditions.push(value < output.maximum);
            else
                conditions.push(value <= output.maximum);
        if (output.multipleOf !== undefined)
            conditions.push(value % output.multipleOf === 0);
        return conditions.every(function (cond) { return cond; });
    })(function (str) { return Number(str); });
    return output;
};
exports.application_number = application_number;
//# sourceMappingURL=application_number.js.map