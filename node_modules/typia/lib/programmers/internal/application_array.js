"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.application_array = void 0;
var application_schema_1 = require("./application_schema");
var application_array = function (options) {
    return function (components) {
        return function (array) {
            return function (attribute) {
                var e_1, _a;
                var _b;
                var schema = __assign(__assign({}, attribute), { type: "array", items: (0, application_schema_1.application_schema)(options)(false)(components)(array.value)(attribute) });
                try {
                    for (var _c = __values((_b = attribute["x-typia-metaTags"]) !== null && _b !== void 0 ? _b : []), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var tag = _d.value;
                        if (tag.kind === "minItems")
                            schema.minItems = tag.value;
                        else if (tag.kind === "maxItems")
                            schema.maxItems = tag.value;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return schema;
            };
        };
    };
};
exports.application_array = application_array;
//# sourceMappingURL=application_array.js.map