"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.check_number = void 0;
var typescript_1 = __importDefault(require("typescript"));
var OptionPredicator_1 = require("../helpers/OptionPredicator");
var check_custom_1 = require("./check_custom");
var check_number = function (project, numeric) {
    return function (importer) {
        return function (metaTags) {
            return function (jsDocTag) {
                return function (input) {
                    var e_1, _a;
                    var _b, _c;
                    var entries = [];
                    try {
                        for (var metaTags_1 = __values(metaTags), metaTags_1_1 = metaTags_1.next(); !metaTags_1_1.done; metaTags_1_1 = metaTags_1.next()) {
                            var tag = metaTags_1_1.value;
                            if (tag.kind === "type") {
                                if (tag.value === "int" ||
                                    tag.value === "uint" ||
                                    tag.value === "int32" ||
                                    tag.value === "uint32" ||
                                    tag.value === "int64" ||
                                    tag.value === "uint64")
                                    entries.push([
                                        tag,
                                        typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("Math.floor"), undefined, [input]), input),
                                    ]);
                                if (tag.value === "uint" ||
                                    tag.value === "uint32" ||
                                    tag.value === "uint64")
                                    entries.push([
                                        tag,
                                        typescript_1.default.factory.createLessThanEquals(typescript_1.default.factory.createNumericLiteral(0), input),
                                    ]);
                                if (tag.value === "uint" || tag.value === "uint32")
                                    entries.push([
                                        tag,
                                        typescript_1.default.factory.createLessThanEquals(input, typescript_1.default.factory.createNumericLiteral(4294967295)),
                                    ]);
                                else if (tag.value === "uint64")
                                    entries.push([
                                        tag,
                                        typescript_1.default.factory.createLessThanEquals(input, typescript_1.default.factory.createNumericLiteral(18446744073709551615)),
                                    ]);
                                else if (tag.value === "int64")
                                    entries.push([
                                        tag,
                                        typescript_1.default.factory.createLogicalAnd(typescript_1.default.factory.createLessThanEquals(typescript_1.default.factory.createNumericLiteral(-9223372036854775808), input), typescript_1.default.factory.createLessThanEquals(input, typescript_1.default.factory.createNumericLiteral(9223372036854775807))),
                                    ]);
                                else if (tag.value === "int" || tag.value === "int32")
                                    entries.push([
                                        tag,
                                        typescript_1.default.factory.createLogicalAnd(typescript_1.default.factory.createLessThanEquals(typescript_1.default.factory.createNumericLiteral(-2147483648), input), typescript_1.default.factory.createLessThanEquals(input, typescript_1.default.factory.createNumericLiteral(2147483647))),
                                    ]);
                                else if (tag.value === "float")
                                    entries.push([
                                        tag,
                                        typescript_1.default.factory.createLogicalAnd(typescript_1.default.factory.createLessThanEquals(typescript_1.default.factory.createNumericLiteral(-1.175494351e38), input), typescript_1.default.factory.createLessThanEquals(input, typescript_1.default.factory.createNumericLiteral(3.4028235e38))),
                                    ]);
                            }
                            else if (tag.kind === "multipleOf")
                                entries.push([
                                    tag,
                                    typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createNumericLiteral(0), typescript_1.default.factory.createModulo(input, typescript_1.default.factory.createNumericLiteral(tag.value))),
                                ]);
                            else if (tag.kind === "step") {
                                var modulo = typescript_1.default.factory.createModulo(input, typescript_1.default.factory.createNumericLiteral(tag.value));
                                var minimum = (_c = (_b = metaTags.find(function (tag) {
                                    return tag.kind === "minimum" ||
                                        tag.kind === "exclusiveMinimum";
                                })) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : undefined;
                                entries.push([
                                    tag,
                                    typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createNumericLiteral(0), minimum !== undefined
                                        ? typescript_1.default.factory.createSubtract(modulo, typescript_1.default.factory.createNumericLiteral(minimum))
                                        : modulo),
                                ]);
                            }
                            else if (tag.kind === "minimum")
                                entries.push([
                                    tag,
                                    typescript_1.default.factory.createLessThanEquals(typescript_1.default.factory.createNumericLiteral(tag.value), input),
                                ]);
                            else if (tag.kind === "maximum")
                                entries.push([
                                    tag,
                                    typescript_1.default.factory.createGreaterThanEquals(typescript_1.default.factory.createNumericLiteral(tag.value), input),
                                ]);
                            else if (tag.kind === "exclusiveMinimum")
                                entries.push([
                                    tag,
                                    typescript_1.default.factory.createLessThan(typescript_1.default.factory.createNumericLiteral(tag.value), input),
                                ]);
                            else if (tag.kind === "exclusiveMaximum")
                                entries.push([
                                    tag,
                                    typescript_1.default.factory.createGreaterThan(typescript_1.default.factory.createNumericLiteral(tag.value), input),
                                ]);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (metaTags_1_1 && !metaTags_1_1.done && (_a = metaTags_1.return)) _a.call(metaTags_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    return {
                        expression: is_number(project, numeric)(metaTags)(input),
                        tags: __spreadArray(__spreadArray([], __read(entries.map(function (_a) {
                            var _b = __read(_a, 2), tag = _b[0], expression = _b[1];
                            return ({
                                expected: "number (@".concat(tag.kind, " ").concat(tag.value, ")"),
                                expression: expression,
                            });
                        })), false), __read((0, check_custom_1.check_custom)("number")(importer)(jsDocTag)(input)), false),
                    };
                };
            };
        };
    };
};
exports.check_number = check_number;
var is_number = function (_a, numeric) {
    var options = _a.options;
    return function (metaTags) {
        return function (input) {
            var conditions = [
                typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("number"), typescript_1.default.factory.createTypeOfExpression(input)),
            ];
            var finite = (!!metaTags.find(function (tag) {
                return tag.kind === "minimum" || tag.kind === "exclusiveMinimum";
            }) &&
                !!metaTags.find(function (tag) {
                    return tag.kind === "maximum" ||
                        tag.kind === "exclusiveMaximum";
                })) ||
                !!metaTags.find(function (tag) { return tag.kind === "step" || tag.kind === "multipleOf"; });
            if (numeric === true && finite === false)
                if (OptionPredicator_1.OptionPredicator.finite(options))
                    conditions.push(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("Number.isFinite"), undefined, [input]));
                else if (OptionPredicator_1.OptionPredicator.numeric(options))
                    conditions.push(typescript_1.default.factory.createLogicalNot(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("Number.isNaN"), undefined, [input])));
            return conditions.length === 1
                ? conditions[0]
                : conditions.reduce(function (x, y) { return typescript_1.default.factory.createLogicalAnd(x, y); });
        };
    };
};
//# sourceMappingURL=check_number.js.map