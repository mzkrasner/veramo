"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.check_bigint = void 0;
var typescript_1 = __importDefault(require("typescript"));
var ExpressionFactory_1 = require("../../factories/ExpressionFactory");
var check_custom_1 = require("./check_custom");
var check_bigint = function (importer) {
    return function (metaTags) {
        return function (jsDocTag) {
            return function (input) {
                var e_1, _a;
                var _b, _c;
                var entries = [];
                try {
                    for (var metaTags_1 = __values(metaTags), metaTags_1_1 = metaTags_1.next(); !metaTags_1_1.done; metaTags_1_1 = metaTags_1.next()) {
                        var tag = metaTags_1_1.value;
                        if (tag.kind === "type" && tag.value === "uint64")
                            entries.push([
                                tag,
                                typescript_1.default.factory.createLessThanEquals(ExpressionFactory_1.ExpressionFactory.bigint(0), input),
                            ]);
                        else if (tag.kind === "multipleOf")
                            entries.push([
                                tag,
                                typescript_1.default.factory.createStrictEquality(ExpressionFactory_1.ExpressionFactory.bigint(0), typescript_1.default.factory.createModulo(input, ExpressionFactory_1.ExpressionFactory.bigint(tag.value))),
                            ]);
                        else if (tag.kind === "step") {
                            var modulo = typescript_1.default.factory.createModulo(input, ExpressionFactory_1.ExpressionFactory.bigint(tag.value));
                            var minimum = (_c = (_b = metaTags.find(function (tag) {
                                return tag.kind === "minimum" ||
                                    tag.kind === "exclusiveMinimum";
                            })) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : undefined;
                            entries.push([
                                tag,
                                typescript_1.default.factory.createStrictEquality(ExpressionFactory_1.ExpressionFactory.bigint(0), minimum !== undefined
                                    ? typescript_1.default.factory.createSubtract(modulo, ExpressionFactory_1.ExpressionFactory.bigint(minimum))
                                    : modulo),
                            ]);
                        }
                        else if (tag.kind === "minimum")
                            entries.push([
                                tag,
                                typescript_1.default.factory.createLessThanEquals(ExpressionFactory_1.ExpressionFactory.bigint(tag.value), input),
                            ]);
                        else if (tag.kind === "maximum")
                            entries.push([
                                tag,
                                typescript_1.default.factory.createGreaterThanEquals(ExpressionFactory_1.ExpressionFactory.bigint(tag.value), input),
                            ]);
                        else if (tag.kind === "exclusiveMinimum")
                            entries.push([
                                tag,
                                typescript_1.default.factory.createLessThan(ExpressionFactory_1.ExpressionFactory.bigint(tag.value), input),
                            ]);
                        else if (tag.kind === "exclusiveMaximum")
                            entries.push([
                                tag,
                                typescript_1.default.factory.createGreaterThan(ExpressionFactory_1.ExpressionFactory.bigint(tag.value), input),
                            ]);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (metaTags_1_1 && !metaTags_1_1.done && (_a = metaTags_1.return)) _a.call(metaTags_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return {
                    expression: typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("bigint"), typescript_1.default.factory.createTypeOfExpression(input)),
                    tags: __spreadArray(__spreadArray([], __read(entries.map(function (_a) {
                        var _b = __read(_a, 2), tag = _b[0], expression = _b[1];
                        return ({
                            expected: "bigint (@".concat(tag.kind, " ").concat(tag.value, ")"),
                            expression: expression,
                        });
                    })), false), __read((0, check_custom_1.check_custom)("bigint")(importer)(jsDocTag)(input)), false),
                };
            };
        };
    };
};
exports.check_bigint = check_bigint;
//# sourceMappingURL=check_bigint.js.map