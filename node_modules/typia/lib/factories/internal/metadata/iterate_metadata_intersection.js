"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.iterate_metadata_intersection = void 0;
var typescript_1 = __importDefault(require("typescript"));
var Metadata_1 = require("../../../metadata/Metadata");
var MetadataCollection_1 = require("../../MetadataCollection");
var explore_metadata_1 = require("./explore_metadata");
var iterate_metadata_1 = require("./iterate_metadata");
var iterate_metadata_intersection = function (checker) {
    return function (options) {
        return function (collection) {
            return function (meta, type, resolved, aliased) {
                if (!type.isIntersection())
                    return false;
                else if (type.types.every(function (child) {
                    return (child.getFlags() & typescript_1.default.TypeFlags.Object) !== 0 &&
                        !checker.isArrayType(child) &&
                        !checker.isTupleType(child);
                }))
                    return false;
                var fakeCollection = new MetadataCollection_1.MetadataCollection();
                var children = __spreadArray([], __read(new Map(type.types.map(function (t) {
                    var m = (0, explore_metadata_1.explore_metadata)(checker)(__assign(__assign({}, options), { absorb: true }))(fakeCollection)(t, resolved);
                    return [m.getName(), m];
                })).values()), false);
                if (children.length === 1) {
                    (0, iterate_metadata_1.iterate_metadata)(checker)(options)(collection)(meta, type.types[0], resolved, aliased);
                    return true;
                }
                else if (children.every(function (c) { return c.objects.length === 1 && c.size() === 1; }))
                    return false;
                var atomics = children.filter(function (c) {
                    return (c.atomics.length ? 1 : 0 + c.constants.length ? 1 : 0) ===
                        c.bucket();
                });
                var objects = children.filter(function (c) { return c.objects.length && c.objects.length === c.size(); });
                if (atomics.length === 0 ||
                    atomics.length + objects.length !== children.length)
                    throw new Error(message(children));
                var least = atomics.reduce(function (x, y) {
                    if (Metadata_1.Metadata.covers(x, y))
                        return y;
                    else if (Metadata_1.Metadata.covers(y, x))
                        return x;
                    throw new Error(message(children));
                });
                Object.assign(meta, Metadata_1.Metadata.merge(meta, least));
                collection.entire_.add(least);
                return true;
            };
        };
    };
};
exports.iterate_metadata_intersection = iterate_metadata_intersection;
var message = function (children) {
    return "Error on typia.MetadataFactory.analyze(): nonsensible intersection type detected - ".concat(children
        .map(function (c) { return c.getName(); })
        .join(" & "), ".");
};
//# sourceMappingURL=iterate_metadata_intersection.js.map