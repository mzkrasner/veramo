"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressionFactory = void 0;
var typescript_1 = __importDefault(require("typescript"));
var ExpressionFactory;
(function (ExpressionFactory) {
    ExpressionFactory.bigint = function (value) {
        return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("BigInt"), undefined, [typescript_1.default.factory.createNumericLiteral(value)]);
    };
    ExpressionFactory.isRequired = function (input) {
        return typescript_1.default.factory.createStrictInequality(typescript_1.default.factory.createIdentifier("undefined"), input);
    };
    ExpressionFactory.isArray = function (input) {
        return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("Array.isArray"), undefined, [input]);
    };
    ExpressionFactory.isObject = function (options) {
        return function (input) {
            var conditions = [
                typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("object"), typescript_1.default.factory.createTypeOfExpression(input)),
            ];
            if (options.checkNull === true)
                conditions.push(typescript_1.default.factory.createStrictInequality(typescript_1.default.factory.createNull(), input));
            if (options.checkArray === true)
                conditions.push(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createFalse(), typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("Array.isArray"), undefined, [input])));
            return conditions.length === 1
                ? conditions[0]
                : conditions.reduce(function (x, y) {
                    return typescript_1.default.factory.createLogicalAnd(x, y);
                });
        };
    };
    ExpressionFactory.isInstanceOf = function (type) {
        return function (input) {
            return typescript_1.default.factory.createBinaryExpression(input, typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.InstanceOfKeyword), typescript_1.default.factory.createIdentifier(type));
        };
    };
    ExpressionFactory.coalesce = function (x) {
        return function (y) {
            return typescript_1.default.factory.createBinaryExpression(x, typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.QuestionQuestionToken), y);
        };
    };
})(ExpressionFactory || (exports.ExpressionFactory = ExpressionFactory = {}));
//# sourceMappingURL=ExpressionFactory.js.map