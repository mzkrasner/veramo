"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataFactory = void 0;
var explore_metadata_1 = require("./internal/metadata/explore_metadata");
var iterate_metadata_collection_1 = require("./internal/metadata/iterate_metadata_collection");
var iterate_metadata_sort_1 = require("./internal/metadata/iterate_metadata_sort");
var MetadataFactory;
(function (MetadataFactory) {
    MetadataFactory.analyze = function (checker) {
        return function (options) {
            return function (collection) {
                return function (type) {
                    var e_1, _a;
                    var meta = (0, explore_metadata_1.explore_metadata)(checker)(options)(collection)(type, false);
                    (0, iterate_metadata_collection_1.iterate_metadata_collection)(collection);
                    (0, iterate_metadata_sort_1.iterate_metadata_sort)(collection)(meta);
                    if (options.validate)
                        try {
                            for (var _b = __values(collection.entire_), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var elem = _c.value;
                                options.validate(elem);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    collection.entire_.clear();
                    return meta;
                };
            };
        };
    };
})(MetadataFactory || (exports.MetadataFactory = MetadataFactory = {}));
//# sourceMappingURL=MetadataFactory.js.map