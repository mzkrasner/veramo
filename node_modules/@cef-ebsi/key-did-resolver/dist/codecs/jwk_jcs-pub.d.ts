/**
 * Multiformats codec "jwk_jcs-pub".
 * Proposed: https://github.com/multiformats/multicodec/pull/307
 *
 * Implements the BlockCodec interface.
 *
 * @see https://github.com/multiformats/js-multiformats/blob/master/src/codecs/interface.ts
 */
import type { ByteView } from "multiformats/codecs/interface";
import type { JsonWebKey } from "did-resolver";
export declare const name = "jwk_jcs-pub";
export declare const code = 60241;
/**
 * Encodes a JWK into a Uint8Array. Only the required JWK members are encoded.
 *
 * @see https://www.rfc-editor.org/rfc/rfc7518#section-6
 * @see https://www.rfc-editor.org/rfc/rfc8037#section-2
 * @see https://github.com/panva/jose/blob/3b8aa47b92d07a711bf5c3125276cc9a011794a4/src/jwk/thumbprint.ts#L37
 *
 * @param jwk - JSON Web Key.
 * @returns Uint8Array-encoded JWK.
 */
export declare function encode(jwk: unknown): Uint8Array;
/**
 * Decodes an array of bytes into a JWK. Throws an error if the JWK is not valid.
 *
 * @param bytes - The array of bytes to decode.
 * @returns The corresponding JSON Web Key.
 */
export declare function decode(bytes: ByteView<JsonWebKey>): JsonWebKey;
//# sourceMappingURL=jwk_jcs-pub.d.ts.map