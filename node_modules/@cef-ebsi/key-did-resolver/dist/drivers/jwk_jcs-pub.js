"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pubKeyBytesToDidDoc = void 0;
const codec = __importStar(require("../codecs/jwk_jcs-pub"));
const constants_1 = require("../constants");
const errors_1 = require("../errors");
/**
 *  Creates a DID document based on the raw public key bytes.
 *
 * @see https://w3c-ccg.github.io/did-method-key/#create
 *
 * @param pubKeyBytes - The "raw-public-key-bytes".
 * @param identifier - The identifier associated with the public key.
 * @param contentType - The content type, e.g. "application/did+ld+json" or "application/did+json"
 * @returns The DID document corresponding to the public key.
 */
function pubKeyBytesToDidDoc(pubKeyBytes, identifier, contentType) {
    const did = `${constants_1.KEY_DID_METHOD_PREFIX}${identifier}`;
    const keyId = `${did}#${identifier}`;
    let publicKeyJwk;
    try {
        publicKeyJwk = codec.decode(pubKeyBytes);
    }
    catch (e) {
        throw new errors_1.InvalidDidError(e instanceof Error ? e.message : "Unknown error");
    }
    return {
        ...(contentType === constants_1.DID_LD_JSON && {
            "@context": [
                "https://www.w3.org/ns/did/v1",
                "https://w3id.org/security/suites/jws-2020/v1",
            ],
        }),
        id: did,
        verificationMethod: [
            {
                id: keyId,
                type: "JsonWebKey2020",
                controller: did,
                publicKeyJwk,
            },
        ],
        authentication: [keyId],
        assertionMethod: [keyId],
        capabilityInvocation: [keyId],
        capabilityDelegation: [keyId],
    };
}
exports.pubKeyBytesToDidDoc = pubKeyBytesToDidDoc;
exports.default = pubKeyBytesToDidDoc;
//# sourceMappingURL=jwk_jcs-pub.js.map