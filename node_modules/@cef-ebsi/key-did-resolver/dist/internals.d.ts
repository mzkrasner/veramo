import type { DIDDocument } from "did-resolver";
/**
 * Encodes the public key (bytes) as:
 *
 * ```
 * MULTIBASE(base58-btc, MULTICODEC(public-key-type, raw-public-key-bytes))
 * ```
 *
 * @see https://w3c-ccg.github.io/did-method-key/#format
 * @see https://github.com/multiformats/multicodec/blob/master/table.csv
 *
 * @param pubKeyBytes - The "raw-public-key-bytes".
 * @param code - The "public-key-type" multicodec code. E.g: 0xeb51
 * @returns The encoded public key.
 */
export declare const encodePublicKey: (pubKeyBytes: Uint8Array, code: number) => string;
/**
 * Decodes the multibase-base58btc-encoded public key and the related multicodec code.
 *
 * @param publicKey - The encoded public key.
 * @returns The decoded public key (bytes) and the multicodec code.
 */
export declare const decodePublicKey: (publicKey: string) => {
    pubKeyBytes: Uint8Array;
    code: number;
};
/**
 * Resolves a DID document based on the given DID.
 *
 * @param did - The DID to resolve.
 * @param contentType - The content type, e.g. "application/did+ld+json" or "application/did+json" (optional).
 * @returns The DID document decoded from the method specific identifier.
 */
export declare function resolveDidDoc(did: string, contentType?: string): DIDDocument;
//# sourceMappingURL=internals.d.ts.map